{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material-icons.css","path":"css/material-icons.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.css","path":"css/prettify.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/js/MathJax.js","path":"js/MathJax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3f41f2d60202f6d47cee236379084ad272b749a8","modified":1509029713374},{"_id":"source/favicon.ico","hash":"aebc3dc4d14a05b846b9d90c3790b4f5fa28e24f","modified":1509029713396},{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1511702014000},{"_id":"themes/material/.gitignore","hash":"8f8379099500e35e6e8ba9682e2677984eca3fe1","modified":1512044932153},{"_id":"themes/material/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1511702014000},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1511702014000},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1511702014000},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1511702014000},{"_id":"themes/material/README.md","hash":"408e36745a8aeb187a25f309752c5e7da66f7e67","modified":1511702014000},{"_id":"themes/material/_config.template.yml","hash":"909c9b66c782311a0fe16bca4e75dc13e1b289ea","modified":1511702014000},{"_id":"themes/material/_config.yml","hash":"4d9b391c9d6385d263bc72db7467b5ac9b71be50","modified":1512138254726},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1511702014000},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1511702014000},{"_id":"themes/material/package.json","hash":"e00885ee25ac548685af9869cf4cf895118a744c","modified":1511702014000},{"_id":"source/about/index.md","hash":"4a7bc67ab4179848d14eea7ba2d45a22a4d20f9c","modified":1509029713395},{"_id":"source/images/avatar.png","hash":"bab308f4aa9a5b11634d10c7979c7c03b2dfecf2","modified":1509029713397},{"_id":"source/categories/index.md","hash":"9b4ca63b013a82235f80a6394b88b1596ce254e8","modified":1509029713396},{"_id":"source/_posts/Android-View-Layout.md","hash":"eb93a703d728f45271e85a0607e62b11cff3aee7","modified":1510453096489},{"_id":"source/_posts/CSS布局.md","hash":"97ee4589534e7697a45a44789288f3e3668cb210","modified":1510453167462},{"_id":"source/_posts/Android简易计分板实现.md","hash":"888f820620f4ed8ade26904e76f8f92eea4d5af2","modified":1510453082991},{"_id":"source/_posts/CodeTest.md","hash":"41b6adaa9de19ab76766ba6b744c3e0ccee483ec","modified":1510307500824},{"_id":"source/_posts/Flex布局.md","hash":"138427aa9545d22ac94d7052ad736b44ca879aae","modified":1510453176038},{"_id":"source/_posts/Gradle基础.md","hash":"43c29c3e10a7884915336144785f20b1351f8374","modified":1510453293495},{"_id":"source/_posts/JavaScriptDom.md","hash":"6d155b3cf33dea3a791e757b943885836547aa55","modified":1510453337280},{"_id":"source/_posts/JS转换字符串单词首字母大写.md","hash":"b367e6f70a4be32fece528a5bcc3ec8df8829a47","modified":1510453376755},{"_id":"source/_posts/Java中的变量.md","hash":"9610c49167532d76d989e74fb657e581cfd5918c","modified":1510453045980},{"_id":"source/_posts/Java中的多线程.md","hash":"42cf649aa7c975e8a939a7cf612382871c0e7591","modified":1510453041877},{"_id":"source/_posts/Java中的异常.md","hash":"38a764b397f5cf66dc9455f9ec2cd06f53294fa9","modified":1510453028107},{"_id":"source/_posts/Java中的数组.md","hash":"20c94d1f0500bfac6240b13164210c4331224ec6","modified":1510454059573},{"_id":"source/_posts/Java中的运算符.md","hash":"6cc7a7b9442eaa7e949ea9d89b4ed52c64638650","modified":1510453012271},{"_id":"source/_posts/CSS和响应式.md","hash":"4210afba0b645244dc81e215f30491a93b686c09","modified":1510453153210},{"_id":"source/_posts/Map和Set.md","hash":"2595be910e411046df04d44ad22da559c18c5fda","modified":1510453389675},{"_id":"source/_posts/Java基础与Button交互.md","hash":"e6979960ac6f8bda0d7d3561365d7e610377b375","modified":1510453006158},{"_id":"source/_posts/VSCode配置ESlint+Airbnb.md","hash":"b127e471bad7bb6ea545527d15d66f711e1bda57","modified":1510922002869},{"_id":"source/_posts/Test.md","hash":"c9eb94957c52448b96e71ea1bb9a43b42a1497f8","modified":1510307500845},{"_id":"source/_posts/Yarn包管理器.md","hash":"e35989861836940184a58a8e4809aa9b53bf20bb","modified":1510453612693},{"_id":"source/_posts/Win10配置免安装MySQL.md","hash":"93006463d2c23bd9eec426e8b56682a319704b2e","modified":1510453596623},{"_id":"source/_posts/button 常用设置.md","hash":"35bf549adb877126855b7e0b28fa686f3cac6b25","modified":1510453147520},{"_id":"source/_posts/for-in和for-of.md","hash":"aa1169ae3ee908a11a4d2ef28cb7d8afdb238376","modified":1510453242461},{"_id":"source/_posts/arguments和rest.md","hash":"21b2c8d4bd00d1c71f16ddcb8327cddd6ccee4d3","modified":1510453231243},{"_id":"source/_posts/git 操作指南.md","hash":"a25373b2290eb760c711dd9aba5b62ff2f9f91f4","modified":1510453263050},{"_id":"source/_posts/html列表.md","hash":"1791f850afd72de4c77813178ad63f666b3a6f46","modified":1510453307013},{"_id":"source/_posts/html基础.md","hash":"5f420d6d8d221851f1de6ec1de1c34db5c9df476","modified":1510453327510},{"_id":"source/_posts/jQuery.md","hash":"e289d60aa43270dfbdb42108e419b89c987fcfe2","modified":1510458292279},{"_id":"source/_posts/js基础.md","hash":"f4078d9c92b51112f489cdf3d78ae0c255017196","modified":1510453362811},{"_id":"source/_posts/mongodb安装.md","hash":"b3bed377785de88592333d24a337c970498b3f6c","modified":1510453427111},{"_id":"source/_posts/vue + firebase 模拟实现地址选择四级联动.md","hash":"5e6011832ff012659ad16335df73661af6d3df82","modified":1512040754893},{"_id":"source/_posts/webpack 基础使用.md","hash":"423b2be936d695b6a3650cd4d6e24694ba986307","modified":1510923367365},{"_id":"source/_posts/中英术语对照表.md","hash":"418e6e9fe5459b887f1ea9500bfa05b3910bf861","modified":1510453618693},{"_id":"source/_posts/作用域以及LHS和RHS.md","hash":"ae6ee6304800064a86e405ca97cbcc597e26d840","modified":1510922070705},{"_id":"source/_posts/作用域闭包.md","hash":"a155711c294a1346968d617166918667ef12365f","modified":1510923349241},{"_id":"source/_posts/全局命名空间和模块.md","hash":"f54ecd119a838f197838f8ef69e79b138e39a2d5","modified":1510453728866},{"_id":"source/_posts/内部类.md","hash":"ac40ed35b9a9ecd2215c7a6eb459622b556b0ac0","modified":1510452967651},{"_id":"source/_posts/关键字throw和throws.md","hash":"ca46552df91ce47ed36ac4d8f476f9c33b3724d4","modified":1510453740167},{"_id":"source/_posts/函数作用域及块作用域.md","hash":"7e08ac5113aa55cc88225084c8883c5aacad341d","modified":1510923634471},{"_id":"source/_posts/前端学习资源.md","hash":"3da9be8d4690ec1347257442bad93bb55b0bdd8b","modified":1510453790895},{"_id":"source/_posts/双飞翼布局.md","hash":"07c30cdb2367cc085855cbca0e42403233482b97","modified":1510453805453},{"_id":"source/_posts/动手实现一个简单的 vue tabs.md","hash":"bc87ff7d97da3471c722e1f9ac87079be3a0c4b5","modified":1512040754896},{"_id":"source/_posts/变量作用域.md","hash":"dfea97812a36735edc5eafc8630e4478fadb458e","modified":1510454298130},{"_id":"source/_posts/变量提升.md","hash":"4e781fbb419caba681a512db79d6b054415c1b18","modified":1510453840796},{"_id":"source/_posts/处理流和Decorator模式.md","hash":"8f3bd9e601f39a45b9656229665e0754f1f2f947","modified":1510452955517},{"_id":"source/_posts/圣杯布局.md","hash":"5842c454ce9b53ad999e705b6a679f67b80965d5","modified":1510454004683},{"_id":"source/_posts/多个SHH管理.md","hash":"c514e565b42d0d3787a4bdb800503b4d495f2604","modified":1510453864502},{"_id":"source/_posts/常用正则表达式.md","hash":"f42f36fe5d20a2665fb5c92f6e8980a6b7e017de","modified":1510453887044},{"_id":"source/_posts/接口的应用.md","hash":"fe5d9479a211adbf8a78de300fb15525fcfc3cab","modified":1510452945776},{"_id":"source/_posts/排序算法.md","hash":"b23f4426e3c5b6b03e8beddc5cc692724ab92376","modified":1510453912133},{"_id":"source/_posts/数组与字符串常用方法.md","hash":"b2b52e971deab6bc5a29d040cb44c7b9e63e8cbe","modified":1510453923950},{"_id":"source/_posts/方法.md","hash":"ef0c00b30d6fc29d5ea2112e5940e63c2ca6df6e","modified":1510452934909},{"_id":"source/_posts/Java的IO流.md","hash":"cbedef034b20273ed0ce5819b2c4e42b4a89c6ce","modified":1510452989596},{"_id":"source/_posts/盒子模型.md","hash":"282a0963402e9cd3c820f61b4324e57047842f02","modified":1510453975411},{"_id":"source/_posts/类集框架.md","hash":"8cbd2cc80ccaef97554d8899486d5efe623fd179","modified":1510452936552},{"_id":"source/_posts/结构语句.md","hash":"9492c6449dc3700031722ed34ed17d73fff6f49d","modified":1510454066382},{"_id":"source/_posts/编译原理.md","hash":"b6efaccefc7cd7718f249f2d22121f7c4b3ab70b","modified":1510452675164},{"_id":"source/_posts/获取键盘输入的方法.md","hash":"6e100985bffad333ce2bd130908446860db480e4","modified":1510452913168},{"_id":"source/_posts/进制快速转换.md","hash":"57f29c7e32db09df13f455accff434cff1193d11","modified":1510453954937},{"_id":"source/_posts/css基础.md","hash":"088532626f1403c4d4abc261414057eb6558cd67","modified":1510454282489},{"_id":"source/_posts/进制转换.md","hash":"0e3eae74c9426e2a827e20a7c88b4e5ab92408c3","modified":1510452865208},{"_id":"source/_posts/欧几里得算法.md","hash":"085881c1d79fda1a85bfced289d1ffd688ca9d28","modified":1512040754897},{"_id":"source/tags/index.md","hash":"450f6027fc98b10331fce2c4eb13db5df9255f59","modified":1512042575033},{"_id":"source/timeline/index.md","hash":"9b2eb002c9ad9f3c4267e95c73fb6b5b441a81d6","modified":1512042671431},{"_id":"themes/material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1511702014000},{"_id":"themes/material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1511702014000},{"_id":"themes/material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1511702014000},{"_id":"themes/material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1511702014000},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1511702014000},{"_id":"themes/material/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1511702014000},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1511702014000},{"_id":"themes/material/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1511702014000},{"_id":"themes/material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1511702014000},{"_id":"themes/material/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1511702014000},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1511702014000},{"_id":"themes/material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1511702014000},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1511702014000},{"_id":"themes/material/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1511702014000},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1511702014000},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1511702014000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511702014000},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511702014000},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1511702014000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1511702014000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1511702014000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1511702014000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1511702014000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1511702014000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1511702014000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1511702014000},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"730abeb681758ce288d5541930c46bc4b041a0b1","modified":1511702014000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1511702014000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1511702014000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"372cdf718e01fea2736b8e427e57bfcfaa8a557f","modified":1511702014000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1511702014000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"530626c347882579d09d71df68993e25076ca8e2","modified":1511702014000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1511702014000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"8167f995c7cc21a6a8ddbfbdd03f2f74a7bd904d","modified":1511702014000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"961b8a0059875e4044fe80bbe91ca6a225f113e5","modified":1511702014000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1511702014000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1511702014000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1511702014000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1511702014000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1511702014000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1511702014000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1511702014000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1511702014000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1511702014000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1511702014000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1511702014000},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1511702014000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1511702014000},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1511702014000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1511702014000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1511702014000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1511702014000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1511702014000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1511702014000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"81b9410deef7a83ef5bc7cd18ad042df70d70b94","modified":1511702014000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1511702014000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1511702014000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1511702014000},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1511702014000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1511702014000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1511702014000},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1511702014000},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1511702014000},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1511702014000},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1511702014000},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1511702014000},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1511702014000},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1511702014000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1511702014000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1511702014000},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1511702014000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1511702014000},{"_id":"themes/material/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1511702014000},{"_id":"themes/material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1511702014000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1511702014000},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1511702014000},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1511702014000},{"_id":"themes/material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1511702014000},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1511702014000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1511702014000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1511702014000},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1511702014000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1511702014000},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1511702014000},{"_id":"themes/material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1511702014000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1511702014000},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1511702014000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1511702014000},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1511702014000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1511702014000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1511702014000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1511702014000},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1511702014000},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1511702014000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1511702014000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1511702014000},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1511702014000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1511702014000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1511702014000},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1511702014000},{"_id":"themes/material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1511702014000},{"_id":"themes/material/source/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1511702014000},{"_id":"themes/material/source/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1511702014000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1511702014000},{"_id":"themes/material/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1511702014000},{"_id":"themes/material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1511702014000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1511702014000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1511702014000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1511702014000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1511702014000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1511702014000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1511702014000},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1511702014000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1511702014000},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1511702014000},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1511702014000},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1511702014000},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1511702014000},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1511702014000},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1511702014000},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1511702014000},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1511702014000},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1511702014000},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1511702014000},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1511702014000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1511702014000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1511702014000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1511702014000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1511702014000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1511702014000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1511702014000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1511702014000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1511702014000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1511702014000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1511702014000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1511702014000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1511702014000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1511702014000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1511702014000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1511702014000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1511702014000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1511702014000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1511702014000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1511702014000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1511702014000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1511702014000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1511702014000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1511702014000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1511702014000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1511702014000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1511702014000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1511702014000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"3d5d8559e6ad4ffb58a61d96439b2718eb9999b6","modified":1511702014000},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1511702014000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1511702014000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1511702014000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1511702014000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1511702014000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1511702014000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1511702014000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1511702014000},{"_id":"public/search.xml","hash":"b31e593e4988537a809245874b1440688ad919ad","modified":1512138269473},{"_id":"public/categories/index.html","hash":"7b8a8caf8a80ad7beaf0bcbf3bc1ecd2ccdafbd7","modified":1512138275887},{"_id":"public/about/index.html","hash":"e4829a1d698eaf86b82b051112b373764dac59ef","modified":1512138276728},{"_id":"public/timeline/index.html","hash":"1e4ddd714ecd1fb58452541b57419b125c0e065c","modified":1512138276733},{"_id":"public/tags/index.html","hash":"ec259e0def6ef0408a5f0d4ace92d9a461594838","modified":1512138276734},{"_id":"public/pages/b511dfae/index.html","hash":"48cac4364d02d295592561b66974f4e1a36514fa","modified":1512138276734},{"_id":"public/pages/44515447/index.html","hash":"d1106c15da08d3895dd7e69cd0d2811a4a072b4a","modified":1512138276734},{"_id":"public/pages/90b768b0/index.html","hash":"b78a9870dec6f1986183a5f88ec5f919cbcc69c1","modified":1512138276734},{"_id":"public/pages/70cbbc9f/index.html","hash":"b016639fdad12e12f843614302ee04fe6228eb23","modified":1512138276734},{"_id":"public/pages/78f2b66e/index.html","hash":"2d9febfcbfca98ed69c58b6f26b8577cbf2c40f0","modified":1512138276734},{"_id":"public/pages/b917f198/index.html","hash":"07eff20c25346f7e0ecf91cdcfe5bb14007f60c4","modified":1512138276734},{"_id":"public/pages/b4ba32f9/index.html","hash":"b0e5871c99ce5421b55276c18804da1fab0d1ca1","modified":1512138276734},{"_id":"public/pages/889563/index.html","hash":"f09624ad23288f2b449268f7fc393620bfa06e67","modified":1512138276734},{"_id":"public/pages/7395d6fb/index.html","hash":"7385cba0863652e40a0bfae57101989ff112792b","modified":1512138276734},{"_id":"public/pages/eda1a9a9/index.html","hash":"4743fb88c3668f0e44cc109255edfe33bf2ef96a","modified":1512138276735},{"_id":"public/pages/998dffd6/index.html","hash":"e4e36f608e64c28f83c42069d3e944ec2a20a710","modified":1512138276735},{"_id":"public/pages/8b41c91c/index.html","hash":"bed69b978e544adcc2a24ea576ea6461ef36c67e","modified":1512138276735},{"_id":"public/pages/4b02d38a/index.html","hash":"40ea0a20bdb825ad523b6cea0873c12df4f53539","modified":1512138276735},{"_id":"public/pages/5b90526d/index.html","hash":"9dc5afe3c8c401250925054c58721ab25502b4d5","modified":1512138276735},{"_id":"public/pages/505644b3/index.html","hash":"2bbb22527ea9f4e31959f8879e6a69dea4ada0bf","modified":1512138276735},{"_id":"public/pages/81d5af05/index.html","hash":"4325f99cf30e5fd9f795c59d609c3870fcd4d71c","modified":1512138276735},{"_id":"public/pages/8ee164b8/index.html","hash":"8249d1ef1bcbb38c3b8394b25008dc3732bdcf92","modified":1512138276735},{"_id":"public/pages/3080460d/index.html","hash":"ad30248d00baf3ebe9959a77d4f8cdba335fd0e5","modified":1512138276735},{"_id":"public/pages/ff1e4b17/index.html","hash":"447e5eba66834a33a81f7d536a0eae51bd46d2a2","modified":1512138276735},{"_id":"public/pages/422fbc06/index.html","hash":"c340656c34baf528cffe976b2f135ba8d180c35a","modified":1512138276735},{"_id":"public/pages/f9a582e/index.html","hash":"b1f62c0891864600ff37f505e0e903e93892e749","modified":1512138276735},{"_id":"public/pages/6ad0123c/index.html","hash":"ff0ca0181cda46cddf3ab3ec23f77f69743223b9","modified":1512138276735},{"_id":"public/pages/522f484/index.html","hash":"5dfbac4f4e6dfc8f15ad17050a60a041e616cf3b","modified":1512138276735},{"_id":"public/pages/d4c7d8e9/index.html","hash":"c2cca7aa4f4418de21311fd714b811f8f7d4d56c","modified":1512138276735},{"_id":"public/pages/218ff168/index.html","hash":"917bc46943ce7ead02a14709d54ac01f98b3bd04","modified":1512138276736},{"_id":"public/pages/1a147173/index.html","hash":"206881577dbd49c29f4d763d32381228af0cc2ae","modified":1512138276736},{"_id":"public/pages/9891ebc8/index.html","hash":"73ede9bd792adddc7d589acfeb79de85f3d49c6c","modified":1512138276736},{"_id":"public/pages/f5b5d35a/index.html","hash":"41ea5239471789e070e0a33b011450c865b522fc","modified":1512138276736},{"_id":"public/pages/e5332c52/index.html","hash":"97eab475f280c018a6fab1a5f0e30f184e46117e","modified":1512138276736},{"_id":"public/pages/ab688311/index.html","hash":"83714320492cfa5d466da2a5d62a846edce56305","modified":1512138276736},{"_id":"public/pages/5a252ba9/index.html","hash":"1488cc423aed2d111bac58679ce323aa6e45fe1f","modified":1512138276736},{"_id":"public/pages/343902f6/index.html","hash":"2e0a741e049885df4692017f5246f79f74287a9a","modified":1512138276736},{"_id":"public/pages/91b6115c/index.html","hash":"77ab0418f45eb953da419cea703b47433d53b6af","modified":1512138276736},{"_id":"public/pages/9bc01b38/index.html","hash":"f216949063a1c776e4383cf61f20c9ffcf325027","modified":1512138276736},{"_id":"public/pages/118b8ca3/index.html","hash":"8f6e2436a9a4664fb93c0d9896a01846d617f715","modified":1512138276736},{"_id":"public/pages/e11bdebd/index.html","hash":"974948a5684fbc39d90b4a0ee21256c29cbd8e1e","modified":1512138276736},{"_id":"public/pages/3bcc390e/index.html","hash":"ab260c88c22f107f39f095ec97df4a0a782747cf","modified":1512138276736},{"_id":"public/pages/a465a2c5/index.html","hash":"1c9f1ecdec4db8a8fa5c34e2f1d0111a0068e7b5","modified":1512138276736},{"_id":"public/pages/c5d54bc1/index.html","hash":"9f290e24f2a1095eaeab34f36872fff4aeae9e2c","modified":1512138276736},{"_id":"public/pages/5225cd1c/index.html","hash":"416d1f6cb8a289cc8693d0ac77002bcce61df5bf","modified":1512138276737},{"_id":"public/pages/691946d1/index.html","hash":"2d83e1bfa7e68c9222d981e19944840476b970c3","modified":1512138276737},{"_id":"public/pages/81bae912/index.html","hash":"089d741566467d78b21ee2c2928177f0474a8fc5","modified":1512138276737},{"_id":"public/pages/b8bb4b60/index.html","hash":"dbcdc89e0ce477771639af78174201fb6a41e46a","modified":1512138276737},{"_id":"public/pages/29c8a334/index.html","hash":"5c467d7ae2b13d90a4b71665d7b95e38653b8990","modified":1512138276737},{"_id":"public/pages/ad01bc3e/index.html","hash":"0f5b16f100e0111ea1653e003a0f9eb54bf7146d","modified":1512138276737},{"_id":"public/pages/75336bdc/index.html","hash":"a1449f728b50efef3169cf1ad9fd9b57a5ef039d","modified":1512138276737},{"_id":"public/pages/29cc0096/index.html","hash":"d77068e80aa301ca42b73a03818e1c8b057a97aa","modified":1512138276737},{"_id":"public/pages/265f6f6b/index.html","hash":"6f14cc82dcf5228bc708fbb681639f647ab82d7c","modified":1512138276737},{"_id":"public/pages/649b2029/index.html","hash":"3f011e65ace796e5f31e896d99de4b387b1d7d10","modified":1512138276737},{"_id":"public/pages/bbf344f6/index.html","hash":"41f325b30c3575a9eec34a3c98030c6d23dc12b2","modified":1512138276737},{"_id":"public/pages/83e4d5ed/index.html","hash":"0a0315aeec4cc9192a77764884b884966dc44925","modified":1512138276737},{"_id":"public/pages/85b5073b/index.html","hash":"dd18c211ce9658632971ce192b9c822b270a8637","modified":1512138276737},{"_id":"public/pages/7dc91154/index.html","hash":"91fa3a663b07b24e90ff1efa2e42db72a134c5f3","modified":1512138276737},{"_id":"public/pages/828295ba/index.html","hash":"2ca5d354e44e5f0dffe374a0234f754599cf2cda","modified":1512138276738},{"_id":"public/pages/1c7ee7be/index.html","hash":"22ed9054f0edd928fbbcda851ba115c5512d81aa","modified":1512138276738},{"_id":"public/pages/e7882660/index.html","hash":"883f02d2ed0e6748905e761e9821dae7d5fd7c8e","modified":1512138276738},{"_id":"public/pages/f029d2bb/index.html","hash":"b5a33edf43824197cdf0b678da017e8e99ec0b24","modified":1512138276738},{"_id":"public/pages/c075d141/index.html","hash":"bbd66f90fe3540a8a3961dd212bb5dabd5352abc","modified":1512138276738},{"_id":"public/pages/24709d34/index.html","hash":"89b468a0db424632b3f72fc82a62cb57596c6d26","modified":1512138276738},{"_id":"public/pages/784dd132/index.html","hash":"72074b6a2c3a4a54efd465987c820b9cc044e621","modified":1512138276738},{"_id":"public/archives/index.html","hash":"3eb10081e939e7046958bc037b5d4aa773b3acf7","modified":1512138276738},{"_id":"public/archives/page/2/index.html","hash":"d2977d9118abe933cc329b322f7b0a12b03b4ee3","modified":1512138276738},{"_id":"public/archives/page/3/index.html","hash":"fd60559fbbd2367d147a1a14a8c081f34133450a","modified":1512138276738},{"_id":"public/archives/page/4/index.html","hash":"aad87c5fd175ba02ee8ec47b111517dd7bdf808f","modified":1512138276738},{"_id":"public/archives/page/5/index.html","hash":"bc0e6dbf1b65c58eeb4778d47d6103ae9318b856","modified":1512138276738},{"_id":"public/archives/page/6/index.html","hash":"75aa8416c4d10142627494ae8de0aa9f349ad5b6","modified":1512138276738},{"_id":"public/archives/page/7/index.html","hash":"abca8c4bd7b1b2c207d5b7d67052bd8671732f10","modified":1512138276738},{"_id":"public/archives/page/8/index.html","hash":"9a1363566591c1db44a5603e01d57c971fa9adb7","modified":1512138276738},{"_id":"public/archives/page/9/index.html","hash":"edbd056d7625bf7524c84d913ae7f4ff22f0471d","modified":1512138276738},{"_id":"public/archives/page/10/index.html","hash":"4cd5affb361185048616dc29aeea49312d32eb18","modified":1512138276738},{"_id":"public/archives/page/11/index.html","hash":"1da8ffdb29f25ac788677972891596abf0aca514","modified":1512138276739},{"_id":"public/archives/page/12/index.html","hash":"e1264acd17dc935f6d4d940bd14efad452b7cd7f","modified":1512138276739},{"_id":"public/archives/page/13/index.html","hash":"31d41302b849ba73ee195a43e95121bf9dd49824","modified":1512138276739},{"_id":"public/archives/2017/index.html","hash":"a2f0e480a43e53b3ab1c2361555a6961404ce660","modified":1512138276739},{"_id":"public/archives/2017/page/2/index.html","hash":"f0424272ca7088c41e1e6ed3acb86dd694179508","modified":1512138276739},{"_id":"public/archives/2017/page/3/index.html","hash":"e930334c2600aec2d3e5a21e6f8b8f17432b4029","modified":1512138276739},{"_id":"public/archives/2017/page/4/index.html","hash":"118885f008a0b464a28d7590a5277ee21db335c0","modified":1512138276739},{"_id":"public/archives/2017/page/5/index.html","hash":"066a06803d07e4b1fb8b2d3a3056c00842a848c8","modified":1512138276739},{"_id":"public/archives/2017/page/6/index.html","hash":"0dd7aaa2f58546616d8818742a63493f65b73382","modified":1512138276739},{"_id":"public/archives/2017/page/7/index.html","hash":"2c7ec7faa0a3a53aaa072a6e3081268460ec978a","modified":1512138276739},{"_id":"public/archives/2017/page/8/index.html","hash":"1a6e7b8f64c93f8f9adb87e968180b89d4917342","modified":1512138276739},{"_id":"public/archives/2017/page/9/index.html","hash":"d84cca94dc7979c0876b1771f23416225881dd63","modified":1512138276739},{"_id":"public/archives/2017/page/10/index.html","hash":"116d74000168f463ac0e1e58d758af6066873bb4","modified":1512138276739},{"_id":"public/archives/2017/page/11/index.html","hash":"96bd9213105b16e100747565da9ee4bba7e248b4","modified":1512138276739},{"_id":"public/archives/2017/page/12/index.html","hash":"36c6abc9e61d7753ca6b3d0a698a5d0e9446c69d","modified":1512138276739},{"_id":"public/archives/2017/page/13/index.html","hash":"043000395666260d46c37986a579cdd463586d7d","modified":1512138276740},{"_id":"public/archives/2017/03/index.html","hash":"72f04f25e362d71ecabd78feb92a3b1c32468788","modified":1512138276740},{"_id":"public/archives/2017/06/index.html","hash":"5aebb5f43e4b65e5a56c5fc3baffe3108a78ae93","modified":1512138276740},{"_id":"public/archives/2017/06/page/2/index.html","hash":"7cce081f9c14db2ce0bb43cb3dd0cb853519901f","modified":1512138276740},{"_id":"public/archives/2017/06/page/3/index.html","hash":"6f75411ace802f11a0f12b62dfdaac389f1fcae4","modified":1512138276740},{"_id":"public/archives/2017/06/page/4/index.html","hash":"78f5032af205dd193b9832189ba5f1929419a2a2","modified":1512138276740},{"_id":"public/archives/2017/09/index.html","hash":"526c3bfcada8c94bbb8f69038c427b3e304009df","modified":1512138276740},{"_id":"public/archives/2017/10/index.html","hash":"3f045a5394a4c6785083974c074fa420274483b4","modified":1512138276740},{"_id":"public/archives/2017/11/index.html","hash":"cc4f9f6dba3a25a874f793578df1142e81e8b451","modified":1512138276740},{"_id":"public/archives/2017/11/page/2/index.html","hash":"2b3c4faa00d7306ca7ccae60fe8d9e7d57cdeb3f","modified":1512138276740},{"_id":"public/archives/2017/11/page/3/index.html","hash":"bfe790b8cb9e87c2054f1cbdf6cc796cea716317","modified":1512138276740},{"_id":"public/archives/2017/11/page/4/index.html","hash":"c91e9c973f7c2038cb3a573576d360feb574994c","modified":1512138276740},{"_id":"public/archives/2017/11/page/5/index.html","hash":"198df10534e4631caa11f6700caf48b3d423ffde","modified":1512138276740},{"_id":"public/archives/2017/11/page/6/index.html","hash":"05e0268bbf6b5359fabbbb5501b9e765f85b13af","modified":1512138276740},{"_id":"public/archives/2017/11/page/7/index.html","hash":"fe9afc3c867267e41916019c8fbacdb5c8c467da","modified":1512138276740},{"_id":"public/archives/2017/11/page/8/index.html","hash":"1255d66fa7ed38086bd2d07f4bd35ef1cd6352bf","modified":1512138276740},{"_id":"public/categories/CSS/index.html","hash":"beea726b462ee2b65bfc496e4268f123c8165b27","modified":1512138276740},{"_id":"public/categories/CSS/page/2/index.html","hash":"59889c0770b0a21df571ae09679aa2481b5d8348","modified":1512138276740},{"_id":"public/categories/Android/index.html","hash":"e932cd823d227944dac16d577e3f8e7d10b00537","modified":1512138276741},{"_id":"public/categories/JavaScript/index.html","hash":"cce5e11107802e0aef5ca92991d443027be36ee5","modified":1512138276741},{"_id":"public/categories/JavaScript/page/2/index.html","hash":"9f4a314a9d9768ba26ae4ea491932264e987fc79","modified":1512138276741},{"_id":"public/categories/JavaScript/page/3/index.html","hash":"e09dcb36ab901936b15896122577501a96daaa99","modified":1512138276741},{"_id":"public/categories/JavaScript/page/4/index.html","hash":"88f97ef8624226a213cc5c0f35e9e6a44da7a9c4","modified":1512138276741},{"_id":"public/categories/Java/index.html","hash":"fedfce178b2cacec5c9169e14c7e33d6d9f1fd3e","modified":1512138276741},{"_id":"public/categories/Java/page/2/index.html","hash":"59708b05d969e6ffa130c5ad96a1c8a88471e5b3","modified":1512138276741},{"_id":"public/categories/Java/page/3/index.html","hash":"74e7725989431b3db78c338900e7e37a3cafbf07","modified":1512138276741},{"_id":"public/categories/Java/page/4/index.html","hash":"49c02ce0837cc31938d72820af7cc3c0fff8cfd2","modified":1512138276741},{"_id":"public/categories/VSCode/index.html","hash":"f6ac16493197c41a1e3db15c9141706a787698aa","modified":1512138276741},{"_id":"public/categories/Nodejs/index.html","hash":"2ace9f708870d7215eaf6c2929f0224a70e206e3","modified":1512138276741},{"_id":"public/categories/数据库/index.html","hash":"7a618cf83d77462e54170b1175f31ea7486d5c56","modified":1512138276741},{"_id":"public/categories/Git/index.html","hash":"d04240902abdeafefbb5ed5b1b0761dec7014e13","modified":1512138276741},{"_id":"public/categories/HTML/index.html","hash":"e1e47476f6845869ece05f9678e149cc3c2a2ad1","modified":1512138276741},{"_id":"public/categories/其他/index.html","hash":"32a6b7f678e7ba9bfa69005a142e8eea62b0f1cc","modified":1512138276741},{"_id":"public/categories/Vue/index.html","hash":"bd966116000fa03d843fafd9e3d534e2fdc69771","modified":1512138276741},{"_id":"public/categories/Tools/index.html","hash":"c91f69f65a426b41f89edbc0ad817b053d3f1e50","modified":1512138276741},{"_id":"public/categories/编程相关/index.html","hash":"ee67238a4a5fd9738b72d3a5dafef936bf205301","modified":1512138276741},{"_id":"public/categories/算法/index.html","hash":"e9ca15a06fb97f1877f1780e1fd5e5e9e0260304","modified":1512138276741},{"_id":"public/index.html","hash":"fc346b1515965a3eb7f39d126aa7933df887c9b8","modified":1512138276741},{"_id":"public/page/2/index.html","hash":"019a1cdc59bb66aca3b7db579259512f39a2c85a","modified":1512138276741},{"_id":"public/page/3/index.html","hash":"94ae2fe4a82b538c2487c0f79b3982100d507d69","modified":1512138276742},{"_id":"public/page/4/index.html","hash":"1e3d3df759bc89f5c7294c2725c9a3232e9a8935","modified":1512138276742},{"_id":"public/page/5/index.html","hash":"b6e46b1bf02be2c44cc717144f61dc4eb0f3ab3e","modified":1512138276742},{"_id":"public/page/6/index.html","hash":"81be7162a78f1ea2de7bd53be80407ca448b8219","modified":1512138276742},{"_id":"public/page/7/index.html","hash":"c989493d70b83b485fee96a643fbe1adb36345d6","modified":1512138276742},{"_id":"public/page/8/index.html","hash":"57b9502e865557c7b357d41ae1fbbf9d6088bed1","modified":1512138276742},{"_id":"public/page/9/index.html","hash":"d14b4df94a0b4da33b880ed13b617c7d9fdc629b","modified":1512138276742},{"_id":"public/page/10/index.html","hash":"56ccb227fdc2605c9cb4edfc3758a18ccdb928e0","modified":1512138276742},{"_id":"public/page/11/index.html","hash":"31117fbfdd13604f1524022096ca549867701e73","modified":1512138276742},{"_id":"public/page/12/index.html","hash":"a784cee554c8c5cf80f3d4ca117235f58d64862a","modified":1512138276742},{"_id":"public/page/13/index.html","hash":"3ebf12ebfd05144b8cc070e58da739d4f56e1037","modified":1512138276742},{"_id":"public/tags/CSS/index.html","hash":"dcafb233f00b79ef9139c3ff705da9368a0c44d5","modified":1512138276742},{"_id":"public/tags/CSS/page/2/index.html","hash":"5dfdb9b0e881d973425ba97cbe577a31ae900f0f","modified":1512138276742},{"_id":"public/tags/Android/index.html","hash":"cea83a416d4413510154cf86a3c0a6abe8bb83d1","modified":1512138276742},{"_id":"public/tags/Test/index.html","hash":"9ce24404caf2b948412454434fbb6d5f17a01201","modified":1512138276742},{"_id":"public/tags/Gradle/index.html","hash":"3bbbfd615e67a0eec99bea8d3c61d35f428bc65b","modified":1512138276742},{"_id":"public/tags/JavaScript/index.html","hash":"15d714998044baeeb6d31a6a6bff00aba6208917","modified":1512138276742},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"f70f4bdccb512a6d96052368fa45b2d7fd562b6a","modified":1512138276742},{"_id":"public/tags/Java/index.html","hash":"595c7b42a29e502eedbd4609623c19e56605f119","modified":1512138276743},{"_id":"public/tags/Java/page/2/index.html","hash":"005d3c6d4551aff592319f66c09bb0f135261328","modified":1512138276758},{"_id":"public/tags/Java/page/3/index.html","hash":"dd788b846c6e526ca2921a770572ceee3bad1a3f","modified":1512138276758},{"_id":"public/tags/VSCode/index.html","hash":"34c0df8d71c8aec8a7991fcfb75a245f0ccb4b68","modified":1512138276758},{"_id":"public/tags/ESLint/index.html","hash":"c47c652d2f90e8a30fe58eab6af9642426150502","modified":1512138276758},{"_id":"public/tags/test/index.html","hash":"200998c04771f56a365a8d69a4f1e97055e0c092","modified":1512138276758},{"_id":"public/tags/Yarn/index.html","hash":"95c71f71d3d998aa8bc20be220c95532fc8bb792","modified":1512138276758},{"_id":"public/tags/MySql/index.html","hash":"4b01b7c778efdbc54b5402af380f6311e4056596","modified":1512138276758},{"_id":"public/tags/Git/index.html","hash":"448368af0f220c3238e1bb530bb4d83d92441c93","modified":1512138276758},{"_id":"public/tags/HTML/index.html","hash":"931ef7a635c0518b50e277a9d2a8e8d186b68532","modified":1512138276758},{"_id":"public/tags/jQuery/index.html","hash":"bf330a5b184aa22722c083c3cfc584612719e860","modified":1512138276758},{"_id":"public/tags/MongoDB/index.html","hash":"3ee3d745647fdccdd3b87163be8f0edfbe1df576","modified":1512138276758},{"_id":"public/tags/Vue/index.html","hash":"c48aed07c5bad0fecbf441e61eef91f6af2b316e","modified":1512138276758},{"_id":"public/tags/Firebase/index.html","hash":"7462e081ab3bea7fb2daf2c175caf8fa9132e78b","modified":1512138276759},{"_id":"public/tags/Webpack/index.html","hash":"a441e2011becccf58f222ce832c649322ce352c5","modified":1512138276759},{"_id":"public/tags/YouDon-tKnowJavaScript/index.html","hash":"ab459d82f4f2e7bfec11e59800fa57699f51fcde","modified":1512138276759},{"_id":"public/tags/YouDon-tKnowJavaScript/page/2/index.html","hash":"3194e42a66fade7dfc4963969dd39e9878b603b2","modified":1512138276759},{"_id":"public/tags/Web/index.html","hash":"ac77f1fd4f2e33db7719d44a6d72a741a7485a30","modified":1512138276759},{"_id":"public/tags/tabs/index.html","hash":"2860c96b273e778ec3d46c40b1ba9f9d61e11019","modified":1512138276759},{"_id":"public/tags/vue/index.html","hash":"2cba449fc6bd40ba008055bbfc6f303fc03a5a87","modified":1512138276759},{"_id":"public/tags/SSH/index.html","hash":"35e9917d2e5921601ae2b4ae65c6fa5ab8fac45d","modified":1512138276759},{"_id":"public/tags/RegEx/index.html","hash":"fcc12c3f5476b90d98b176d16470cf24146ed566","modified":1512138276759},{"_id":"public/tags/算法/index.html","hash":"f9356ceb44f326c050915fab6d4026eb04bdec94","modified":1512138276759},{"_id":"public/pages/e38ac448/index.html","hash":"28ef5097b8e3cd8d1961c9e5b1f3aea28e60c56c","modified":1512138276759},{"_id":"public/CNAME","hash":"3f41f2d60202f6d47cee236379084ad272b749a8","modified":1512138276759},{"_id":"public/images/avatar.png","hash":"bab308f4aa9a5b11634d10c7979c7c03b2dfecf2","modified":1512138276760},{"_id":"public/favicon.ico","hash":"aebc3dc4d14a05b846b9d90c3790b4f5fa28e24f","modified":1512138276760},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1512138276760},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1512138276760},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1512138276760},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1512138276760},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1512138276760},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1512138276760},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1512138276760},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1512138276760},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1512138276760},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1512138276761},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1512138276761},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1512138276761},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1512138276761},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1512138276761},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1512138276761},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1512138276761},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1512138276761},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1512138276761},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1512138276761},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1512138276761},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1512138276761},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1512138276761},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1512138276761},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1512138276761},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1512138276762},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1512138276762},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1512138276762},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1512138276762},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1512138276762},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1512138276762},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1512138276762},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1512138276762},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1512138276762},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1512138276775},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1512138276780},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1512138276781},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1512138276781},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1512138276782},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1512138276782},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1512138276782},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1512138276782},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1512138276782},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1512138276782},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1512138276782},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1512138276783},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1512138276783},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1512138276783},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1512138276803},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1512138276804},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1512138276804},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1512138276804},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1512138276804},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1512138276804},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1512138276804},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1512138276804},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1512138276804},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1512138276804},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1512138276804},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1512138276804},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1512138276805},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1512138276805},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1512138276805},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1512138276805},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1512138276805},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1512138276805},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1512138276805},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1512138276805},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1512138276805},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1512138276805},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1512138276805},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1512138276805},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1512138276805},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1512138276805},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1512138276806},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1512138276806},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1512138276806},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1512138276806},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1512138276806},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1512138276806},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1512138276806},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1512138276806},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1512138276806},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1512138276806},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1512138276806},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1512138276807},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1512138276807},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1512138276807},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1512138276807},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1512138276808},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1512138276808},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1512138276808},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1512138276808},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1512138276808},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1512138276808},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1512138276808},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1512138276809},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1512138276809},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1512138276809},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1512138276809},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1512138276809},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1512138276809},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1512138276809},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1512138276809},{"_id":"public/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1512138276809},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1512138276809},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1512138276810},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1512138276810},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1512138276810},{"_id":"public/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1512138276810},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1512138276810},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1512138276811},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1512138276811},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1512138276811},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1512138276811},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1512138276964},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1512138276998},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1512138276998},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1512138277000},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1512138277001},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1512138277002},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1512138277003}],"Category":[{"name":"CSS","_id":"cjao02xhv0004dfbxv599ac8f"},{"name":"Android","_id":"cjao02xi10009dfbx7shn787j"},{"name":"JavaScript","_id":"cjao02xif000mdfbxe325v4jh"},{"name":"Java","_id":"cjao02xio000ydfbxtjuobqe2"},{"name":"VSCode","_id":"cjao02xjd0020dfbxzocm01tt"},{"name":"Nodejs","_id":"cjao02xjp002adfbxocei4vbn"},{"name":"数据库","_id":"cjao02xjy002idfbx4uzunmtd"},{"name":"Git","_id":"cjao02xk5002pdfbxrql898oj"},{"name":"HTML","_id":"cjao02xkd002xdfbxnmssslay"},{"name":"其他","_id":"cjao02xl2003mdfbxvqbv77g8"},{"name":"Vue","_id":"cjao02xlb003wdfbxs4arqn9s"},{"name":"Tools","_id":"cjao02xlv004edfbx8o66j38f"},{"name":"编程相关","_id":"cjao02xm8004pdfbxhj15vcmc"},{"name":"算法","_id":"cjao02xoi006pdfbxq3tnxp83"}],"Data":[],"Page":[{"title":"categories","date":"2017-08-03T16:40:38.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-04 00:40:38\ntype: \"categories\"\n---\n","updated":"2017-10-26T14:55:13.396Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjao02xhr0001dfbxft9ia7nx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-08-03T16:38:45.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-08-04 00:38:45\n---\n","updated":"2017-10-26T14:55:13.395Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjao02xhu0003dfbxx6o3sv0p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"timeline","date":"2017-11-30T11:51:11.431Z","layout":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: timeline\ndate:\nlayout: timeline\n---","updated":"2017-11-30T11:51:11.431Z","path":"timeline/index.html","comments":1,"_id":"cjao02xog006ndfbx88tpwpbh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-11-30T11:49:35.033Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\n---\n","updated":"2017-11-30T11:49:35.033Z","path":"tags/index.html","comments":1,"_id":"cjao02xoh006odfbx8riq3d3u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"css布局","abbrlink":"5a252ba9","data":"2017/9/16","_content":"\n# CSS 基础布局\n\n## 清除浮动\n简单的 Micro clearfix 方法清除浮动，原文链接:http://nicolasgallagher.com/micro-clearfix-hack/\n```scss\n@mixin clearfix {\n    &::before, &::after{\n        content: \" \";\n        display: flex;\n    }\n    &::after {\n        clear: both;\n    }\n}\n```\n## 三栏式布局\n\n> 两边侧栏固定宽度，中间栏宽度自适应，并且中间栏要在放在文档流前面以优先渲染。\n> 其父元素的高度始终是由三栏中高度最高的元素确定。\n\n### 圣杯布局\n\n> 来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。[原文链接](https://alistapart.com/article/holygrail)\n\n```html\n<div class=\"container\">\n    <div class=\"box mid\"></div>\n    <div class=\"box left\"></div>\n    <div class=\"box right\"></div>\n</div>\n```\n\n1. 设置`box-mid` `box-left` `box-right` 三者向左浮动。\n2. 设置`box-mid`宽度为 100%。\n3. 设置负边距，`box-left`设置负左边距为 100%，`box-right`设置负左边距为负的自身宽度。\n4. 设置`container`的`padding`值，给`box-left`和`box-right`留出空间。\n5. 设置`left`和`right`为相对定位(position: relative).\n6. 设置`box-left`的`left`值为负的`box-left`宽度，`box-right`的`right`值为负的`right`宽度。\n\nQ:当面板的`mid`部分比两边的子面板宽度小的时候，布局会乱掉。\nA:为`body`设置一个最小宽度。`body{min-width:700px;}`\n\n### 淘宝双飞翼布局\n\n> 淘宝双飞翼布局是一个经典的三栏式布局，\n","source":"_posts/CSS布局.md","raw":"---\ntitle: css布局\ntags: CSS\ncategories: CSS\nabbrlink: 5a252ba9\ndata: 2017/9/16\n---\n\n# CSS 基础布局\n\n## 清除浮动\n简单的 Micro clearfix 方法清除浮动，原文链接:http://nicolasgallagher.com/micro-clearfix-hack/\n```scss\n@mixin clearfix {\n    &::before, &::after{\n        content: \" \";\n        display: flex;\n    }\n    &::after {\n        clear: both;\n    }\n}\n```\n## 三栏式布局\n\n> 两边侧栏固定宽度，中间栏宽度自适应，并且中间栏要在放在文档流前面以优先渲染。\n> 其父元素的高度始终是由三栏中高度最高的元素确定。\n\n### 圣杯布局\n\n> 来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。[原文链接](https://alistapart.com/article/holygrail)\n\n```html\n<div class=\"container\">\n    <div class=\"box mid\"></div>\n    <div class=\"box left\"></div>\n    <div class=\"box right\"></div>\n</div>\n```\n\n1. 设置`box-mid` `box-left` `box-right` 三者向左浮动。\n2. 设置`box-mid`宽度为 100%。\n3. 设置负边距，`box-left`设置负左边距为 100%，`box-right`设置负左边距为负的自身宽度。\n4. 设置`container`的`padding`值，给`box-left`和`box-right`留出空间。\n5. 设置`left`和`right`为相对定位(position: relative).\n6. 设置`box-left`的`left`值为负的`box-left`宽度，`box-right`的`right`值为负的`right`宽度。\n\nQ:当面板的`mid`部分比两边的子面板宽度小的时候，布局会乱掉。\nA:为`body`设置一个最小宽度。`body{min-width:700px;}`\n\n### 淘宝双飞翼布局\n\n> 淘宝双飞翼布局是一个经典的三栏式布局，\n","slug":"CSS布局","published":1,"date":"2017-11-12T02:19:27.462Z","updated":"2017-11-12T02:19:27.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xhl0000dfbxyqrysapz","content":"<h1 id=\"CSS-基础布局\"><a href=\"#CSS-基础布局\" class=\"headerlink\" title=\"CSS 基础布局\"></a>CSS 基础布局</h1><h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>简单的 Micro clearfix 方法清除浮动，原文链接:<a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\" target=\"_blank\" rel=\"external\">http://nicolasgallagher.com/micro-clearfix-hack/</a></p>\n<pre><code class=\"scss\">@mixin clearfix {\n    &amp;::before, &amp;::after{\n        content: &quot; &quot;;\n        display: flex;\n    }\n    &amp;::after {\n        clear: both;\n    }\n}\n</code></pre>\n<h2 id=\"三栏式布局\"><a href=\"#三栏式布局\" class=\"headerlink\" title=\"三栏式布局\"></a>三栏式布局</h2><blockquote>\n<p>两边侧栏固定宽度，中间栏宽度自适应，并且中间栏要在放在文档流前面以优先渲染。<br>其父元素的高度始终是由三栏中高度最高的元素确定。</p>\n</blockquote>\n<h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><blockquote>\n<p>来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。<a href=\"https://alistapart.com/article/holygrail\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n</blockquote>\n<pre><code class=\"html\">&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;box mid&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ol>\n<li>设置<code>box-mid</code> <code>box-left</code> <code>box-right</code> 三者向左浮动。</li>\n<li>设置<code>box-mid</code>宽度为 100%。</li>\n<li>设置负边距，<code>box-left</code>设置负左边距为 100%，<code>box-right</code>设置负左边距为负的自身宽度。</li>\n<li>设置<code>container</code>的<code>padding</code>值，给<code>box-left</code>和<code>box-right</code>留出空间。</li>\n<li>设置<code>left</code>和<code>right</code>为相对定位(position: relative).</li>\n<li>设置<code>box-left</code>的<code>left</code>值为负的<code>box-left</code>宽度，<code>box-right</code>的<code>right</code>值为负的<code>right</code>宽度。</li>\n</ol>\n<p>Q:当面板的<code>mid</code>部分比两边的子面板宽度小的时候，布局会乱掉。<br>A:为<code>body</code>设置一个最小宽度。<code>body{min-width:700px;}</code></p>\n<h3 id=\"淘宝双飞翼布局\"><a href=\"#淘宝双飞翼布局\" class=\"headerlink\" title=\"淘宝双飞翼布局\"></a>淘宝双飞翼布局</h3><blockquote>\n<p>淘宝双飞翼布局是一个经典的三栏式布局，</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CSS-基础布局\"><a href=\"#CSS-基础布局\" class=\"headerlink\" title=\"CSS 基础布局\"></a>CSS 基础布局</h1><h2 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h2><p>简单的 Micro clearfix 方法清除浮动，原文链接:<a href=\"http://nicolasgallagher.com/micro-clearfix-hack/\" target=\"_blank\" rel=\"external\">http://nicolasgallagher.com/micro-clearfix-hack/</a></p>\n<pre><code class=\"scss\">@mixin clearfix {\n    &amp;::before, &amp;::after{\n        content: &quot; &quot;;\n        display: flex;\n    }\n    &amp;::after {\n        clear: both;\n    }\n}\n</code></pre>\n<h2 id=\"三栏式布局\"><a href=\"#三栏式布局\" class=\"headerlink\" title=\"三栏式布局\"></a>三栏式布局</h2><blockquote>\n<p>两边侧栏固定宽度，中间栏宽度自适应，并且中间栏要在放在文档流前面以优先渲染。<br>其父元素的高度始终是由三栏中高度最高的元素确定。</p>\n</blockquote>\n<h3 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h3><blockquote>\n<p>来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。<a href=\"https://alistapart.com/article/holygrail\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n</blockquote>\n<pre><code class=\"html\">&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;box mid&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;box right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ol>\n<li>设置<code>box-mid</code> <code>box-left</code> <code>box-right</code> 三者向左浮动。</li>\n<li>设置<code>box-mid</code>宽度为 100%。</li>\n<li>设置负边距，<code>box-left</code>设置负左边距为 100%，<code>box-right</code>设置负左边距为负的自身宽度。</li>\n<li>设置<code>container</code>的<code>padding</code>值，给<code>box-left</code>和<code>box-right</code>留出空间。</li>\n<li>设置<code>left</code>和<code>right</code>为相对定位(position: relative).</li>\n<li>设置<code>box-left</code>的<code>left</code>值为负的<code>box-left</code>宽度，<code>box-right</code>的<code>right</code>值为负的<code>right</code>宽度。</li>\n</ol>\n<p>Q:当面板的<code>mid</code>部分比两边的子面板宽度小的时候，布局会乱掉。<br>A:为<code>body</code>设置一个最小宽度。<code>body{min-width:700px;}</code></p>\n<h3 id=\"淘宝双飞翼布局\"><a href=\"#淘宝双飞翼布局\" class=\"headerlink\" title=\"淘宝双飞翼布局\"></a>淘宝双飞翼布局</h3><blockquote>\n<p>淘宝双飞翼布局是一个经典的三栏式布局，</p>\n</blockquote>\n"},{"title":"Android简易计分板实现","abbrlink":"81bae912","date":"2017-06-16T06:30:29.000Z","_content":"\n### 一、View的选择 ###\n- 分析整个 APP 的组成：\n    - TextView：  4 个\n    - Button： 7个\n    - 空白 View：1个\n\n### 二、Layout布局 ###\n\n- 采用 RelativeLayout 作为整体布局父容器。\n- 将其分为上下两个部分，下面部分只有一个 Button ，直接设置好其相对于父视图的位置参数以及自身属性即可。\n- 上面部分又可以横向分为三个部分：\n    - 1.TeamA 团队的加分 Button 及显示的 TextView；\n        - 对于 TeamA， 其中各组件纵向排列，可采用Vertical LinearLayout作为其视图容器。\n    - 2.空白 View 做中间隔离；\n    - 3.TeamB 团队的加分 Button 及显示的 TextView 。\n        - 对于 TeamB，其设置等同于 TeamA 的设置。\n- 可以采用 Horizontal LinearLayout 作为其视图容器。\n\n#### 整体布局 active_main.xml 代码如下所示：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"#D2403E\"\n    android:padding=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.roojay.android.courtcounter.MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"18dp\"\n        android:orientation=\"horizontal\">\n\n        <LinearLayout\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                style=\"@style/textView\"\n                android:id=\"@+id/teama_text_view\"\n                android:text=\"@string/team_a\" />\n\n            <TextView\n                android:id=\"@+id/pointsa_text_view\"\n                style=\"@style/pointsTextView\"\n                android:text=\"@string/points_a\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttona3\"\n                android:onClick=\"addThreeA\"\n                android:text=\"@string/add3a\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttona2\"\n                android:onClick=\"addTwoA\"\n                android:text=\"@string/add2a\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttona1\"\n                android:onClick=\"addOneA\"\n                android:text=\"@string/add1a\" />\n        </LinearLayout>\n\n        <View\n            android:layout_width=\"1dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"8dp\"\n            android:layout_marginBottom=\"8dp\"\n            android:background=\"#FFFEFE\" />\n\n\n        <LinearLayout\n            android:layout_width=\"0dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                style=\"@style/textView\"\n                android:id=\"@+id/teamb_text_view\"\n                android:text=\"@string/team_b\" />\n\n            <TextView\n                style=\"@style/pointsTextView\"\n                android:id=\"@+id/pointsb_text_view\"\n                android:text=\"@string/points_b\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttonb3\"\n                android:onClick=\"addThreeB\"\n                android:text=\"@string/add3b\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttonb2\"\n                android:onClick=\"addTwoB\"\n                android:text=\"@string/add2b\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttonb1\"\n                android:onClick=\"addOneB\"\n                android:text=\"@string/add1b\" />\n\n        </LinearLayout>\n    </LinearLayout>\n\n    <Button\n        style=\"@style/resetButtonView\"\n        android:id=\"@+id/button_reset\"\n        android:onClick=\"reset\"\n        android:text=\"@string/reset_text_views\" />\n\n\n</RelativeLayout>\n\n```\n\n### 三、交互 ###\n\n- 通过 Button 的 android:onClick 属性指定方法。\n- 将各个 Button 与 Java 中的方法关联起来。\n- 具体操作是在 active_main.xml 中设置 android:onClick=\"buttonName\" 为每个 Button 设置一个独特的名字，这个名字用于 Java 代码寻找和识别每个不同的 Button 。\n\n例如：\n\n```xml\n在 active_main.xml 中设置 Button3A 的 onClick 属性为 android:onClick=\"addThreeA\"\n```\n在 MainActivity.java 中编写代码：\n\n```java\n    public void addThreeA(View view) {\n\n    //所需要执行的操作，假如是 A 团队加三分\n\n    }\n```\n\n那么当你按下 Button3A 就将 A 团队的分数加上三分。\n\n#### 整个 MainActivity.java 代码  ####\n\n```java\npackage com.roojay.android.courtcounter;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    int scorea = 0;\n    int scoreb = 0;\n\n\n    /**\n     * Add 3 points for the Team A.\n     */\n    public void addThreeA(View view) {\n        scorea = scorea + 3;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 2 points for the Team A.\n     */\n    public void addTwoA(View view) {\n        scorea = scorea + 2;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 1 point for the Team A.\n     */\n    public void addOneA(View view) {\n        scorea = scorea + 1;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Displays the given scorea for Team A.\n     */\n    public void displayTeamscorea(int scorea) {\n        TextView scoreaView = (TextView) findViewById(R.id.pointsa_text_view);\n        scoreaView.setText(String.valueOf(scorea));\n    }\n\n\n    /**\n     * Add 3 points for the Team B.\n     */\n    public void addThreeB(View view) {\n        scoreb = scoreb + 3;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 2 points for the Team B.\n     */\n    public void addTwoB(View view) {\n        scoreb = scoreb + 2;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 1 point for the Team B.\n     */\n    public void addOneB(View view) {\n        scoreb = scoreb + 1;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Displays the given scoreb for Team B.\n     */\n    public void displayTeamscoreb(int scoreb) {\n        TextView scorebView = (TextView) findViewById(R.id.pointsb_text_view);\n        scorebView.setText(String.valueOf(scoreb));\n    }\n\n\n    public void reset(View view) {\n        scorea = 0;\n        scoreb = 0;\n        displayTeamscorea(scorea);\n        displayTeamscoreb(scoreb);\n\n    }\n}\n\n```\n### 四、代码优化及 APP 美化 ###\n#### style.xml 的设置\n\n- 当每一个 View 都有着大量相同的元素，可以将这些元素定义在\n`res/value/styles.xml` 中。\n\n具体的写法如下：\n\n```xml\n<style name=\"cofe_textView\">\n        <item name=\"android:textColor\">#FFFFFF</item>\n        <item name=\"android:layout_width\">wrap_content</item>\n       ...\n\n    </style>\n```\n\n然后可以用`style=\"@style/cofe_textView\"`语句轻易地重复引用这些设置：\n\n例如：\n```xml\n<TextView\n              style=\"@style/textView\"\n              android:id=\"@+id/teamb_text_view\"\n              android:text=\"@string/team_b\" />\n\n```\n\n#### 整个 style.xml 代码如下 ####\n```xml\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n    <style name=\"textView\">\n        <item name=\"android:layout_width\">match_parent</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:fontFamily\">sans-serif-medium</item>\n        <item name=\"android:gravity\">center</item>\n        <item name=\"android:textColor\">#FFFEFE</item>\n        <item name=\"android:textSize\">24sp</item>\n    </style>\n\n    <style name=\"pointsTextView\">\n        <item name=\"android:layout_width\">match_parent</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:fontFamily\">sans-serif-medium</item>\n        <item name=\"android:layout_margin\">24dp</item>\n        <item name=\"android:gravity\">center</item>\n        <item name=\"android:textColor\">#2B2A2A</item>\n        <item name=\"android:textSize\">56sp</item>\n        <item name=\"android:background\">#FFFEFE</item>\n    </style>\n\n    <style name=\"addButtonView\">\n        <item name=\"android:layout_width\">match_parent</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:layout_marginBottom\">8dp</item>\n        <item name=\"android:layout_marginLeft\">24dp</item>\n        <item name=\"android:layout_marginRight\">24dp</item>\n        <item name=\"android:background\">#2B2A2A</item>\n        <item name=\"android:textColor\">#FFFEFE</item>\n    </style>\n\n    <style name=\"resetButtonView\">\n        <item name=\"android:layout_width\">wrap_content</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:layout_marginBottom\">32dp</item>\n        <item name=\"android:background\">#2B2A2A</item>\n        <item name=\"android:textColor\">#FFFEFE</item>\n        <item name=\"android:layout_centerHorizontal\">true</item>\n        <item name=\"android:layout_alignParentBottom\">true</item>\n    </style>\n\n</resources>\n\n```\n#### strings.xml ####\n- 在 Android 中会将应用中出现的文字放入 string.xml 中，这样一个字符可以重复调用，而不用每次去编写，可以减少数据的冗余，减小 APP 应用的体积。并且当你的 APP 国际化时只需更改 strings.xml 中的文字定义，就可以实现其他语言的显示。\n\nstrings.xml 中的字符定义如下：\n```xml\n<resources>\n    <string name=\"text_name\">显示的文字</string>\n    ...\n</resources>\n\n```\n调用时：\n```xml\nandroid:text=\"@string/text_name\"\n```\n#### 整个 strings.xml 代码如下 ####\n```xml\n<resources>\n    <string name=\"app_name\">Court Counter</string>\n    <string name=\"add2b\">+2 points</string>\n    <string name=\"add1b\">+1 pointsb</string>\n    <string name=\"team_a\">Team A</string>\n    <string name=\"add2a\">+2 points</string>\n    <string name=\"points_a\">0</string>\n    <string name=\"add3a\">+3 points</string>\n    <string name=\"add1a\">+1 points</string>\n    <string name=\"team_b\">Team B</string>\n    <string name=\"points_b\">0</string>\n    <string name=\"add3b\">+3 points</string>\n    <string name=\"reset_text_views\">reset</string>\n</resources>\n\n```\n### 五、APP 强制锁定横竖屏 ###\n\n- 在最开始做出 APP 时没有考虑到 APP 横屏的问题，偶然一次横屏之后发现 APP 显示不全了，当时也没多想，既然横屏不行，那就去掉横屏显示，锁定在竖屏。上网查了下资料，锁定横竖屏有两种实现方式：XML 或 Java 方式。这个 APP 采用了 XML 锁定方式。\n\n#### XML锁定横屏或竖屏\n\n- 在AndroidManifest.xml中配置,在Activity标签中加入android:screenOrientation=\"unspecified\"，来使某个Activity做横竖屏的变化。\n\n- 使用android:screenOrientation=\"unspecified\"来锁定横竖屏。\n\n  - unspecified：未指明屏幕方向。\n  - landscape：锁定为横屏。\n  - portrait：锁定为竖屏。\n\n  ##### 具体代码如下：\n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.roojay.android.courtcounter\">\n\n      <application\n          android:allowBackup=\"true\"\n          android:icon=\"@mipmap/ic_launcher\"\n          android:label=\"@string/app_name\"\n          android:supportsRtl=\"true\"\n          android:theme=\"@style/AppTheme\" >\n          <activity android:name=\".MainActivity\"\n              android:screenOrientation=\"portrait\">\n              <intent-filter>\n                  <action android:name=\"android.intent.action.MAIN\" />\n\n                  <category android:name=\"android.intent.category.LAUNCHER\" />\n              </intent-filter>\n          </activity>\n      </application>\n\n  </manifest>\n  ```\n\n  #### Java代码锁定横竖屏\n\n  - 在onCreate()方法中加入锁定代码。\n\n  ##### 代码如下：\n\n  ```java\n  public class MainActivity extends AppCompatActivity {\n\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//锁定为横屏\n        //setRequestedOrientation(ActivityInfo .SCREEN_ORIENTATION_PORTRAIT);//锁定为竖屏\n          setContentView(R.layout.activity_main);\n      }\n  ```\n\n### 六、APP 演示及源码 ###\n\n- APP 的最终效果图，没有进行多余的其他手机测试，也不知道其他手机显示效果是不是这样。\n\n![]()\n\n演示视频：\n[http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4](http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4 \"演示视频\")\n\n源码：\n[https://github.com/roojay520/CourtCounter](https://github.com/roojay520/CourtCounter \"源码\")\n","source":"_posts/Android简易计分板实现.md","raw":"---\ntitle: Android简易计分板实现\ntags: Android\ncategories: Android\nabbrlink: 81bae912\ndate: 2017-06-16 14:30:29\n---\n\n### 一、View的选择 ###\n- 分析整个 APP 的组成：\n    - TextView：  4 个\n    - Button： 7个\n    - 空白 View：1个\n\n### 二、Layout布局 ###\n\n- 采用 RelativeLayout 作为整体布局父容器。\n- 将其分为上下两个部分，下面部分只有一个 Button ，直接设置好其相对于父视图的位置参数以及自身属性即可。\n- 上面部分又可以横向分为三个部分：\n    - 1.TeamA 团队的加分 Button 及显示的 TextView；\n        - 对于 TeamA， 其中各组件纵向排列，可采用Vertical LinearLayout作为其视图容器。\n    - 2.空白 View 做中间隔离；\n    - 3.TeamB 团队的加分 Button 及显示的 TextView 。\n        - 对于 TeamB，其设置等同于 TeamA 的设置。\n- 可以采用 Horizontal LinearLayout 作为其视图容器。\n\n#### 整体布局 active_main.xml 代码如下所示：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/activity_main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"#D2403E\"\n    android:padding=\"@dimen/activity_vertical_margin\"\n    tools:context=\"com.roojay.android.courtcounter.MainActivity\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"18dp\"\n        android:orientation=\"horizontal\">\n\n        <LinearLayout\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                style=\"@style/textView\"\n                android:id=\"@+id/teama_text_view\"\n                android:text=\"@string/team_a\" />\n\n            <TextView\n                android:id=\"@+id/pointsa_text_view\"\n                style=\"@style/pointsTextView\"\n                android:text=\"@string/points_a\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttona3\"\n                android:onClick=\"addThreeA\"\n                android:text=\"@string/add3a\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttona2\"\n                android:onClick=\"addTwoA\"\n                android:text=\"@string/add2a\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttona1\"\n                android:onClick=\"addOneA\"\n                android:text=\"@string/add1a\" />\n        </LinearLayout>\n\n        <View\n            android:layout_width=\"1dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_marginTop=\"8dp\"\n            android:layout_marginBottom=\"8dp\"\n            android:background=\"#FFFEFE\" />\n\n\n        <LinearLayout\n            android:layout_width=\"0dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                style=\"@style/textView\"\n                android:id=\"@+id/teamb_text_view\"\n                android:text=\"@string/team_b\" />\n\n            <TextView\n                style=\"@style/pointsTextView\"\n                android:id=\"@+id/pointsb_text_view\"\n                android:text=\"@string/points_b\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttonb3\"\n                android:onClick=\"addThreeB\"\n                android:text=\"@string/add3b\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttonb2\"\n                android:onClick=\"addTwoB\"\n                android:text=\"@string/add2b\" />\n\n            <Button\n                style=\"@style/addButtonView\"\n                android:id=\"@+id/buttonb1\"\n                android:onClick=\"addOneB\"\n                android:text=\"@string/add1b\" />\n\n        </LinearLayout>\n    </LinearLayout>\n\n    <Button\n        style=\"@style/resetButtonView\"\n        android:id=\"@+id/button_reset\"\n        android:onClick=\"reset\"\n        android:text=\"@string/reset_text_views\" />\n\n\n</RelativeLayout>\n\n```\n\n### 三、交互 ###\n\n- 通过 Button 的 android:onClick 属性指定方法。\n- 将各个 Button 与 Java 中的方法关联起来。\n- 具体操作是在 active_main.xml 中设置 android:onClick=\"buttonName\" 为每个 Button 设置一个独特的名字，这个名字用于 Java 代码寻找和识别每个不同的 Button 。\n\n例如：\n\n```xml\n在 active_main.xml 中设置 Button3A 的 onClick 属性为 android:onClick=\"addThreeA\"\n```\n在 MainActivity.java 中编写代码：\n\n```java\n    public void addThreeA(View view) {\n\n    //所需要执行的操作，假如是 A 团队加三分\n\n    }\n```\n\n那么当你按下 Button3A 就将 A 团队的分数加上三分。\n\n#### 整个 MainActivity.java 代码  ####\n\n```java\npackage com.roojay.android.courtcounter;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    int scorea = 0;\n    int scoreb = 0;\n\n\n    /**\n     * Add 3 points for the Team A.\n     */\n    public void addThreeA(View view) {\n        scorea = scorea + 3;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 2 points for the Team A.\n     */\n    public void addTwoA(View view) {\n        scorea = scorea + 2;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 1 point for the Team A.\n     */\n    public void addOneA(View view) {\n        scorea = scorea + 1;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Displays the given scorea for Team A.\n     */\n    public void displayTeamscorea(int scorea) {\n        TextView scoreaView = (TextView) findViewById(R.id.pointsa_text_view);\n        scoreaView.setText(String.valueOf(scorea));\n    }\n\n\n    /**\n     * Add 3 points for the Team B.\n     */\n    public void addThreeB(View view) {\n        scoreb = scoreb + 3;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 2 points for the Team B.\n     */\n    public void addTwoB(View view) {\n        scoreb = scoreb + 2;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 1 point for the Team B.\n     */\n    public void addOneB(View view) {\n        scoreb = scoreb + 1;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Displays the given scoreb for Team B.\n     */\n    public void displayTeamscoreb(int scoreb) {\n        TextView scorebView = (TextView) findViewById(R.id.pointsb_text_view);\n        scorebView.setText(String.valueOf(scoreb));\n    }\n\n\n    public void reset(View view) {\n        scorea = 0;\n        scoreb = 0;\n        displayTeamscorea(scorea);\n        displayTeamscoreb(scoreb);\n\n    }\n}\n\n```\n### 四、代码优化及 APP 美化 ###\n#### style.xml 的设置\n\n- 当每一个 View 都有着大量相同的元素，可以将这些元素定义在\n`res/value/styles.xml` 中。\n\n具体的写法如下：\n\n```xml\n<style name=\"cofe_textView\">\n        <item name=\"android:textColor\">#FFFFFF</item>\n        <item name=\"android:layout_width\">wrap_content</item>\n       ...\n\n    </style>\n```\n\n然后可以用`style=\"@style/cofe_textView\"`语句轻易地重复引用这些设置：\n\n例如：\n```xml\n<TextView\n              style=\"@style/textView\"\n              android:id=\"@+id/teamb_text_view\"\n              android:text=\"@string/team_b\" />\n\n```\n\n#### 整个 style.xml 代码如下 ####\n```xml\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n    </style>\n\n    <style name=\"textView\">\n        <item name=\"android:layout_width\">match_parent</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:fontFamily\">sans-serif-medium</item>\n        <item name=\"android:gravity\">center</item>\n        <item name=\"android:textColor\">#FFFEFE</item>\n        <item name=\"android:textSize\">24sp</item>\n    </style>\n\n    <style name=\"pointsTextView\">\n        <item name=\"android:layout_width\">match_parent</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:fontFamily\">sans-serif-medium</item>\n        <item name=\"android:layout_margin\">24dp</item>\n        <item name=\"android:gravity\">center</item>\n        <item name=\"android:textColor\">#2B2A2A</item>\n        <item name=\"android:textSize\">56sp</item>\n        <item name=\"android:background\">#FFFEFE</item>\n    </style>\n\n    <style name=\"addButtonView\">\n        <item name=\"android:layout_width\">match_parent</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:layout_marginBottom\">8dp</item>\n        <item name=\"android:layout_marginLeft\">24dp</item>\n        <item name=\"android:layout_marginRight\">24dp</item>\n        <item name=\"android:background\">#2B2A2A</item>\n        <item name=\"android:textColor\">#FFFEFE</item>\n    </style>\n\n    <style name=\"resetButtonView\">\n        <item name=\"android:layout_width\">wrap_content</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:layout_marginBottom\">32dp</item>\n        <item name=\"android:background\">#2B2A2A</item>\n        <item name=\"android:textColor\">#FFFEFE</item>\n        <item name=\"android:layout_centerHorizontal\">true</item>\n        <item name=\"android:layout_alignParentBottom\">true</item>\n    </style>\n\n</resources>\n\n```\n#### strings.xml ####\n- 在 Android 中会将应用中出现的文字放入 string.xml 中，这样一个字符可以重复调用，而不用每次去编写，可以减少数据的冗余，减小 APP 应用的体积。并且当你的 APP 国际化时只需更改 strings.xml 中的文字定义，就可以实现其他语言的显示。\n\nstrings.xml 中的字符定义如下：\n```xml\n<resources>\n    <string name=\"text_name\">显示的文字</string>\n    ...\n</resources>\n\n```\n调用时：\n```xml\nandroid:text=\"@string/text_name\"\n```\n#### 整个 strings.xml 代码如下 ####\n```xml\n<resources>\n    <string name=\"app_name\">Court Counter</string>\n    <string name=\"add2b\">+2 points</string>\n    <string name=\"add1b\">+1 pointsb</string>\n    <string name=\"team_a\">Team A</string>\n    <string name=\"add2a\">+2 points</string>\n    <string name=\"points_a\">0</string>\n    <string name=\"add3a\">+3 points</string>\n    <string name=\"add1a\">+1 points</string>\n    <string name=\"team_b\">Team B</string>\n    <string name=\"points_b\">0</string>\n    <string name=\"add3b\">+3 points</string>\n    <string name=\"reset_text_views\">reset</string>\n</resources>\n\n```\n### 五、APP 强制锁定横竖屏 ###\n\n- 在最开始做出 APP 时没有考虑到 APP 横屏的问题，偶然一次横屏之后发现 APP 显示不全了，当时也没多想，既然横屏不行，那就去掉横屏显示，锁定在竖屏。上网查了下资料，锁定横竖屏有两种实现方式：XML 或 Java 方式。这个 APP 采用了 XML 锁定方式。\n\n#### XML锁定横屏或竖屏\n\n- 在AndroidManifest.xml中配置,在Activity标签中加入android:screenOrientation=\"unspecified\"，来使某个Activity做横竖屏的变化。\n\n- 使用android:screenOrientation=\"unspecified\"来锁定横竖屏。\n\n  - unspecified：未指明屏幕方向。\n  - landscape：锁定为横屏。\n  - portrait：锁定为竖屏。\n\n  ##### 具体代码如下：\n\n  ```xml\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n      package=\"com.roojay.android.courtcounter\">\n\n      <application\n          android:allowBackup=\"true\"\n          android:icon=\"@mipmap/ic_launcher\"\n          android:label=\"@string/app_name\"\n          android:supportsRtl=\"true\"\n          android:theme=\"@style/AppTheme\" >\n          <activity android:name=\".MainActivity\"\n              android:screenOrientation=\"portrait\">\n              <intent-filter>\n                  <action android:name=\"android.intent.action.MAIN\" />\n\n                  <category android:name=\"android.intent.category.LAUNCHER\" />\n              </intent-filter>\n          </activity>\n      </application>\n\n  </manifest>\n  ```\n\n  #### Java代码锁定横竖屏\n\n  - 在onCreate()方法中加入锁定代码。\n\n  ##### 代码如下：\n\n  ```java\n  public class MainActivity extends AppCompatActivity {\n\n      @Override\n      protected void onCreate(Bundle savedInstanceState) {\n          super.onCreate(savedInstanceState);\n          setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//锁定为横屏\n        //setRequestedOrientation(ActivityInfo .SCREEN_ORIENTATION_PORTRAIT);//锁定为竖屏\n          setContentView(R.layout.activity_main);\n      }\n  ```\n\n### 六、APP 演示及源码 ###\n\n- APP 的最终效果图，没有进行多余的其他手机测试，也不知道其他手机显示效果是不是这样。\n\n![]()\n\n演示视频：\n[http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4](http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4 \"演示视频\")\n\n源码：\n[https://github.com/roojay520/CourtCounter](https://github.com/roojay520/CourtCounter \"源码\")\n","slug":"Android简易计分板实现","published":1,"updated":"2017-11-12T02:18:02.991Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xhs0002dfbx5xiqa7s3","content":"<h3 id=\"一、View的选择\"><a href=\"#一、View的选择\" class=\"headerlink\" title=\"一、View的选择\"></a>一、View的选择</h3><ul>\n<li>分析整个 APP 的组成：<ul>\n<li>TextView：  4 个</li>\n<li>Button： 7个</li>\n<li>空白 View：1个</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、Layout布局\"><a href=\"#二、Layout布局\" class=\"headerlink\" title=\"二、Layout布局\"></a>二、Layout布局</h3><ul>\n<li>采用 RelativeLayout 作为整体布局父容器。</li>\n<li>将其分为上下两个部分，下面部分只有一个 Button ，直接设置好其相对于父视图的位置参数以及自身属性即可。</li>\n<li>上面部分又可以横向分为三个部分：<ul>\n<li>1.TeamA 团队的加分 Button 及显示的 TextView；<ul>\n<li>对于 TeamA， 其中各组件纵向排列，可采用Vertical LinearLayout作为其视图容器。</li>\n</ul>\n</li>\n<li>2.空白 View 做中间隔离；</li>\n<li>3.TeamB 团队的加分 Button 及显示的 TextView 。<ul>\n<li>对于 TeamB，其设置等同于 TeamA 的设置。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>可以采用 Horizontal LinearLayout 作为其视图容器。</li>\n</ul>\n<h4 id=\"整体布局-active-main-xml-代码如下所示：\"><a href=\"#整体布局-active-main-xml-代码如下所示：\" class=\"headerlink\" title=\"整体布局 active_main.xml 代码如下所示：\"></a>整体布局 active_main.xml 代码如下所示：</h4><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:id=&quot;@+id/activity_main&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:background=&quot;#D2403E&quot;\n    android:padding=&quot;@dimen/activity_vertical_margin&quot;\n    tools:context=&quot;com.roojay.android.courtcounter.MainActivity&quot;&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_marginTop=&quot;18dp&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n\n        &lt;LinearLayout\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_weight=&quot;1&quot;\n            android:orientation=&quot;vertical&quot;&gt;\n\n            &lt;TextView\n                style=&quot;@style/textView&quot;\n                android:id=&quot;@+id/teama_text_view&quot;\n                android:text=&quot;@string/team_a&quot; /&gt;\n\n            &lt;TextView\n                android:id=&quot;@+id/pointsa_text_view&quot;\n                style=&quot;@style/pointsTextView&quot;\n                android:text=&quot;@string/points_a&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttona3&quot;\n                android:onClick=&quot;addThreeA&quot;\n                android:text=&quot;@string/add3a&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttona2&quot;\n                android:onClick=&quot;addTwoA&quot;\n                android:text=&quot;@string/add2a&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttona1&quot;\n                android:onClick=&quot;addOneA&quot;\n                android:text=&quot;@string/add1a&quot; /&gt;\n        &lt;/LinearLayout&gt;\n\n        &lt;View\n            android:layout_width=&quot;1dp&quot;\n            android:layout_height=&quot;match_parent&quot;\n            android:layout_marginTop=&quot;8dp&quot;\n            android:layout_marginBottom=&quot;8dp&quot;\n            android:background=&quot;#FFFEFE&quot; /&gt;\n\n\n        &lt;LinearLayout\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;match_parent&quot;\n            android:layout_weight=&quot;1&quot;\n            android:orientation=&quot;vertical&quot;&gt;\n\n            &lt;TextView\n                style=&quot;@style/textView&quot;\n                android:id=&quot;@+id/teamb_text_view&quot;\n                android:text=&quot;@string/team_b&quot; /&gt;\n\n            &lt;TextView\n                style=&quot;@style/pointsTextView&quot;\n                android:id=&quot;@+id/pointsb_text_view&quot;\n                android:text=&quot;@string/points_b&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttonb3&quot;\n                android:onClick=&quot;addThreeB&quot;\n                android:text=&quot;@string/add3b&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttonb2&quot;\n                android:onClick=&quot;addTwoB&quot;\n                android:text=&quot;@string/add2b&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttonb1&quot;\n                android:onClick=&quot;addOneB&quot;\n                android:text=&quot;@string/add1b&quot; /&gt;\n\n        &lt;/LinearLayout&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;Button\n        style=&quot;@style/resetButtonView&quot;\n        android:id=&quot;@+id/button_reset&quot;\n        android:onClick=&quot;reset&quot;\n        android:text=&quot;@string/reset_text_views&quot; /&gt;\n\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n<h3 id=\"三、交互\"><a href=\"#三、交互\" class=\"headerlink\" title=\"三、交互\"></a>三、交互</h3><ul>\n<li>通过 Button 的 android:onClick 属性指定方法。</li>\n<li>将各个 Button 与 Java 中的方法关联起来。</li>\n<li>具体操作是在 active_main.xml 中设置 android:onClick=”buttonName” 为每个 Button 设置一个独特的名字，这个名字用于 Java 代码寻找和识别每个不同的 Button 。</li>\n</ul>\n<p>例如：</p>\n<pre><code class=\"xml\">在 active_main.xml 中设置 Button3A 的 onClick 属性为 android:onClick=&quot;addThreeA&quot;\n</code></pre>\n<p>在 MainActivity.java 中编写代码：</p>\n<pre><code class=\"java\">    public void addThreeA(View view) {\n\n    //所需要执行的操作，假如是 A 团队加三分\n\n    }\n</code></pre>\n<p>那么当你按下 Button3A 就将 A 团队的分数加上三分。</p>\n<h4 id=\"整个-MainActivity-java-代码\"><a href=\"#整个-MainActivity-java-代码\" class=\"headerlink\" title=\"整个 MainActivity.java 代码\"></a>整个 MainActivity.java 代码</h4><pre><code class=\"java\">package com.roojay.android.courtcounter;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    int scorea = 0;\n    int scoreb = 0;\n\n\n    /**\n     * Add 3 points for the Team A.\n     */\n    public void addThreeA(View view) {\n        scorea = scorea + 3;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 2 points for the Team A.\n     */\n    public void addTwoA(View view) {\n        scorea = scorea + 2;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 1 point for the Team A.\n     */\n    public void addOneA(View view) {\n        scorea = scorea + 1;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Displays the given scorea for Team A.\n     */\n    public void displayTeamscorea(int scorea) {\n        TextView scoreaView = (TextView) findViewById(R.id.pointsa_text_view);\n        scoreaView.setText(String.valueOf(scorea));\n    }\n\n\n    /**\n     * Add 3 points for the Team B.\n     */\n    public void addThreeB(View view) {\n        scoreb = scoreb + 3;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 2 points for the Team B.\n     */\n    public void addTwoB(View view) {\n        scoreb = scoreb + 2;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 1 point for the Team B.\n     */\n    public void addOneB(View view) {\n        scoreb = scoreb + 1;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Displays the given scoreb for Team B.\n     */\n    public void displayTeamscoreb(int scoreb) {\n        TextView scorebView = (TextView) findViewById(R.id.pointsb_text_view);\n        scorebView.setText(String.valueOf(scoreb));\n    }\n\n\n    public void reset(View view) {\n        scorea = 0;\n        scoreb = 0;\n        displayTeamscorea(scorea);\n        displayTeamscoreb(scoreb);\n\n    }\n}\n</code></pre>\n<h3 id=\"四、代码优化及-APP-美化\"><a href=\"#四、代码优化及-APP-美化\" class=\"headerlink\" title=\"四、代码优化及 APP 美化\"></a>四、代码优化及 APP 美化</h3><h4 id=\"style-xml-的设置\"><a href=\"#style-xml-的设置\" class=\"headerlink\" title=\"style.xml 的设置\"></a>style.xml 的设置</h4><ul>\n<li>当每一个 View 都有着大量相同的元素，可以将这些元素定义在<br><code>res/value/styles.xml</code> 中。</li>\n</ul>\n<p>具体的写法如下：</p>\n<pre><code class=\"xml\">&lt;style name=&quot;cofe_textView&quot;&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;\n       ...\n\n    &lt;/style&gt;\n</code></pre>\n<p>然后可以用<code>style=&quot;@style/cofe_textView&quot;</code>语句轻易地重复引用这些设置：</p>\n<p>例如：</p>\n<pre><code class=\"xml\">&lt;TextView\n              style=&quot;@style/textView&quot;\n              android:id=&quot;@+id/teamb_text_view&quot;\n              android:text=&quot;@string/team_b&quot; /&gt;\n</code></pre>\n<h4 id=\"整个-style-xml-代码如下\"><a href=\"#整个-style-xml-代码如下\" class=\"headerlink\" title=\"整个 style.xml 代码如下\"></a>整个 style.xml 代码如下</h4><pre><code class=\"xml\">&lt;resources&gt;\n\n    &lt;!-- Base application theme. --&gt;\n    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;\n        &lt;!-- Customize your theme here. --&gt;\n        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;\n        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;\n        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;textView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;\n        &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;\n        &lt;item name=&quot;android:textSize&quot;&gt;24sp&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;pointsTextView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;\n        &lt;item name=&quot;android:layout_margin&quot;&gt;24dp&lt;/item&gt;\n        &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#2B2A2A&lt;/item&gt;\n        &lt;item name=&quot;android:textSize&quot;&gt;56sp&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#FFFEFE&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;addButtonView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;8dp&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginLeft&quot;&gt;24dp&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginRight&quot;&gt;24dp&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#2B2A2A&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;resetButtonView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;32dp&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#2B2A2A&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;\n        &lt;item name=&quot;android:layout_centerHorizontal&quot;&gt;true&lt;/item&gt;\n        &lt;item name=&quot;android:layout_alignParentBottom&quot;&gt;true&lt;/item&gt;\n    &lt;/style&gt;\n\n&lt;/resources&gt;\n</code></pre>\n<h4 id=\"strings-xml\"><a href=\"#strings-xml\" class=\"headerlink\" title=\"strings.xml\"></a>strings.xml</h4><ul>\n<li>在 Android 中会将应用中出现的文字放入 string.xml 中，这样一个字符可以重复调用，而不用每次去编写，可以减少数据的冗余，减小 APP 应用的体积。并且当你的 APP 国际化时只需更改 strings.xml 中的文字定义，就可以实现其他语言的显示。</li>\n</ul>\n<p>strings.xml 中的字符定义如下：</p>\n<pre><code class=\"xml\">&lt;resources&gt;\n    &lt;string name=&quot;text_name&quot;&gt;显示的文字&lt;/string&gt;\n    ...\n&lt;/resources&gt;\n</code></pre>\n<p>调用时：</p>\n<pre><code class=\"xml\">android:text=&quot;@string/text_name&quot;\n</code></pre>\n<h4 id=\"整个-strings-xml-代码如下\"><a href=\"#整个-strings-xml-代码如下\" class=\"headerlink\" title=\"整个 strings.xml 代码如下\"></a>整个 strings.xml 代码如下</h4><pre><code class=\"xml\">&lt;resources&gt;\n    &lt;string name=&quot;app_name&quot;&gt;Court Counter&lt;/string&gt;\n    &lt;string name=&quot;add2b&quot;&gt;+2 points&lt;/string&gt;\n    &lt;string name=&quot;add1b&quot;&gt;+1 pointsb&lt;/string&gt;\n    &lt;string name=&quot;team_a&quot;&gt;Team A&lt;/string&gt;\n    &lt;string name=&quot;add2a&quot;&gt;+2 points&lt;/string&gt;\n    &lt;string name=&quot;points_a&quot;&gt;0&lt;/string&gt;\n    &lt;string name=&quot;add3a&quot;&gt;+3 points&lt;/string&gt;\n    &lt;string name=&quot;add1a&quot;&gt;+1 points&lt;/string&gt;\n    &lt;string name=&quot;team_b&quot;&gt;Team B&lt;/string&gt;\n    &lt;string name=&quot;points_b&quot;&gt;0&lt;/string&gt;\n    &lt;string name=&quot;add3b&quot;&gt;+3 points&lt;/string&gt;\n    &lt;string name=&quot;reset_text_views&quot;&gt;reset&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>\n<h3 id=\"五、APP-强制锁定横竖屏\"><a href=\"#五、APP-强制锁定横竖屏\" class=\"headerlink\" title=\"五、APP 强制锁定横竖屏\"></a>五、APP 强制锁定横竖屏</h3><ul>\n<li>在最开始做出 APP 时没有考虑到 APP 横屏的问题，偶然一次横屏之后发现 APP 显示不全了，当时也没多想，既然横屏不行，那就去掉横屏显示，锁定在竖屏。上网查了下资料，锁定横竖屏有两种实现方式：XML 或 Java 方式。这个 APP 采用了 XML 锁定方式。</li>\n</ul>\n<h4 id=\"XML锁定横屏或竖屏\"><a href=\"#XML锁定横屏或竖屏\" class=\"headerlink\" title=\"XML锁定横屏或竖屏\"></a>XML锁定横屏或竖屏</h4><ul>\n<li><p>在AndroidManifest.xml中配置,在Activity标签中加入android:screenOrientation=”unspecified”，来使某个Activity做横竖屏的变化。</p>\n</li>\n<li><p>使用android:screenOrientation=”unspecified”来锁定横竖屏。</p>\n<ul>\n<li>unspecified：未指明屏幕方向。</li>\n<li>landscape：锁定为横屏。</li>\n<li>portrait：锁定为竖屏。</li>\n</ul>\n<h5 id=\"具体代码如下：\"><a href=\"#具体代码如下：\" class=\"headerlink\" title=\"具体代码如下：\"></a>具体代码如下：</h5><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    package=&quot;com.roojay.android.courtcounter&quot;&gt;\n\n    &lt;application\n        android:allowBackup=&quot;true&quot;\n        android:icon=&quot;@mipmap/ic_launcher&quot;\n        android:label=&quot;@string/app_name&quot;\n        android:supportsRtl=&quot;true&quot;\n        android:theme=&quot;@style/AppTheme&quot; &gt;\n        &lt;activity android:name=&quot;.MainActivity&quot;\n            android:screenOrientation=&quot;portrait&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre>\n<h4 id=\"Java代码锁定横竖屏\"><a href=\"#Java代码锁定横竖屏\" class=\"headerlink\" title=\"Java代码锁定横竖屏\"></a>Java代码锁定横竖屏</h4><ul>\n<li>在onCreate()方法中加入锁定代码。</li>\n</ul>\n<h5 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h5><pre><code class=\"java\">public class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//锁定为横屏\n      //setRequestedOrientation(ActivityInfo .SCREEN_ORIENTATION_PORTRAIT);//锁定为竖屏\n        setContentView(R.layout.activity_main);\n    }\n</code></pre>\n</li>\n</ul>\n<h3 id=\"六、APP-演示及源码\"><a href=\"#六、APP-演示及源码\" class=\"headerlink\" title=\"六、APP 演示及源码\"></a>六、APP 演示及源码</h3><ul>\n<li>APP 的最终效果图，没有进行多余的其他手机测试，也不知道其他手机显示效果是不是这样。</li>\n</ul>\n<p><img src=\"\" alt=\"\"></p>\n<p>演示视频：<br><a href=\"http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4\" title=\"演示视频\" target=\"_blank\" rel=\"external\">http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4</a></p>\n<p>源码：<br><a href=\"https://github.com/roojay520/CourtCounter\" title=\"源码\" target=\"_blank\" rel=\"external\">https://github.com/roojay520/CourtCounter</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、View的选择\"><a href=\"#一、View的选择\" class=\"headerlink\" title=\"一、View的选择\"></a>一、View的选择</h3><ul>\n<li>分析整个 APP 的组成：<ul>\n<li>TextView：  4 个</li>\n<li>Button： 7个</li>\n<li>空白 View：1个</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、Layout布局\"><a href=\"#二、Layout布局\" class=\"headerlink\" title=\"二、Layout布局\"></a>二、Layout布局</h3><ul>\n<li>采用 RelativeLayout 作为整体布局父容器。</li>\n<li>将其分为上下两个部分，下面部分只有一个 Button ，直接设置好其相对于父视图的位置参数以及自身属性即可。</li>\n<li>上面部分又可以横向分为三个部分：<ul>\n<li>1.TeamA 团队的加分 Button 及显示的 TextView；<ul>\n<li>对于 TeamA， 其中各组件纵向排列，可采用Vertical LinearLayout作为其视图容器。</li>\n</ul>\n</li>\n<li>2.空白 View 做中间隔离；</li>\n<li>3.TeamB 团队的加分 Button 及显示的 TextView 。<ul>\n<li>对于 TeamB，其设置等同于 TeamA 的设置。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>可以采用 Horizontal LinearLayout 作为其视图容器。</li>\n</ul>\n<h4 id=\"整体布局-active-main-xml-代码如下所示：\"><a href=\"#整体布局-active-main-xml-代码如下所示：\" class=\"headerlink\" title=\"整体布局 active_main.xml 代码如下所示：\"></a>整体布局 active_main.xml 代码如下所示：</h4><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:id=&quot;@+id/activity_main&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:background=&quot;#D2403E&quot;\n    android:padding=&quot;@dimen/activity_vertical_margin&quot;\n    tools:context=&quot;com.roojay.android.courtcounter.MainActivity&quot;&gt;\n\n    &lt;LinearLayout\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:layout_marginTop=&quot;18dp&quot;\n        android:orientation=&quot;horizontal&quot;&gt;\n\n        &lt;LinearLayout\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:layout_weight=&quot;1&quot;\n            android:orientation=&quot;vertical&quot;&gt;\n\n            &lt;TextView\n                style=&quot;@style/textView&quot;\n                android:id=&quot;@+id/teama_text_view&quot;\n                android:text=&quot;@string/team_a&quot; /&gt;\n\n            &lt;TextView\n                android:id=&quot;@+id/pointsa_text_view&quot;\n                style=&quot;@style/pointsTextView&quot;\n                android:text=&quot;@string/points_a&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttona3&quot;\n                android:onClick=&quot;addThreeA&quot;\n                android:text=&quot;@string/add3a&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttona2&quot;\n                android:onClick=&quot;addTwoA&quot;\n                android:text=&quot;@string/add2a&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttona1&quot;\n                android:onClick=&quot;addOneA&quot;\n                android:text=&quot;@string/add1a&quot; /&gt;\n        &lt;/LinearLayout&gt;\n\n        &lt;View\n            android:layout_width=&quot;1dp&quot;\n            android:layout_height=&quot;match_parent&quot;\n            android:layout_marginTop=&quot;8dp&quot;\n            android:layout_marginBottom=&quot;8dp&quot;\n            android:background=&quot;#FFFEFE&quot; /&gt;\n\n\n        &lt;LinearLayout\n            android:layout_width=&quot;0dp&quot;\n            android:layout_height=&quot;match_parent&quot;\n            android:layout_weight=&quot;1&quot;\n            android:orientation=&quot;vertical&quot;&gt;\n\n            &lt;TextView\n                style=&quot;@style/textView&quot;\n                android:id=&quot;@+id/teamb_text_view&quot;\n                android:text=&quot;@string/team_b&quot; /&gt;\n\n            &lt;TextView\n                style=&quot;@style/pointsTextView&quot;\n                android:id=&quot;@+id/pointsb_text_view&quot;\n                android:text=&quot;@string/points_b&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttonb3&quot;\n                android:onClick=&quot;addThreeB&quot;\n                android:text=&quot;@string/add3b&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttonb2&quot;\n                android:onClick=&quot;addTwoB&quot;\n                android:text=&quot;@string/add2b&quot; /&gt;\n\n            &lt;Button\n                style=&quot;@style/addButtonView&quot;\n                android:id=&quot;@+id/buttonb1&quot;\n                android:onClick=&quot;addOneB&quot;\n                android:text=&quot;@string/add1b&quot; /&gt;\n\n        &lt;/LinearLayout&gt;\n    &lt;/LinearLayout&gt;\n\n    &lt;Button\n        style=&quot;@style/resetButtonView&quot;\n        android:id=&quot;@+id/button_reset&quot;\n        android:onClick=&quot;reset&quot;\n        android:text=&quot;@string/reset_text_views&quot; /&gt;\n\n\n&lt;/RelativeLayout&gt;\n</code></pre>\n<h3 id=\"三、交互\"><a href=\"#三、交互\" class=\"headerlink\" title=\"三、交互\"></a>三、交互</h3><ul>\n<li>通过 Button 的 android:onClick 属性指定方法。</li>\n<li>将各个 Button 与 Java 中的方法关联起来。</li>\n<li>具体操作是在 active_main.xml 中设置 android:onClick=”buttonName” 为每个 Button 设置一个独特的名字，这个名字用于 Java 代码寻找和识别每个不同的 Button 。</li>\n</ul>\n<p>例如：</p>\n<pre><code class=\"xml\">在 active_main.xml 中设置 Button3A 的 onClick 属性为 android:onClick=&quot;addThreeA&quot;\n</code></pre>\n<p>在 MainActivity.java 中编写代码：</p>\n<pre><code class=\"java\">    public void addThreeA(View view) {\n\n    //所需要执行的操作，假如是 A 团队加三分\n\n    }\n</code></pre>\n<p>那么当你按下 Button3A 就将 A 团队的分数加上三分。</p>\n<h4 id=\"整个-MainActivity-java-代码\"><a href=\"#整个-MainActivity-java-代码\" class=\"headerlink\" title=\"整个 MainActivity.java 代码\"></a>整个 MainActivity.java 代码</h4><pre><code class=\"java\">package com.roojay.android.courtcounter;\n\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.TextView;\n\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    int scorea = 0;\n    int scoreb = 0;\n\n\n    /**\n     * Add 3 points for the Team A.\n     */\n    public void addThreeA(View view) {\n        scorea = scorea + 3;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 2 points for the Team A.\n     */\n    public void addTwoA(View view) {\n        scorea = scorea + 2;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Add 1 point for the Team A.\n     */\n    public void addOneA(View view) {\n        scorea = scorea + 1;\n        displayTeamscorea(scorea);\n    }\n\n    /**\n     * Displays the given scorea for Team A.\n     */\n    public void displayTeamscorea(int scorea) {\n        TextView scoreaView = (TextView) findViewById(R.id.pointsa_text_view);\n        scoreaView.setText(String.valueOf(scorea));\n    }\n\n\n    /**\n     * Add 3 points for the Team B.\n     */\n    public void addThreeB(View view) {\n        scoreb = scoreb + 3;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 2 points for the Team B.\n     */\n    public void addTwoB(View view) {\n        scoreb = scoreb + 2;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Add 1 point for the Team B.\n     */\n    public void addOneB(View view) {\n        scoreb = scoreb + 1;\n        displayTeamscoreb(scoreb);\n    }\n\n    /**\n     * Displays the given scoreb for Team B.\n     */\n    public void displayTeamscoreb(int scoreb) {\n        TextView scorebView = (TextView) findViewById(R.id.pointsb_text_view);\n        scorebView.setText(String.valueOf(scoreb));\n    }\n\n\n    public void reset(View view) {\n        scorea = 0;\n        scoreb = 0;\n        displayTeamscorea(scorea);\n        displayTeamscoreb(scoreb);\n\n    }\n}\n</code></pre>\n<h3 id=\"四、代码优化及-APP-美化\"><a href=\"#四、代码优化及-APP-美化\" class=\"headerlink\" title=\"四、代码优化及 APP 美化\"></a>四、代码优化及 APP 美化</h3><h4 id=\"style-xml-的设置\"><a href=\"#style-xml-的设置\" class=\"headerlink\" title=\"style.xml 的设置\"></a>style.xml 的设置</h4><ul>\n<li>当每一个 View 都有着大量相同的元素，可以将这些元素定义在<br><code>res/value/styles.xml</code> 中。</li>\n</ul>\n<p>具体的写法如下：</p>\n<pre><code class=\"xml\">&lt;style name=&quot;cofe_textView&quot;&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;\n       ...\n\n    &lt;/style&gt;\n</code></pre>\n<p>然后可以用<code>style=&quot;@style/cofe_textView&quot;</code>语句轻易地重复引用这些设置：</p>\n<p>例如：</p>\n<pre><code class=\"xml\">&lt;TextView\n              style=&quot;@style/textView&quot;\n              android:id=&quot;@+id/teamb_text_view&quot;\n              android:text=&quot;@string/team_b&quot; /&gt;\n</code></pre>\n<h4 id=\"整个-style-xml-代码如下\"><a href=\"#整个-style-xml-代码如下\" class=\"headerlink\" title=\"整个 style.xml 代码如下\"></a>整个 style.xml 代码如下</h4><pre><code class=\"xml\">&lt;resources&gt;\n\n    &lt;!-- Base application theme. --&gt;\n    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;\n        &lt;!-- Customize your theme here. --&gt;\n        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;\n        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;\n        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;textView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;\n        &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;\n        &lt;item name=&quot;android:textSize&quot;&gt;24sp&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;pointsTextView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;\n        &lt;item name=&quot;android:layout_margin&quot;&gt;24dp&lt;/item&gt;\n        &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#2B2A2A&lt;/item&gt;\n        &lt;item name=&quot;android:textSize&quot;&gt;56sp&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#FFFEFE&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;addButtonView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;8dp&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginLeft&quot;&gt;24dp&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginRight&quot;&gt;24dp&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#2B2A2A&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;\n    &lt;/style&gt;\n\n    &lt;style name=&quot;resetButtonView&quot;&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;32dp&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#2B2A2A&lt;/item&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;\n        &lt;item name=&quot;android:layout_centerHorizontal&quot;&gt;true&lt;/item&gt;\n        &lt;item name=&quot;android:layout_alignParentBottom&quot;&gt;true&lt;/item&gt;\n    &lt;/style&gt;\n\n&lt;/resources&gt;\n</code></pre>\n<h4 id=\"strings-xml\"><a href=\"#strings-xml\" class=\"headerlink\" title=\"strings.xml\"></a>strings.xml</h4><ul>\n<li>在 Android 中会将应用中出现的文字放入 string.xml 中，这样一个字符可以重复调用，而不用每次去编写，可以减少数据的冗余，减小 APP 应用的体积。并且当你的 APP 国际化时只需更改 strings.xml 中的文字定义，就可以实现其他语言的显示。</li>\n</ul>\n<p>strings.xml 中的字符定义如下：</p>\n<pre><code class=\"xml\">&lt;resources&gt;\n    &lt;string name=&quot;text_name&quot;&gt;显示的文字&lt;/string&gt;\n    ...\n&lt;/resources&gt;\n</code></pre>\n<p>调用时：</p>\n<pre><code class=\"xml\">android:text=&quot;@string/text_name&quot;\n</code></pre>\n<h4 id=\"整个-strings-xml-代码如下\"><a href=\"#整个-strings-xml-代码如下\" class=\"headerlink\" title=\"整个 strings.xml 代码如下\"></a>整个 strings.xml 代码如下</h4><pre><code class=\"xml\">&lt;resources&gt;\n    &lt;string name=&quot;app_name&quot;&gt;Court Counter&lt;/string&gt;\n    &lt;string name=&quot;add2b&quot;&gt;+2 points&lt;/string&gt;\n    &lt;string name=&quot;add1b&quot;&gt;+1 pointsb&lt;/string&gt;\n    &lt;string name=&quot;team_a&quot;&gt;Team A&lt;/string&gt;\n    &lt;string name=&quot;add2a&quot;&gt;+2 points&lt;/string&gt;\n    &lt;string name=&quot;points_a&quot;&gt;0&lt;/string&gt;\n    &lt;string name=&quot;add3a&quot;&gt;+3 points&lt;/string&gt;\n    &lt;string name=&quot;add1a&quot;&gt;+1 points&lt;/string&gt;\n    &lt;string name=&quot;team_b&quot;&gt;Team B&lt;/string&gt;\n    &lt;string name=&quot;points_b&quot;&gt;0&lt;/string&gt;\n    &lt;string name=&quot;add3b&quot;&gt;+3 points&lt;/string&gt;\n    &lt;string name=&quot;reset_text_views&quot;&gt;reset&lt;/string&gt;\n&lt;/resources&gt;\n</code></pre>\n<h3 id=\"五、APP-强制锁定横竖屏\"><a href=\"#五、APP-强制锁定横竖屏\" class=\"headerlink\" title=\"五、APP 强制锁定横竖屏\"></a>五、APP 强制锁定横竖屏</h3><ul>\n<li>在最开始做出 APP 时没有考虑到 APP 横屏的问题，偶然一次横屏之后发现 APP 显示不全了，当时也没多想，既然横屏不行，那就去掉横屏显示，锁定在竖屏。上网查了下资料，锁定横竖屏有两种实现方式：XML 或 Java 方式。这个 APP 采用了 XML 锁定方式。</li>\n</ul>\n<h4 id=\"XML锁定横屏或竖屏\"><a href=\"#XML锁定横屏或竖屏\" class=\"headerlink\" title=\"XML锁定横屏或竖屏\"></a>XML锁定横屏或竖屏</h4><ul>\n<li><p>在AndroidManifest.xml中配置,在Activity标签中加入android:screenOrientation=”unspecified”，来使某个Activity做横竖屏的变化。</p>\n</li>\n<li><p>使用android:screenOrientation=”unspecified”来锁定横竖屏。</p>\n<ul>\n<li>unspecified：未指明屏幕方向。</li>\n<li>landscape：锁定为横屏。</li>\n<li>portrait：锁定为竖屏。</li>\n</ul>\n<h5 id=\"具体代码如下：\"><a href=\"#具体代码如下：\" class=\"headerlink\" title=\"具体代码如下：\"></a>具体代码如下：</h5><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    package=&quot;com.roojay.android.courtcounter&quot;&gt;\n\n    &lt;application\n        android:allowBackup=&quot;true&quot;\n        android:icon=&quot;@mipmap/ic_launcher&quot;\n        android:label=&quot;@string/app_name&quot;\n        android:supportsRtl=&quot;true&quot;\n        android:theme=&quot;@style/AppTheme&quot; &gt;\n        &lt;activity android:name=&quot;.MainActivity&quot;\n            android:screenOrientation=&quot;portrait&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;\n</code></pre>\n<h4 id=\"Java代码锁定横竖屏\"><a href=\"#Java代码锁定横竖屏\" class=\"headerlink\" title=\"Java代码锁定横竖屏\"></a>Java代码锁定横竖屏</h4><ul>\n<li>在onCreate()方法中加入锁定代码。</li>\n</ul>\n<h5 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h5><pre><code class=\"java\">public class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//锁定为横屏\n      //setRequestedOrientation(ActivityInfo .SCREEN_ORIENTATION_PORTRAIT);//锁定为竖屏\n        setContentView(R.layout.activity_main);\n    }\n</code></pre>\n</li>\n</ul>\n<h3 id=\"六、APP-演示及源码\"><a href=\"#六、APP-演示及源码\" class=\"headerlink\" title=\"六、APP 演示及源码\"></a>六、APP 演示及源码</h3><ul>\n<li>APP 的最终效果图，没有进行多余的其他手机测试，也不知道其他手机显示效果是不是这样。</li>\n</ul>\n<p><img src=\"\" alt=\"\"></p>\n<p>演示视频：<br><a href=\"http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4\" title=\"演示视频\" target=\"_blank\" rel=\"external\">http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4</a></p>\n<p>源码：<br><a href=\"https://github.com/roojay520/CourtCounter\" title=\"源码\" target=\"_blank\" rel=\"external\">https://github.com/roojay520/CourtCounter</a></p>\n"},{"title":"CodeTest","abbrlink":"24709d34","date":"2017-03-07T18:16:47.000Z","_content":"\n```java\npublic class CodeTest{\n  public static void main(String args[]){\n    system.out.println(\"Hello Hexo!\")\n  }\n}\n```\n\n","source":"_posts/CodeTest.md","raw":"---\ntitle: CodeTest\ntags: Test\nabbrlink: 24709d34\ndate: 2017-03-08 02:16:47\n---\n\n```java\npublic class CodeTest{\n  public static void main(String args[]){\n    system.out.println(\"Hello Hexo!\")\n  }\n}\n```\n\n","slug":"CodeTest","published":1,"updated":"2017-11-10T09:51:40.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xhx0006dfbxotcq3shm","content":"<pre><code class=\"java\">public class CodeTest{\n  public static void main(String args[]){\n    system.out.println(&quot;Hello Hexo!&quot;)\n  }\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code class=\"java\">public class CodeTest{\n  public static void main(String args[]){\n    system.out.println(&quot;Hello Hexo!&quot;)\n  }\n}\n</code></pre>\n"},{"title":"Flex布局","abbrlink":"ab688311","data":"2017/9/16","_content":"# Flex 布局\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)\n* Flex 是 Flexible Box 的缩写，意为“弹性布局”，为盒模型提供灵活的布局方式。\n* 盒子中的子元素可以在各个方向上进行布局，并且能以弹性尺寸来适应显示空间。\n* 弹性容器的每个子元素都称为弹性项目。弹性容器直接包含的文本将被包覆成匿名弹性单元。\n* 元素的显示顺序可以与它们在源代码中的顺序无关。\n\n\n## 基础\n\n* flex 布局包括一个水平 main axis 和一个垂直 cross axis\n\n![](https://mdn.mozillademos.org/files/12998/flexbox.png)\n\n* 通过设置 display 的值启用 flex\n* 设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。\n\n```css\n\t.box-flex{\n\t\tdisplay： -ms-flex；\n\t    display: -webkit-flex;\n\t    display: flex;\n\t}\n\t.box-inline-flex{\n\t\tdisplay: -ms-inline-flex;\n\t    display: -webkit-inline-flex;\n\t\tdisplay: inline-flex;\n\t}\n```\n\n## flex 属性\n\n* flex-direction：确立主轴。\n* justify-content：定义了在当前行上，弹性项目沿主轴如何排布。\n* align-items：定义了在当前行上，弹性项目沿侧轴默认如何排布。\n* align-self：定义了单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 align-items 所确立的默认值。\n\n### flex-direction（主轴方向）\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png)\n> flex-direction 决定主轴方向（项目排列方向），包括四个值。\n* row（默认值）：主轴为水平方向，起点在左端。\n* row-reverse：主轴为水平方向，起点在右端。\n* column：主轴为垂直方向，起点在上沿。\n* column-reverse：主轴为垂直方向，起点在下沿。\n\n### flex-wrap（换行控制）\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png)\n> 控制一条轴上放不下子项目该如何换行。\n\n* nowrap（默认值）：不换行\n* wrap：换行，第一行在上。\n* wrap-reverse：换行，第一行在下。\n\n### justify-content（主轴排列方式）\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n* flex-start：从行首起始位置开始排列。\n* flex-end：从行尾位置开始排列。\n* center：居中排列。\n* space-between：均匀排列每个元素\n首个元素放置于起点，末尾元素放置于终点。\n* space-around：均匀排列每个元素\n每个元素周围分配相同的空间。\n\n### align-items(侧轴排列方式)\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n* flex-start：元素向侧轴起点对齐。\n* flex-end：元素向侧轴终点对齐。\n* center：元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。\n* baseline: 项目的第一行文字的基线对齐。\n* stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n### align-conten（多轴线对齐方式）\n\n> align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png)\n* flex-start：所有行从垂直轴起点开始填充。第一行的垂直轴起点边和容器的垂直轴起点边对齐。接下来的每一行紧跟前一行。\n* flex-end：所有行从垂直轴末尾开始填充。最后一行的垂直轴终点和容器的垂直轴终点对齐。同时所有后续行与前一个对齐。\n* center：所有行朝向容器的中心填充。每行互相紧挨，相对于容器居中对齐。容器的垂直轴起点边和第一行的距离相等于容器的垂直轴终点边和最后一行的距离。\n* space-between：所有行在容器中平均分布。相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的边对齐。\n* space-around：所有行在容器中平均分布，相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的距离是相邻两行间距的一半。\n* stretch：拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行。\n\n## 子项目属性\n\n* order：定义项目的排列顺序。数值越小，排列越靠前，默认为 0。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png)\n* flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png)\n* flex-shrink：定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。属性为 0，项目不缩小，负值对该属性无效。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg)\n* flex-basis：定义项目在主轴所占据的基本空间，默认值 auto，即项目本来的大小。\n* flex：是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n* align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png)","source":"_posts/Flex布局.md","raw":"---\ntitle: Flex布局\ntags: CSS\ncategories: CSS\nabbrlink: ab688311\ndata: 2017/9/16\n---\n# Flex 布局\n[MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes)\n* Flex 是 Flexible Box 的缩写，意为“弹性布局”，为盒模型提供灵活的布局方式。\n* 盒子中的子元素可以在各个方向上进行布局，并且能以弹性尺寸来适应显示空间。\n* 弹性容器的每个子元素都称为弹性项目。弹性容器直接包含的文本将被包覆成匿名弹性单元。\n* 元素的显示顺序可以与它们在源代码中的顺序无关。\n\n\n## 基础\n\n* flex 布局包括一个水平 main axis 和一个垂直 cross axis\n\n![](https://mdn.mozillademos.org/files/12998/flexbox.png)\n\n* 通过设置 display 的值启用 flex\n* 设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。\n\n```css\n\t.box-flex{\n\t\tdisplay： -ms-flex；\n\t    display: -webkit-flex;\n\t    display: flex;\n\t}\n\t.box-inline-flex{\n\t\tdisplay: -ms-inline-flex;\n\t    display: -webkit-inline-flex;\n\t\tdisplay: inline-flex;\n\t}\n```\n\n## flex 属性\n\n* flex-direction：确立主轴。\n* justify-content：定义了在当前行上，弹性项目沿主轴如何排布。\n* align-items：定义了在当前行上，弹性项目沿侧轴默认如何排布。\n* align-self：定义了单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 align-items 所确立的默认值。\n\n### flex-direction（主轴方向）\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png)\n> flex-direction 决定主轴方向（项目排列方向），包括四个值。\n* row（默认值）：主轴为水平方向，起点在左端。\n* row-reverse：主轴为水平方向，起点在右端。\n* column：主轴为垂直方向，起点在上沿。\n* column-reverse：主轴为垂直方向，起点在下沿。\n\n### flex-wrap（换行控制）\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png)\n> 控制一条轴上放不下子项目该如何换行。\n\n* nowrap（默认值）：不换行\n* wrap：换行，第一行在上。\n* wrap-reverse：换行，第一行在下。\n\n### justify-content（主轴排列方式）\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n* flex-start：从行首起始位置开始排列。\n* flex-end：从行尾位置开始排列。\n* center：居中排列。\n* space-between：均匀排列每个元素\n首个元素放置于起点，末尾元素放置于终点。\n* space-around：均匀排列每个元素\n每个元素周围分配相同的空间。\n\n### align-items(侧轴排列方式)\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n* flex-start：元素向侧轴起点对齐。\n* flex-end：元素向侧轴终点对齐。\n* center：元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。\n* baseline: 项目的第一行文字的基线对齐。\n* stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n### align-conten（多轴线对齐方式）\n\n> align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png)\n* flex-start：所有行从垂直轴起点开始填充。第一行的垂直轴起点边和容器的垂直轴起点边对齐。接下来的每一行紧跟前一行。\n* flex-end：所有行从垂直轴末尾开始填充。最后一行的垂直轴终点和容器的垂直轴终点对齐。同时所有后续行与前一个对齐。\n* center：所有行朝向容器的中心填充。每行互相紧挨，相对于容器居中对齐。容器的垂直轴起点边和第一行的距离相等于容器的垂直轴终点边和最后一行的距离。\n* space-between：所有行在容器中平均分布。相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的边对齐。\n* space-around：所有行在容器中平均分布，相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的距离是相邻两行间距的一半。\n* stretch：拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行。\n\n## 子项目属性\n\n* order：定义项目的排列顺序。数值越小，排列越靠前，默认为 0。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png)\n* flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png)\n* flex-shrink：定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。属性为 0，项目不缩小，负值对该属性无效。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg)\n* flex-basis：定义项目在主轴所占据的基本空间，默认值 auto，即项目本来的大小。\n* flex：是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n* align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png)","slug":"Flex布局","published":1,"date":"2017-11-12T02:19:36.038Z","updated":"2017-11-12T02:19:36.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xhz0007dfbxryxmi9xf","content":"<h1 id=\"Flex-布局\"><a href=\"#Flex-布局\" class=\"headerlink\" title=\"Flex 布局\"></a>Flex 布局</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\" target=\"_blank\" rel=\"external\">MDN</a></p>\n<ul>\n<li>Flex 是 Flexible Box 的缩写，意为“弹性布局”，为盒模型提供灵活的布局方式。</li>\n<li>盒子中的子元素可以在各个方向上进行布局，并且能以弹性尺寸来适应显示空间。</li>\n<li>弹性容器的每个子元素都称为弹性项目。弹性容器直接包含的文本将被包覆成匿名弹性单元。</li>\n<li>元素的显示顺序可以与它们在源代码中的顺序无关。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li>flex 布局包括一个水平 main axis 和一个垂直 cross axis</li>\n</ul>\n<p><img src=\"https://mdn.mozillademos.org/files/12998/flexbox.png\" alt=\"\"></p>\n<ul>\n<li>通过设置 display 的值启用 flex</li>\n<li>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</li>\n</ul>\n<pre><code class=\"css\">    .box-flex{\n        display： -ms-flex；\n        display: -webkit-flex;\n        display: flex;\n    }\n    .box-inline-flex{\n        display: -ms-inline-flex;\n        display: -webkit-inline-flex;\n        display: inline-flex;\n    }\n</code></pre>\n<h2 id=\"flex-属性\"><a href=\"#flex-属性\" class=\"headerlink\" title=\"flex 属性\"></a>flex 属性</h2><ul>\n<li>flex-direction：确立主轴。</li>\n<li>justify-content：定义了在当前行上，弹性项目沿主轴如何排布。</li>\n<li>align-items：定义了在当前行上，弹性项目沿侧轴默认如何排布。</li>\n<li>align-self：定义了单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 align-items 所确立的默认值。</li>\n</ul>\n<h3 id=\"flex-direction（主轴方向）\"><a href=\"#flex-direction（主轴方向）\" class=\"headerlink\" title=\"flex-direction（主轴方向）\"></a>flex-direction（主轴方向）</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"\"></p>\n<blockquote>\n<p>flex-direction 决定主轴方向（项目排列方向），包括四个值。</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n</blockquote>\n<h3 id=\"flex-wrap（换行控制）\"><a href=\"#flex-wrap（换行控制）\" class=\"headerlink\" title=\"flex-wrap（换行控制）\"></a>flex-wrap（换行控制）</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png\" alt=\"\"></p>\n<blockquote>\n<p>控制一条轴上放不下子项目该如何换行。</p>\n</blockquote>\n<ul>\n<li>nowrap（默认值）：不换行</li>\n<li>wrap：换行，第一行在上。</li>\n<li>wrap-reverse：换行，第一行在下。</li>\n</ul>\n<h3 id=\"justify-content（主轴排列方式）\"><a href=\"#justify-content（主轴排列方式）\" class=\"headerlink\" title=\"justify-content（主轴排列方式）\"></a>justify-content（主轴排列方式）</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<ul>\n<li>flex-start：从行首起始位置开始排列。</li>\n<li>flex-end：从行尾位置开始排列。</li>\n<li>center：居中排列。</li>\n<li>space-between：均匀排列每个元素<br>首个元素放置于起点，末尾元素放置于终点。</li>\n<li>space-around：均匀排列每个元素<br>每个元素周围分配相同的空间。</li>\n</ul>\n<h3 id=\"align-items-侧轴排列方式\"><a href=\"#align-items-侧轴排列方式\" class=\"headerlink\" title=\"align-items(侧轴排列方式)\"></a>align-items(侧轴排列方式)</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<ul>\n<li>flex-start：元素向侧轴起点对齐。</li>\n<li>flex-end：元素向侧轴终点对齐。</li>\n<li>center：元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<h3 id=\"align-conten（多轴线对齐方式）\"><a href=\"#align-conten（多轴线对齐方式）\" class=\"headerlink\" title=\"align-conten（多轴线对齐方式）\"></a>align-conten（多轴线对齐方式）</h3><blockquote>\n<p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"\"></p>\n<ul>\n<li>flex-start：所有行从垂直轴起点开始填充。第一行的垂直轴起点边和容器的垂直轴起点边对齐。接下来的每一行紧跟前一行。</li>\n<li>flex-end：所有行从垂直轴末尾开始填充。最后一行的垂直轴终点和容器的垂直轴终点对齐。同时所有后续行与前一个对齐。</li>\n<li>center：所有行朝向容器的中心填充。每行互相紧挨，相对于容器居中对齐。容器的垂直轴起点边和第一行的距离相等于容器的垂直轴终点边和最后一行的距离。</li>\n<li>space-between：所有行在容器中平均分布。相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的边对齐。</li>\n<li>space-around：所有行在容器中平均分布，相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的距离是相邻两行间距的一半。</li>\n<li>stretch：拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行。</li>\n</ul>\n<h2 id=\"子项目属性\"><a href=\"#子项目属性\" class=\"headerlink\" title=\"子项目属性\"></a>子项目属性</h2><ul>\n<li>order：定义项目的排列顺序。数值越小，排列越靠前，默认为 0。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png\" alt=\"\"></li>\n<li>flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png\" alt=\"\"></li>\n<li>flex-shrink：定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。属性为 0，项目不缩小，负值对该属性无效。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg\" alt=\"\"></li>\n<li>flex-basis：定义项目在主轴所占据的基本空间，默认值 auto，即项目本来的大小。</li>\n<li>flex：是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</li>\n<li>align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png\" alt=\"\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Flex-布局\"><a href=\"#Flex-布局\" class=\"headerlink\" title=\"Flex 布局\"></a>Flex 布局</h1><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes\" target=\"_blank\" rel=\"external\">MDN</a></p>\n<ul>\n<li>Flex 是 Flexible Box 的缩写，意为“弹性布局”，为盒模型提供灵活的布局方式。</li>\n<li>盒子中的子元素可以在各个方向上进行布局，并且能以弹性尺寸来适应显示空间。</li>\n<li>弹性容器的每个子元素都称为弹性项目。弹性容器直接包含的文本将被包覆成匿名弹性单元。</li>\n<li>元素的显示顺序可以与它们在源代码中的顺序无关。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><ul>\n<li>flex 布局包括一个水平 main axis 和一个垂直 cross axis</li>\n</ul>\n<p><img src=\"https://mdn.mozillademos.org/files/12998/flexbox.png\" alt=\"\"></p>\n<ul>\n<li>通过设置 display 的值启用 flex</li>\n<li>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</li>\n</ul>\n<pre><code class=\"css\">    .box-flex{\n        display： -ms-flex；\n        display: -webkit-flex;\n        display: flex;\n    }\n    .box-inline-flex{\n        display: -ms-inline-flex;\n        display: -webkit-inline-flex;\n        display: inline-flex;\n    }\n</code></pre>\n<h2 id=\"flex-属性\"><a href=\"#flex-属性\" class=\"headerlink\" title=\"flex 属性\"></a>flex 属性</h2><ul>\n<li>flex-direction：确立主轴。</li>\n<li>justify-content：定义了在当前行上，弹性项目沿主轴如何排布。</li>\n<li>align-items：定义了在当前行上，弹性项目沿侧轴默认如何排布。</li>\n<li>align-self：定义了单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 align-items 所确立的默认值。</li>\n</ul>\n<h3 id=\"flex-direction（主轴方向）\"><a href=\"#flex-direction（主轴方向）\" class=\"headerlink\" title=\"flex-direction（主轴方向）\"></a>flex-direction（主轴方向）</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"\"></p>\n<blockquote>\n<p>flex-direction 决定主轴方向（项目排列方向），包括四个值。</p>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n</blockquote>\n<h3 id=\"flex-wrap（换行控制）\"><a href=\"#flex-wrap（换行控制）\" class=\"headerlink\" title=\"flex-wrap（换行控制）\"></a>flex-wrap（换行控制）</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png\" alt=\"\"></p>\n<blockquote>\n<p>控制一条轴上放不下子项目该如何换行。</p>\n</blockquote>\n<ul>\n<li>nowrap（默认值）：不换行</li>\n<li>wrap：换行，第一行在上。</li>\n<li>wrap-reverse：换行，第一行在下。</li>\n</ul>\n<h3 id=\"justify-content（主轴排列方式）\"><a href=\"#justify-content（主轴排列方式）\" class=\"headerlink\" title=\"justify-content（主轴排列方式）\"></a>justify-content（主轴排列方式）</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<ul>\n<li>flex-start：从行首起始位置开始排列。</li>\n<li>flex-end：从行尾位置开始排列。</li>\n<li>center：居中排列。</li>\n<li>space-between：均匀排列每个元素<br>首个元素放置于起点，末尾元素放置于终点。</li>\n<li>space-around：均匀排列每个元素<br>每个元素周围分配相同的空间。</li>\n</ul>\n<h3 id=\"align-items-侧轴排列方式\"><a href=\"#align-items-侧轴排列方式\" class=\"headerlink\" title=\"align-items(侧轴排列方式)\"></a>align-items(侧轴排列方式)</h3><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<ul>\n<li>flex-start：元素向侧轴起点对齐。</li>\n<li>flex-end：元素向侧轴终点对齐。</li>\n<li>center：元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<h3 id=\"align-conten（多轴线对齐方式）\"><a href=\"#align-conten（多轴线对齐方式）\" class=\"headerlink\" title=\"align-conten（多轴线对齐方式）\"></a>align-conten（多轴线对齐方式）</h3><blockquote>\n<p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"\"></p>\n<ul>\n<li>flex-start：所有行从垂直轴起点开始填充。第一行的垂直轴起点边和容器的垂直轴起点边对齐。接下来的每一行紧跟前一行。</li>\n<li>flex-end：所有行从垂直轴末尾开始填充。最后一行的垂直轴终点和容器的垂直轴终点对齐。同时所有后续行与前一个对齐。</li>\n<li>center：所有行朝向容器的中心填充。每行互相紧挨，相对于容器居中对齐。容器的垂直轴起点边和第一行的距离相等于容器的垂直轴终点边和最后一行的距离。</li>\n<li>space-between：所有行在容器中平均分布。相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的边对齐。</li>\n<li>space-around：所有行在容器中平均分布，相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的距离是相邻两行间距的一半。</li>\n<li>stretch：拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行。</li>\n</ul>\n<h2 id=\"子项目属性\"><a href=\"#子项目属性\" class=\"headerlink\" title=\"子项目属性\"></a>子项目属性</h2><ul>\n<li>order：定义项目的排列顺序。数值越小，排列越靠前，默认为 0。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png\" alt=\"\"></li>\n<li>flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png\" alt=\"\"></li>\n<li>flex-shrink：定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。属性为 0，项目不缩小，负值对该属性无效。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg\" alt=\"\"></li>\n<li>flex-basis：定义项目在主轴所占据的基本空间，默认值 auto，即项目本来的大小。</li>\n<li>flex：是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</li>\n<li>align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png\" alt=\"\"></li>\n</ul>\n"},{"title":"Gradle基础","abbrlink":"691946d1","date":"2017-06-17T04:38:36.000Z","_content":"\n## Roay/app/build.gradle\n\n* 这个文件是app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件。\n\n  ​\n\n### 文件内容如下：\n\n```java\n// 声明是Android程序\napply plugin: 'com.android.application'\n\nandroid {\n    // 编译SDK的版本\n    compileSdkVersion 21\n    // build tools的版本\n    buildToolsVersion \"21.1.1\"\n\n    defaultConfig {\n    \t// 应用的包名\n        applicationId \"ly.roay\"\n        minSdkVersion 14\n        targetSdkVersion 21\n        versionCode 1\n        versionName \"1.0.0\"\n    }\n\n    // java版本\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    buildTypes {\n        debug {\n            // debug模式\n        }\n\n        release {\n            // 是否进行混淆\n            minifyEnabled false\n            // 混淆文件的位置\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'\n        }\n    }\n\n    // 移除lint检查的error\n    lintOptions {\n      abortOnError false\n    }\n}\n\ndependencies {\n    // 编译libs目录下的所有jar包\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:support-v4:21.0.2'\n    compile 'com.etsy.android.grid:library:1.0.5'\n    compile 'com.alexvasilkov:foldable-layout:1.0.1'\n    // 编译extras目录下的ShimmerAndroid模块\n    compile project(':extras:ShimmerAndroid')\n}\n```\n\n## Roay/build.gradle\n\n* 这个文件是整个项目的gradle基础配置文。\n\n* 内容主要包含了两个方面：一个是声明仓库的源，这里可以看到是指明的jcenter(), 之前版本则是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，android studio 1.0正式版必须要求支持gradle plugin 1.0的版本。\n\n  ### 文件内容如下：\n\n  ```java\n  // Top-level build file where you can add configuration options common to all sub-projects/modules.\n\n  buildscript {// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\n  buildscript {\n      repositories {\n          jcenter()\n      }\n      dependencies {\n          classpath 'com.android.tools.build:gradle:1.0.0'\n      }\n  }\n\n  allprojects {\n      repositories {\n          jcenter()\n      }\n  }\n      repositories {\n          jcenter()\n      }\n      dependencies {\n          classpath 'com.android.tools.build:gradle:2.2.0'\n\n          // NOTE: Do not place your application dependencies here; they belong\n          // in the individual module build.gradle files\n      }\n  }\n\n  allprojects {\n      repositories {\n          jcenter()\n      }\n  }\n\n  task clean(type: Delete) {\n      delete rootProject.buildDir\n  }\n  ```\n\n  ​\n\n  ​","source":"_posts/Gradle基础.md","raw":"---\ntitle: Gradle基础\ntags: Gradle\nabbrlink: 691946d1\ncategories: Android\ndate: 2017-06-17 12:38:36\n---\n\n## Roay/app/build.gradle\n\n* 这个文件是app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件。\n\n  ​\n\n### 文件内容如下：\n\n```java\n// 声明是Android程序\napply plugin: 'com.android.application'\n\nandroid {\n    // 编译SDK的版本\n    compileSdkVersion 21\n    // build tools的版本\n    buildToolsVersion \"21.1.1\"\n\n    defaultConfig {\n    \t// 应用的包名\n        applicationId \"ly.roay\"\n        minSdkVersion 14\n        targetSdkVersion 21\n        versionCode 1\n        versionName \"1.0.0\"\n    }\n\n    // java版本\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    buildTypes {\n        debug {\n            // debug模式\n        }\n\n        release {\n            // 是否进行混淆\n            minifyEnabled false\n            // 混淆文件的位置\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'\n        }\n    }\n\n    // 移除lint检查的error\n    lintOptions {\n      abortOnError false\n    }\n}\n\ndependencies {\n    // 编译libs目录下的所有jar包\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    compile 'com.android.support:support-v4:21.0.2'\n    compile 'com.etsy.android.grid:library:1.0.5'\n    compile 'com.alexvasilkov:foldable-layout:1.0.1'\n    // 编译extras目录下的ShimmerAndroid模块\n    compile project(':extras:ShimmerAndroid')\n}\n```\n\n## Roay/build.gradle\n\n* 这个文件是整个项目的gradle基础配置文。\n\n* 内容主要包含了两个方面：一个是声明仓库的源，这里可以看到是指明的jcenter(), 之前版本则是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，android studio 1.0正式版必须要求支持gradle plugin 1.0的版本。\n\n  ### 文件内容如下：\n\n  ```java\n  // Top-level build file where you can add configuration options common to all sub-projects/modules.\n\n  buildscript {// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\n  buildscript {\n      repositories {\n          jcenter()\n      }\n      dependencies {\n          classpath 'com.android.tools.build:gradle:1.0.0'\n      }\n  }\n\n  allprojects {\n      repositories {\n          jcenter()\n      }\n  }\n      repositories {\n          jcenter()\n      }\n      dependencies {\n          classpath 'com.android.tools.build:gradle:2.2.0'\n\n          // NOTE: Do not place your application dependencies here; they belong\n          // in the individual module build.gradle files\n      }\n  }\n\n  allprojects {\n      repositories {\n          jcenter()\n      }\n  }\n\n  task clean(type: Delete) {\n      delete rootProject.buildDir\n  }\n  ```\n\n  ​\n\n  ​","slug":"Gradle基础","published":1,"updated":"2017-11-12T02:21:33.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xi10008dfbxawhi0xhp","content":"<h2 id=\"Roay-app-build-gradle\"><a href=\"#Roay-app-build-gradle\" class=\"headerlink\" title=\"Roay/app/build.gradle\"></a>Roay/app/build.gradle</h2><ul>\n<li><p>这个文件是app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件。</p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"文件内容如下：\"><a href=\"#文件内容如下：\" class=\"headerlink\" title=\"文件内容如下：\"></a>文件内容如下：</h3><pre><code class=\"java\">// 声明是Android程序\napply plugin: &#39;com.android.application&#39;\n\nandroid {\n    // 编译SDK的版本\n    compileSdkVersion 21\n    // build tools的版本\n    buildToolsVersion &quot;21.1.1&quot;\n\n    defaultConfig {\n        // 应用的包名\n        applicationId &quot;ly.roay&quot;\n        minSdkVersion 14\n        targetSdkVersion 21\n        versionCode 1\n        versionName &quot;1.0.0&quot;\n    }\n\n    // java版本\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    buildTypes {\n        debug {\n            // debug模式\n        }\n\n        release {\n            // 是否进行混淆\n            minifyEnabled false\n            // 混淆文件的位置\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.txt&#39;\n        }\n    }\n\n    // 移除lint检查的error\n    lintOptions {\n      abortOnError false\n    }\n}\n\ndependencies {\n    // 编译libs目录下的所有jar包\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    compile &#39;com.android.support:support-v4:21.0.2&#39;\n    compile &#39;com.etsy.android.grid:library:1.0.5&#39;\n    compile &#39;com.alexvasilkov:foldable-layout:1.0.1&#39;\n    // 编译extras目录下的ShimmerAndroid模块\n    compile project(&#39;:extras:ShimmerAndroid&#39;)\n}\n</code></pre>\n<h2 id=\"Roay-build-gradle\"><a href=\"#Roay-build-gradle\" class=\"headerlink\" title=\"Roay/build.gradle\"></a>Roay/build.gradle</h2><ul>\n<li><p>这个文件是整个项目的gradle基础配置文。</p>\n</li>\n<li><p>内容主要包含了两个方面：一个是声明仓库的源，这里可以看到是指明的jcenter(), 之前版本则是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，android studio 1.0正式版必须要求支持gradle plugin 1.0的版本。</p>\n<h3 id=\"文件内容如下：-1\"><a href=\"#文件内容如下：-1\" class=\"headerlink\" title=\"文件内容如下：\"></a>文件内容如下：</h3><pre><code class=\"java\">// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath &#39;com.android.tools.build:gradle:1.0.0&#39;\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath &#39;com.android.tools.build:gradle:2.2.0&#39;\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n</code></pre>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Roay-app-build-gradle\"><a href=\"#Roay-app-build-gradle\" class=\"headerlink\" title=\"Roay/app/build.gradle\"></a>Roay/app/build.gradle</h2><ul>\n<li><p>这个文件是app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件。</p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"文件内容如下：\"><a href=\"#文件内容如下：\" class=\"headerlink\" title=\"文件内容如下：\"></a>文件内容如下：</h3><pre><code class=\"java\">// 声明是Android程序\napply plugin: &#39;com.android.application&#39;\n\nandroid {\n    // 编译SDK的版本\n    compileSdkVersion 21\n    // build tools的版本\n    buildToolsVersion &quot;21.1.1&quot;\n\n    defaultConfig {\n        // 应用的包名\n        applicationId &quot;ly.roay&quot;\n        minSdkVersion 14\n        targetSdkVersion 21\n        versionCode 1\n        versionName &quot;1.0.0&quot;\n    }\n\n    // java版本\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    buildTypes {\n        debug {\n            // debug模式\n        }\n\n        release {\n            // 是否进行混淆\n            minifyEnabled false\n            // 混淆文件的位置\n            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.txt&#39;\n        }\n    }\n\n    // 移除lint检查的error\n    lintOptions {\n      abortOnError false\n    }\n}\n\ndependencies {\n    // 编译libs目录下的所有jar包\n    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n    compile &#39;com.android.support:support-v4:21.0.2&#39;\n    compile &#39;com.etsy.android.grid:library:1.0.5&#39;\n    compile &#39;com.alexvasilkov:foldable-layout:1.0.1&#39;\n    // 编译extras目录下的ShimmerAndroid模块\n    compile project(&#39;:extras:ShimmerAndroid&#39;)\n}\n</code></pre>\n<h2 id=\"Roay-build-gradle\"><a href=\"#Roay-build-gradle\" class=\"headerlink\" title=\"Roay/build.gradle\"></a>Roay/build.gradle</h2><ul>\n<li><p>这个文件是整个项目的gradle基础配置文。</p>\n</li>\n<li><p>内容主要包含了两个方面：一个是声明仓库的源，这里可以看到是指明的jcenter(), 之前版本则是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，android studio 1.0正式版必须要求支持gradle plugin 1.0的版本。</p>\n<h3 id=\"文件内容如下：-1\"><a href=\"#文件内容如下：-1\" class=\"headerlink\" title=\"文件内容如下：\"></a>文件内容如下：</h3><pre><code class=\"java\">// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath &#39;com.android.tools.build:gradle:1.0.0&#39;\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath &#39;com.android.tools.build:gradle:2.2.0&#39;\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n</code></pre>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n"},{"title":"javascript DOM","abbrlink":"218ff168","data":"2017/9/16","_content":"## 消息窗口\n\n* document.write(字符串或者变量或者 Html 标签); 直接在向 html 的输出流中写内容，直接在网页中输出容。\n* alert(字符串或变量); 弹出一个包含确定的消息对话框。\n![js-alert](https://i.loli.net/2017/10/26/59f1ff9e6f473.png)\n\n* confirm(stri); 弹出一个包含确定和取消的消息对话框。\n    * str 消息框显示的文本。\n    * 返回值为 Boolean 类型，通过返回值判断用户点击了什么按钮，确定为 true ，取消为 false。\n![js-confirm](https://i.loli.net/2017/10/26/59f1ffb53699b.png)\n\n* prompt(str1, str2) 弹出包含一个确定按钮、取消按钮与一个文本输入框的消息对话框。\n    * str1 消息框显示文本，不可修改。\n    * str2 文本框中的内容，可修改。\n    * 返回值：点击确定，文本框内容作为函数返回值。点击取消，返回 null。\n\n* open() 方法可以查找一个已经存在或者新建的浏览器窗口。\n    * window.open() 打开一个新窗口。\n```javascript\n    window.open([URL], [窗口名称], [窗口参数设置])\n    /* URL(可选参数):网页网址或路径，如果它的值是空字符串，那么窗口就不显示任何文档。\n    * 窗口名称(可选参数)：被打开窗口的名称。只能由字母，数字或下划线构成。\n    * _balnk:新窗口打开； _self:当前窗口打开； _top：框架网页中在上部窗口中显示目标网页；\n    * 相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。\n    */\n```\n    * 窗口参数 ：\n| 参数       | 值      | 含义                     |\n| ---------- | ------- | ------------------------ |\n| top        | Number  | 窗口顶部离开屏幕顶部像素 |\n| left       | Number  | 窗口顶部离开屏幕顶部像素 |\n| width      | Number  | 窗口宽度                 |\n| height     | Number  | 窗口高度                 |\n| menubar    | yes，no | 窗口菜单                 |\n| toolbar    | yes，no | 窗口工具栏               |\n| scrollbars | yes，no | 窗口滚动条               |\n| status     | yes，no | 窗口状态栏               |\n\n* close() 关闭窗口\n\n```javascript\n    window.close(); // 关闭本窗口\n    [对象窗口].close() // 关闭对象窗口\n```\n\n## JS HTML DOM\n> 浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：\n\n* 浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：\n\n```html\n<html>\n <head>\n   <title>Sample Page</title>\n </head>\n <body>\n   <p>hello world!</p>\n </body>\n</html>\n```\n![full-html-tree](https://i.loli.net/2017/10/26/59f1ffc7e1cb1.png)\n\n通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML:\n* JavaScript 能够改变页面中的所有 HTML 元素\n* JavaScript 能够改变页面中的所有 HTML 属性\n* JavaScript 能够改变页面中的所有 CSS 样式\n* JavaScript 能够对页面中的所有事件做出反应\n\n### 通过 JavaScript 操作作 HTML 元素\n> JS可以定位到DOM树中任意一个节点， 然后对这个节点进行操作， 例如隐藏节点、显示节点、改变颜色、获得文本的值， 改变文本的值，添加一个响应点击事件的函数等。\n\n1. 查找 HTML 元素\n* 通过 id 找到 HTML 元素：`var x = document.getElementById(\"ID\");\n* 通过标签名找到 HTML 元素：`var x = document.getElementById(\"ID\");\nvar y = x.getElementsByTagName(\"p\");`\n* 通过类名找到 HTML 元素\n* stringObject.match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。\n\n2. 改变元素内容\n* document.getElementById(\"ID\").innerHTML=\"Hello\"; // 改变内容\n* isNaN(x); // x 是否为数字\n* document.write(\"写入内容\"), // 向文档输出写内容\n\n3. 改变元素样式\n* document.getElementById(\"ID\").style.color=\"#ff0000\";   // 改变样式\n* document.getElementById(\"ID\").style.visibility=\"hidden\"; // 隐藏元素\n* document.getElementById(\"ID\").style.visibility=\"visible\" // 显示元素\n\n## DOM 事件\n### HTML 常见事件\n* 当用户点击鼠标时\n* 当网页已加载时\n* 当图像已加载时\n* 当鼠标移动到元素上时\n* 当输入字段被改变时\n* 当提交 HTML 表单时\n* 当用户触发按键时\n\n| 事件                      | 含义                                                                               |\n| ------------------------- | ---------------------------------------------------------------------------------- |\n| onclick                   | 元素被点击时，调用绑定函数                                                         |\n| onload 和 onunload        | 在用户进入或离开页面时被触发，用于检测访问者的浏览器类型和浏览器版本，处理 cookie  |\n| onmouseover 和 onmouseout | 将鼠标移至 HTML 元素上方或移出元素时触发                                            |\n| onchange                  | 当域内的内容被改变时，执行绑定函数。例如：向输入框内输入小写，完成后自动转换为大写 |\n| onmousedown 和 onmouseup  | 按下和释放鼠标，触发事件                                                            |\n| onfocus 和 onblur         | 获得焦点或者失去焦点时，触发事件。例如：向文本框输入时，改变其背景颜色             |\n\n### 绑定方式\n1. js 中绑定\n```javascript\n//  必须是一个函数的引用或函数名，而不是函数调用\n// 例如：foo(); 在这里将无效\ndocument.getElementById(\"ID\").onclick = foo;\n```\n2. html 中绑定\n ```html\nonclick=\"foo()\"\n```","source":"_posts/JavaScriptDom.md","raw":"---\ntitle: javascript DOM\ntags: JavaScript\ncategories: JavaScript\nabbrlink: 218ff168\ndata: 2017/9/16\n---\n## 消息窗口\n\n* document.write(字符串或者变量或者 Html 标签); 直接在向 html 的输出流中写内容，直接在网页中输出容。\n* alert(字符串或变量); 弹出一个包含确定的消息对话框。\n![js-alert](https://i.loli.net/2017/10/26/59f1ff9e6f473.png)\n\n* confirm(stri); 弹出一个包含确定和取消的消息对话框。\n    * str 消息框显示的文本。\n    * 返回值为 Boolean 类型，通过返回值判断用户点击了什么按钮，确定为 true ，取消为 false。\n![js-confirm](https://i.loli.net/2017/10/26/59f1ffb53699b.png)\n\n* prompt(str1, str2) 弹出包含一个确定按钮、取消按钮与一个文本输入框的消息对话框。\n    * str1 消息框显示文本，不可修改。\n    * str2 文本框中的内容，可修改。\n    * 返回值：点击确定，文本框内容作为函数返回值。点击取消，返回 null。\n\n* open() 方法可以查找一个已经存在或者新建的浏览器窗口。\n    * window.open() 打开一个新窗口。\n```javascript\n    window.open([URL], [窗口名称], [窗口参数设置])\n    /* URL(可选参数):网页网址或路径，如果它的值是空字符串，那么窗口就不显示任何文档。\n    * 窗口名称(可选参数)：被打开窗口的名称。只能由字母，数字或下划线构成。\n    * _balnk:新窗口打开； _self:当前窗口打开； _top：框架网页中在上部窗口中显示目标网页；\n    * 相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。\n    */\n```\n    * 窗口参数 ：\n| 参数       | 值      | 含义                     |\n| ---------- | ------- | ------------------------ |\n| top        | Number  | 窗口顶部离开屏幕顶部像素 |\n| left       | Number  | 窗口顶部离开屏幕顶部像素 |\n| width      | Number  | 窗口宽度                 |\n| height     | Number  | 窗口高度                 |\n| menubar    | yes，no | 窗口菜单                 |\n| toolbar    | yes，no | 窗口工具栏               |\n| scrollbars | yes，no | 窗口滚动条               |\n| status     | yes，no | 窗口状态栏               |\n\n* close() 关闭窗口\n\n```javascript\n    window.close(); // 关闭本窗口\n    [对象窗口].close() // 关闭对象窗口\n```\n\n## JS HTML DOM\n> 浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：\n\n* 浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：\n\n```html\n<html>\n <head>\n   <title>Sample Page</title>\n </head>\n <body>\n   <p>hello world!</p>\n </body>\n</html>\n```\n![full-html-tree](https://i.loli.net/2017/10/26/59f1ffc7e1cb1.png)\n\n通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML:\n* JavaScript 能够改变页面中的所有 HTML 元素\n* JavaScript 能够改变页面中的所有 HTML 属性\n* JavaScript 能够改变页面中的所有 CSS 样式\n* JavaScript 能够对页面中的所有事件做出反应\n\n### 通过 JavaScript 操作作 HTML 元素\n> JS可以定位到DOM树中任意一个节点， 然后对这个节点进行操作， 例如隐藏节点、显示节点、改变颜色、获得文本的值， 改变文本的值，添加一个响应点击事件的函数等。\n\n1. 查找 HTML 元素\n* 通过 id 找到 HTML 元素：`var x = document.getElementById(\"ID\");\n* 通过标签名找到 HTML 元素：`var x = document.getElementById(\"ID\");\nvar y = x.getElementsByTagName(\"p\");`\n* 通过类名找到 HTML 元素\n* stringObject.match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。\n\n2. 改变元素内容\n* document.getElementById(\"ID\").innerHTML=\"Hello\"; // 改变内容\n* isNaN(x); // x 是否为数字\n* document.write(\"写入内容\"), // 向文档输出写内容\n\n3. 改变元素样式\n* document.getElementById(\"ID\").style.color=\"#ff0000\";   // 改变样式\n* document.getElementById(\"ID\").style.visibility=\"hidden\"; // 隐藏元素\n* document.getElementById(\"ID\").style.visibility=\"visible\" // 显示元素\n\n## DOM 事件\n### HTML 常见事件\n* 当用户点击鼠标时\n* 当网页已加载时\n* 当图像已加载时\n* 当鼠标移动到元素上时\n* 当输入字段被改变时\n* 当提交 HTML 表单时\n* 当用户触发按键时\n\n| 事件                      | 含义                                                                               |\n| ------------------------- | ---------------------------------------------------------------------------------- |\n| onclick                   | 元素被点击时，调用绑定函数                                                         |\n| onload 和 onunload        | 在用户进入或离开页面时被触发，用于检测访问者的浏览器类型和浏览器版本，处理 cookie  |\n| onmouseover 和 onmouseout | 将鼠标移至 HTML 元素上方或移出元素时触发                                            |\n| onchange                  | 当域内的内容被改变时，执行绑定函数。例如：向输入框内输入小写，完成后自动转换为大写 |\n| onmousedown 和 onmouseup  | 按下和释放鼠标，触发事件                                                            |\n| onfocus 和 onblur         | 获得焦点或者失去焦点时，触发事件。例如：向文本框输入时，改变其背景颜色             |\n\n### 绑定方式\n1. js 中绑定\n```javascript\n//  必须是一个函数的引用或函数名，而不是函数调用\n// 例如：foo(); 在这里将无效\ndocument.getElementById(\"ID\").onclick = foo;\n```\n2. html 中绑定\n ```html\nonclick=\"foo()\"\n```","slug":"JavaScriptDom","published":1,"date":"2017-11-12T02:22:17.280Z","updated":"2017-11-12T02:22:17.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xi3000cdfbxa2xceq9y","content":"<h2 id=\"消息窗口\"><a href=\"#消息窗口\" class=\"headerlink\" title=\"消息窗口\"></a>消息窗口</h2><ul>\n<li>document.write(字符串或者变量或者 Html 标签); 直接在向 html 的输出流中写内容，直接在网页中输出容。</li>\n<li><p>alert(字符串或变量); 弹出一个包含确定的消息对话框。<br><img src=\"https://i.loli.net/2017/10/26/59f1ff9e6f473.png\" alt=\"js-alert\"></p>\n</li>\n<li><p>confirm(stri); 弹出一个包含确定和取消的消息对话框。</p>\n<ul>\n<li>str 消息框显示的文本。</li>\n<li>返回值为 Boolean 类型，通过返回值判断用户点击了什么按钮，确定为 true ，取消为 false。<br><img src=\"https://i.loli.net/2017/10/26/59f1ffb53699b.png\" alt=\"js-confirm\"></li>\n</ul>\n</li>\n<li><p>prompt(str1, str2) 弹出包含一个确定按钮、取消按钮与一个文本输入框的消息对话框。</p>\n<ul>\n<li>str1 消息框显示文本，不可修改。</li>\n<li>str2 文本框中的内容，可修改。</li>\n<li>返回值：点击确定，文本框内容作为函数返回值。点击取消，返回 null。</li>\n</ul>\n</li>\n<li><p>open() 方法可以查找一个已经存在或者新建的浏览器窗口。</p>\n<ul>\n<li>window.open() 打开一个新窗口。<br>```javascript<br>window.open([URL], [窗口名称], [窗口参数设置])<br>/* URL(可选参数):网页网址或路径，如果它的值是空字符串，那么窗口就不显示任何文档。</li>\n<li>窗口名称(可选参数)：被打开窗口的名称。只能由字母，数字或下划线构成。</li>\n<li>_balnk:新窗口打开； _self:当前窗口打开； _top：框架网页中在上部窗口中显示目标网页；</li>\n<li>相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。<br>*/<br>```</li>\n<li>窗口参数 ：<br>| 参数       | 值      | 含义                     |<br>| ———- | ——- | ———————— |<br>| top        | Number  | 窗口顶部离开屏幕顶部像素 |<br>| left       | Number  | 窗口顶部离开屏幕顶部像素 |<br>| width      | Number  | 窗口宽度                 |<br>| height     | Number  | 窗口高度                 |<br>| menubar    | yes，no | 窗口菜单                 |<br>| toolbar    | yes，no | 窗口工具栏               |<br>| scrollbars | yes，no | 窗口滚动条               |<br>| status     | yes，no | 窗口状态栏               |</li>\n</ul>\n</li>\n<li><p>close() 关闭窗口</p>\n</li>\n</ul>\n<pre><code class=\"javascript\">    window.close(); // 关闭本窗口\n    [对象窗口].close() // 关闭对象窗口\n</code></pre>\n<h2 id=\"JS-HTML-DOM\"><a href=\"#JS-HTML-DOM\" class=\"headerlink\" title=\"JS HTML DOM\"></a>JS HTML DOM</h2><blockquote>\n<p>浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：</p>\n</blockquote>\n<ul>\n<li>浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：</li>\n</ul>\n<pre><code class=\"html\">&lt;html&gt;\n &lt;head&gt;\n   &lt;title&gt;Sample Page&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n   &lt;p&gt;hello world!&lt;/p&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img src=\"https://i.loli.net/2017/10/26/59f1ffc7e1cb1.png\" alt=\"full-html-tree\"></p>\n<p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML:</p>\n<ul>\n<li>JavaScript 能够改变页面中的所有 HTML 元素</li>\n<li>JavaScript 能够改变页面中的所有 HTML 属性</li>\n<li>JavaScript 能够改变页面中的所有 CSS 样式</li>\n<li>JavaScript 能够对页面中的所有事件做出反应</li>\n</ul>\n<h3 id=\"通过-JavaScript-操作作-HTML-元素\"><a href=\"#通过-JavaScript-操作作-HTML-元素\" class=\"headerlink\" title=\"通过 JavaScript 操作作 HTML 元素\"></a>通过 JavaScript 操作作 HTML 元素</h3><blockquote>\n<p>JS可以定位到DOM树中任意一个节点， 然后对这个节点进行操作， 例如隐藏节点、显示节点、改变颜色、获得文本的值， 改变文本的值，添加一个响应点击事件的函数等。</p>\n</blockquote>\n<ol>\n<li>查找 HTML 元素</li>\n</ol>\n<ul>\n<li>通过 id 找到 HTML 元素：`var x = document.getElementById(“ID”);</li>\n<li>通过标签名找到 HTML 元素：<code>var x = document.getElementById(&quot;ID&quot;);\nvar y = x.getElementsByTagName(&quot;p&quot;);</code></li>\n<li>通过类名找到 HTML 元素</li>\n<li>stringObject.match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</li>\n</ul>\n<ol>\n<li>改变元素内容</li>\n</ol>\n<ul>\n<li>document.getElementById(“ID”).innerHTML=”Hello”; // 改变内容</li>\n<li>isNaN(x); // x 是否为数字</li>\n<li>document.write(“写入内容”), // 向文档输出写内容</li>\n</ul>\n<ol>\n<li>改变元素样式</li>\n</ol>\n<ul>\n<li>document.getElementById(“ID”).style.color=”#ff0000”;   // 改变样式</li>\n<li>document.getElementById(“ID”).style.visibility=”hidden”; // 隐藏元素</li>\n<li>document.getElementById(“ID”).style.visibility=”visible” // 显示元素</li>\n</ul>\n<h2 id=\"DOM-事件\"><a href=\"#DOM-事件\" class=\"headerlink\" title=\"DOM 事件\"></a>DOM 事件</h2><h3 id=\"HTML-常见事件\"><a href=\"#HTML-常见事件\" class=\"headerlink\" title=\"HTML 常见事件\"></a>HTML 常见事件</h3><ul>\n<li>当用户点击鼠标时</li>\n<li>当网页已加载时</li>\n<li>当图像已加载时</li>\n<li>当鼠标移动到元素上时</li>\n<li>当输入字段被改变时</li>\n<li>当提交 HTML 表单时</li>\n<li>当用户触发按键时</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onclick</td>\n<td>元素被点击时，调用绑定函数</td>\n</tr>\n<tr>\n<td>onload 和 onunload</td>\n<td>在用户进入或离开页面时被触发，用于检测访问者的浏览器类型和浏览器版本，处理 cookie</td>\n</tr>\n<tr>\n<td>onmouseover 和 onmouseout</td>\n<td>将鼠标移至 HTML 元素上方或移出元素时触发</td>\n</tr>\n<tr>\n<td>onchange</td>\n<td>当域内的内容被改变时，执行绑定函数。例如：向输入框内输入小写，完成后自动转换为大写</td>\n</tr>\n<tr>\n<td>onmousedown 和 onmouseup</td>\n<td>按下和释放鼠标，触发事件</td>\n</tr>\n<tr>\n<td>onfocus 和 onblur</td>\n<td>获得焦点或者失去焦点时，触发事件。例如：向文本框输入时，改变其背景颜色</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"绑定方式\"><a href=\"#绑定方式\" class=\"headerlink\" title=\"绑定方式\"></a>绑定方式</h3><ol>\n<li>js 中绑定<pre><code class=\"javascript\">//  必须是一个函数的引用或函数名，而不是函数调用\n// 例如：foo(); 在这里将无效\ndocument.getElementById(&quot;ID&quot;).onclick = foo;\n</code></pre>\n</li>\n<li>html 中绑定<pre><code class=\"html\">onclick=&quot;foo()&quot;\n</code></pre>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"消息窗口\"><a href=\"#消息窗口\" class=\"headerlink\" title=\"消息窗口\"></a>消息窗口</h2><ul>\n<li>document.write(字符串或者变量或者 Html 标签); 直接在向 html 的输出流中写内容，直接在网页中输出容。</li>\n<li><p>alert(字符串或变量); 弹出一个包含确定的消息对话框。<br><img src=\"https://i.loli.net/2017/10/26/59f1ff9e6f473.png\" alt=\"js-alert\"></p>\n</li>\n<li><p>confirm(stri); 弹出一个包含确定和取消的消息对话框。</p>\n<ul>\n<li>str 消息框显示的文本。</li>\n<li>返回值为 Boolean 类型，通过返回值判断用户点击了什么按钮，确定为 true ，取消为 false。<br><img src=\"https://i.loli.net/2017/10/26/59f1ffb53699b.png\" alt=\"js-confirm\"></li>\n</ul>\n</li>\n<li><p>prompt(str1, str2) 弹出包含一个确定按钮、取消按钮与一个文本输入框的消息对话框。</p>\n<ul>\n<li>str1 消息框显示文本，不可修改。</li>\n<li>str2 文本框中的内容，可修改。</li>\n<li>返回值：点击确定，文本框内容作为函数返回值。点击取消，返回 null。</li>\n</ul>\n</li>\n<li><p>open() 方法可以查找一个已经存在或者新建的浏览器窗口。</p>\n<ul>\n<li>window.open() 打开一个新窗口。<br>```javascript<br>window.open([URL], [窗口名称], [窗口参数设置])<br>/* URL(可选参数):网页网址或路径，如果它的值是空字符串，那么窗口就不显示任何文档。</li>\n<li>窗口名称(可选参数)：被打开窗口的名称。只能由字母，数字或下划线构成。</li>\n<li>_balnk:新窗口打开； _self:当前窗口打开； _top：框架网页中在上部窗口中显示目标网页；</li>\n<li>相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。<br>*/<br>```</li>\n<li>窗口参数 ：<br>| 参数       | 值      | 含义                     |<br>| ———- | ——- | ———————— |<br>| top        | Number  | 窗口顶部离开屏幕顶部像素 |<br>| left       | Number  | 窗口顶部离开屏幕顶部像素 |<br>| width      | Number  | 窗口宽度                 |<br>| height     | Number  | 窗口高度                 |<br>| menubar    | yes，no | 窗口菜单                 |<br>| toolbar    | yes，no | 窗口工具栏               |<br>| scrollbars | yes，no | 窗口滚动条               |<br>| status     | yes，no | 窗口状态栏               |</li>\n</ul>\n</li>\n<li><p>close() 关闭窗口</p>\n</li>\n</ul>\n<pre><code class=\"javascript\">    window.close(); // 关闭本窗口\n    [对象窗口].close() // 关闭对象窗口\n</code></pre>\n<h2 id=\"JS-HTML-DOM\"><a href=\"#JS-HTML-DOM\" class=\"headerlink\" title=\"JS HTML DOM\"></a>JS HTML DOM</h2><blockquote>\n<p>浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：</p>\n</blockquote>\n<ul>\n<li>浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：</li>\n</ul>\n<pre><code class=\"html\">&lt;html&gt;\n &lt;head&gt;\n   &lt;title&gt;Sample Page&lt;/title&gt;\n &lt;/head&gt;\n &lt;body&gt;\n   &lt;p&gt;hello world!&lt;/p&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p><img src=\"https://i.loli.net/2017/10/26/59f1ffc7e1cb1.png\" alt=\"full-html-tree\"></p>\n<p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML:</p>\n<ul>\n<li>JavaScript 能够改变页面中的所有 HTML 元素</li>\n<li>JavaScript 能够改变页面中的所有 HTML 属性</li>\n<li>JavaScript 能够改变页面中的所有 CSS 样式</li>\n<li>JavaScript 能够对页面中的所有事件做出反应</li>\n</ul>\n<h3 id=\"通过-JavaScript-操作作-HTML-元素\"><a href=\"#通过-JavaScript-操作作-HTML-元素\" class=\"headerlink\" title=\"通过 JavaScript 操作作 HTML 元素\"></a>通过 JavaScript 操作作 HTML 元素</h3><blockquote>\n<p>JS可以定位到DOM树中任意一个节点， 然后对这个节点进行操作， 例如隐藏节点、显示节点、改变颜色、获得文本的值， 改变文本的值，添加一个响应点击事件的函数等。</p>\n</blockquote>\n<ol>\n<li>查找 HTML 元素</li>\n</ol>\n<ul>\n<li>通过 id 找到 HTML 元素：`var x = document.getElementById(“ID”);</li>\n<li>通过标签名找到 HTML 元素：<code>var x = document.getElementById(&quot;ID&quot;);\nvar y = x.getElementsByTagName(&quot;p&quot;);</code></li>\n<li>通过类名找到 HTML 元素</li>\n<li>stringObject.match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</li>\n</ul>\n<ol>\n<li>改变元素内容</li>\n</ol>\n<ul>\n<li>document.getElementById(“ID”).innerHTML=”Hello”; // 改变内容</li>\n<li>isNaN(x); // x 是否为数字</li>\n<li>document.write(“写入内容”), // 向文档输出写内容</li>\n</ul>\n<ol>\n<li>改变元素样式</li>\n</ol>\n<ul>\n<li>document.getElementById(“ID”).style.color=”#ff0000”;   // 改变样式</li>\n<li>document.getElementById(“ID”).style.visibility=”hidden”; // 隐藏元素</li>\n<li>document.getElementById(“ID”).style.visibility=”visible” // 显示元素</li>\n</ul>\n<h2 id=\"DOM-事件\"><a href=\"#DOM-事件\" class=\"headerlink\" title=\"DOM 事件\"></a>DOM 事件</h2><h3 id=\"HTML-常见事件\"><a href=\"#HTML-常见事件\" class=\"headerlink\" title=\"HTML 常见事件\"></a>HTML 常见事件</h3><ul>\n<li>当用户点击鼠标时</li>\n<li>当网页已加载时</li>\n<li>当图像已加载时</li>\n<li>当鼠标移动到元素上时</li>\n<li>当输入字段被改变时</li>\n<li>当提交 HTML 表单时</li>\n<li>当用户触发按键时</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onclick</td>\n<td>元素被点击时，调用绑定函数</td>\n</tr>\n<tr>\n<td>onload 和 onunload</td>\n<td>在用户进入或离开页面时被触发，用于检测访问者的浏览器类型和浏览器版本，处理 cookie</td>\n</tr>\n<tr>\n<td>onmouseover 和 onmouseout</td>\n<td>将鼠标移至 HTML 元素上方或移出元素时触发</td>\n</tr>\n<tr>\n<td>onchange</td>\n<td>当域内的内容被改变时，执行绑定函数。例如：向输入框内输入小写，完成后自动转换为大写</td>\n</tr>\n<tr>\n<td>onmousedown 和 onmouseup</td>\n<td>按下和释放鼠标，触发事件</td>\n</tr>\n<tr>\n<td>onfocus 和 onblur</td>\n<td>获得焦点或者失去焦点时，触发事件。例如：向文本框输入时，改变其背景颜色</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"绑定方式\"><a href=\"#绑定方式\" class=\"headerlink\" title=\"绑定方式\"></a>绑定方式</h3><ol>\n<li>js 中绑定<pre><code class=\"javascript\">//  必须是一个函数的引用或函数名，而不是函数调用\n// 例如：foo(); 在这里将无效\ndocument.getElementById(&quot;ID&quot;).onclick = foo;\n</code></pre>\n</li>\n<li>html 中绑定<pre><code class=\"html\">onclick=&quot;foo()&quot;\n</code></pre>\n</li>\n</ol>\n"},{"title":"JS转换字符串单词首字母大写","abbrlink":"e11bdebd","date":"2017-11-02T05:30:29.000Z","_content":"\n代码如下:\n```javascript\nconst string = 'to young, too simple.';\nconst toUp = str => str.split(' ').map(item => item.charAt(0).toLocaleUpperCase() + item.slice(1)).join(' ');\ntoUp(string);\n```","source":"_posts/JS转换字符串单词首字母大写.md","raw":"---\ntitle: JS转换字符串单词首字母大写\ntags: JavaScript\ncategories: JavaScript\nabbrlink: e11bdebd\ndate: 2017-11-02 13:30:29\n---\n\n代码如下:\n```javascript\nconst string = 'to young, too simple.';\nconst toUp = str => str.split(' ').map(item => item.charAt(0).toLocaleUpperCase() + item.slice(1)).join(' ');\ntoUp(string);\n```","slug":"JS转换字符串单词首字母大写","published":1,"updated":"2017-11-12T02:22:56.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xi6000edfbxelhbaqr1","content":"<p>代码如下:</p>\n<pre><code class=\"javascript\">const string = &#39;to young, too simple.&#39;;\nconst toUp = str =&gt; str.split(&#39; &#39;).map(item =&gt; item.charAt(0).toLocaleUpperCase() + item.slice(1)).join(&#39; &#39;);\ntoUp(string);\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>代码如下:</p>\n<pre><code class=\"javascript\">const string = &#39;to young, too simple.&#39;;\nconst toUp = str =&gt; str.split(&#39; &#39;).map(item =&gt; item.charAt(0).toLocaleUpperCase() + item.slice(1)).join(&#39; &#39;);\ntoUp(string);\n</code></pre>\n"},{"title":"Java中的变量","date":"2017-06-15T16:00:00.000Z","abbrlink":"c075d141","_content":"\n## 变量的定义\n> 在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。\n## 变量的数据类型\n> 变量的数据类型分为两种，即基本数据类型和引用数据类型。\n\n### 1. 基本数据类型 ###\n1. 数值型分为两种：\n\t1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）\n\t1.2 浮点类型（float 4字节，double 8字节）\n2. 字符型（char）2字节\n3. 布尔型（boolean）1字节\n\n### 2. 引用数据类型 ###\n1. 类（class)\n2. 接口（interface）\n3. 数组\n4. 枚举（enum）\n5. 注解（annotation）\n\n## 变量类型转换 ##\n> 在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。\n\n### 1. 自动类型转换 ###\n> 两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。\n1. byte→short，int，long\n2. short，char→int，long\n3. int→long\n4. byte，char，short，int→float\n5. byte，char，short，int，long，float→double\n6. boolean类型无法转换为其他类型。\n\n\n### 2. 强制类型转换 ###\n> 自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。\n\n例如：\n```java\nint num;\nbyte b =(byte)num;\n```\n","source":"_posts/Java中的变量.md","raw":"---\ntitle: Java中的变量\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: c075d141\n---\n\n## 变量的定义\n> 在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。\n## 变量的数据类型\n> 变量的数据类型分为两种，即基本数据类型和引用数据类型。\n\n### 1. 基本数据类型 ###\n1. 数值型分为两种：\n\t1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）\n\t1.2 浮点类型（float 4字节，double 8字节）\n2. 字符型（char）2字节\n3. 布尔型（boolean）1字节\n\n### 2. 引用数据类型 ###\n1. 类（class)\n2. 接口（interface）\n3. 数组\n4. 枚举（enum）\n5. 注解（annotation）\n\n## 变量类型转换 ##\n> 在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。\n\n### 1. 自动类型转换 ###\n> 两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。\n1. byte→short，int，long\n2. short，char→int，long\n3. int→long\n4. byte，char，short，int→float\n5. byte，char，short，int，long，float→double\n6. boolean类型无法转换为其他类型。\n\n\n### 2. 强制类型转换 ###\n> 自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。\n\n例如：\n```java\nint num;\nbyte b =(byte)num;\n```\n","slug":"Java中的变量","published":1,"updated":"2017-11-12T02:17:25.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xib000idfbxd7j3mm33","content":"<h2 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h2><blockquote>\n<p>在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。</p>\n<h2 id=\"变量的数据类型\"><a href=\"#变量的数据类型\" class=\"headerlink\" title=\"变量的数据类型\"></a>变量的数据类型</h2><p>变量的数据类型分为两种，即基本数据类型和引用数据类型。</p>\n</blockquote>\n<h3 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1. 基本数据类型\"></a>1. 基本数据类型</h3><ol>\n<li>数值型分为两种：<br> 1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）<br> 1.2 浮点类型（float 4字节，double 8字节）</li>\n<li>字符型（char）2字节</li>\n<li>布尔型（boolean）1字节</li>\n</ol>\n<h3 id=\"2-引用数据类型\"><a href=\"#2-引用数据类型\" class=\"headerlink\" title=\"2. 引用数据类型\"></a>2. 引用数据类型</h3><ol>\n<li>类（class)</li>\n<li>接口（interface）</li>\n<li>数组</li>\n<li>枚举（enum）</li>\n<li>注解（annotation）</li>\n</ol>\n<h2 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h2><blockquote>\n<p>在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。</p>\n</blockquote>\n<h3 id=\"1-自动类型转换\"><a href=\"#1-自动类型转换\" class=\"headerlink\" title=\"1. 自动类型转换\"></a>1. 自动类型转换</h3><blockquote>\n<p>两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。</p>\n<ol>\n<li>byte→short，int，long</li>\n<li>short，char→int，long</li>\n<li>int→long</li>\n<li>byte，char，short，int→float</li>\n<li>byte，char，short，int，long，float→double</li>\n<li>boolean类型无法转换为其他类型。</li>\n</ol>\n</blockquote>\n<h3 id=\"2-强制类型转换\"><a href=\"#2-强制类型转换\" class=\"headerlink\" title=\"2. 强制类型转换\"></a>2. 强制类型转换</h3><blockquote>\n<p>自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">int num;\nbyte b =(byte)num;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h2><blockquote>\n<p>在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。</p>\n<h2 id=\"变量的数据类型\"><a href=\"#变量的数据类型\" class=\"headerlink\" title=\"变量的数据类型\"></a>变量的数据类型</h2><p>变量的数据类型分为两种，即基本数据类型和引用数据类型。</p>\n</blockquote>\n<h3 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1. 基本数据类型\"></a>1. 基本数据类型</h3><ol>\n<li>数值型分为两种：<br> 1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）<br> 1.2 浮点类型（float 4字节，double 8字节）</li>\n<li>字符型（char）2字节</li>\n<li>布尔型（boolean）1字节</li>\n</ol>\n<h3 id=\"2-引用数据类型\"><a href=\"#2-引用数据类型\" class=\"headerlink\" title=\"2. 引用数据类型\"></a>2. 引用数据类型</h3><ol>\n<li>类（class)</li>\n<li>接口（interface）</li>\n<li>数组</li>\n<li>枚举（enum）</li>\n<li>注解（annotation）</li>\n</ol>\n<h2 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h2><blockquote>\n<p>在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。</p>\n</blockquote>\n<h3 id=\"1-自动类型转换\"><a href=\"#1-自动类型转换\" class=\"headerlink\" title=\"1. 自动类型转换\"></a>1. 自动类型转换</h3><blockquote>\n<p>两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。</p>\n<ol>\n<li>byte→short，int，long</li>\n<li>short，char→int，long</li>\n<li>int→long</li>\n<li>byte，char，short，int→float</li>\n<li>byte，char，short，int，long，float→double</li>\n<li>boolean类型无法转换为其他类型。</li>\n</ol>\n</blockquote>\n<h3 id=\"2-强制类型转换\"><a href=\"#2-强制类型转换\" class=\"headerlink\" title=\"2. 强制类型转换\"></a>2. 强制类型转换</h3><blockquote>\n<p>自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">int num;\nbyte b =(byte)num;\n</code></pre>\n"},{"title":"Java中的多线程","date":"2017-06-15T16:00:00.000Z","abbrlink":"265f6f6b","_content":"\n## 多进程\n在操作系统中能（同时）运行多个任务（程序）。\n\n## 多线程 ##\n在同一应用程序中有多个顺序流（同时）执行。\n![](http://i.imgur.com/svr5BHK.png)\n\n![](http://i.imgur.com/Pw3R29D.png)\n\n## 线程的创建方法 ##\n### 继承Thread类创建多线程 ###\n* 继承Thread类，覆写Thread类的run（）方法，在run（）方法中实现运行在线程上的代码。\n\n1. 定义一个类FirstThread继承Thread类，覆写Thread类的run（）方法；\n2. 生成线程类的对象firstThread；\n3. 启动线程start（）方法。\n\n#### 示例： ####\n```java\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//生成线程类的对象\n\t\tFirstThread firstThread = new FirstThread();\n\t\t//启动线程start（）方法\n\t\tfirstThread.start();\n\n\t\tfor(int i = 1; i < 50; i++){\n\t\t\tSystem.out.println(\"Main---->:\" + i);\n\t\t}\n\t}\n}\n\n\n//继承Thread类，覆写Thread类的run（）方法\nclass FirstThread extends Thread{\n\tpublic void run(){\n\t\tfor(int i = 1; i < 50; i++){\n\t\t\tSystem.out.println(\"FirstThread--->:\" + i);\n\t\t}\n\t}\n}\n```\n### 实现Runnable接口创建多线程 ###\n* 提供一个实现接口Runnable的类作为线程的目标对象，在初始化一个Thread类或者Thread子类的线程对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体。\n\n1. 定义一个类FirstThread实现Runnable接口；\n2. 生成Runnable实现类FirstThread的一个对象firstThread；\n3. 生成一个Thread对象，并将firstThread作为参数传递给该Thread对象；\n4. 通知Thread对象执行start（）方法。\n\n#### 示例： ####\n```java\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//生成Runnable实现类FirstThread的一个对象firstThread\n\t\tFirstThread firstThread = new FirstThread();\n\t\t//生成一个Thread对象\n\t\t//并将firstThread作为参数传递给该Thread对象\n\t\tThread thread = new Thread(firstThread);\n\t\t//通知Thread对象执行start（）方法\n\t\tthread.start();\n\n\t\tfor(int i = 1; i <50; i++){\n\t\t\tSystem.out.println(\"Main--->:\" + i);\n\t\t}\n\t}\n}\n\n//实现Runnable接口的类FirstThread\nclass FirstThread implements Runnable{\n\tpublic void run(){\n\t\tfor(int i = 1; i <50; i++){\n\t\t\tSystem.out.println(\"FirstThread--->:\" + i);\n\t\t}\n\t}\n}\n```\n\n\n## 线程的简单控制方法 ##\n\n* 中断线程\n  * Thread.sleep（n毫秒）//当前线程休眠n毫秒\n  * Thread.yield（）//当前线程自动让出CPU，AB重新线程抢占CPU\n\n*  设置线程的优先级\n  *  getPriority（）\n  *  setPriority（）\n    * thread.setPriority(Thread.MAX_PRIORITY) //设置最大优先级为10\n    * thread.setPriority(Thread.MIN_PRIORITY) //设置最小优先级为1\n\n## 同步语法 ##\n### 同步代码块 ###\n\n```java\nsynchronized(this) {   //this：同步锁\n\n\t\t代码块\n}\n```\n* synchronized锁住一个对象。\n* 如果线程A得到同步锁，那么他将可以执行代码块，\n   即使线程B从线程A手中抢到了同步锁，B也不能立即执行代码块，它必须等到线程A执行完这个代码块之后才能执行。\n\n#### 示例 ####\n```java\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tMyThread myThread = new MyThread();\n\t\t//生成两个Thread对象，但是这两个Thread对象共用同一个线程体\n\t\tThread t1 = new Thread(myThread);\n\t\tThread t2 = new Thread(myThread);\n\t\t//通过Thread对象的setName（）方法设置线程名字\n\t\t//使用getName方法获取线程的名字\n\t\tt1.setName(\"线程A\");\n\t\tt2.setName(\"线程B\");\n\t\t//分别启动两个线程\n\t\tt1.start();\n\t\tt2.start();\n\t}\n}\n\nclass MyThread implements Runnable{\n\tint i = 100;\n\tpublic void run(){\n\t\twhile(true){\n\t\t\tsynchronized(this){ //this：同步锁\n\t\t\t\t//Thread.currentThread()获取当前这段代码运行的线程位置\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + i);\n\t\t\t\ti--;\n\t\t\t\tThread.yield();\n\t\t\t\tif(i < 0){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n### 同步方法 ###\n```java\npublic synchronized void run(){\n\n\t代码块\n}\n\n```\n* synchronized锁住this。\n","source":"_posts/Java中的多线程.md","raw":"---\ntitle: Java中的多线程\ndate: 2017/6/16\nabbrlink: 265f6f6b\ntags: Java\ncategories: Java\n---\n\n## 多进程\n在操作系统中能（同时）运行多个任务（程序）。\n\n## 多线程 ##\n在同一应用程序中有多个顺序流（同时）执行。\n![](http://i.imgur.com/svr5BHK.png)\n\n![](http://i.imgur.com/Pw3R29D.png)\n\n## 线程的创建方法 ##\n### 继承Thread类创建多线程 ###\n* 继承Thread类，覆写Thread类的run（）方法，在run（）方法中实现运行在线程上的代码。\n\n1. 定义一个类FirstThread继承Thread类，覆写Thread类的run（）方法；\n2. 生成线程类的对象firstThread；\n3. 启动线程start（）方法。\n\n#### 示例： ####\n```java\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//生成线程类的对象\n\t\tFirstThread firstThread = new FirstThread();\n\t\t//启动线程start（）方法\n\t\tfirstThread.start();\n\n\t\tfor(int i = 1; i < 50; i++){\n\t\t\tSystem.out.println(\"Main---->:\" + i);\n\t\t}\n\t}\n}\n\n\n//继承Thread类，覆写Thread类的run（）方法\nclass FirstThread extends Thread{\n\tpublic void run(){\n\t\tfor(int i = 1; i < 50; i++){\n\t\t\tSystem.out.println(\"FirstThread--->:\" + i);\n\t\t}\n\t}\n}\n```\n### 实现Runnable接口创建多线程 ###\n* 提供一个实现接口Runnable的类作为线程的目标对象，在初始化一个Thread类或者Thread子类的线程对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体。\n\n1. 定义一个类FirstThread实现Runnable接口；\n2. 生成Runnable实现类FirstThread的一个对象firstThread；\n3. 生成一个Thread对象，并将firstThread作为参数传递给该Thread对象；\n4. 通知Thread对象执行start（）方法。\n\n#### 示例： ####\n```java\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//生成Runnable实现类FirstThread的一个对象firstThread\n\t\tFirstThread firstThread = new FirstThread();\n\t\t//生成一个Thread对象\n\t\t//并将firstThread作为参数传递给该Thread对象\n\t\tThread thread = new Thread(firstThread);\n\t\t//通知Thread对象执行start（）方法\n\t\tthread.start();\n\n\t\tfor(int i = 1; i <50; i++){\n\t\t\tSystem.out.println(\"Main--->:\" + i);\n\t\t}\n\t}\n}\n\n//实现Runnable接口的类FirstThread\nclass FirstThread implements Runnable{\n\tpublic void run(){\n\t\tfor(int i = 1; i <50; i++){\n\t\t\tSystem.out.println(\"FirstThread--->:\" + i);\n\t\t}\n\t}\n}\n```\n\n\n## 线程的简单控制方法 ##\n\n* 中断线程\n  * Thread.sleep（n毫秒）//当前线程休眠n毫秒\n  * Thread.yield（）//当前线程自动让出CPU，AB重新线程抢占CPU\n\n*  设置线程的优先级\n  *  getPriority（）\n  *  setPriority（）\n    * thread.setPriority(Thread.MAX_PRIORITY) //设置最大优先级为10\n    * thread.setPriority(Thread.MIN_PRIORITY) //设置最小优先级为1\n\n## 同步语法 ##\n### 同步代码块 ###\n\n```java\nsynchronized(this) {   //this：同步锁\n\n\t\t代码块\n}\n```\n* synchronized锁住一个对象。\n* 如果线程A得到同步锁，那么他将可以执行代码块，\n   即使线程B从线程A手中抢到了同步锁，B也不能立即执行代码块，它必须等到线程A执行完这个代码块之后才能执行。\n\n#### 示例 ####\n```java\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tMyThread myThread = new MyThread();\n\t\t//生成两个Thread对象，但是这两个Thread对象共用同一个线程体\n\t\tThread t1 = new Thread(myThread);\n\t\tThread t2 = new Thread(myThread);\n\t\t//通过Thread对象的setName（）方法设置线程名字\n\t\t//使用getName方法获取线程的名字\n\t\tt1.setName(\"线程A\");\n\t\tt2.setName(\"线程B\");\n\t\t//分别启动两个线程\n\t\tt1.start();\n\t\tt2.start();\n\t}\n}\n\nclass MyThread implements Runnable{\n\tint i = 100;\n\tpublic void run(){\n\t\twhile(true){\n\t\t\tsynchronized(this){ //this：同步锁\n\t\t\t\t//Thread.currentThread()获取当前这段代码运行的线程位置\n\t\t\t\tSystem.out.println(Thread.currentThread().getName() + i);\n\t\t\t\ti--;\n\t\t\t\tThread.yield();\n\t\t\t\tif(i < 0){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n### 同步方法 ###\n```java\npublic synchronized void run(){\n\n\t代码块\n}\n\n```\n* synchronized锁住this。\n","slug":"Java中的多线程","published":1,"updated":"2017-11-12T02:17:21.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xie000ldfbx3cvmu2vd","content":"<h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>在操作系统中能（同时）运行多个任务（程序）。</p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>在同一应用程序中有多个顺序流（同时）执行。<br><img src=\"http://i.imgur.com/svr5BHK.png\" alt=\"\"></p>\n<p><img src=\"http://i.imgur.com/Pw3R29D.png\" alt=\"\"></p>\n<h2 id=\"线程的创建方法\"><a href=\"#线程的创建方法\" class=\"headerlink\" title=\"线程的创建方法\"></a>线程的创建方法</h2><h3 id=\"继承Thread类创建多线程\"><a href=\"#继承Thread类创建多线程\" class=\"headerlink\" title=\"继承Thread类创建多线程\"></a>继承Thread类创建多线程</h3><ul>\n<li>继承Thread类，覆写Thread类的run（）方法，在run（）方法中实现运行在线程上的代码。</li>\n</ul>\n<ol>\n<li>定义一个类FirstThread继承Thread类，覆写Thread类的run（）方法；</li>\n<li>生成线程类的对象firstThread；</li>\n<li>启动线程start（）方法。</li>\n</ol>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">public class Test{\n    public static void main(String args[]){\n        //生成线程类的对象\n        FirstThread firstThread = new FirstThread();\n        //启动线程start（）方法\n        firstThread.start();\n\n        for(int i = 1; i &lt; 50; i++){\n            System.out.println(&quot;Main----&gt;:&quot; + i);\n        }\n    }\n}\n\n\n//继承Thread类，覆写Thread类的run（）方法\nclass FirstThread extends Thread{\n    public void run(){\n        for(int i = 1; i &lt; 50; i++){\n            System.out.println(&quot;FirstThread---&gt;:&quot; + i);\n        }\n    }\n}\n</code></pre>\n<h3 id=\"实现Runnable接口创建多线程\"><a href=\"#实现Runnable接口创建多线程\" class=\"headerlink\" title=\"实现Runnable接口创建多线程\"></a>实现Runnable接口创建多线程</h3><ul>\n<li>提供一个实现接口Runnable的类作为线程的目标对象，在初始化一个Thread类或者Thread子类的线程对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体。</li>\n</ul>\n<ol>\n<li>定义一个类FirstThread实现Runnable接口；</li>\n<li>生成Runnable实现类FirstThread的一个对象firstThread；</li>\n<li>生成一个Thread对象，并将firstThread作为参数传递给该Thread对象；</li>\n<li>通知Thread对象执行start（）方法。</li>\n</ol>\n<h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">public class Test{\n    public static void main(String args[]){\n        //生成Runnable实现类FirstThread的一个对象firstThread\n        FirstThread firstThread = new FirstThread();\n        //生成一个Thread对象\n        //并将firstThread作为参数传递给该Thread对象\n        Thread thread = new Thread(firstThread);\n        //通知Thread对象执行start（）方法\n        thread.start();\n\n        for(int i = 1; i &lt;50; i++){\n            System.out.println(&quot;Main---&gt;:&quot; + i);\n        }\n    }\n}\n\n//实现Runnable接口的类FirstThread\nclass FirstThread implements Runnable{\n    public void run(){\n        for(int i = 1; i &lt;50; i++){\n            System.out.println(&quot;FirstThread---&gt;:&quot; + i);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"线程的简单控制方法\"><a href=\"#线程的简单控制方法\" class=\"headerlink\" title=\"线程的简单控制方法\"></a>线程的简单控制方法</h2><ul>\n<li><p>中断线程</p>\n<ul>\n<li>Thread.sleep（n毫秒）//当前线程休眠n毫秒</li>\n<li>Thread.yield（）//当前线程自动让出CPU，AB重新线程抢占CPU</li>\n</ul>\n</li>\n<li><p>设置线程的优先级</p>\n<ul>\n<li>getPriority（）</li>\n<li>setPriority（）<ul>\n<li>thread.setPriority(Thread.MAX_PRIORITY) //设置最大优先级为10</li>\n<li>thread.setPriority(Thread.MIN_PRIORITY) //设置最小优先级为1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"同步语法\"><a href=\"#同步语法\" class=\"headerlink\" title=\"同步语法\"></a>同步语法</h2><h3 id=\"同步代码块\"><a href=\"#同步代码块\" class=\"headerlink\" title=\"同步代码块\"></a>同步代码块</h3><pre><code class=\"java\">synchronized(this) {   //this：同步锁\n\n        代码块\n}\n</code></pre>\n<ul>\n<li>synchronized锁住一个对象。</li>\n<li>如果线程A得到同步锁，那么他将可以执行代码块，<br> 即使线程B从线程A手中抢到了同步锁，B也不能立即执行代码块，它必须等到线程A执行完这个代码块之后才能执行。</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre><code class=\"java\">public class Test{\n    public static void main(String args[]){\n        MyThread myThread = new MyThread();\n        //生成两个Thread对象，但是这两个Thread对象共用同一个线程体\n        Thread t1 = new Thread(myThread);\n        Thread t2 = new Thread(myThread);\n        //通过Thread对象的setName（）方法设置线程名字\n        //使用getName方法获取线程的名字\n        t1.setName(&quot;线程A&quot;);\n        t2.setName(&quot;线程B&quot;);\n        //分别启动两个线程\n        t1.start();\n        t2.start();\n    }\n}\n\nclass MyThread implements Runnable{\n    int i = 100;\n    public void run(){\n        while(true){\n            synchronized(this){ //this：同步锁\n                //Thread.currentThread()获取当前这段代码运行的线程位置\n                System.out.println(Thread.currentThread().getName() + i);\n                i--;\n                Thread.yield();\n                if(i &lt; 0){\n                    break;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><pre><code class=\"java\">public synchronized void run(){\n\n    代码块\n}\n</code></pre>\n<ul>\n<li>synchronized锁住this。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多进程\"><a href=\"#多进程\" class=\"headerlink\" title=\"多进程\"></a>多进程</h2><p>在操作系统中能（同时）运行多个任务（程序）。</p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>在同一应用程序中有多个顺序流（同时）执行。<br><img src=\"http://i.imgur.com/svr5BHK.png\" alt=\"\"></p>\n<p><img src=\"http://i.imgur.com/Pw3R29D.png\" alt=\"\"></p>\n<h2 id=\"线程的创建方法\"><a href=\"#线程的创建方法\" class=\"headerlink\" title=\"线程的创建方法\"></a>线程的创建方法</h2><h3 id=\"继承Thread类创建多线程\"><a href=\"#继承Thread类创建多线程\" class=\"headerlink\" title=\"继承Thread类创建多线程\"></a>继承Thread类创建多线程</h3><ul>\n<li>继承Thread类，覆写Thread类的run（）方法，在run（）方法中实现运行在线程上的代码。</li>\n</ul>\n<ol>\n<li>定义一个类FirstThread继承Thread类，覆写Thread类的run（）方法；</li>\n<li>生成线程类的对象firstThread；</li>\n<li>启动线程start（）方法。</li>\n</ol>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">public class Test{\n    public static void main(String args[]){\n        //生成线程类的对象\n        FirstThread firstThread = new FirstThread();\n        //启动线程start（）方法\n        firstThread.start();\n\n        for(int i = 1; i &lt; 50; i++){\n            System.out.println(&quot;Main----&gt;:&quot; + i);\n        }\n    }\n}\n\n\n//继承Thread类，覆写Thread类的run（）方法\nclass FirstThread extends Thread{\n    public void run(){\n        for(int i = 1; i &lt; 50; i++){\n            System.out.println(&quot;FirstThread---&gt;:&quot; + i);\n        }\n    }\n}\n</code></pre>\n<h3 id=\"实现Runnable接口创建多线程\"><a href=\"#实现Runnable接口创建多线程\" class=\"headerlink\" title=\"实现Runnable接口创建多线程\"></a>实现Runnable接口创建多线程</h3><ul>\n<li>提供一个实现接口Runnable的类作为线程的目标对象，在初始化一个Thread类或者Thread子类的线程对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体。</li>\n</ul>\n<ol>\n<li>定义一个类FirstThread实现Runnable接口；</li>\n<li>生成Runnable实现类FirstThread的一个对象firstThread；</li>\n<li>生成一个Thread对象，并将firstThread作为参数传递给该Thread对象；</li>\n<li>通知Thread对象执行start（）方法。</li>\n</ol>\n<h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">public class Test{\n    public static void main(String args[]){\n        //生成Runnable实现类FirstThread的一个对象firstThread\n        FirstThread firstThread = new FirstThread();\n        //生成一个Thread对象\n        //并将firstThread作为参数传递给该Thread对象\n        Thread thread = new Thread(firstThread);\n        //通知Thread对象执行start（）方法\n        thread.start();\n\n        for(int i = 1; i &lt;50; i++){\n            System.out.println(&quot;Main---&gt;:&quot; + i);\n        }\n    }\n}\n\n//实现Runnable接口的类FirstThread\nclass FirstThread implements Runnable{\n    public void run(){\n        for(int i = 1; i &lt;50; i++){\n            System.out.println(&quot;FirstThread---&gt;:&quot; + i);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"线程的简单控制方法\"><a href=\"#线程的简单控制方法\" class=\"headerlink\" title=\"线程的简单控制方法\"></a>线程的简单控制方法</h2><ul>\n<li><p>中断线程</p>\n<ul>\n<li>Thread.sleep（n毫秒）//当前线程休眠n毫秒</li>\n<li>Thread.yield（）//当前线程自动让出CPU，AB重新线程抢占CPU</li>\n</ul>\n</li>\n<li><p>设置线程的优先级</p>\n<ul>\n<li>getPriority（）</li>\n<li>setPriority（）<ul>\n<li>thread.setPriority(Thread.MAX_PRIORITY) //设置最大优先级为10</li>\n<li>thread.setPriority(Thread.MIN_PRIORITY) //设置最小优先级为1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"同步语法\"><a href=\"#同步语法\" class=\"headerlink\" title=\"同步语法\"></a>同步语法</h2><h3 id=\"同步代码块\"><a href=\"#同步代码块\" class=\"headerlink\" title=\"同步代码块\"></a>同步代码块</h3><pre><code class=\"java\">synchronized(this) {   //this：同步锁\n\n        代码块\n}\n</code></pre>\n<ul>\n<li>synchronized锁住一个对象。</li>\n<li>如果线程A得到同步锁，那么他将可以执行代码块，<br> 即使线程B从线程A手中抢到了同步锁，B也不能立即执行代码块，它必须等到线程A执行完这个代码块之后才能执行。</li>\n</ul>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><pre><code class=\"java\">public class Test{\n    public static void main(String args[]){\n        MyThread myThread = new MyThread();\n        //生成两个Thread对象，但是这两个Thread对象共用同一个线程体\n        Thread t1 = new Thread(myThread);\n        Thread t2 = new Thread(myThread);\n        //通过Thread对象的setName（）方法设置线程名字\n        //使用getName方法获取线程的名字\n        t1.setName(&quot;线程A&quot;);\n        t2.setName(&quot;线程B&quot;);\n        //分别启动两个线程\n        t1.start();\n        t2.start();\n    }\n}\n\nclass MyThread implements Runnable{\n    int i = 100;\n    public void run(){\n        while(true){\n            synchronized(this){ //this：同步锁\n                //Thread.currentThread()获取当前这段代码运行的线程位置\n                System.out.println(Thread.currentThread().getName() + i);\n                i--;\n                Thread.yield();\n                if(i &lt; 0){\n                    break;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<h3 id=\"同步方法\"><a href=\"#同步方法\" class=\"headerlink\" title=\"同步方法\"></a>同步方法</h3><pre><code class=\"java\">public synchronized void run(){\n\n    代码块\n}\n</code></pre>\n<ul>\n<li>synchronized锁住this。</li>\n</ul>\n"},{"title":"Java中的异常","date":"2017-06-15T16:00:00.000Z","abbrlink":"f029d2bb","_content":"\n1. 什么是异常\n2. 异常的分类\n3. try...catch...finally结构的使用方法\n\n## 1. 什么是异常？  ##\n\n>\n* 异常(Exception)：中断了正常指令流的事件。\n* 异常是一个对象；\n* 异常产生于程序运行时；\n* 指令流：程序执行时一系列的连续指令称为指令流。\n>\n示例：\n```java\nclass Test{\n\tpublic static void main(String args[]){\n\t\tint i = 1 / 0;\n\t}\n}\n```\n 抛出异常：\n>Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Test3.main(Test3.java:6)\n\n* Exception in thread \"main\" ：在主线程中出现异常；\n* ArithmeticException：异常的名称，算术异常；\n* / by zero：被0除；\n* at Test.main(Test.java:3)：异常位置；\n\n## 2. 异常的分类 ##\n### JDK提供的类： ###\n\n> ![](http://i.imgur.com/gTBhe2x.png)\n1.  Throwable：所有异常的父类；\n2.  Error：虚拟机运行时产生的错误，产生错误，虚拟机直接关闭；\n3.   Exception： 分为UncheckExeption（RuntimeExeption）和CheckExeption\n>\nRuntimeException + Error 和其子类都是属于uncheckexception\nException类中除了 RuntimeException之外的类，都是属于checkexception\n\n#### Exception ####\n##### checkException #####\n>\ncheckException是必须要处理的，也就是不能抛出，必须通过try-catch来完成，不处理的话是不能进行编译的。\n示例：\n```java\nclass TestCheck{\n\tpublic static void main(String args[]){\n        //CheckException\n\t\tThread.sleep(1000); //让当前线程休眠1000ms\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/xMd1LOi.png)\n\n##### uncheckException（ RuntimeException） #####\n>\n运行时异常包括平常遇到的各种异常，如空指针异常，数据格式异常等一系列异常，这种异常是可以不捕获的，可通过throws抛出异常，交给别的代码或者JAVA虚拟机来完成\n示例：\n```java\nclass Test{\n\tpublic static void main(String args[]){\n\t\t//UncheckException\n\t\tint i = 1 / 0;\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/ll7JnfN.png)\n\n## 3. try...catch...finally结构 ##\n>\n```java\ntry{\n       //代码A\n\t//有可能出现异常的代码B\n\t//代码C\n}\ncatch(Exception e){ //虚拟机产生的异常对象e\n\te.printStackTrace(); //处理异常的代码D\n\t//代码E\n}\nfinally{\n\t//异常的出口\n\t//执行扫尾工作的代码F\n}\n```\n#### 如果try中代码B没有异常：执行代码A-B-C-F\n#### 如果try中代码B出现异常：执行代码A-B-D-E-F\n\n### uncheckException ###\n>\n```java\n//uncheckException\nclass TestCheck{\n\tpublic static void main(String args[]){\n\t\tSystem.out.println(1);\n\t\ttry{\n\t\t\tSystem.out.println(2);\n\t\t\t//有可能出现异常的代码\n\t\t\tint i = 1/0;\n\t\t\tSystem.out.println(3);\n\t\t}\n\t\tcatch(Exception e){ //虚拟机产生的异常对象e\n\t\t\te.printStackTrace(); //打印异常栈的追踪信息\n\t\t\tSystem.out.println(4);\n\t\t}\n\t\tfinally{\n\t\t\t//异常的出口\n\t\t\tSystem.out.println(\"finally\");\n\t\t}\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/DG4HLEn.png)\n\n### checkException ###\n>\n```java\n//checkException\nclass TestCheck{\n\tpublic static void main(String args[]){\n\t\tSystem.out.println(1);\n\t\ttry{\n\t\t\tSystem.out.println(2);\n\t\t\t//有可能出现异常的代码\n\t\t\tThread.sleep(1000); //让当前线程休眠1000ms\n\t\t\tSystem.out.println(3);\n\t\t}\n\t\tcatch(Exception e){ //虚拟机产生的异常对象e\n\t\t\te.printStackTrace(); //打印异常栈的追踪信息\n\t\t\tSystem.out.println(4);\n\t\t}\n\t\tfinally{\n\t\t\t//异常的出口\n\t\t\tSystem.out.println(\"finally\");\n\t\t}\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/yWIuLO9.png)\n屏幕首先显示1，2，然后停顿1000ms，再显示3和finally\n\n","source":"_posts/Java中的异常.md","raw":"---\ntitle: Java中的异常\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: f029d2bb\n---\n\n1. 什么是异常\n2. 异常的分类\n3. try...catch...finally结构的使用方法\n\n## 1. 什么是异常？  ##\n\n>\n* 异常(Exception)：中断了正常指令流的事件。\n* 异常是一个对象；\n* 异常产生于程序运行时；\n* 指令流：程序执行时一系列的连续指令称为指令流。\n>\n示例：\n```java\nclass Test{\n\tpublic static void main(String args[]){\n\t\tint i = 1 / 0;\n\t}\n}\n```\n 抛出异常：\n>Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat Test3.main(Test3.java:6)\n\n* Exception in thread \"main\" ：在主线程中出现异常；\n* ArithmeticException：异常的名称，算术异常；\n* / by zero：被0除；\n* at Test.main(Test.java:3)：异常位置；\n\n## 2. 异常的分类 ##\n### JDK提供的类： ###\n\n> ![](http://i.imgur.com/gTBhe2x.png)\n1.  Throwable：所有异常的父类；\n2.  Error：虚拟机运行时产生的错误，产生错误，虚拟机直接关闭；\n3.   Exception： 分为UncheckExeption（RuntimeExeption）和CheckExeption\n>\nRuntimeException + Error 和其子类都是属于uncheckexception\nException类中除了 RuntimeException之外的类，都是属于checkexception\n\n#### Exception ####\n##### checkException #####\n>\ncheckException是必须要处理的，也就是不能抛出，必须通过try-catch来完成，不处理的话是不能进行编译的。\n示例：\n```java\nclass TestCheck{\n\tpublic static void main(String args[]){\n        //CheckException\n\t\tThread.sleep(1000); //让当前线程休眠1000ms\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/xMd1LOi.png)\n\n##### uncheckException（ RuntimeException） #####\n>\n运行时异常包括平常遇到的各种异常，如空指针异常，数据格式异常等一系列异常，这种异常是可以不捕获的，可通过throws抛出异常，交给别的代码或者JAVA虚拟机来完成\n示例：\n```java\nclass Test{\n\tpublic static void main(String args[]){\n\t\t//UncheckException\n\t\tint i = 1 / 0;\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/ll7JnfN.png)\n\n## 3. try...catch...finally结构 ##\n>\n```java\ntry{\n       //代码A\n\t//有可能出现异常的代码B\n\t//代码C\n}\ncatch(Exception e){ //虚拟机产生的异常对象e\n\te.printStackTrace(); //处理异常的代码D\n\t//代码E\n}\nfinally{\n\t//异常的出口\n\t//执行扫尾工作的代码F\n}\n```\n#### 如果try中代码B没有异常：执行代码A-B-C-F\n#### 如果try中代码B出现异常：执行代码A-B-D-E-F\n\n### uncheckException ###\n>\n```java\n//uncheckException\nclass TestCheck{\n\tpublic static void main(String args[]){\n\t\tSystem.out.println(1);\n\t\ttry{\n\t\t\tSystem.out.println(2);\n\t\t\t//有可能出现异常的代码\n\t\t\tint i = 1/0;\n\t\t\tSystem.out.println(3);\n\t\t}\n\t\tcatch(Exception e){ //虚拟机产生的异常对象e\n\t\t\te.printStackTrace(); //打印异常栈的追踪信息\n\t\t\tSystem.out.println(4);\n\t\t}\n\t\tfinally{\n\t\t\t//异常的出口\n\t\t\tSystem.out.println(\"finally\");\n\t\t}\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/DG4HLEn.png)\n\n### checkException ###\n>\n```java\n//checkException\nclass TestCheck{\n\tpublic static void main(String args[]){\n\t\tSystem.out.println(1);\n\t\ttry{\n\t\t\tSystem.out.println(2);\n\t\t\t//有可能出现异常的代码\n\t\t\tThread.sleep(1000); //让当前线程休眠1000ms\n\t\t\tSystem.out.println(3);\n\t\t}\n\t\tcatch(Exception e){ //虚拟机产生的异常对象e\n\t\t\te.printStackTrace(); //打印异常栈的追踪信息\n\t\t\tSystem.out.println(4);\n\t\t}\n\t\tfinally{\n\t\t\t//异常的出口\n\t\t\tSystem.out.println(\"finally\");\n\t\t}\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/yWIuLO9.png)\n屏幕首先显示1，2，然后停顿1000ms，再显示3和finally\n\n","slug":"Java中的异常","published":1,"updated":"2017-11-12T02:17:08.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xih000pdfbxiyiz83bb","content":"<ol>\n<li>什么是异常</li>\n<li>异常的分类</li>\n<li>try…catch…finally结构的使用方法</li>\n</ol>\n<h2 id=\"1-什么是异常？\"><a href=\"#1-什么是异常？\" class=\"headerlink\" title=\"1. 什么是异常？\"></a>1. 什么是异常？</h2><p>&gt;</p>\n<ul>\n<li>异常(Exception)：中断了正常指令流的事件。</li>\n<li>异常是一个对象；</li>\n<li>异常产生于程序运行时；</li>\n<li><p>指令流：程序执行时一系列的连续指令称为指令流。<br>&gt;<br>示例：</p>\n<pre><code class=\"java\">class Test{\n  public static void main(String args[]){\n      int i = 1 / 0;\n  }\n}\n</code></pre>\n<p>抛出异常：</p>\n<blockquote>\n<p>Exception in thread “main” java.lang.ArithmeticException: / by zero<br>  at Test3.main(Test3.java:6)</p>\n</blockquote>\n</li>\n<li><p>Exception in thread “main” ：在主线程中出现异常；</p>\n</li>\n<li>ArithmeticException：异常的名称，算术异常；</li>\n<li>/ by zero：被0除；</li>\n<li>at Test.main(Test.java:3)：异常位置；</li>\n</ul>\n<h2 id=\"2-异常的分类\"><a href=\"#2-异常的分类\" class=\"headerlink\" title=\"2. 异常的分类\"></a>2. 异常的分类</h2><h3 id=\"JDK提供的类：\"><a href=\"#JDK提供的类：\" class=\"headerlink\" title=\"JDK提供的类：\"></a>JDK提供的类：</h3><blockquote>\n<p><img src=\"http://i.imgur.com/gTBhe2x.png\" alt=\"\"></p>\n<ol>\n<li>Throwable：所有异常的父类；</li>\n<li>Error：虚拟机运行时产生的错误，产生错误，虚拟机直接关闭；</li>\n<li>Exception： 分为UncheckExeption（RuntimeExeption）和CheckExeption</li>\n</ol>\n<p>RuntimeException + Error 和其子类都是属于uncheckexception<br>Exception类中除了 RuntimeException之外的类，都是属于checkexception</p>\n</blockquote>\n<h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><h5 id=\"checkException\"><a href=\"#checkException\" class=\"headerlink\" title=\"checkException\"></a>checkException</h5><p>&gt;<br>checkException是必须要处理的，也就是不能抛出，必须通过try-catch来完成，不处理的话是不能进行编译的。<br>示例：</p>\n<pre><code class=\"java\">class TestCheck{\n    public static void main(String args[]){\n        //CheckException\n        Thread.sleep(1000); //让当前线程休眠1000ms\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/xMd1LOi.png\" alt=\"\"></p>\n<h5 id=\"uncheckException（-RuntimeException）\"><a href=\"#uncheckException（-RuntimeException）\" class=\"headerlink\" title=\"uncheckException（ RuntimeException）\"></a>uncheckException（ RuntimeException）</h5><p>&gt;<br>运行时异常包括平常遇到的各种异常，如空指针异常，数据格式异常等一系列异常，这种异常是可以不捕获的，可通过throws抛出异常，交给别的代码或者JAVA虚拟机来完成<br>示例：</p>\n<pre><code class=\"java\">class Test{\n    public static void main(String args[]){\n        //UncheckException\n        int i = 1 / 0;\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/ll7JnfN.png\" alt=\"\"></p>\n<h2 id=\"3-try…catch…finally结构\"><a href=\"#3-try…catch…finally结构\" class=\"headerlink\" title=\"3. try…catch…finally结构\"></a>3. try…catch…finally结构</h2><p>&gt;</p>\n<pre><code class=\"java\">try{\n       //代码A\n    //有可能出现异常的代码B\n    //代码C\n}\ncatch(Exception e){ //虚拟机产生的异常对象e\n    e.printStackTrace(); //处理异常的代码D\n    //代码E\n}\nfinally{\n    //异常的出口\n    //执行扫尾工作的代码F\n}\n</code></pre>\n<h4 id=\"如果try中代码B没有异常：执行代码A-B-C-F\"><a href=\"#如果try中代码B没有异常：执行代码A-B-C-F\" class=\"headerlink\" title=\"如果try中代码B没有异常：执行代码A-B-C-F\"></a>如果try中代码B没有异常：执行代码A-B-C-F</h4><h4 id=\"如果try中代码B出现异常：执行代码A-B-D-E-F\"><a href=\"#如果try中代码B出现异常：执行代码A-B-D-E-F\" class=\"headerlink\" title=\"如果try中代码B出现异常：执行代码A-B-D-E-F\"></a>如果try中代码B出现异常：执行代码A-B-D-E-F</h4><h3 id=\"uncheckException\"><a href=\"#uncheckException\" class=\"headerlink\" title=\"uncheckException\"></a>uncheckException</h3><p>&gt;</p>\n<pre><code class=\"java\">//uncheckException\nclass TestCheck{\n    public static void main(String args[]){\n        System.out.println(1);\n        try{\n            System.out.println(2);\n            //有可能出现异常的代码\n            int i = 1/0;\n            System.out.println(3);\n        }\n        catch(Exception e){ //虚拟机产生的异常对象e\n            e.printStackTrace(); //打印异常栈的追踪信息\n            System.out.println(4);\n        }\n        finally{\n            //异常的出口\n            System.out.println(&quot;finally&quot;);\n        }\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/DG4HLEn.png\" alt=\"\"></p>\n<h3 id=\"checkException-1\"><a href=\"#checkException-1\" class=\"headerlink\" title=\"checkException\"></a>checkException</h3><p>&gt;</p>\n<pre><code class=\"java\">//checkException\nclass TestCheck{\n    public static void main(String args[]){\n        System.out.println(1);\n        try{\n            System.out.println(2);\n            //有可能出现异常的代码\n            Thread.sleep(1000); //让当前线程休眠1000ms\n            System.out.println(3);\n        }\n        catch(Exception e){ //虚拟机产生的异常对象e\n            e.printStackTrace(); //打印异常栈的追踪信息\n            System.out.println(4);\n        }\n        finally{\n            //异常的出口\n            System.out.println(&quot;finally&quot;);\n        }\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/yWIuLO9.png\" alt=\"\"><br>屏幕首先显示1，2，然后停顿1000ms，再显示3和finally</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>什么是异常</li>\n<li>异常的分类</li>\n<li>try…catch…finally结构的使用方法</li>\n</ol>\n<h2 id=\"1-什么是异常？\"><a href=\"#1-什么是异常？\" class=\"headerlink\" title=\"1. 什么是异常？\"></a>1. 什么是异常？</h2><p>&gt;</p>\n<ul>\n<li>异常(Exception)：中断了正常指令流的事件。</li>\n<li>异常是一个对象；</li>\n<li>异常产生于程序运行时；</li>\n<li><p>指令流：程序执行时一系列的连续指令称为指令流。<br>&gt;<br>示例：</p>\n<pre><code class=\"java\">class Test{\n  public static void main(String args[]){\n      int i = 1 / 0;\n  }\n}\n</code></pre>\n<p>抛出异常：</p>\n<blockquote>\n<p>Exception in thread “main” java.lang.ArithmeticException: / by zero<br>  at Test3.main(Test3.java:6)</p>\n</blockquote>\n</li>\n<li><p>Exception in thread “main” ：在主线程中出现异常；</p>\n</li>\n<li>ArithmeticException：异常的名称，算术异常；</li>\n<li>/ by zero：被0除；</li>\n<li>at Test.main(Test.java:3)：异常位置；</li>\n</ul>\n<h2 id=\"2-异常的分类\"><a href=\"#2-异常的分类\" class=\"headerlink\" title=\"2. 异常的分类\"></a>2. 异常的分类</h2><h3 id=\"JDK提供的类：\"><a href=\"#JDK提供的类：\" class=\"headerlink\" title=\"JDK提供的类：\"></a>JDK提供的类：</h3><blockquote>\n<p><img src=\"http://i.imgur.com/gTBhe2x.png\" alt=\"\"></p>\n<ol>\n<li>Throwable：所有异常的父类；</li>\n<li>Error：虚拟机运行时产生的错误，产生错误，虚拟机直接关闭；</li>\n<li>Exception： 分为UncheckExeption（RuntimeExeption）和CheckExeption</li>\n</ol>\n<p>RuntimeException + Error 和其子类都是属于uncheckexception<br>Exception类中除了 RuntimeException之外的类，都是属于checkexception</p>\n</blockquote>\n<h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><h5 id=\"checkException\"><a href=\"#checkException\" class=\"headerlink\" title=\"checkException\"></a>checkException</h5><p>&gt;<br>checkException是必须要处理的，也就是不能抛出，必须通过try-catch来完成，不处理的话是不能进行编译的。<br>示例：</p>\n<pre><code class=\"java\">class TestCheck{\n    public static void main(String args[]){\n        //CheckException\n        Thread.sleep(1000); //让当前线程休眠1000ms\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/xMd1LOi.png\" alt=\"\"></p>\n<h5 id=\"uncheckException（-RuntimeException）\"><a href=\"#uncheckException（-RuntimeException）\" class=\"headerlink\" title=\"uncheckException（ RuntimeException）\"></a>uncheckException（ RuntimeException）</h5><p>&gt;<br>运行时异常包括平常遇到的各种异常，如空指针异常，数据格式异常等一系列异常，这种异常是可以不捕获的，可通过throws抛出异常，交给别的代码或者JAVA虚拟机来完成<br>示例：</p>\n<pre><code class=\"java\">class Test{\n    public static void main(String args[]){\n        //UncheckException\n        int i = 1 / 0;\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/ll7JnfN.png\" alt=\"\"></p>\n<h2 id=\"3-try…catch…finally结构\"><a href=\"#3-try…catch…finally结构\" class=\"headerlink\" title=\"3. try…catch…finally结构\"></a>3. try…catch…finally结构</h2><p>&gt;</p>\n<pre><code class=\"java\">try{\n       //代码A\n    //有可能出现异常的代码B\n    //代码C\n}\ncatch(Exception e){ //虚拟机产生的异常对象e\n    e.printStackTrace(); //处理异常的代码D\n    //代码E\n}\nfinally{\n    //异常的出口\n    //执行扫尾工作的代码F\n}\n</code></pre>\n<h4 id=\"如果try中代码B没有异常：执行代码A-B-C-F\"><a href=\"#如果try中代码B没有异常：执行代码A-B-C-F\" class=\"headerlink\" title=\"如果try中代码B没有异常：执行代码A-B-C-F\"></a>如果try中代码B没有异常：执行代码A-B-C-F</h4><h4 id=\"如果try中代码B出现异常：执行代码A-B-D-E-F\"><a href=\"#如果try中代码B出现异常：执行代码A-B-D-E-F\" class=\"headerlink\" title=\"如果try中代码B出现异常：执行代码A-B-D-E-F\"></a>如果try中代码B出现异常：执行代码A-B-D-E-F</h4><h3 id=\"uncheckException\"><a href=\"#uncheckException\" class=\"headerlink\" title=\"uncheckException\"></a>uncheckException</h3><p>&gt;</p>\n<pre><code class=\"java\">//uncheckException\nclass TestCheck{\n    public static void main(String args[]){\n        System.out.println(1);\n        try{\n            System.out.println(2);\n            //有可能出现异常的代码\n            int i = 1/0;\n            System.out.println(3);\n        }\n        catch(Exception e){ //虚拟机产生的异常对象e\n            e.printStackTrace(); //打印异常栈的追踪信息\n            System.out.println(4);\n        }\n        finally{\n            //异常的出口\n            System.out.println(&quot;finally&quot;);\n        }\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/DG4HLEn.png\" alt=\"\"></p>\n<h3 id=\"checkException-1\"><a href=\"#checkException-1\" class=\"headerlink\" title=\"checkException\"></a>checkException</h3><p>&gt;</p>\n<pre><code class=\"java\">//checkException\nclass TestCheck{\n    public static void main(String args[]){\n        System.out.println(1);\n        try{\n            System.out.println(2);\n            //有可能出现异常的代码\n            Thread.sleep(1000); //让当前线程休眠1000ms\n            System.out.println(3);\n        }\n        catch(Exception e){ //虚拟机产生的异常对象e\n            e.printStackTrace(); //打印异常栈的追踪信息\n            System.out.println(4);\n        }\n        finally{\n            //异常的出口\n            System.out.println(&quot;finally&quot;);\n        }\n    }\n}\n</code></pre>\n<p>运行结果：<br><img src=\"http://i.imgur.com/yWIuLO9.png\" alt=\"\"><br>屏幕首先显示1，2，然后停顿1000ms，再显示3和finally</p>\n"},{"title":"Java中的数组","date":"2017-06-15T16:00:00.000Z","abbrlink":"e7882660","_content":"\n* 数组是用来存储固定大小的同类型元素。\n\n## 数组的定义方法\n\n### 静态定义法\n\n```java\nint arr [] = {1,5,6,4,};\n```\n\n* arr：整型数组。\n* arr[n]：n为下标，从第0位开始。arr[0]=1, arr[1]=5, arr[2]=6.\n* 数组长度：arr.length.\n\n### 动态定义法\n\n```java\nint arr [] = new int[10];\n```\n\n* 数组的长度为10.\n\n\n### 二维数组的定义方法\n\n```java\n静态定义法：\nint arr[] [] = {{5,3,6},{5,8,7},{6,3,2}};\n动态定义法：\nint arr[] [] = new int[][];\n例：\nint[1][2] = 7;\n```\n\n\n\n","source":"_posts/Java中的数组.md","raw":"---\ntitle: Java中的数组\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: e7882660\n---\n\n* 数组是用来存储固定大小的同类型元素。\n\n## 数组的定义方法\n\n### 静态定义法\n\n```java\nint arr [] = {1,5,6,4,};\n```\n\n* arr：整型数组。\n* arr[n]：n为下标，从第0位开始。arr[0]=1, arr[1]=5, arr[2]=6.\n* 数组长度：arr.length.\n\n### 动态定义法\n\n```java\nint arr [] = new int[10];\n```\n\n* 数组的长度为10.\n\n\n### 二维数组的定义方法\n\n```java\n静态定义法：\nint arr[] [] = {{5,3,6},{5,8,7},{6,3,2}};\n动态定义法：\nint arr[] [] = new int[][];\n例：\nint[1][2] = 7;\n```\n\n\n\n","slug":"Java中的数组","published":1,"updated":"2017-11-12T02:34:19.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xii000rdfbxu0w67lft","content":"<ul>\n<li>数组是用来存储固定大小的同类型元素。</li>\n</ul>\n<h2 id=\"数组的定义方法\"><a href=\"#数组的定义方法\" class=\"headerlink\" title=\"数组的定义方法\"></a>数组的定义方法</h2><h3 id=\"静态定义法\"><a href=\"#静态定义法\" class=\"headerlink\" title=\"静态定义法\"></a>静态定义法</h3><pre><code class=\"java\">int arr [] = {1,5,6,4,};\n</code></pre>\n<ul>\n<li>arr：整型数组。</li>\n<li>arr[n]：n为下标，从第0位开始。arr[0]=1, arr[1]=5, arr[2]=6.</li>\n<li>数组长度：arr.length.</li>\n</ul>\n<h3 id=\"动态定义法\"><a href=\"#动态定义法\" class=\"headerlink\" title=\"动态定义法\"></a>动态定义法</h3><pre><code class=\"java\">int arr [] = new int[10];\n</code></pre>\n<ul>\n<li>数组的长度为10.</li>\n</ul>\n<h3 id=\"二维数组的定义方法\"><a href=\"#二维数组的定义方法\" class=\"headerlink\" title=\"二维数组的定义方法\"></a>二维数组的定义方法</h3><pre><code class=\"java\">静态定义法：\nint arr[] [] = {{5,3,6},{5,8,7},{6,3,2}};\n动态定义法：\nint arr[] [] = new int[][];\n例：\nint[1][2] = 7;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>数组是用来存储固定大小的同类型元素。</li>\n</ul>\n<h2 id=\"数组的定义方法\"><a href=\"#数组的定义方法\" class=\"headerlink\" title=\"数组的定义方法\"></a>数组的定义方法</h2><h3 id=\"静态定义法\"><a href=\"#静态定义法\" class=\"headerlink\" title=\"静态定义法\"></a>静态定义法</h3><pre><code class=\"java\">int arr [] = {1,5,6,4,};\n</code></pre>\n<ul>\n<li>arr：整型数组。</li>\n<li>arr[n]：n为下标，从第0位开始。arr[0]=1, arr[1]=5, arr[2]=6.</li>\n<li>数组长度：arr.length.</li>\n</ul>\n<h3 id=\"动态定义法\"><a href=\"#动态定义法\" class=\"headerlink\" title=\"动态定义法\"></a>动态定义法</h3><pre><code class=\"java\">int arr [] = new int[10];\n</code></pre>\n<ul>\n<li>数组的长度为10.</li>\n</ul>\n<h3 id=\"二维数组的定义方法\"><a href=\"#二维数组的定义方法\" class=\"headerlink\" title=\"二维数组的定义方法\"></a>二维数组的定义方法</h3><pre><code class=\"java\">静态定义法：\nint arr[] [] = {{5,3,6},{5,8,7},{6,3,2}};\n动态定义法：\nint arr[] [] = new int[][];\n例：\nint[1][2] = 7;\n</code></pre>\n"},{"title":"Java中的运算符","date":"2017-06-15T16:00:00.000Z","abbrlink":"83e4d5ed","_content":"\n## Java中的运算符 ##\n> Java中的运算符分为算术运算符，赋值运算符，比较运算符，逻辑运算符，位运算符。\n\n### 算术运算符 ###\n1. 进行除法运算时，如果除数和被除数都为整得到的结果也会是整数，会忽略小数部分。\n例如：\n```java\n6600/1000*1000\n```\n最后得到的结果为6000。表达式自左至右运算，6600/1000得到6，6*1000=6000。\n\n2. 进行除法运算时如果有小数参与，得到的结果为小数。\n例如：\n```java\n6.6/10\n```\n结果为0.66。\n\n3. 进行取模（%）运算时，运算结果的正负取决于%左边的（被模数）符号有关，与%右边的（模数）的符号无关。\n例如：\n```java\n(-6)/2\n```\n结果为-3。\n```java\n6/(-3)\n```\n结果为2。\n\n### 赋值运算符 ###\n1. 可以通过一条赋值语句对多个变量进行赋值。\n例如：\n```java\nint x, y, z;\nx = y = z = 5;  //为三个变量同时赋值。\n```\n\n2. 使用+=、-=、*=、/=、%=进行赋值时，强制转换类型会自动完成。\n\n### 位运算符 ###\n左移：<<   00000100<<2  00010000     10010001<<2 01000100\n右移：>>   01100010>>2  00011000     11100010>>2 11111000\n无符号右移：     01100010>>>2  00011000     11100010>>>2 00111000\n","source":"_posts/Java中的运算符.md","raw":"---\ntitle: Java中的运算符\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 83e4d5ed\n---\n\n## Java中的运算符 ##\n> Java中的运算符分为算术运算符，赋值运算符，比较运算符，逻辑运算符，位运算符。\n\n### 算术运算符 ###\n1. 进行除法运算时，如果除数和被除数都为整得到的结果也会是整数，会忽略小数部分。\n例如：\n```java\n6600/1000*1000\n```\n最后得到的结果为6000。表达式自左至右运算，6600/1000得到6，6*1000=6000。\n\n2. 进行除法运算时如果有小数参与，得到的结果为小数。\n例如：\n```java\n6.6/10\n```\n结果为0.66。\n\n3. 进行取模（%）运算时，运算结果的正负取决于%左边的（被模数）符号有关，与%右边的（模数）的符号无关。\n例如：\n```java\n(-6)/2\n```\n结果为-3。\n```java\n6/(-3)\n```\n结果为2。\n\n### 赋值运算符 ###\n1. 可以通过一条赋值语句对多个变量进行赋值。\n例如：\n```java\nint x, y, z;\nx = y = z = 5;  //为三个变量同时赋值。\n```\n\n2. 使用+=、-=、*=、/=、%=进行赋值时，强制转换类型会自动完成。\n\n### 位运算符 ###\n左移：<<   00000100<<2  00010000     10010001<<2 01000100\n右移：>>   01100010>>2  00011000     11100010>>2 11111000\n无符号右移：     01100010>>>2  00011000     11100010>>>2 00111000\n","slug":"Java中的运算符","published":1,"updated":"2017-11-12T02:16:52.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xil000vdfbxium7avyz","content":"<h2 id=\"Java中的运算符\"><a href=\"#Java中的运算符\" class=\"headerlink\" title=\"Java中的运算符\"></a>Java中的运算符</h2><blockquote>\n<p>Java中的运算符分为算术运算符，赋值运算符，比较运算符，逻辑运算符，位运算符。</p>\n</blockquote>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><ol>\n<li><p>进行除法运算时，如果除数和被除数都为整得到的结果也会是整数，会忽略小数部分。<br>例如：</p>\n<pre><code class=\"java\">6600/1000*1000\n</code></pre>\n<p>最后得到的结果为6000。表达式自左至右运算，6600/1000得到6，6*1000=6000。</p>\n</li>\n<li><p>进行除法运算时如果有小数参与，得到的结果为小数。<br>例如：</p>\n<pre><code class=\"java\">6.6/10\n</code></pre>\n<p>结果为0.66。</p>\n</li>\n<li><p>进行取模（%）运算时，运算结果的正负取决于%左边的（被模数）符号有关，与%右边的（模数）的符号无关。<br>例如：</p>\n<pre><code class=\"java\">(-6)/2\n</code></pre>\n<p>结果为-3。</p>\n<pre><code class=\"java\">6/(-3)\n</code></pre>\n<p>结果为2。</p>\n</li>\n</ol>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><ol>\n<li><p>可以通过一条赋值语句对多个变量进行赋值。<br>例如：</p>\n<pre><code class=\"java\">int x, y, z;\nx = y = z = 5;  //为三个变量同时赋值。\n</code></pre>\n</li>\n<li><p>使用+=、-=、*=、/=、%=进行赋值时，强制转换类型会自动完成。</p>\n</li>\n</ol>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>左移：&lt;&lt;   00000100&lt;<2 00010000=\"\" 10010001<<2=\"\" 01000100=\"\" 右移：=\"\">&gt;   01100010&gt;&gt;2  00011000     11100010&gt;&gt;2 11111000<br>无符号右移：     01100010&gt;&gt;&gt;2  00011000     11100010&gt;&gt;&gt;2 00111000</2></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java中的运算符\"><a href=\"#Java中的运算符\" class=\"headerlink\" title=\"Java中的运算符\"></a>Java中的运算符</h2><blockquote>\n<p>Java中的运算符分为算术运算符，赋值运算符，比较运算符，逻辑运算符，位运算符。</p>\n</blockquote>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><ol>\n<li><p>进行除法运算时，如果除数和被除数都为整得到的结果也会是整数，会忽略小数部分。<br>例如：</p>\n<pre><code class=\"java\">6600/1000*1000\n</code></pre>\n<p>最后得到的结果为6000。表达式自左至右运算，6600/1000得到6，6*1000=6000。</p>\n</li>\n<li><p>进行除法运算时如果有小数参与，得到的结果为小数。<br>例如：</p>\n<pre><code class=\"java\">6.6/10\n</code></pre>\n<p>结果为0.66。</p>\n</li>\n<li><p>进行取模（%）运算时，运算结果的正负取决于%左边的（被模数）符号有关，与%右边的（模数）的符号无关。<br>例如：</p>\n<pre><code class=\"java\">(-6)/2\n</code></pre>\n<p>结果为-3。</p>\n<pre><code class=\"java\">6/(-3)\n</code></pre>\n<p>结果为2。</p>\n</li>\n</ol>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><ol>\n<li><p>可以通过一条赋值语句对多个变量进行赋值。<br>例如：</p>\n<pre><code class=\"java\">int x, y, z;\nx = y = z = 5;  //为三个变量同时赋值。\n</code></pre>\n</li>\n<li><p>使用+=、-=、*=、/=、%=进行赋值时，强制转换类型会自动完成。</p>\n</li>\n</ol>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>左移：&lt;&lt;   00000100&lt;<2 00010000=\"\" 10010001<<2=\"\" 01000100=\"\" 右移：=\"\">&gt;   01100010&gt;&gt;2  00011000     11100010&gt;&gt;2 11111000<br>无符号右移：     01100010&gt;&gt;&gt;2  00011000     11100010&gt;&gt;&gt;2 00111000</2></p>\n"},{"title":"css和响应式","abbrlink":"343902f6","data":"2017/9/16","_content":"\n# css框架\n## Bootstrap 框架\n> Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。\nhttp://www.runoob.com/bootstrap/bootstrap-tutorial.html\n\n* 在 html head 开头引入下面代码：\n\n```html\n<head>\n    <meta charset=\"UTF-8\">\n    <!--  兼容古老的 IE -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 响应式适应 ，width 属性控制设备的宽度显示， initial-scale=1确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放，user-scalable=no 可以禁用其缩放（zooming）功能-->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n    <!-- CSS 样式重置 -->\n    <link href=\"https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n    <!-- 引入 Bootstrap css 压缩文件-->\n    <link href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- 引入自己 css 的文件 -->\n    <link rel=\"stylesheet\" href=\"../style/task_1.css\">\n    <title>Test</title>\n</head>\n```\n\n## 响应式设计\n\n> 根据不同像素屏幕，展示不同大小页面。\n\n`!important` 为开发者提供了一个增加样式权重的方法。!important是对整条样式的声明，包括这个样式的属性和属性值。\n\n**### 媒体查询**\n\n```css\n@media only screen and (max-width: 300px) {\n    p {\n        background-color: red;\n    }\n}\n```\n\n* only 兼容旧式浏览器。\n* screen 表示这个媒体查询适用于所有屏幕。\n* and 后面跟条件。\n* **一般个@media样式要放在css样式表的最下面，不然会被相同样式覆盖。**\n\n### CSS 样式重置\n\n* 不同的浏览器在对于CSS没有定义的一些样式属性是不一样的\n* 比如没有在自己的CSS里面规定超链接有没有下划线的时候，有些浏览器有，有些浏览器没有。\n* 再比如有一些浏览器规定的超链接默认颜色是蓝色，有一些又是黑色。\n* 而这个CSS的功能就是对几乎所有的默认样式进行重置，让所有的浏览器上对于未定义的样式浏览效果达到一致。\n\n**使用方法：**\n\n```html\n<!-- 在自己的样式表前面引入以下 Normalize.css 360cdn 链接地址-->\n<link href=\"https://lib.baomitu.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n```\n\n### 网格设计\n\n* 大部分网页采用 12 columns 设计，可以很好的划分为2，3，4等份。\n\n\n## 文章字体\n\n* segmentfault\n```css\nfont-family: -apple-system,\"Helvetica Neue\",Helvetica,Arial,\"PingFang SC\",\"Hiragino Sans GB\",\"WenQuanYi Micro Hei\",\"Microsoft Yahei\",sans-serif;\n\nfont-size: 14px;\n```\n\n* 知乎\n```css\nfont-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Noto Sans CJK SC,WenQuanYi Micro Hei,Arial,sans-serif;\nfont-size: 15px;\n```\n\n## 颜色\n\n导航栏 #243d4c\n\n背景 #eee\n#f5f5f5\n#f8f8f8\n#ffffff\n\n按钮 #02b3e4\n#148bb1\n#2D78BA\n\n边框阴影\n```css\n.ss::before, .clss::before {\n    bottom: 0;\n    box-shadow: 0 -1px 0 #e0e0e0, 0 0 2px rgba(0,0,0,.12), 0 2px 4px rgba(0,0,0,.24);\n    content: '';\n    display: block;\n    left: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n```","source":"_posts/CSS和响应式.md","raw":"---\ntitle: css和响应式\ntags: CSS\ncategories: CSS\nabbrlink: 343902f6\ndata: 2017/9/16\n---\n\n# css框架\n## Bootstrap 框架\n> Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。\nhttp://www.runoob.com/bootstrap/bootstrap-tutorial.html\n\n* 在 html head 开头引入下面代码：\n\n```html\n<head>\n    <meta charset=\"UTF-8\">\n    <!--  兼容古老的 IE -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 响应式适应 ，width 属性控制设备的宽度显示， initial-scale=1确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放，user-scalable=no 可以禁用其缩放（zooming）功能-->\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n    <!-- CSS 样式重置 -->\n    <link href=\"https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n    <!-- 引入 Bootstrap css 压缩文件-->\n    <link href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <!-- 引入自己 css 的文件 -->\n    <link rel=\"stylesheet\" href=\"../style/task_1.css\">\n    <title>Test</title>\n</head>\n```\n\n## 响应式设计\n\n> 根据不同像素屏幕，展示不同大小页面。\n\n`!important` 为开发者提供了一个增加样式权重的方法。!important是对整条样式的声明，包括这个样式的属性和属性值。\n\n**### 媒体查询**\n\n```css\n@media only screen and (max-width: 300px) {\n    p {\n        background-color: red;\n    }\n}\n```\n\n* only 兼容旧式浏览器。\n* screen 表示这个媒体查询适用于所有屏幕。\n* and 后面跟条件。\n* **一般个@media样式要放在css样式表的最下面，不然会被相同样式覆盖。**\n\n### CSS 样式重置\n\n* 不同的浏览器在对于CSS没有定义的一些样式属性是不一样的\n* 比如没有在自己的CSS里面规定超链接有没有下划线的时候，有些浏览器有，有些浏览器没有。\n* 再比如有一些浏览器规定的超链接默认颜色是蓝色，有一些又是黑色。\n* 而这个CSS的功能就是对几乎所有的默认样式进行重置，让所有的浏览器上对于未定义的样式浏览效果达到一致。\n\n**使用方法：**\n\n```html\n<!-- 在自己的样式表前面引入以下 Normalize.css 360cdn 链接地址-->\n<link href=\"https://lib.baomitu.com/normalize/7.0.0/normalize.min.css\" rel=\"stylesheet\">\n```\n\n### 网格设计\n\n* 大部分网页采用 12 columns 设计，可以很好的划分为2，3，4等份。\n\n\n## 文章字体\n\n* segmentfault\n```css\nfont-family: -apple-system,\"Helvetica Neue\",Helvetica,Arial,\"PingFang SC\",\"Hiragino Sans GB\",\"WenQuanYi Micro Hei\",\"Microsoft Yahei\",sans-serif;\n\nfont-size: 14px;\n```\n\n* 知乎\n```css\nfont-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Noto Sans CJK SC,WenQuanYi Micro Hei,Arial,sans-serif;\nfont-size: 15px;\n```\n\n## 颜色\n\n导航栏 #243d4c\n\n背景 #eee\n#f5f5f5\n#f8f8f8\n#ffffff\n\n按钮 #02b3e4\n#148bb1\n#2D78BA\n\n边框阴影\n```css\n.ss::before, .clss::before {\n    bottom: 0;\n    box-shadow: 0 -1px 0 #e0e0e0, 0 0 2px rgba(0,0,0,.12), 0 2px 4px rgba(0,0,0,.24);\n    content: '';\n    display: block;\n    left: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n```","slug":"CSS和响应式","published":1,"date":"2017-11-12T02:19:13.210Z","updated":"2017-11-12T02:19:13.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xin000xdfbx4eu8ev62","content":"<h1 id=\"css框架\"><a href=\"#css框架\" class=\"headerlink\" title=\"css框架\"></a>css框架</h1><h2 id=\"Bootstrap-框架\"><a href=\"#Bootstrap-框架\" class=\"headerlink\" title=\"Bootstrap 框架\"></a>Bootstrap 框架</h2><blockquote>\n<p>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。<br><a href=\"http://www.runoob.com/bootstrap/bootstrap-tutorial.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/bootstrap/bootstrap-tutorial.html</a></p>\n</blockquote>\n<ul>\n<li>在 html head 开头引入下面代码：</li>\n</ul>\n<pre><code class=\"html\">&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;!--  兼容古老的 IE --&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;!-- 响应式适应 ，width 属性控制设备的宽度显示， initial-scale=1确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放，user-scalable=no 可以禁用其缩放（zooming）功能--&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no&quot;&gt;\n    &lt;!-- CSS 样式重置 --&gt;\n    &lt;link href=&quot;https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;!-- 引入 Bootstrap css 压缩文件--&gt;\n    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;!-- 引入自己 css 的文件 --&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../style/task_1.css&quot;&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n<h2 id=\"响应式设计\"><a href=\"#响应式设计\" class=\"headerlink\" title=\"响应式设计\"></a>响应式设计</h2><blockquote>\n<p>根据不同像素屏幕，展示不同大小页面。</p>\n</blockquote>\n<p><code>!important</code> 为开发者提供了一个增加样式权重的方法。!important是对整条样式的声明，包括这个样式的属性和属性值。</p>\n<p><strong>### 媒体查询</strong></p>\n<pre><code class=\"css\">@media only screen and (max-width: 300px) {\n    p {\n        background-color: red;\n    }\n}\n</code></pre>\n<ul>\n<li>only 兼容旧式浏览器。</li>\n<li>screen 表示这个媒体查询适用于所有屏幕。</li>\n<li>and 后面跟条件。</li>\n<li><strong>一般个@media样式要放在css样式表的最下面，不然会被相同样式覆盖。</strong></li>\n</ul>\n<h3 id=\"CSS-样式重置\"><a href=\"#CSS-样式重置\" class=\"headerlink\" title=\"CSS 样式重置\"></a>CSS 样式重置</h3><ul>\n<li>不同的浏览器在对于CSS没有定义的一些样式属性是不一样的</li>\n<li>比如没有在自己的CSS里面规定超链接有没有下划线的时候，有些浏览器有，有些浏览器没有。</li>\n<li>再比如有一些浏览器规定的超链接默认颜色是蓝色，有一些又是黑色。</li>\n<li>而这个CSS的功能就是对几乎所有的默认样式进行重置，让所有的浏览器上对于未定义的样式浏览效果达到一致。</li>\n</ul>\n<p><strong>使用方法：</strong></p>\n<pre><code class=\"html\">&lt;!-- 在自己的样式表前面引入以下 Normalize.css 360cdn 链接地址--&gt;\n&lt;link href=&quot;https://lib.baomitu.com/normalize/7.0.0/normalize.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n</code></pre>\n<h3 id=\"网格设计\"><a href=\"#网格设计\" class=\"headerlink\" title=\"网格设计\"></a>网格设计</h3><ul>\n<li>大部分网页采用 12 columns 设计，可以很好的划分为2，3，4等份。</li>\n</ul>\n<h2 id=\"文章字体\"><a href=\"#文章字体\" class=\"headerlink\" title=\"文章字体\"></a>文章字体</h2><ul>\n<li>segmentfault<br>```css<br>font-family: -apple-system,”Helvetica Neue”,Helvetica,Arial,”PingFang SC”,”Hiragino Sans GB”,”WenQuanYi Micro Hei”,”Microsoft Yahei”,sans-serif;</li>\n</ul>\n<p>font-size: 14px;</p>\n<pre><code>\n* 知乎\n```css\nfont-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Noto Sans CJK SC,WenQuanYi Micro Hei,Arial,sans-serif;\nfont-size: 15px;\n</code></pre><h2 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h2><p>导航栏 #243d4c</p>\n<p>背景 #eee</p>\n<p>#f5f5f5</p>\n<p>#f8f8f8</p>\n<p>#ffffff</p>\n<p>按钮 #02b3e4</p>\n<p>#148bb1</p>\n<p>#2D78BA</p>\n<p>边框阴影</p>\n<pre><code class=\"css\">.ss::before, .clss::before {\n    bottom: 0;\n    box-shadow: 0 -1px 0 #e0e0e0, 0 0 2px rgba(0,0,0,.12), 0 2px 4px rgba(0,0,0,.24);\n    content: &#39;&#39;;\n    display: block;\n    left: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css框架\"><a href=\"#css框架\" class=\"headerlink\" title=\"css框架\"></a>css框架</h1><h2 id=\"Bootstrap-框架\"><a href=\"#Bootstrap-框架\" class=\"headerlink\" title=\"Bootstrap 框架\"></a>Bootstrap 框架</h2><blockquote>\n<p>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。<br><a href=\"http://www.runoob.com/bootstrap/bootstrap-tutorial.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/bootstrap/bootstrap-tutorial.html</a></p>\n</blockquote>\n<ul>\n<li>在 html head 开头引入下面代码：</li>\n</ul>\n<pre><code class=\"html\">&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;!--  兼容古老的 IE --&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;!-- 响应式适应 ，width 属性控制设备的宽度显示， initial-scale=1确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放，user-scalable=no 可以禁用其缩放（zooming）功能--&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no&quot;&gt;\n    &lt;!-- CSS 样式重置 --&gt;\n    &lt;link href=&quot;https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;!-- 引入 Bootstrap css 压缩文件--&gt;\n    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;!-- 引入自己 css 的文件 --&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../style/task_1.css&quot;&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n&lt;/head&gt;\n</code></pre>\n<h2 id=\"响应式设计\"><a href=\"#响应式设计\" class=\"headerlink\" title=\"响应式设计\"></a>响应式设计</h2><blockquote>\n<p>根据不同像素屏幕，展示不同大小页面。</p>\n</blockquote>\n<p><code>!important</code> 为开发者提供了一个增加样式权重的方法。!important是对整条样式的声明，包括这个样式的属性和属性值。</p>\n<p><strong>### 媒体查询</strong></p>\n<pre><code class=\"css\">@media only screen and (max-width: 300px) {\n    p {\n        background-color: red;\n    }\n}\n</code></pre>\n<ul>\n<li>only 兼容旧式浏览器。</li>\n<li>screen 表示这个媒体查询适用于所有屏幕。</li>\n<li>and 后面跟条件。</li>\n<li><strong>一般个@media样式要放在css样式表的最下面，不然会被相同样式覆盖。</strong></li>\n</ul>\n<h3 id=\"CSS-样式重置\"><a href=\"#CSS-样式重置\" class=\"headerlink\" title=\"CSS 样式重置\"></a>CSS 样式重置</h3><ul>\n<li>不同的浏览器在对于CSS没有定义的一些样式属性是不一样的</li>\n<li>比如没有在自己的CSS里面规定超链接有没有下划线的时候，有些浏览器有，有些浏览器没有。</li>\n<li>再比如有一些浏览器规定的超链接默认颜色是蓝色，有一些又是黑色。</li>\n<li>而这个CSS的功能就是对几乎所有的默认样式进行重置，让所有的浏览器上对于未定义的样式浏览效果达到一致。</li>\n</ul>\n<p><strong>使用方法：</strong></p>\n<pre><code class=\"html\">&lt;!-- 在自己的样式表前面引入以下 Normalize.css 360cdn 链接地址--&gt;\n&lt;link href=&quot;https://lib.baomitu.com/normalize/7.0.0/normalize.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n</code></pre>\n<h3 id=\"网格设计\"><a href=\"#网格设计\" class=\"headerlink\" title=\"网格设计\"></a>网格设计</h3><ul>\n<li>大部分网页采用 12 columns 设计，可以很好的划分为2，3，4等份。</li>\n</ul>\n<h2 id=\"文章字体\"><a href=\"#文章字体\" class=\"headerlink\" title=\"文章字体\"></a>文章字体</h2><ul>\n<li>segmentfault<br>```css<br>font-family: -apple-system,”Helvetica Neue”,Helvetica,Arial,”PingFang SC”,”Hiragino Sans GB”,”WenQuanYi Micro Hei”,”Microsoft Yahei”,sans-serif;</li>\n</ul>\n<p>font-size: 14px;</p>\n<pre><code>\n* 知乎\n```css\nfont-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Noto Sans CJK SC,WenQuanYi Micro Hei,Arial,sans-serif;\nfont-size: 15px;\n</code></pre><h2 id=\"颜色\"><a href=\"#颜色\" class=\"headerlink\" title=\"颜色\"></a>颜色</h2><p>导航栏 #243d4c</p>\n<p>背景 #eee</p>\n<p>#f5f5f5</p>\n<p>#f8f8f8</p>\n<p>#ffffff</p>\n<p>按钮 #02b3e4</p>\n<p>#148bb1</p>\n<p>#2D78BA</p>\n<p>边框阴影</p>\n<pre><code class=\"css\">.ss::before, .clss::before {\n    bottom: 0;\n    box-shadow: 0 -1px 0 #e0e0e0, 0 0 2px rgba(0,0,0,.12), 0 2px 4px rgba(0,0,0,.24);\n    content: &#39;&#39;;\n    display: block;\n    left: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n}\n</code></pre>\n"},{"title":"Map和Set","abbrlink":"5225cd1c","date":"2017-09-11T03:14:28.000Z","_content":"## Map 键值对\n> 一组键值对结构，查找速度快。储存具有映射关系的数据，例如身份证上面的姓名和身份证号码。\n\n### Map 函数\n```javascript\nvar map = new Map(); // 初始化 Map\nmap.set('XiaoMing', 22); // 添加键值对 key-value\nmap.set('HaHa', 66);\nmap.has('HaHa'); // 是否存在 'HaHa', 返回值为 true\nmap.get('XiaoMing'); // 22  获得对应的 value\nmap.delete('HaHa'); // 删除 key: 'HaHa'\n```\n一个 key 只能对应一个 value，对同一个 key，后添加的 value 会覆盖前面的 value。\n\n## Set\n> 一组 Key 值的集合，无序且不重复，不储存 Value。\n\n### Set 函数\n```javascript\nvar set = new Set(); // 初始化 Set\nset.add(6); // 添加 Key 6\nset.delete(6); // 删除 Key 6\n```","source":"_posts/Map和Set.md","raw":"---\ntitle: Map和Set\ntags: JavaScript\ncategories: JavaScript\nabbrlink: 5225cd1c\ndate: 2017-09-11 11:14:28\n---\n## Map 键值对\n> 一组键值对结构，查找速度快。储存具有映射关系的数据，例如身份证上面的姓名和身份证号码。\n\n### Map 函数\n```javascript\nvar map = new Map(); // 初始化 Map\nmap.set('XiaoMing', 22); // 添加键值对 key-value\nmap.set('HaHa', 66);\nmap.has('HaHa'); // 是否存在 'HaHa', 返回值为 true\nmap.get('XiaoMing'); // 22  获得对应的 value\nmap.delete('HaHa'); // 删除 key: 'HaHa'\n```\n一个 key 只能对应一个 value，对同一个 key，后添加的 value 会覆盖前面的 value。\n\n## Set\n> 一组 Key 值的集合，无序且不重复，不储存 Value。\n\n### Set 函数\n```javascript\nvar set = new Set(); // 初始化 Set\nset.add(6); // 添加 Key 6\nset.delete(6); // 删除 Key 6\n```","slug":"Map和Set","published":1,"updated":"2017-11-12T02:23:09.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xip0010dfbxgfza11ej","content":"<h2 id=\"Map-键值对\"><a href=\"#Map-键值对\" class=\"headerlink\" title=\"Map 键值对\"></a>Map 键值对</h2><blockquote>\n<p>一组键值对结构，查找速度快。储存具有映射关系的数据，例如身份证上面的姓名和身份证号码。</p>\n</blockquote>\n<h3 id=\"Map-函数\"><a href=\"#Map-函数\" class=\"headerlink\" title=\"Map 函数\"></a>Map 函数</h3><pre><code class=\"javascript\">var map = new Map(); // 初始化 Map\nmap.set(&#39;XiaoMing&#39;, 22); // 添加键值对 key-value\nmap.set(&#39;HaHa&#39;, 66);\nmap.has(&#39;HaHa&#39;); // 是否存在 &#39;HaHa&#39;, 返回值为 true\nmap.get(&#39;XiaoMing&#39;); // 22  获得对应的 value\nmap.delete(&#39;HaHa&#39;); // 删除 key: &#39;HaHa&#39;\n</code></pre>\n<p>一个 key 只能对应一个 value，对同一个 key，后添加的 value 会覆盖前面的 value。</p>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><blockquote>\n<p>一组 Key 值的集合，无序且不重复，不储存 Value。</p>\n</blockquote>\n<h3 id=\"Set-函数\"><a href=\"#Set-函数\" class=\"headerlink\" title=\"Set 函数\"></a>Set 函数</h3><pre><code class=\"javascript\">var set = new Set(); // 初始化 Set\nset.add(6); // 添加 Key 6\nset.delete(6); // 删除 Key 6\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Map-键值对\"><a href=\"#Map-键值对\" class=\"headerlink\" title=\"Map 键值对\"></a>Map 键值对</h2><blockquote>\n<p>一组键值对结构，查找速度快。储存具有映射关系的数据，例如身份证上面的姓名和身份证号码。</p>\n</blockquote>\n<h3 id=\"Map-函数\"><a href=\"#Map-函数\" class=\"headerlink\" title=\"Map 函数\"></a>Map 函数</h3><pre><code class=\"javascript\">var map = new Map(); // 初始化 Map\nmap.set(&#39;XiaoMing&#39;, 22); // 添加键值对 key-value\nmap.set(&#39;HaHa&#39;, 66);\nmap.has(&#39;HaHa&#39;); // 是否存在 &#39;HaHa&#39;, 返回值为 true\nmap.get(&#39;XiaoMing&#39;); // 22  获得对应的 value\nmap.delete(&#39;HaHa&#39;); // 删除 key: &#39;HaHa&#39;\n</code></pre>\n<p>一个 key 只能对应一个 value，对同一个 key，后添加的 value 会覆盖前面的 value。</p>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><blockquote>\n<p>一组 Key 值的集合，无序且不重复，不储存 Value。</p>\n</blockquote>\n<h3 id=\"Set-函数\"><a href=\"#Set-函数\" class=\"headerlink\" title=\"Set 函数\"></a>Set 函数</h3><pre><code class=\"javascript\">var set = new Set(); // 初始化 Set\nset.add(6); // 添加 Key 6\nset.delete(6); // 删除 Key 6\n</code></pre>\n"},{"title":"VSCode 配置 ESLint + Airbnb + Vue","abbrlink":"3bcc390e","date":"2017-09-30T16:00:00.000Z","_content":"\n## 基本环境\n\nWin 10 v1709\nNodejs v8.70\nVScode v1.17.2\n\n## VSCode 安装 ESLint 扩展\n\n打开 VSCode 搜索 ESLint 扩展安装\n\n## NPM 安装 ESLint\n\n1. 全局安装（推荐）:\n\n  `npm install eslint -g`\n\n2. 项目根目录本地安装：\n\n  `npm install eslint --save-dev`\n\n## 1. 自定义配置规则\n\n1. 全局配置\n在当前用户根目录下执行 `eslint --init`,根据个人爱好选择生成配置文件 `.eslintrc.json`\n例如：`windows\\user\\username`\n\n2. 项目根目录配置：\n在当前用户根目录下执行 `eslint --init`，根据个人爱好选择生成配置文件\n\nps：具体配置参考：http://eslint.cn/docs/user-guide/configuring\n\n## 2. 使用 eslint-config-airbnb 标准规则\n\n1. 查看 Airbnb 标准依赖插件版本：\n\n  `npm info \"eslint-config-airbnb@latest\" peerDependencies`\n\n例如：本次的 plugins 的版本要求:\n\n```\n{  eslint: '^4.9.0',\n  'eslint-plugin-import': '^2.7.0',\n  'eslint-plugin-jsx-a11y': '^6.0.2',\n  'eslint-plugin-react': '^7.4.0'\n}\n```\n2. 安装对应版本的插件:\n\n   `npm install eslint-config-airbnb eslint@^#.#.# eslint-plugin-jsx-a11y@^#.#.# eslint-plugin-import@^#.#.# eslint-plugin-react@^#.#.# -g`\n\n3. 更改配置文件 `.eslintrc.json` 如下：\n\n```json\n{\n    // 要启用的环境\n    \"env\": {\n        \"browser\": true,\n        \"node\": true,\n        \"commonjs\": true,\n        \"es6\": true,\n        \"jquery\": true\n    },\n    // 启用 airbnb 规则\n    \"extends\": \"airbnb\",\n    // 使用语言及版本\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\"\n    },\n    // 个人自定义规则\n    \"rules\": {\n        \"no-console\":\"off\",\n        \"no-plusplus\":\"off\"\n    }\n}\n```\n\n## ESLint 支持 Vue 单文件组件\n\n1. 安装 eslint-plugin-html 插件\n\n`npm install eslint-plugin-html -g`\n\n2. 在 VSCode 设置设置中添加如下配置：\n```json\n     // ESLint 配置\n    \"eslint.enable\": true,\n    // nodejs 路径， windows 路径使用双 \\\\ 进行转义\n    \"eslint.nodePath\": \"C:\\\\Dev\\\\nodejs\",\n    // 启用 eslint-plugin-html 插件\n    \"eslint.options\": {\n        \"plugins\": [\"html\"]\n    },\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n        // 启用 html 和 vue 中 ESLint 验证和自动修复\n        {\n            \"language\": \"html\",\n            \"autoFix\": true\n        },\n        {\n            \"language\": \"vue\",\n            \"autoFix\": true\n        }\n  ```","source":"_posts/VSCode配置ESlint+Airbnb.md","raw":"---\ntitle: VSCode 配置 ESLint + Airbnb + Vue\ntags:\n    - VSCode\n    - ESLint\ncategories: VSCode\nabbrlink: 3bcc390e\ndate: 2017/10/1\n---\n\n## 基本环境\n\nWin 10 v1709\nNodejs v8.70\nVScode v1.17.2\n\n## VSCode 安装 ESLint 扩展\n\n打开 VSCode 搜索 ESLint 扩展安装\n\n## NPM 安装 ESLint\n\n1. 全局安装（推荐）:\n\n  `npm install eslint -g`\n\n2. 项目根目录本地安装：\n\n  `npm install eslint --save-dev`\n\n## 1. 自定义配置规则\n\n1. 全局配置\n在当前用户根目录下执行 `eslint --init`,根据个人爱好选择生成配置文件 `.eslintrc.json`\n例如：`windows\\user\\username`\n\n2. 项目根目录配置：\n在当前用户根目录下执行 `eslint --init`，根据个人爱好选择生成配置文件\n\nps：具体配置参考：http://eslint.cn/docs/user-guide/configuring\n\n## 2. 使用 eslint-config-airbnb 标准规则\n\n1. 查看 Airbnb 标准依赖插件版本：\n\n  `npm info \"eslint-config-airbnb@latest\" peerDependencies`\n\n例如：本次的 plugins 的版本要求:\n\n```\n{  eslint: '^4.9.0',\n  'eslint-plugin-import': '^2.7.0',\n  'eslint-plugin-jsx-a11y': '^6.0.2',\n  'eslint-plugin-react': '^7.4.0'\n}\n```\n2. 安装对应版本的插件:\n\n   `npm install eslint-config-airbnb eslint@^#.#.# eslint-plugin-jsx-a11y@^#.#.# eslint-plugin-import@^#.#.# eslint-plugin-react@^#.#.# -g`\n\n3. 更改配置文件 `.eslintrc.json` 如下：\n\n```json\n{\n    // 要启用的环境\n    \"env\": {\n        \"browser\": true,\n        \"node\": true,\n        \"commonjs\": true,\n        \"es6\": true,\n        \"jquery\": true\n    },\n    // 启用 airbnb 规则\n    \"extends\": \"airbnb\",\n    // 使用语言及版本\n    \"parserOptions\": {\n        \"ecmaVersion\": 6,\n        \"sourceType\": \"module\"\n    },\n    // 个人自定义规则\n    \"rules\": {\n        \"no-console\":\"off\",\n        \"no-plusplus\":\"off\"\n    }\n}\n```\n\n## ESLint 支持 Vue 单文件组件\n\n1. 安装 eslint-plugin-html 插件\n\n`npm install eslint-plugin-html -g`\n\n2. 在 VSCode 设置设置中添加如下配置：\n```json\n     // ESLint 配置\n    \"eslint.enable\": true,\n    // nodejs 路径， windows 路径使用双 \\\\ 进行转义\n    \"eslint.nodePath\": \"C:\\\\Dev\\\\nodejs\",\n    // 启用 eslint-plugin-html 插件\n    \"eslint.options\": {\n        \"plugins\": [\"html\"]\n    },\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n        // 启用 html 和 vue 中 ESLint 验证和自动修复\n        {\n            \"language\": \"html\",\n            \"autoFix\": true\n        },\n        {\n            \"language\": \"vue\",\n            \"autoFix\": true\n        }\n  ```","slug":"VSCode配置ESlint+Airbnb","published":1,"updated":"2017-11-17T12:33:22.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xir0013dfbx83l2ddsa","content":"<h2 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h2><p>Win 10 v1709<br>Nodejs v8.70<br>VScode v1.17.2</p>\n<h2 id=\"VSCode-安装-ESLint-扩展\"><a href=\"#VSCode-安装-ESLint-扩展\" class=\"headerlink\" title=\"VSCode 安装 ESLint 扩展\"></a>VSCode 安装 ESLint 扩展</h2><p>打开 VSCode 搜索 ESLint 扩展安装</p>\n<h2 id=\"NPM-安装-ESLint\"><a href=\"#NPM-安装-ESLint\" class=\"headerlink\" title=\"NPM 安装 ESLint\"></a>NPM 安装 ESLint</h2><ol>\n<li><p>全局安装（推荐）:</p>\n<p><code>npm install eslint -g</code></p>\n</li>\n<li><p>项目根目录本地安装：</p>\n<p><code>npm install eslint --save-dev</code></p>\n</li>\n</ol>\n<h2 id=\"1-自定义配置规则\"><a href=\"#1-自定义配置规则\" class=\"headerlink\" title=\"1. 自定义配置规则\"></a>1. 自定义配置规则</h2><ol>\n<li><p>全局配置<br>在当前用户根目录下执行 <code>eslint --init</code>,根据个人爱好选择生成配置文件 <code>.eslintrc.json</code><br>例如：<code>windows\\user\\username</code></p>\n</li>\n<li><p>项目根目录配置：<br>在当前用户根目录下执行 <code>eslint --init</code>，根据个人爱好选择生成配置文件</p>\n</li>\n</ol>\n<p>ps：具体配置参考：<a href=\"http://eslint.cn/docs/user-guide/configuring\" target=\"_blank\" rel=\"external\">http://eslint.cn/docs/user-guide/configuring</a></p>\n<h2 id=\"2-使用-eslint-config-airbnb-标准规则\"><a href=\"#2-使用-eslint-config-airbnb-标准规则\" class=\"headerlink\" title=\"2. 使用 eslint-config-airbnb 标准规则\"></a>2. 使用 eslint-config-airbnb 标准规则</h2><ol>\n<li><p>查看 Airbnb 标准依赖插件版本：</p>\n<p><code>npm info &quot;eslint-config-airbnb@latest&quot; peerDependencies</code></p>\n</li>\n</ol>\n<p>例如：本次的 plugins 的版本要求:</p>\n<pre><code>{  eslint: &#39;^4.9.0&#39;,\n  &#39;eslint-plugin-import&#39;: &#39;^2.7.0&#39;,\n  &#39;eslint-plugin-jsx-a11y&#39;: &#39;^6.0.2&#39;,\n  &#39;eslint-plugin-react&#39;: &#39;^7.4.0&#39;\n}\n</code></pre><ol>\n<li><p>安装对应版本的插件:</p>\n<p><code>npm install eslint-config-airbnb eslint@^#.#.# eslint-plugin-jsx-a11y@^#.#.# eslint-plugin-import@^#.#.# eslint-plugin-react@^#.#.# -g</code></p>\n</li>\n<li><p>更改配置文件 <code>.eslintrc.json</code> 如下：</p>\n</li>\n</ol>\n<pre><code class=\"json\">{\n    // 要启用的环境\n    &quot;env&quot;: {\n        &quot;browser&quot;: true,\n        &quot;node&quot;: true,\n        &quot;commonjs&quot;: true,\n        &quot;es6&quot;: true,\n        &quot;jquery&quot;: true\n    },\n    // 启用 airbnb 规则\n    &quot;extends&quot;: &quot;airbnb&quot;,\n    // 使用语言及版本\n    &quot;parserOptions&quot;: {\n        &quot;ecmaVersion&quot;: 6,\n        &quot;sourceType&quot;: &quot;module&quot;\n    },\n    // 个人自定义规则\n    &quot;rules&quot;: {\n        &quot;no-console&quot;:&quot;off&quot;,\n        &quot;no-plusplus&quot;:&quot;off&quot;\n    }\n}\n</code></pre>\n<h2 id=\"ESLint-支持-Vue-单文件组件\"><a href=\"#ESLint-支持-Vue-单文件组件\" class=\"headerlink\" title=\"ESLint 支持 Vue 单文件组件\"></a>ESLint 支持 Vue 单文件组件</h2><ol>\n<li>安装 eslint-plugin-html 插件</li>\n</ol>\n<p><code>npm install eslint-plugin-html -g</code></p>\n<ol>\n<li>在 VSCode 设置设置中添加如下配置：<pre><code class=\"json\">  // ESLint 配置\n &quot;eslint.enable&quot;: true,\n // nodejs 路径， windows 路径使用双 \\\\ 进行转义\n &quot;eslint.nodePath&quot;: &quot;C:\\\\Dev\\\\nodejs&quot;,\n // 启用 eslint-plugin-html 插件\n &quot;eslint.options&quot;: {\n     &quot;plugins&quot;: [&quot;html&quot;]\n },\n &quot;eslint.validate&quot;: [\n     &quot;javascript&quot;,\n     &quot;javascriptreact&quot;,\n     // 启用 html 和 vue 中 ESLint 验证和自动修复\n     {\n         &quot;language&quot;: &quot;html&quot;,\n         &quot;autoFix&quot;: true\n     },\n     {\n         &quot;language&quot;: &quot;vue&quot;,\n         &quot;autoFix&quot;: true\n     }\n</code></pre>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本环境\"><a href=\"#基本环境\" class=\"headerlink\" title=\"基本环境\"></a>基本环境</h2><p>Win 10 v1709<br>Nodejs v8.70<br>VScode v1.17.2</p>\n<h2 id=\"VSCode-安装-ESLint-扩展\"><a href=\"#VSCode-安装-ESLint-扩展\" class=\"headerlink\" title=\"VSCode 安装 ESLint 扩展\"></a>VSCode 安装 ESLint 扩展</h2><p>打开 VSCode 搜索 ESLint 扩展安装</p>\n<h2 id=\"NPM-安装-ESLint\"><a href=\"#NPM-安装-ESLint\" class=\"headerlink\" title=\"NPM 安装 ESLint\"></a>NPM 安装 ESLint</h2><ol>\n<li><p>全局安装（推荐）:</p>\n<p><code>npm install eslint -g</code></p>\n</li>\n<li><p>项目根目录本地安装：</p>\n<p><code>npm install eslint --save-dev</code></p>\n</li>\n</ol>\n<h2 id=\"1-自定义配置规则\"><a href=\"#1-自定义配置规则\" class=\"headerlink\" title=\"1. 自定义配置规则\"></a>1. 自定义配置规则</h2><ol>\n<li><p>全局配置<br>在当前用户根目录下执行 <code>eslint --init</code>,根据个人爱好选择生成配置文件 <code>.eslintrc.json</code><br>例如：<code>windows\\user\\username</code></p>\n</li>\n<li><p>项目根目录配置：<br>在当前用户根目录下执行 <code>eslint --init</code>，根据个人爱好选择生成配置文件</p>\n</li>\n</ol>\n<p>ps：具体配置参考：<a href=\"http://eslint.cn/docs/user-guide/configuring\" target=\"_blank\" rel=\"external\">http://eslint.cn/docs/user-guide/configuring</a></p>\n<h2 id=\"2-使用-eslint-config-airbnb-标准规则\"><a href=\"#2-使用-eslint-config-airbnb-标准规则\" class=\"headerlink\" title=\"2. 使用 eslint-config-airbnb 标准规则\"></a>2. 使用 eslint-config-airbnb 标准规则</h2><ol>\n<li><p>查看 Airbnb 标准依赖插件版本：</p>\n<p><code>npm info &quot;eslint-config-airbnb@latest&quot; peerDependencies</code></p>\n</li>\n</ol>\n<p>例如：本次的 plugins 的版本要求:</p>\n<pre><code>{  eslint: &#39;^4.9.0&#39;,\n  &#39;eslint-plugin-import&#39;: &#39;^2.7.0&#39;,\n  &#39;eslint-plugin-jsx-a11y&#39;: &#39;^6.0.2&#39;,\n  &#39;eslint-plugin-react&#39;: &#39;^7.4.0&#39;\n}\n</code></pre><ol>\n<li><p>安装对应版本的插件:</p>\n<p><code>npm install eslint-config-airbnb eslint@^#.#.# eslint-plugin-jsx-a11y@^#.#.# eslint-plugin-import@^#.#.# eslint-plugin-react@^#.#.# -g</code></p>\n</li>\n<li><p>更改配置文件 <code>.eslintrc.json</code> 如下：</p>\n</li>\n</ol>\n<pre><code class=\"json\">{\n    // 要启用的环境\n    &quot;env&quot;: {\n        &quot;browser&quot;: true,\n        &quot;node&quot;: true,\n        &quot;commonjs&quot;: true,\n        &quot;es6&quot;: true,\n        &quot;jquery&quot;: true\n    },\n    // 启用 airbnb 规则\n    &quot;extends&quot;: &quot;airbnb&quot;,\n    // 使用语言及版本\n    &quot;parserOptions&quot;: {\n        &quot;ecmaVersion&quot;: 6,\n        &quot;sourceType&quot;: &quot;module&quot;\n    },\n    // 个人自定义规则\n    &quot;rules&quot;: {\n        &quot;no-console&quot;:&quot;off&quot;,\n        &quot;no-plusplus&quot;:&quot;off&quot;\n    }\n}\n</code></pre>\n<h2 id=\"ESLint-支持-Vue-单文件组件\"><a href=\"#ESLint-支持-Vue-单文件组件\" class=\"headerlink\" title=\"ESLint 支持 Vue 单文件组件\"></a>ESLint 支持 Vue 单文件组件</h2><ol>\n<li>安装 eslint-plugin-html 插件</li>\n</ol>\n<p><code>npm install eslint-plugin-html -g</code></p>\n<ol>\n<li>在 VSCode 设置设置中添加如下配置：<pre><code class=\"json\">  // ESLint 配置\n &quot;eslint.enable&quot;: true,\n // nodejs 路径， windows 路径使用双 \\\\ 进行转义\n &quot;eslint.nodePath&quot;: &quot;C:\\\\Dev\\\\nodejs&quot;,\n // 启用 eslint-plugin-html 插件\n &quot;eslint.options&quot;: {\n     &quot;plugins&quot;: [&quot;html&quot;]\n },\n &quot;eslint.validate&quot;: [\n     &quot;javascript&quot;,\n     &quot;javascriptreact&quot;,\n     // 启用 html 和 vue 中 ESLint 验证和自动修复\n     {\n         &quot;language&quot;: &quot;html&quot;,\n         &quot;autoFix&quot;: true\n     },\n     {\n         &quot;language&quot;: &quot;vue&quot;,\n         &quot;autoFix&quot;: true\n     }\n</code></pre>\n</li>\n</ol>\n"},{"title":"Test","abbrlink":"784dd132","date":"2017-03-07T11:51:13.000Z","_content":"1. $ hexo new \"My New Post\"\n2. $ hexo server\n3. $ hexo generate\n4. $ hexo deploy \n","source":"_posts/Test.md","raw":"---\ntitle: Test\ntags: test\nabbrlink: 784dd132\ndate: 2017-03-07 19:51:13\n---\n1. $ hexo new \"My New Post\"\n2. $ hexo server\n3. $ hexo generate\n4. $ hexo deploy \n","slug":"Test","published":1,"updated":"2017-11-10T09:51:40.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xis0017dfbxh2iqejm4","content":"<ol>\n<li>$ hexo new “My New Post”</li>\n<li>$ hexo server</li>\n<li>$ hexo generate</li>\n<li>$ hexo deploy </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>$ hexo new “My New Post”</li>\n<li>$ hexo server</li>\n<li>$ hexo generate</li>\n<li>$ hexo deploy </li>\n</ol>\n"},{"title":"包管理器 Yarn","abbrlink":"522f484","data":"2017/9/16","_content":"# 包管理器 Yarn\n\n>Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具。\n\n## 常用命令\n* yarn和 yarn install ，这两个命令的效果是一样的，等同于npm install，使用这个命令会在该目录生成一个yarn.lock的文件。\n* yarn add koa，安装koa模块并更新package.json和yarn.lock文件，等同于npm install koa --save。也可以使用yarn global add koa，等同于npm install koa -g，将模块直接安装到全局环境变量里，方便使用。\n* yarn list，根据当前项目的package.json查看模块的依赖及版本。\n* yarn info koa，查看koa模块的详细信息，类似于npm view koa。\n* yarn init，初始化项目package.json文件，等同于npm init。\n* yarn run，运行package.json中的script。","source":"_posts/Yarn包管理器.md","raw":"---\ntitle: 包管理器 Yarn\ntags: Yarn\ncategories: Nodejs\nabbrlink: 522f484\ndata: 2017/9/16\n---\n# 包管理器 Yarn\n\n>Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具。\n\n## 常用命令\n* yarn和 yarn install ，这两个命令的效果是一样的，等同于npm install，使用这个命令会在该目录生成一个yarn.lock的文件。\n* yarn add koa，安装koa模块并更新package.json和yarn.lock文件，等同于npm install koa --save。也可以使用yarn global add koa，等同于npm install koa -g，将模块直接安装到全局环境变量里，方便使用。\n* yarn list，根据当前项目的package.json查看模块的依赖及版本。\n* yarn info koa，查看koa模块的详细信息，类似于npm view koa。\n* yarn init，初始化项目package.json文件，等同于npm init。\n* yarn run，运行package.json中的script。","slug":"Yarn包管理器","published":1,"date":"2017-11-12T02:26:52.693Z","updated":"2017-11-12T02:26:52.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xiv001bdfbxpxxm39lx","content":"<h1 id=\"包管理器-Yarn\"><a href=\"#包管理器-Yarn\" class=\"headerlink\" title=\"包管理器 Yarn\"></a>包管理器 Yarn</h1><blockquote>\n<p>Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具。</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>yarn和 yarn install ，这两个命令的效果是一样的，等同于npm install，使用这个命令会在该目录生成一个yarn.lock的文件。</li>\n<li>yarn add koa，安装koa模块并更新package.json和yarn.lock文件，等同于npm install koa –save。也可以使用yarn global add koa，等同于npm install koa -g，将模块直接安装到全局环境变量里，方便使用。</li>\n<li>yarn list，根据当前项目的package.json查看模块的依赖及版本。</li>\n<li>yarn info koa，查看koa模块的详细信息，类似于npm view koa。</li>\n<li>yarn init，初始化项目package.json文件，等同于npm init。</li>\n<li>yarn run，运行package.json中的script。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"包管理器-Yarn\"><a href=\"#包管理器-Yarn\" class=\"headerlink\" title=\"包管理器 Yarn\"></a>包管理器 Yarn</h1><blockquote>\n<p>Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具。</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>yarn和 yarn install ，这两个命令的效果是一样的，等同于npm install，使用这个命令会在该目录生成一个yarn.lock的文件。</li>\n<li>yarn add koa，安装koa模块并更新package.json和yarn.lock文件，等同于npm install koa –save。也可以使用yarn global add koa，等同于npm install koa -g，将模块直接安装到全局环境变量里，方便使用。</li>\n<li>yarn list，根据当前项目的package.json查看模块的依赖及版本。</li>\n<li>yarn info koa，查看koa模块的详细信息，类似于npm view koa。</li>\n<li>yarn init，初始化项目package.json文件，等同于npm init。</li>\n<li>yarn run，运行package.json中的script。</li>\n</ul>\n"},{"title":"Java基础与Button交互","abbrlink":"b8bb4b60","date":"2017-06-16T06:28:18.000Z","_content":"## 变量的定义\n> 在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。\n### 变量的数据类型\n> 变量的数据类型分为两种，即基本数据类型和引用数据类型。\n#### 1. 基本数据类型 ####\n1. 数值型分为两种：\n    1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）\n    1.2 浮点类型（float 4字节，double 8字节）\n2. 字符型（char）2字节\n3. 布尔型（boolean）1字节\n#### 2. 引用数据类型 ####\n1. 类（class)\n2. 接口（interface）\n3. 数组\n4. 枚举（enum）\n5. 注解（annotation）\n### 变量类型转换 ###\n> 在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。\n#### 1. 自动类型转换 ####\n> 两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。\n1. byte→short，int，long\n2. short，char→int，long\n3. int→long\n4. byte，char，short，int→float\n5. byte，char，short，int，long，float→double\n6. boolean类型无法转换为其他类型。\n#### 2. 强制类型转换 ####\n> 自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。\n\n例如：\n```java\nint num;\nbyte b =(byte)num;\n```\n## 常量\n\n> 在编程语言中，**常量**是指在整个程序中永远不会改变的值。在 Java 中，你可以使用关键字 `final` 来强制规定某个值不得被更改。例如：\n```java\nfinal int POINTS_FOR_FREE_THROW = 1;\n```\nThen if you wrote the following, you'd get an error:\n```java\nPOINTS_FOR_FREE_THROW = 100;\n```\n- 注意，按照惯例，常量的名称全为大写形式。此外，单词之间用下划线连接，而不用空格或用骆驼拼写法。你可以将变量声明为常量，防止自己意外地更改了变量的值。\n## 方法 ##\n> 为解决代码重复编写的问题所设计的特定功能代码块。\n> 方法不能嵌套。\n> main（）方法的作用：调用方法的实例化对象。\n\n方法结构一般为：\n```java\n修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n    执行语句\n    ...\n    ...\n    return 返回值；\n}\n```\n## 选择结构语句\n### if条件语句\n> 当判断条件1结果为 true 时，执行语句 1，为 false 时，执行语句 2。当判断条件 1, 2 都不满足 true 时，执行语句 3。\n\n例如：\n```java\nif (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n```\n### 三元运算 ###\n> 一种类似于 if-else 语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。\n> 当判断条件成立时结果为表达式1的值，否则表达式2的值。\n```java\n判断条件 ? 表达式 1 : 表达式 2\n```\n例如：求取两个数 x，y 中较大的值。\n```java\n//if-else 实现方法\nint x, y, max;\nif(x>y){\n    max = x;\n}\nelse{\n    max = y;\n}\n\n//三元运算实现\nint x, y, max;\nmax = x > y ? x : y;\n\n```\n### switch语句\n> 在 switch 语句中使用 switch 关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，\n> 当表达式的值和某个目标值匹配时，会执行对应 case 下的语句。\n\n例如：\n```java\nswitch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n```\n## 循环结构语句\n### while 循环语句\n> 循环条件判断为 true 时，执行语句循环执行，直到循环条件为 false。\n\n例如：\n```java\nwhile(循环条件){\n    执行语句\n}\n```\n### do...while循环语句\n> 循环体会无条件执行一次，然后根据循环条件决定是否继续执行。\n\n例如：\n```java\ndo{\n  执行语句\n}\nwhile(循环条件);\n```\n### for循环语句\n\n> 一般用在循环次数已知的情况下，循环条件 ② 判断为 true 时，执行顺序为： ①→②→④→③，初始化表达式 ① 只在第一次循环时执行。\n\n例如：\n```java\nfor(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n```\n```java\n/**\n* Created by Roojay on 2017/4/7.\n* 利用嵌套循环打印一个正三角形。\n*/\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i <= 5; i++){\n            for(k = 0; k < 5 - i; k++){\n                System.out.print(\" \");\n            }\n            for(j = 1; j <= i; j++){\n                System.out.print(\"* \");\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n```\n### 跳转语句\n#### break语句\n> 当它出现在 switch 条件语句中时，作用是终止某个 case 并跳出 switch 结构。\n> 当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。\n> 当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，\n> 需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。\n#### continue语句\n> continue 语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。\n> 也可以使用标记结束外循环。\n## Button交互\n- XML 布局文件中的 <Button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。\n- android:onClick=\"buttonName\"\n### 屏幕输出显示\n#### MainActivity.java部分\n```java\n    public void display(String text) {\n        TextView t = (TextView) findViewById(R.id.display_text_view);\n        t.setText(text);\n    }\n\n    public void display(int text) {\n        TextView t = (TextView) findViewById(R.id.display_text_view);\n        t.setText(text + \"\");\n    }\n```\n- 其中 R.id.display_text_view中的display_text_view是指具体输出显示的TextView的ID。\n\n#### activity_main.xml部分\n\n```xml\n    <TextView\n        android:id=\"@+id/display_text_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"\"\n        android:textSize=\"45sp\"\n        android:textColor=\"#000000\"/>\n```\n### Style\n- 下面两个 TextView 都设置着大量相同的元素：\n```xml\n<TextView\n        android:id=\"@+id/tell\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/adress\"\n        android:text=\"电话:028-666666\"\n        android:textSize=\"24sp\"\n        android:textColor=\"#FFFFFF\"\n        android:background=\"#795548\"\n        android:layout_marginLeft=\"8dp\"\n        android:layout_marginTop=\"8dp\" />\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/tell\"\n        android:text=\"半岛咖啡\"\n        android:textSize=\"30sp\"\n        android:textColor=\"#FFFFFF\"\n        android:background=\"#795548\"\n        android:layout_marginLeft=\"8dp\" />\n<!-- 相同的元素 -->\n<TextView\n    android:textColor=\"#FFFFFF\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"#795548\"\n    android:layout_marginLeft=\"8dp\" />\n```\n- 可以在`res/value/styles.xml`里定义个 style 来包括这些通用的元素设置：\n\n```xml\n<style name=\"cofe_textView\">\n        <item name=\"android:textColor\">#FFFFFF</item>\n        <item name=\"android:layout_width\">wrap_content</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:background\">#795548</item>\n        <item name=\"android:layout_marginLeft\">8dp</item>\n    </style>\n```\n\n然后可以用以下一句语句轻易地重复引用这些设置：\n```xml\nstyle=\"@style/cofe_textView\"\n```\n\n这一段 TextView 可以重构为以下：\n\n```xml\n\n<TextView\n        style=\"@style/cofe_textView\"\n        android:id=\"@+id/tell\"\n        android:layout_above=\"@id/adress\"\n        android:text=\"电话:028-666666\"\n        android:textSize=\"24sp\"\n        android:layout_marginTop=\"8dp\" />\n<TextView\n        style=\"@style/cofe_textView\"\n        android:layout_above=\"@id/tell\"\n        android:text=\"半岛咖啡\"\n        android:textSize=\"30sp\" />\n```","source":"_posts/Java基础与Button交互.md","raw":"---\ntitle: Java基础与Button交互\ntags: Android\ncategories: Java\nabbrlink: b8bb4b60\ndate: 2017-06-16 14:28:18\n---\n## 变量的定义\n> 在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。\n### 变量的数据类型\n> 变量的数据类型分为两种，即基本数据类型和引用数据类型。\n#### 1. 基本数据类型 ####\n1. 数值型分为两种：\n    1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）\n    1.2 浮点类型（float 4字节，double 8字节）\n2. 字符型（char）2字节\n3. 布尔型（boolean）1字节\n#### 2. 引用数据类型 ####\n1. 类（class)\n2. 接口（interface）\n3. 数组\n4. 枚举（enum）\n5. 注解（annotation）\n### 变量类型转换 ###\n> 在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。\n#### 1. 自动类型转换 ####\n> 两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。\n1. byte→short，int，long\n2. short，char→int，long\n3. int→long\n4. byte，char，short，int→float\n5. byte，char，short，int，long，float→double\n6. boolean类型无法转换为其他类型。\n#### 2. 强制类型转换 ####\n> 自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。\n\n例如：\n```java\nint num;\nbyte b =(byte)num;\n```\n## 常量\n\n> 在编程语言中，**常量**是指在整个程序中永远不会改变的值。在 Java 中，你可以使用关键字 `final` 来强制规定某个值不得被更改。例如：\n```java\nfinal int POINTS_FOR_FREE_THROW = 1;\n```\nThen if you wrote the following, you'd get an error:\n```java\nPOINTS_FOR_FREE_THROW = 100;\n```\n- 注意，按照惯例，常量的名称全为大写形式。此外，单词之间用下划线连接，而不用空格或用骆驼拼写法。你可以将变量声明为常量，防止自己意外地更改了变量的值。\n## 方法 ##\n> 为解决代码重复编写的问题所设计的特定功能代码块。\n> 方法不能嵌套。\n> main（）方法的作用：调用方法的实例化对象。\n\n方法结构一般为：\n```java\n修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n    执行语句\n    ...\n    ...\n    return 返回值；\n}\n```\n## 选择结构语句\n### if条件语句\n> 当判断条件1结果为 true 时，执行语句 1，为 false 时，执行语句 2。当判断条件 1, 2 都不满足 true 时，执行语句 3。\n\n例如：\n```java\nif (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n```\n### 三元运算 ###\n> 一种类似于 if-else 语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。\n> 当判断条件成立时结果为表达式1的值，否则表达式2的值。\n```java\n判断条件 ? 表达式 1 : 表达式 2\n```\n例如：求取两个数 x，y 中较大的值。\n```java\n//if-else 实现方法\nint x, y, max;\nif(x>y){\n    max = x;\n}\nelse{\n    max = y;\n}\n\n//三元运算实现\nint x, y, max;\nmax = x > y ? x : y;\n\n```\n### switch语句\n> 在 switch 语句中使用 switch 关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，\n> 当表达式的值和某个目标值匹配时，会执行对应 case 下的语句。\n\n例如：\n```java\nswitch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n```\n## 循环结构语句\n### while 循环语句\n> 循环条件判断为 true 时，执行语句循环执行，直到循环条件为 false。\n\n例如：\n```java\nwhile(循环条件){\n    执行语句\n}\n```\n### do...while循环语句\n> 循环体会无条件执行一次，然后根据循环条件决定是否继续执行。\n\n例如：\n```java\ndo{\n  执行语句\n}\nwhile(循环条件);\n```\n### for循环语句\n\n> 一般用在循环次数已知的情况下，循环条件 ② 判断为 true 时，执行顺序为： ①→②→④→③，初始化表达式 ① 只在第一次循环时执行。\n\n例如：\n```java\nfor(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n```\n```java\n/**\n* Created by Roojay on 2017/4/7.\n* 利用嵌套循环打印一个正三角形。\n*/\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i <= 5; i++){\n            for(k = 0; k < 5 - i; k++){\n                System.out.print(\" \");\n            }\n            for(j = 1; j <= i; j++){\n                System.out.print(\"* \");\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n```\n### 跳转语句\n#### break语句\n> 当它出现在 switch 条件语句中时，作用是终止某个 case 并跳出 switch 结构。\n> 当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。\n> 当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，\n> 需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。\n#### continue语句\n> continue 语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。\n> 也可以使用标记结束外循环。\n## Button交互\n- XML 布局文件中的 <Button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。\n- android:onClick=\"buttonName\"\n### 屏幕输出显示\n#### MainActivity.java部分\n```java\n    public void display(String text) {\n        TextView t = (TextView) findViewById(R.id.display_text_view);\n        t.setText(text);\n    }\n\n    public void display(int text) {\n        TextView t = (TextView) findViewById(R.id.display_text_view);\n        t.setText(text + \"\");\n    }\n```\n- 其中 R.id.display_text_view中的display_text_view是指具体输出显示的TextView的ID。\n\n#### activity_main.xml部分\n\n```xml\n    <TextView\n        android:id=\"@+id/display_text_view\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"\"\n        android:textSize=\"45sp\"\n        android:textColor=\"#000000\"/>\n```\n### Style\n- 下面两个 TextView 都设置着大量相同的元素：\n```xml\n<TextView\n        android:id=\"@+id/tell\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/adress\"\n        android:text=\"电话:028-666666\"\n        android:textSize=\"24sp\"\n        android:textColor=\"#FFFFFF\"\n        android:background=\"#795548\"\n        android:layout_marginLeft=\"8dp\"\n        android:layout_marginTop=\"8dp\" />\n    <TextView\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_above=\"@id/tell\"\n        android:text=\"半岛咖啡\"\n        android:textSize=\"30sp\"\n        android:textColor=\"#FFFFFF\"\n        android:background=\"#795548\"\n        android:layout_marginLeft=\"8dp\" />\n<!-- 相同的元素 -->\n<TextView\n    android:textColor=\"#FFFFFF\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:background=\"#795548\"\n    android:layout_marginLeft=\"8dp\" />\n```\n- 可以在`res/value/styles.xml`里定义个 style 来包括这些通用的元素设置：\n\n```xml\n<style name=\"cofe_textView\">\n        <item name=\"android:textColor\">#FFFFFF</item>\n        <item name=\"android:layout_width\">wrap_content</item>\n        <item name=\"android:layout_height\">wrap_content</item>\n        <item name=\"android:background\">#795548</item>\n        <item name=\"android:layout_marginLeft\">8dp</item>\n    </style>\n```\n\n然后可以用以下一句语句轻易地重复引用这些设置：\n```xml\nstyle=\"@style/cofe_textView\"\n```\n\n这一段 TextView 可以重构为以下：\n\n```xml\n\n<TextView\n        style=\"@style/cofe_textView\"\n        android:id=\"@+id/tell\"\n        android:layout_above=\"@id/adress\"\n        android:text=\"电话:028-666666\"\n        android:textSize=\"24sp\"\n        android:layout_marginTop=\"8dp\" />\n<TextView\n        style=\"@style/cofe_textView\"\n        android:layout_above=\"@id/tell\"\n        android:text=\"半岛咖啡\"\n        android:textSize=\"30sp\" />\n```","slug":"Java基础与Button交互","published":1,"updated":"2017-11-12T02:16:46.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xix001fdfbxrb7ha9gi","content":"<h2 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h2><blockquote>\n<p>在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。</p>\n<h3 id=\"变量的数据类型\"><a href=\"#变量的数据类型\" class=\"headerlink\" title=\"变量的数据类型\"></a>变量的数据类型</h3><p>变量的数据类型分为两种，即基本数据类型和引用数据类型。</p>\n<h4 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1. 基本数据类型\"></a>1. 基本数据类型</h4><ol>\n<li>数值型分为两种：<br> 1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）<br> 1.2 浮点类型（float 4字节，double 8字节）</li>\n<li>字符型（char）2字节</li>\n<li>布尔型（boolean）1字节<h4 id=\"2-引用数据类型\"><a href=\"#2-引用数据类型\" class=\"headerlink\" title=\"2. 引用数据类型\"></a>2. 引用数据类型</h4></li>\n<li>类（class)</li>\n<li>接口（interface）</li>\n<li>数组</li>\n<li>枚举（enum）</li>\n<li>注解（annotation）<h3 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h3>在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。<h4 id=\"1-自动类型转换\"><a href=\"#1-自动类型转换\" class=\"headerlink\" title=\"1. 自动类型转换\"></a>1. 自动类型转换</h4>两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。</li>\n<li>byte→short，int，long</li>\n<li>short，char→int，long</li>\n<li>int→long</li>\n<li>byte，char，short，int→float</li>\n<li>byte，char，short，int，long，float→double</li>\n<li>boolean类型无法转换为其他类型。<h4 id=\"2-强制类型转换\"><a href=\"#2-强制类型转换\" class=\"headerlink\" title=\"2. 强制类型转换\"></a>2. 强制类型转换</h4>自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。</li>\n</ol>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">int num;\nbyte b =(byte)num;\n</code></pre>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><blockquote>\n<p>在编程语言中，<strong>常量</strong>是指在整个程序中永远不会改变的值。在 Java 中，你可以使用关键字 <code>final</code> 来强制规定某个值不得被更改。例如：</p>\n<pre><code class=\"java\">final int POINTS_FOR_FREE_THROW = 1;\n</code></pre>\n<p>Then if you wrote the following, you’d get an error:</p>\n<pre><code class=\"java\">POINTS_FOR_FREE_THROW = 100;\n</code></pre>\n<ul>\n<li>注意，按照惯例，常量的名称全为大写形式。此外，单词之间用下划线连接，而不用空格或用骆驼拼写法。你可以将变量声明为常量，防止自己意外地更改了变量的值。<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2>为解决代码重复编写的问题所设计的特定功能代码块。<br>方法不能嵌套。<br>main（）方法的作用：调用方法的实例化对象。</li>\n</ul>\n</blockquote>\n<p>方法结构一般为：</p>\n<pre><code class=\"java\">修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n    执行语句\n    ...\n    ...\n    return 返回值；\n}\n</code></pre>\n<h2 id=\"选择结构语句\"><a href=\"#选择结构语句\" class=\"headerlink\" title=\"选择结构语句\"></a>选择结构语句</h2><h3 id=\"if条件语句\"><a href=\"#if条件语句\" class=\"headerlink\" title=\"if条件语句\"></a>if条件语句</h3><blockquote>\n<p>当判断条件1结果为 true 时，执行语句 1，为 false 时，执行语句 2。当判断条件 1, 2 都不满足 true 时，执行语句 3。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">if (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n</code></pre>\n<h3 id=\"三元运算\"><a href=\"#三元运算\" class=\"headerlink\" title=\"三元运算\"></a>三元运算</h3><blockquote>\n<p>一种类似于 if-else 语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。<br>当判断条件成立时结果为表达式1的值，否则表达式2的值。</p>\n<pre><code class=\"java\">判断条件 ? 表达式 1 : 表达式 2\n</code></pre>\n<p>例如：求取两个数 x，y 中较大的值。<br>```java<br>//if-else 实现方法<br>int x, y, max;<br>if(x&gt;y){<br>    max = x;<br>}<br>else{<br>    max = y;<br>}</p>\n</blockquote>\n<p>//三元运算实现<br>int x, y, max;<br>max = x &gt; y ? x : y;</p>\n<pre><code>### switch语句\n&gt; 在 switch 语句中使用 switch 关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，\n&gt; 当表达式的值和某个目标值匹配时，会执行对应 case 下的语句。\n\n例如：\n```java\nswitch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n</code></pre><h2 id=\"循环结构语句\"><a href=\"#循环结构语句\" class=\"headerlink\" title=\"循环结构语句\"></a>循环结构语句</h2><h3 id=\"while-循环语句\"><a href=\"#while-循环语句\" class=\"headerlink\" title=\"while 循环语句\"></a>while 循环语句</h3><blockquote>\n<p>循环条件判断为 true 时，执行语句循环执行，直到循环条件为 false。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">while(循环条件){\n    执行语句\n}\n</code></pre>\n<h3 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h3><blockquote>\n<p>循环体会无条件执行一次，然后根据循环条件决定是否继续执行。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">do{\n  执行语句\n}\nwhile(循环条件);\n</code></pre>\n<h3 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h3><blockquote>\n<p>一般用在循环次数已知的情况下，循环条件 ② 判断为 true 时，执行顺序为： ①→②→④→③，初始化表达式 ① 只在第一次循环时执行。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">for(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n</code></pre>\n<pre><code class=\"java\">/**\n* Created by Roojay on 2017/4/7.\n* 利用嵌套循环打印一个正三角形。\n*/\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i &lt;= 5; i++){\n            for(k = 0; k &lt; 5 - i; k++){\n                System.out.print(&quot; &quot;);\n            }\n            for(j = 1; j &lt;= i; j++){\n                System.out.print(&quot;* &quot;);\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n</code></pre>\n<h3 id=\"跳转语句\"><a href=\"#跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h3><h4 id=\"break语句\"><a href=\"#break语句\" class=\"headerlink\" title=\"break语句\"></a>break语句</h4><blockquote>\n<p>当它出现在 switch 条件语句中时，作用是终止某个 case 并跳出 switch 结构。<br>当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。<br>当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，<br>需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。</p>\n<h4 id=\"continue语句\"><a href=\"#continue语句\" class=\"headerlink\" title=\"continue语句\"></a>continue语句</h4><p>continue 语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。<br>也可以使用标记结束外循环。</p>\n<h2 id=\"Button交互\"><a href=\"#Button交互\" class=\"headerlink\" title=\"Button交互\"></a>Button交互</h2><ul>\n<li>XML 布局文件中的 <button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。</button></li>\n<li>android:onClick=”buttonName”<h3 id=\"屏幕输出显示\"><a href=\"#屏幕输出显示\" class=\"headerlink\" title=\"屏幕输出显示\"></a>屏幕输出显示</h3><h4 id=\"MainActivity-java部分\"><a href=\"#MainActivity-java部分\" class=\"headerlink\" title=\"MainActivity.java部分\"></a>MainActivity.java部分</h4>```java<br>  public void display(String text) {<pre><code>  TextView t = (TextView) findViewById(R.id.display_text_view);\n  t.setText(text);\n</code></pre>  }</li>\n</ul>\n</blockquote>\n<pre><code>public void display(int text) {\n    TextView t = (TextView) findViewById(R.id.display_text_view);\n    t.setText(text + &quot;&quot;);\n}\n</code></pre><pre><code>- 其中 R.id.display_text_view中的display_text_view是指具体输出显示的TextView的ID。\n\n#### activity_main.xml部分\n\n```xml\n    &lt;TextView\n        android:id=&quot;@+id/display_text_view&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;&quot;\n        android:textSize=&quot;45sp&quot;\n        android:textColor=&quot;#000000&quot;/&gt;\n</code></pre><h3 id=\"Style\"><a href=\"#Style\" class=\"headerlink\" title=\"Style\"></a>Style</h3><ul>\n<li>下面两个 TextView 都设置着大量相同的元素：<pre><code class=\"xml\">&lt;TextView\n      android:id=&quot;@+id/tell&quot;\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_above=&quot;@id/adress&quot;\n      android:text=&quot;电话:028-666666&quot;\n      android:textSize=&quot;24sp&quot;\n      android:textColor=&quot;#FFFFFF&quot;\n      android:background=&quot;#795548&quot;\n      android:layout_marginLeft=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot; /&gt;\n  &lt;TextView\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_above=&quot;@id/tell&quot;\n      android:text=&quot;半岛咖啡&quot;\n      android:textSize=&quot;30sp&quot;\n      android:textColor=&quot;#FFFFFF&quot;\n      android:background=&quot;#795548&quot;\n      android:layout_marginLeft=&quot;8dp&quot; /&gt;\n&lt;!-- 相同的元素 --&gt;\n&lt;TextView\n  android:textColor=&quot;#FFFFFF&quot;\n  android:layout_width=&quot;wrap_content&quot;\n  android:layout_height=&quot;wrap_content&quot;\n  android:background=&quot;#795548&quot;\n  android:layout_marginLeft=&quot;8dp&quot; /&gt;\n</code></pre>\n</li>\n<li>可以在<code>res/value/styles.xml</code>里定义个 style 来包括这些通用的元素设置：</li>\n</ul>\n<pre><code class=\"xml\">&lt;style name=&quot;cofe_textView&quot;&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#795548&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginLeft&quot;&gt;8dp&lt;/item&gt;\n    &lt;/style&gt;\n</code></pre>\n<p>然后可以用以下一句语句轻易地重复引用这些设置：</p>\n<pre><code class=\"xml\">style=&quot;@style/cofe_textView&quot;\n</code></pre>\n<p>这一段 TextView 可以重构为以下：</p>\n<pre><code class=\"xml\">\n&lt;TextView\n        style=&quot;@style/cofe_textView&quot;\n        android:id=&quot;@+id/tell&quot;\n        android:layout_above=&quot;@id/adress&quot;\n        android:text=&quot;电话:028-666666&quot;\n        android:textSize=&quot;24sp&quot;\n        android:layout_marginTop=&quot;8dp&quot; /&gt;\n&lt;TextView\n        style=&quot;@style/cofe_textView&quot;\n        android:layout_above=&quot;@id/tell&quot;\n        android:text=&quot;半岛咖啡&quot;\n        android:textSize=&quot;30sp&quot; /&gt;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量的定义\"><a href=\"#变量的定义\" class=\"headerlink\" title=\"变量的定义\"></a>变量的定义</h2><blockquote>\n<p>在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。</p>\n<h3 id=\"变量的数据类型\"><a href=\"#变量的数据类型\" class=\"headerlink\" title=\"变量的数据类型\"></a>变量的数据类型</h3><p>变量的数据类型分为两种，即基本数据类型和引用数据类型。</p>\n<h4 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1. 基本数据类型\"></a>1. 基本数据类型</h4><ol>\n<li>数值型分为两种：<br> 1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）<br> 1.2 浮点类型（float 4字节，double 8字节）</li>\n<li>字符型（char）2字节</li>\n<li>布尔型（boolean）1字节<h4 id=\"2-引用数据类型\"><a href=\"#2-引用数据类型\" class=\"headerlink\" title=\"2. 引用数据类型\"></a>2. 引用数据类型</h4></li>\n<li>类（class)</li>\n<li>接口（interface）</li>\n<li>数组</li>\n<li>枚举（enum）</li>\n<li>注解（annotation）<h3 id=\"变量类型转换\"><a href=\"#变量类型转换\" class=\"headerlink\" title=\"变量类型转换\"></a>变量类型转换</h3>在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。<h4 id=\"1-自动类型转换\"><a href=\"#1-自动类型转换\" class=\"headerlink\" title=\"1. 自动类型转换\"></a>1. 自动类型转换</h4>两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。</li>\n<li>byte→short，int，long</li>\n<li>short，char→int，long</li>\n<li>int→long</li>\n<li>byte，char，short，int→float</li>\n<li>byte，char，short，int，long，float→double</li>\n<li>boolean类型无法转换为其他类型。<h4 id=\"2-强制类型转换\"><a href=\"#2-强制类型转换\" class=\"headerlink\" title=\"2. 强制类型转换\"></a>2. 强制类型转换</h4>自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。</li>\n</ol>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">int num;\nbyte b =(byte)num;\n</code></pre>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><blockquote>\n<p>在编程语言中，<strong>常量</strong>是指在整个程序中永远不会改变的值。在 Java 中，你可以使用关键字 <code>final</code> 来强制规定某个值不得被更改。例如：</p>\n<pre><code class=\"java\">final int POINTS_FOR_FREE_THROW = 1;\n</code></pre>\n<p>Then if you wrote the following, you’d get an error:</p>\n<pre><code class=\"java\">POINTS_FOR_FREE_THROW = 100;\n</code></pre>\n<ul>\n<li>注意，按照惯例，常量的名称全为大写形式。此外，单词之间用下划线连接，而不用空格或用骆驼拼写法。你可以将变量声明为常量，防止自己意外地更改了变量的值。<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2>为解决代码重复编写的问题所设计的特定功能代码块。<br>方法不能嵌套。<br>main（）方法的作用：调用方法的实例化对象。</li>\n</ul>\n</blockquote>\n<p>方法结构一般为：</p>\n<pre><code class=\"java\">修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n    执行语句\n    ...\n    ...\n    return 返回值；\n}\n</code></pre>\n<h2 id=\"选择结构语句\"><a href=\"#选择结构语句\" class=\"headerlink\" title=\"选择结构语句\"></a>选择结构语句</h2><h3 id=\"if条件语句\"><a href=\"#if条件语句\" class=\"headerlink\" title=\"if条件语句\"></a>if条件语句</h3><blockquote>\n<p>当判断条件1结果为 true 时，执行语句 1，为 false 时，执行语句 2。当判断条件 1, 2 都不满足 true 时，执行语句 3。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">if (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n</code></pre>\n<h3 id=\"三元运算\"><a href=\"#三元运算\" class=\"headerlink\" title=\"三元运算\"></a>三元运算</h3><blockquote>\n<p>一种类似于 if-else 语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。<br>当判断条件成立时结果为表达式1的值，否则表达式2的值。</p>\n<pre><code class=\"java\">判断条件 ? 表达式 1 : 表达式 2\n</code></pre>\n<p>例如：求取两个数 x，y 中较大的值。<br>```java<br>//if-else 实现方法<br>int x, y, max;<br>if(x&gt;y){<br>    max = x;<br>}<br>else{<br>    max = y;<br>}</p>\n</blockquote>\n<p>//三元运算实现<br>int x, y, max;<br>max = x &gt; y ? x : y;</p>\n<pre><code>### switch语句\n&gt; 在 switch 语句中使用 switch 关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，\n&gt; 当表达式的值和某个目标值匹配时，会执行对应 case 下的语句。\n\n例如：\n```java\nswitch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n</code></pre><h2 id=\"循环结构语句\"><a href=\"#循环结构语句\" class=\"headerlink\" title=\"循环结构语句\"></a>循环结构语句</h2><h3 id=\"while-循环语句\"><a href=\"#while-循环语句\" class=\"headerlink\" title=\"while 循环语句\"></a>while 循环语句</h3><blockquote>\n<p>循环条件判断为 true 时，执行语句循环执行，直到循环条件为 false。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">while(循环条件){\n    执行语句\n}\n</code></pre>\n<h3 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h3><blockquote>\n<p>循环体会无条件执行一次，然后根据循环条件决定是否继续执行。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">do{\n  执行语句\n}\nwhile(循环条件);\n</code></pre>\n<h3 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h3><blockquote>\n<p>一般用在循环次数已知的情况下，循环条件 ② 判断为 true 时，执行顺序为： ①→②→④→③，初始化表达式 ① 只在第一次循环时执行。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">for(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n</code></pre>\n<pre><code class=\"java\">/**\n* Created by Roojay on 2017/4/7.\n* 利用嵌套循环打印一个正三角形。\n*/\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i &lt;= 5; i++){\n            for(k = 0; k &lt; 5 - i; k++){\n                System.out.print(&quot; &quot;);\n            }\n            for(j = 1; j &lt;= i; j++){\n                System.out.print(&quot;* &quot;);\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n</code></pre>\n<h3 id=\"跳转语句\"><a href=\"#跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h3><h4 id=\"break语句\"><a href=\"#break语句\" class=\"headerlink\" title=\"break语句\"></a>break语句</h4><blockquote>\n<p>当它出现在 switch 条件语句中时，作用是终止某个 case 并跳出 switch 结构。<br>当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。<br>当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，<br>需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。</p>\n<h4 id=\"continue语句\"><a href=\"#continue语句\" class=\"headerlink\" title=\"continue语句\"></a>continue语句</h4><p>continue 语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。<br>也可以使用标记结束外循环。</p>\n<h2 id=\"Button交互\"><a href=\"#Button交互\" class=\"headerlink\" title=\"Button交互\"></a>Button交互</h2><ul>\n<li>XML 布局文件中的 <button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。</button></li>\n<li>android:onClick=”buttonName”<h3 id=\"屏幕输出显示\"><a href=\"#屏幕输出显示\" class=\"headerlink\" title=\"屏幕输出显示\"></a>屏幕输出显示</h3><h4 id=\"MainActivity-java部分\"><a href=\"#MainActivity-java部分\" class=\"headerlink\" title=\"MainActivity.java部分\"></a>MainActivity.java部分</h4>```java<br>  public void display(String text) {<pre><code>  TextView t = (TextView) findViewById(R.id.display_text_view);\n  t.setText(text);\n</code></pre>  }</li>\n</ul>\n</blockquote>\n<pre><code>public void display(int text) {\n    TextView t = (TextView) findViewById(R.id.display_text_view);\n    t.setText(text + &quot;&quot;);\n}\n</code></pre><pre><code>- 其中 R.id.display_text_view中的display_text_view是指具体输出显示的TextView的ID。\n\n#### activity_main.xml部分\n\n```xml\n    &lt;TextView\n        android:id=&quot;@+id/display_text_view&quot;\n        android:layout_width=&quot;wrap_content&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;&quot;\n        android:textSize=&quot;45sp&quot;\n        android:textColor=&quot;#000000&quot;/&gt;\n</code></pre><h3 id=\"Style\"><a href=\"#Style\" class=\"headerlink\" title=\"Style\"></a>Style</h3><ul>\n<li>下面两个 TextView 都设置着大量相同的元素：<pre><code class=\"xml\">&lt;TextView\n      android:id=&quot;@+id/tell&quot;\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_above=&quot;@id/adress&quot;\n      android:text=&quot;电话:028-666666&quot;\n      android:textSize=&quot;24sp&quot;\n      android:textColor=&quot;#FFFFFF&quot;\n      android:background=&quot;#795548&quot;\n      android:layout_marginLeft=&quot;8dp&quot;\n      android:layout_marginTop=&quot;8dp&quot; /&gt;\n  &lt;TextView\n      android:layout_width=&quot;wrap_content&quot;\n      android:layout_height=&quot;wrap_content&quot;\n      android:layout_above=&quot;@id/tell&quot;\n      android:text=&quot;半岛咖啡&quot;\n      android:textSize=&quot;30sp&quot;\n      android:textColor=&quot;#FFFFFF&quot;\n      android:background=&quot;#795548&quot;\n      android:layout_marginLeft=&quot;8dp&quot; /&gt;\n&lt;!-- 相同的元素 --&gt;\n&lt;TextView\n  android:textColor=&quot;#FFFFFF&quot;\n  android:layout_width=&quot;wrap_content&quot;\n  android:layout_height=&quot;wrap_content&quot;\n  android:background=&quot;#795548&quot;\n  android:layout_marginLeft=&quot;8dp&quot; /&gt;\n</code></pre>\n</li>\n<li>可以在<code>res/value/styles.xml</code>里定义个 style 来包括这些通用的元素设置：</li>\n</ul>\n<pre><code class=\"xml\">&lt;style name=&quot;cofe_textView&quot;&gt;\n        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;\n        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;\n        &lt;item name=&quot;android:background&quot;&gt;#795548&lt;/item&gt;\n        &lt;item name=&quot;android:layout_marginLeft&quot;&gt;8dp&lt;/item&gt;\n    &lt;/style&gt;\n</code></pre>\n<p>然后可以用以下一句语句轻易地重复引用这些设置：</p>\n<pre><code class=\"xml\">style=&quot;@style/cofe_textView&quot;\n</code></pre>\n<p>这一段 TextView 可以重构为以下：</p>\n<pre><code class=\"xml\">\n&lt;TextView\n        style=&quot;@style/cofe_textView&quot;\n        android:id=&quot;@+id/tell&quot;\n        android:layout_above=&quot;@id/adress&quot;\n        android:text=&quot;电话:028-666666&quot;\n        android:textSize=&quot;24sp&quot;\n        android:layout_marginTop=&quot;8dp&quot; /&gt;\n&lt;TextView\n        style=&quot;@style/cofe_textView&quot;\n        android:layout_above=&quot;@id/tell&quot;\n        android:text=&quot;半岛咖啡&quot;\n        android:textSize=&quot;30sp&quot; /&gt;\n</code></pre>\n"},{"title":"Win10配置免安装MySQL","abbrlink":"e38ac448","date":"2017-06-20T14:36:45.000Z","_content":"\n1. #### 下载文件：\n\n   到 MySQL 官网https://dev.mysql.com/downloads/mysql/下载免安装版本: DOWNLOADS → MySQL Community Server → Windows (x86, 64-bit), ZIP Archive\n\n2. #### 创建配置文件：\n\n   将下载的 ZIP 文件解压至想要安装 MySQL 的文件夹，创建 mysql.ini 配置文件，保存退出。\n```ini\n[mysql]\n#设置mysql客户端默认字符集\ndefault-character-set = utf8\n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\n# 设置mysql数据库的数据的存放目录\ndatadir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\data\n# 允许最大连接数\nmax_connections = 200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server = utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine = INNODB\n```\n3. #### 设置环境变量：\n\n   右键桌面计算机→属性→高级系统设置→环境变量→系统变量Path→添加 MySQL 的bin目录路径，例如：C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\bin 保存退出。\n\n4. #### 安装MySQL服务：\n\n   a. 以管理员模式打开命令行窗口，安装MySQL服务：\n\n   ```sql\n   mysqld -install\n   ```\n\n   b. 初始化data目录：\n\n   ```sql\n   mysqld –-initialize\n   ```\n\n   c. 启动MySQL服务：\n\n   ```sql\n   net start MySQL\n   ```\n\n   d. 用户登录：\n\n   ```sql\n   mysql -u root -p\n   ```\n\n   e. 输入密码：\n\n   初始随机密码存在于data目录下.err结尾的文件中，初始随机密码为root@localhost:后面的字符，例如：rCTmkIr:K65t\n\n   ```SQL\n   A temporary password is generated for root@localhost: rCTmkIr:K65t\n   ```\n\n   ​","source":"_posts/Win10配置免安装MySQL.md","raw":"---\ntitle: Win10配置免安装MySQL\ntags: MySql\ncategories: 数据库\nabbrlink: e38ac448\ndate: 2017-06-20 22:36:45\n---\n\n1. #### 下载文件：\n\n   到 MySQL 官网https://dev.mysql.com/downloads/mysql/下载免安装版本: DOWNLOADS → MySQL Community Server → Windows (x86, 64-bit), ZIP Archive\n\n2. #### 创建配置文件：\n\n   将下载的 ZIP 文件解压至想要安装 MySQL 的文件夹，创建 mysql.ini 配置文件，保存退出。\n```ini\n[mysql]\n#设置mysql客户端默认字符集\ndefault-character-set = utf8\n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\n# 设置mysql数据库的数据的存放目录\ndatadir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\data\n# 允许最大连接数\nmax_connections = 200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server = utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine = INNODB\n```\n3. #### 设置环境变量：\n\n   右键桌面计算机→属性→高级系统设置→环境变量→系统变量Path→添加 MySQL 的bin目录路径，例如：C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\bin 保存退出。\n\n4. #### 安装MySQL服务：\n\n   a. 以管理员模式打开命令行窗口，安装MySQL服务：\n\n   ```sql\n   mysqld -install\n   ```\n\n   b. 初始化data目录：\n\n   ```sql\n   mysqld –-initialize\n   ```\n\n   c. 启动MySQL服务：\n\n   ```sql\n   net start MySQL\n   ```\n\n   d. 用户登录：\n\n   ```sql\n   mysql -u root -p\n   ```\n\n   e. 输入密码：\n\n   初始随机密码存在于data目录下.err结尾的文件中，初始随机密码为root@localhost:后面的字符，例如：rCTmkIr:K65t\n\n   ```SQL\n   A temporary password is generated for root@localhost: rCTmkIr:K65t\n   ```\n\n   ​","slug":"Win10配置免安装MySQL","published":1,"updated":"2017-11-12T02:26:36.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xiz001idfbxdh7key16","content":"<ol>\n<li><h4 id=\"下载文件：\"><a href=\"#下载文件：\" class=\"headerlink\" title=\"下载文件：\"></a>下载文件：</h4><p>到 MySQL 官网<a href=\"https://dev.mysql.com/downloads/mysql/下载免安装版本\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/downloads/mysql/下载免安装版本</a>: DOWNLOADS → MySQL Community Server → Windows (x86, 64-bit), ZIP Archive</p>\n</li>\n<li><h4 id=\"创建配置文件：\"><a href=\"#创建配置文件：\" class=\"headerlink\" title=\"创建配置文件：\"></a>创建配置文件：</h4><p>将下载的 ZIP 文件解压至想要安装 MySQL 的文件夹，创建 mysql.ini 配置文件，保存退出。</p>\n<pre><code class=\"ini\">[mysql]\n#设置mysql客户端默认字符集\ndefault-character-set = utf8\n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\n# 设置mysql数据库的数据的存放目录\ndatadir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\data\n# 允许最大连接数\nmax_connections = 200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server = utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine = INNODB\n</code></pre>\n</li>\n<li><h4 id=\"设置环境变量：\"><a href=\"#设置环境变量：\" class=\"headerlink\" title=\"设置环境变量：\"></a>设置环境变量：</h4><p>右键桌面计算机→属性→高级系统设置→环境变量→系统变量Path→添加 MySQL 的bin目录路径，例如：C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\bin 保存退出。</p>\n</li>\n<li><h4 id=\"安装MySQL服务：\"><a href=\"#安装MySQL服务：\" class=\"headerlink\" title=\"安装MySQL服务：\"></a>安装MySQL服务：</h4><p>a. 以管理员模式打开命令行窗口，安装MySQL服务：</p>\n<pre><code class=\"sql\">mysqld -install\n</code></pre>\n<p>b. 初始化data目录：</p>\n<pre><code class=\"sql\">mysqld –-initialize\n</code></pre>\n<p>c. 启动MySQL服务：</p>\n<pre><code class=\"sql\">net start MySQL\n</code></pre>\n<p>d. 用户登录：</p>\n<pre><code class=\"sql\">mysql -u root -p\n</code></pre>\n<p>e. 输入密码：</p>\n<p>初始随机密码存在于data目录下.err结尾的文件中，初始随机密码为root@localhost:后面的字符，例如：rCTmkIr:K65t</p>\n<pre><code class=\"SQL\">A temporary password is generated for root@localhost: rCTmkIr:K65t\n</code></pre>\n<p>​</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><h4 id=\"下载文件：\"><a href=\"#下载文件：\" class=\"headerlink\" title=\"下载文件：\"></a>下载文件：</h4><p>到 MySQL 官网<a href=\"https://dev.mysql.com/downloads/mysql/下载免安装版本\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/downloads/mysql/下载免安装版本</a>: DOWNLOADS → MySQL Community Server → Windows (x86, 64-bit), ZIP Archive</p>\n</li>\n<li><h4 id=\"创建配置文件：\"><a href=\"#创建配置文件：\" class=\"headerlink\" title=\"创建配置文件：\"></a>创建配置文件：</h4><p>将下载的 ZIP 文件解压至想要安装 MySQL 的文件夹，创建 mysql.ini 配置文件，保存退出。</p>\n<pre><code class=\"ini\">[mysql]\n#设置mysql客户端默认字符集\ndefault-character-set = utf8\n[mysqld]\n#设置3306端口\nport = 3306\n# 设置mysql的安装目录\nbasedir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\n# 设置mysql数据库的数据的存放目录\ndatadir = C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\data\n# 允许最大连接数\nmax_connections = 200\n# 服务端使用的字符集默认为8比特编码的latin1字符集\ncharacter-set-server = utf8\n# 创建新表时将使用的默认存储引擎\ndefault-storage-engine = INNODB\n</code></pre>\n</li>\n<li><h4 id=\"设置环境变量：\"><a href=\"#设置环境变量：\" class=\"headerlink\" title=\"设置环境变量：\"></a>设置环境变量：</h4><p>右键桌面计算机→属性→高级系统设置→环境变量→系统变量Path→添加 MySQL 的bin目录路径，例如：C:\\APPS\\MySQL\\mysql-5.7.18-winx64\\bin 保存退出。</p>\n</li>\n<li><h4 id=\"安装MySQL服务：\"><a href=\"#安装MySQL服务：\" class=\"headerlink\" title=\"安装MySQL服务：\"></a>安装MySQL服务：</h4><p>a. 以管理员模式打开命令行窗口，安装MySQL服务：</p>\n<pre><code class=\"sql\">mysqld -install\n</code></pre>\n<p>b. 初始化data目录：</p>\n<pre><code class=\"sql\">mysqld –-initialize\n</code></pre>\n<p>c. 启动MySQL服务：</p>\n<pre><code class=\"sql\">net start MySQL\n</code></pre>\n<p>d. 用户登录：</p>\n<pre><code class=\"sql\">mysql -u root -p\n</code></pre>\n<p>e. 输入密码：</p>\n<p>初始随机密码存在于data目录下.err结尾的文件中，初始随机密码为root@localhost:后面的字符，例如：rCTmkIr:K65t</p>\n<pre><code class=\"SQL\">A temporary password is generated for root@localhost: rCTmkIr:K65t\n</code></pre>\n<p>​</p>\n</li>\n</ol>\n"},{"title":"button常用设置","abbrlink":"91b6115c","data":"2017/9/16","_content":"\n## 鼠标样式\n\ncursor：定网页浏览时用户鼠标指针的样式。\n\ncursor：pointer； 设定鼠标的形状为一只伸出食指的手，这也是绝大多数浏览器里面鼠标停留在网页链接上方时候的样式。\ndefault 箭头。\ncrosshair 十字\nprogress 沙漏\n\n## 按钮颜色\n\n平时的状态：\n```css\n.btn {\n    // 未按下时的背景颜色\n    background: ##02b3e4;\n    // 边框圆角\n    border-radius: 4px;\n    // 去掉边框\n    border: none\n    // 边缘阴影\n    box-shadow: 12px 15px 20px rgba(0, 0, 0, 0.1);\n    // 字体颜色\n    color: ##fff;\n    // 显示方式\n    display: inline-block;\n    // 字体\n    font-family: 'Open Sans', sans-serif;\n    font-size: 12px;\n    font-weight: 600;\n    // 字间距\n    letter-spacing: 0.165em;\n    // 超出隐藏\n    overflow: hidden;\n    // 设置渐变效果\n    transition: 0.2s box-shadow ease-in-out, 0.2s background-color ease-in-out, 0.2s border-color ease-in-out;\n}\n// 鼠标放上去时的颜色\n.btn:hover:not(:disabled) { background: ##148bb1;}\n```\n## 字体抗锯齿 -webkit-font-smoothing有\n> CSS3中用于webkit引擎(如chrome)中设置字体的抗锯齿或者说光滑度的属性。\n\n* none ------ 对低像素的文本比较好\n* subpixel-antialiased ------默认值\n* antialiased ------抗锯齿很好\n\n## 文本溢出 text-overflow\n> text-overflow 属性规定当文本溢出包含元素时发生的事情。\n* clip\t修剪文本。\n  * ellipsis显示省略符号来代表被修剪的文本。\n  * string使用给定的字符串来代表被修剪的文本。\n\n## 文本转换 text-transform\n> 转换不同元素中的文本。\n\n* none\t默认。定义带有小写字母和大写字母的标准的文本。\n  * capitalize文本中的每个单词以大写字母开头。\n  * uppercase定义仅有大写字母。\n  * lowercase定义无大写字母，仅有小写字母。\n  * inherit规定应该从父元素继承 text-transform 属性的值。\n\n## 元素变形过渡效果 transition\n> 设置元素渐变过渡，transition: property duration timing-function delay;需要加浏览器前缀。设置多个元素效果时用逗号隔开。\n> http://www.w3school.com.cn/cssref/pr_transition.asp\n\n* transition-property\t规定设置过渡效果的 CSS 属性的名称。\n  * transition-duration规定完成过渡效果需要多少秒或毫秒。\n  * transition-timing-function规定速度效果的速度曲线。（http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）\n  * transition-delay定义过渡效果何时开始，过渡之前需要等待的实践。\n\n**速度曲线设置**\n* linear\t规定以相同速度开始至结束的过渡效果。\n  * ease规定慢速开始，然后变快，然后慢速结束的过渡效果。\n  * ease-in规定以慢速开始的过渡效果。\n  * ease-out规定以慢速结束的过渡效果。\n  * ease-in-out规定以慢速开始和结束的过渡效果。\n\n## 段落文本换行 white-space\n> white-space 属性设置如何处理元素内的空白。\n> http://www.w3school.com.cn/cssref/pr_text_white-space.asp\n\n* normal\t默认。空白会被浏览器忽略。\n  * pre空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。\n  * nowrap文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。\n  * pre-wrap保留空白符序列，但是正常地进行换行。\n  * pre-line合并空白符序列，但是保留换行符。\n  * inherit规定应该从父元素继承 white-space 属性的值","source":"_posts/button 常用设置.md","raw":"---\ntitle: button常用设置\ntags: CSS\ncategories: CSS\nabbrlink: 91b6115c\ndata: 2017/9/16\n---\n\n## 鼠标样式\n\ncursor：定网页浏览时用户鼠标指针的样式。\n\ncursor：pointer； 设定鼠标的形状为一只伸出食指的手，这也是绝大多数浏览器里面鼠标停留在网页链接上方时候的样式。\ndefault 箭头。\ncrosshair 十字\nprogress 沙漏\n\n## 按钮颜色\n\n平时的状态：\n```css\n.btn {\n    // 未按下时的背景颜色\n    background: ##02b3e4;\n    // 边框圆角\n    border-radius: 4px;\n    // 去掉边框\n    border: none\n    // 边缘阴影\n    box-shadow: 12px 15px 20px rgba(0, 0, 0, 0.1);\n    // 字体颜色\n    color: ##fff;\n    // 显示方式\n    display: inline-block;\n    // 字体\n    font-family: 'Open Sans', sans-serif;\n    font-size: 12px;\n    font-weight: 600;\n    // 字间距\n    letter-spacing: 0.165em;\n    // 超出隐藏\n    overflow: hidden;\n    // 设置渐变效果\n    transition: 0.2s box-shadow ease-in-out, 0.2s background-color ease-in-out, 0.2s border-color ease-in-out;\n}\n// 鼠标放上去时的颜色\n.btn:hover:not(:disabled) { background: ##148bb1;}\n```\n## 字体抗锯齿 -webkit-font-smoothing有\n> CSS3中用于webkit引擎(如chrome)中设置字体的抗锯齿或者说光滑度的属性。\n\n* none ------ 对低像素的文本比较好\n* subpixel-antialiased ------默认值\n* antialiased ------抗锯齿很好\n\n## 文本溢出 text-overflow\n> text-overflow 属性规定当文本溢出包含元素时发生的事情。\n* clip\t修剪文本。\n  * ellipsis显示省略符号来代表被修剪的文本。\n  * string使用给定的字符串来代表被修剪的文本。\n\n## 文本转换 text-transform\n> 转换不同元素中的文本。\n\n* none\t默认。定义带有小写字母和大写字母的标准的文本。\n  * capitalize文本中的每个单词以大写字母开头。\n  * uppercase定义仅有大写字母。\n  * lowercase定义无大写字母，仅有小写字母。\n  * inherit规定应该从父元素继承 text-transform 属性的值。\n\n## 元素变形过渡效果 transition\n> 设置元素渐变过渡，transition: property duration timing-function delay;需要加浏览器前缀。设置多个元素效果时用逗号隔开。\n> http://www.w3school.com.cn/cssref/pr_transition.asp\n\n* transition-property\t规定设置过渡效果的 CSS 属性的名称。\n  * transition-duration规定完成过渡效果需要多少秒或毫秒。\n  * transition-timing-function规定速度效果的速度曲线。（http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）\n  * transition-delay定义过渡效果何时开始，过渡之前需要等待的实践。\n\n**速度曲线设置**\n* linear\t规定以相同速度开始至结束的过渡效果。\n  * ease规定慢速开始，然后变快，然后慢速结束的过渡效果。\n  * ease-in规定以慢速开始的过渡效果。\n  * ease-out规定以慢速结束的过渡效果。\n  * ease-in-out规定以慢速开始和结束的过渡效果。\n\n## 段落文本换行 white-space\n> white-space 属性设置如何处理元素内的空白。\n> http://www.w3school.com.cn/cssref/pr_text_white-space.asp\n\n* normal\t默认。空白会被浏览器忽略。\n  * pre空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。\n  * nowrap文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。\n  * pre-wrap保留空白符序列，但是正常地进行换行。\n  * pre-line合并空白符序列，但是保留换行符。\n  * inherit规定应该从父元素继承 white-space 属性的值","slug":"button 常用设置","published":1,"date":"2017-11-12T02:19:07.520Z","updated":"2017-11-12T02:19:07.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xj0001mdfbx5uk5ptbi","content":"<h2 id=\"鼠标样式\"><a href=\"#鼠标样式\" class=\"headerlink\" title=\"鼠标样式\"></a>鼠标样式</h2><p>cursor：定网页浏览时用户鼠标指针的样式。</p>\n<p>cursor：pointer； 设定鼠标的形状为一只伸出食指的手，这也是绝大多数浏览器里面鼠标停留在网页链接上方时候的样式。<br>default 箭头。<br>crosshair 十字<br>progress 沙漏</p>\n<h2 id=\"按钮颜色\"><a href=\"#按钮颜色\" class=\"headerlink\" title=\"按钮颜色\"></a>按钮颜色</h2><p>平时的状态：</p>\n<pre><code class=\"css\">.btn {\n    // 未按下时的背景颜色\n    background: ##02b3e4;\n    // 边框圆角\n    border-radius: 4px;\n    // 去掉边框\n    border: none\n    // 边缘阴影\n    box-shadow: 12px 15px 20px rgba(0, 0, 0, 0.1);\n    // 字体颜色\n    color: ##fff;\n    // 显示方式\n    display: inline-block;\n    // 字体\n    font-family: &#39;Open Sans&#39;, sans-serif;\n    font-size: 12px;\n    font-weight: 600;\n    // 字间距\n    letter-spacing: 0.165em;\n    // 超出隐藏\n    overflow: hidden;\n    // 设置渐变效果\n    transition: 0.2s box-shadow ease-in-out, 0.2s background-color ease-in-out, 0.2s border-color ease-in-out;\n}\n// 鼠标放上去时的颜色\n.btn:hover:not(:disabled) { background: ##148bb1;}\n</code></pre>\n<h2 id=\"字体抗锯齿-webkit-font-smoothing有\"><a href=\"#字体抗锯齿-webkit-font-smoothing有\" class=\"headerlink\" title=\"字体抗锯齿 -webkit-font-smoothing有\"></a>字体抗锯齿 -webkit-font-smoothing有</h2><blockquote>\n<p>CSS3中用于webkit引擎(如chrome)中设置字体的抗锯齿或者说光滑度的属性。</p>\n</blockquote>\n<ul>\n<li>none —— 对低像素的文本比较好</li>\n<li>subpixel-antialiased ——默认值</li>\n<li>antialiased ——抗锯齿很好</li>\n</ul>\n<h2 id=\"文本溢出-text-overflow\"><a href=\"#文本溢出-text-overflow\" class=\"headerlink\" title=\"文本溢出 text-overflow\"></a>文本溢出 text-overflow</h2><blockquote>\n<p>text-overflow 属性规定当文本溢出包含元素时发生的事情。</p>\n<ul>\n<li>clip    修剪文本。<ul>\n<li>ellipsis显示省略符号来代表被修剪的文本。</li>\n<li>string使用给定的字符串来代表被修剪的文本。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"文本转换-text-transform\"><a href=\"#文本转换-text-transform\" class=\"headerlink\" title=\"文本转换 text-transform\"></a>文本转换 text-transform</h2><blockquote>\n<p>转换不同元素中的文本。</p>\n</blockquote>\n<ul>\n<li>none    默认。定义带有小写字母和大写字母的标准的文本。<ul>\n<li>capitalize文本中的每个单词以大写字母开头。</li>\n<li>uppercase定义仅有大写字母。</li>\n<li>lowercase定义无大写字母，仅有小写字母。</li>\n<li>inherit规定应该从父元素继承 text-transform 属性的值。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元素变形过渡效果-transition\"><a href=\"#元素变形过渡效果-transition\" class=\"headerlink\" title=\"元素变形过渡效果 transition\"></a>元素变形过渡效果 transition</h2><blockquote>\n<p>设置元素渐变过渡，transition: property duration timing-function delay;需要加浏览器前缀。设置多个元素效果时用逗号隔开。<br><a href=\"http://www.w3school.com.cn/cssref/pr_transition.asp\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/cssref/pr_transition.asp</a></p>\n</blockquote>\n<ul>\n<li>transition-property    规定设置过渡效果的 CSS 属性的名称。<ul>\n<li>transition-duration规定完成过渡效果需要多少秒或毫秒。</li>\n<li>transition-timing-function规定速度效果的速度曲线。（<a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）</a></li>\n<li>transition-delay定义过渡效果何时开始，过渡之前需要等待的实践。</li>\n</ul>\n</li>\n</ul>\n<p><strong>速度曲线设置</strong></p>\n<ul>\n<li>linear    规定以相同速度开始至结束的过渡效果。<ul>\n<li>ease规定慢速开始，然后变快，然后慢速结束的过渡效果。</li>\n<li>ease-in规定以慢速开始的过渡效果。</li>\n<li>ease-out规定以慢速结束的过渡效果。</li>\n<li>ease-in-out规定以慢速开始和结束的过渡效果。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"段落文本换行-white-space\"><a href=\"#段落文本换行-white-space\" class=\"headerlink\" title=\"段落文本换行 white-space\"></a>段落文本换行 white-space</h2><blockquote>\n<p>white-space 属性设置如何处理元素内的空白。<br><a href=\"http://www.w3school.com.cn/cssref/pr_text_white-space.asp\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/cssref/pr_text_white-space.asp</a></p>\n</blockquote>\n<ul>\n<li>normal    默认。空白会被浏览器忽略。<ul>\n<li>pre空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></li>\n<li>nowrap文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</li>\n<li>pre-wrap保留空白符序列，但是正常地进行换行。</li>\n<li>pre-line合并空白符序列，但是保留换行符。</li>\n<li>inherit规定应该从父元素继承 white-space 属性的值</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"鼠标样式\"><a href=\"#鼠标样式\" class=\"headerlink\" title=\"鼠标样式\"></a>鼠标样式</h2><p>cursor：定网页浏览时用户鼠标指针的样式。</p>\n<p>cursor：pointer； 设定鼠标的形状为一只伸出食指的手，这也是绝大多数浏览器里面鼠标停留在网页链接上方时候的样式。<br>default 箭头。<br>crosshair 十字<br>progress 沙漏</p>\n<h2 id=\"按钮颜色\"><a href=\"#按钮颜色\" class=\"headerlink\" title=\"按钮颜色\"></a>按钮颜色</h2><p>平时的状态：</p>\n<pre><code class=\"css\">.btn {\n    // 未按下时的背景颜色\n    background: ##02b3e4;\n    // 边框圆角\n    border-radius: 4px;\n    // 去掉边框\n    border: none\n    // 边缘阴影\n    box-shadow: 12px 15px 20px rgba(0, 0, 0, 0.1);\n    // 字体颜色\n    color: ##fff;\n    // 显示方式\n    display: inline-block;\n    // 字体\n    font-family: &#39;Open Sans&#39;, sans-serif;\n    font-size: 12px;\n    font-weight: 600;\n    // 字间距\n    letter-spacing: 0.165em;\n    // 超出隐藏\n    overflow: hidden;\n    // 设置渐变效果\n    transition: 0.2s box-shadow ease-in-out, 0.2s background-color ease-in-out, 0.2s border-color ease-in-out;\n}\n// 鼠标放上去时的颜色\n.btn:hover:not(:disabled) { background: ##148bb1;}\n</code></pre>\n<h2 id=\"字体抗锯齿-webkit-font-smoothing有\"><a href=\"#字体抗锯齿-webkit-font-smoothing有\" class=\"headerlink\" title=\"字体抗锯齿 -webkit-font-smoothing有\"></a>字体抗锯齿 -webkit-font-smoothing有</h2><blockquote>\n<p>CSS3中用于webkit引擎(如chrome)中设置字体的抗锯齿或者说光滑度的属性。</p>\n</blockquote>\n<ul>\n<li>none —— 对低像素的文本比较好</li>\n<li>subpixel-antialiased ——默认值</li>\n<li>antialiased ——抗锯齿很好</li>\n</ul>\n<h2 id=\"文本溢出-text-overflow\"><a href=\"#文本溢出-text-overflow\" class=\"headerlink\" title=\"文本溢出 text-overflow\"></a>文本溢出 text-overflow</h2><blockquote>\n<p>text-overflow 属性规定当文本溢出包含元素时发生的事情。</p>\n<ul>\n<li>clip    修剪文本。<ul>\n<li>ellipsis显示省略符号来代表被修剪的文本。</li>\n<li>string使用给定的字符串来代表被修剪的文本。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"文本转换-text-transform\"><a href=\"#文本转换-text-transform\" class=\"headerlink\" title=\"文本转换 text-transform\"></a>文本转换 text-transform</h2><blockquote>\n<p>转换不同元素中的文本。</p>\n</blockquote>\n<ul>\n<li>none    默认。定义带有小写字母和大写字母的标准的文本。<ul>\n<li>capitalize文本中的每个单词以大写字母开头。</li>\n<li>uppercase定义仅有大写字母。</li>\n<li>lowercase定义无大写字母，仅有小写字母。</li>\n<li>inherit规定应该从父元素继承 text-transform 属性的值。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"元素变形过渡效果-transition\"><a href=\"#元素变形过渡效果-transition\" class=\"headerlink\" title=\"元素变形过渡效果 transition\"></a>元素变形过渡效果 transition</h2><blockquote>\n<p>设置元素渐变过渡，transition: property duration timing-function delay;需要加浏览器前缀。设置多个元素效果时用逗号隔开。<br><a href=\"http://www.w3school.com.cn/cssref/pr_transition.asp\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/cssref/pr_transition.asp</a></p>\n</blockquote>\n<ul>\n<li>transition-property    规定设置过渡效果的 CSS 属性的名称。<ul>\n<li>transition-duration规定完成过渡效果需要多少秒或毫秒。</li>\n<li>transition-timing-function规定速度效果的速度曲线。（<a href=\"http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）</a></li>\n<li>transition-delay定义过渡效果何时开始，过渡之前需要等待的实践。</li>\n</ul>\n</li>\n</ul>\n<p><strong>速度曲线设置</strong></p>\n<ul>\n<li>linear    规定以相同速度开始至结束的过渡效果。<ul>\n<li>ease规定慢速开始，然后变快，然后慢速结束的过渡效果。</li>\n<li>ease-in规定以慢速开始的过渡效果。</li>\n<li>ease-out规定以慢速结束的过渡效果。</li>\n<li>ease-in-out规定以慢速开始和结束的过渡效果。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"段落文本换行-white-space\"><a href=\"#段落文本换行-white-space\" class=\"headerlink\" title=\"段落文本换行 white-space\"></a>段落文本换行 white-space</h2><blockquote>\n<p>white-space 属性设置如何处理元素内的空白。<br><a href=\"http://www.w3school.com.cn/cssref/pr_text_white-space.asp\" target=\"_blank\" rel=\"external\">http://www.w3school.com.cn/cssref/pr_text_white-space.asp</a></p>\n</blockquote>\n<ul>\n<li>normal    默认。空白会被浏览器忽略。<ul>\n<li>pre空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</pre></li>\n<li>nowrap文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</li>\n<li>pre-wrap保留空白符序列，但是正常地进行换行。</li>\n<li>pre-line合并空白符序列，但是保留换行符。</li>\n<li>inherit规定应该从父元素继承 white-space 属性的值</li>\n</ul>\n</li>\n</ul>\n"},{"title":"for-in和for-of","abbrlink":"f5b5d35a","data":"2017/9/16","_content":"\n## for-in\n> `for-in`循环遍历的是对象的属性名称,可以将一个对象的属性循环遍历出来。\n```javascript\nvar obj = {\n    name: 'XiaoMing',\n    age: 22,\n    sex: 'man'\n};\nfor(let key in obj){\n    console.log(key); // 'name' 'age' 'sex'\n}\n```\n数组也是对象，`for-in`可以直接循环遍历出`Array`的索引，索引类型为 String 而不是 Number。\n```javascript\nvar array = ['a', 'b', 'c'];\nfor(let i in array){\n    console.log(i); // 索引'0' '1' '2'\n}\n```","source":"_posts/for-in和for-of.md","raw":"---\ntitle: for-in和for-of\ntags: JavaScript\ncategories: JavaScript\nabbrlink: f5b5d35a\ndata: 2017/9/16\n---\n\n## for-in\n> `for-in`循环遍历的是对象的属性名称,可以将一个对象的属性循环遍历出来。\n```javascript\nvar obj = {\n    name: 'XiaoMing',\n    age: 22,\n    sex: 'man'\n};\nfor(let key in obj){\n    console.log(key); // 'name' 'age' 'sex'\n}\n```\n数组也是对象，`for-in`可以直接循环遍历出`Array`的索引，索引类型为 String 而不是 Number。\n```javascript\nvar array = ['a', 'b', 'c'];\nfor(let i in array){\n    console.log(i); // 索引'0' '1' '2'\n}\n```","slug":"for-in和for-of","published":1,"date":"2017-11-12T02:20:42.461Z","updated":"2017-11-12T02:20:42.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xj3001pdfbxewrtc7cw","content":"<h2 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for-in\"></a>for-in</h2><blockquote>\n<p><code>for-in</code>循环遍历的是对象的属性名称,可以将一个对象的属性循环遍历出来。</p>\n<pre><code class=\"javascript\">var obj = {\n    name: &#39;XiaoMing&#39;,\n    age: 22,\n    sex: &#39;man&#39;\n};\nfor(let key in obj){\n    console.log(key); // &#39;name&#39; &#39;age&#39; &#39;sex&#39;\n}\n</code></pre>\n<p>数组也是对象，<code>for-in</code>可以直接循环遍历出<code>Array</code>的索引，索引类型为 String 而不是 Number。</p>\n<pre><code class=\"javascript\">var array = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];\nfor(let i in array){\n    console.log(i); // 索引&#39;0&#39; &#39;1&#39; &#39;2&#39;\n}\n</code></pre>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"for-in\"><a href=\"#for-in\" class=\"headerlink\" title=\"for-in\"></a>for-in</h2><blockquote>\n<p><code>for-in</code>循环遍历的是对象的属性名称,可以将一个对象的属性循环遍历出来。</p>\n<pre><code class=\"javascript\">var obj = {\n    name: &#39;XiaoMing&#39;,\n    age: 22,\n    sex: &#39;man&#39;\n};\nfor(let key in obj){\n    console.log(key); // &#39;name&#39; &#39;age&#39; &#39;sex&#39;\n}\n</code></pre>\n<p>数组也是对象，<code>for-in</code>可以直接循环遍历出<code>Array</code>的索引，索引类型为 String 而不是 Number。</p>\n<pre><code class=\"javascript\">var array = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];\nfor(let i in array){\n    console.log(i); // 索引&#39;0&#39; &#39;1&#39; &#39;2&#39;\n}\n</code></pre>\n</blockquote>\n"},{"title":"arguments和rest","abbrlink":"e5332c52","data":"2017/9/16","_content":"## arguments 参数\n> 只在函数内部起作用，指向当前函数调用者传入的所有参数。\n\n```javascript\nvar bar = (x) => {\n    console.log(x); // a\n    for(let i = 0; i < arguments.length; i++){\n        console.log(arguments[i]); // 根据参数索引打印参数\n    }\n};\nbar('a', 'b', 'c');\n```\n\n* 利用`arguments`可以获得调用者传入的所有参数。\n* `arguments`常用于判断传入参数个数。\n\n## rest 不定参数\n> JS 允许函数接收任意个参数，当参数个数不确定的情况下可以使用不定参数。\n```javascript\n\"use strict\"; // 严格模式\n// 接受任意个参数返回它们的和\nfunction sum(...rest) { // 不定参数写在参数最后，前面使用 ... 标识\n  let result = 0;\n  for (let i of rest) { // rest 是一个数组实例\n      result += i;\n  }\n  console.log(result);\n}\nsum(1, 2, 3, 4); // 传入参数\n```\n不定参数写在参数最后，传入参数先绑定已有的参数，多余的参数以数组形式存入不定参数。","source":"_posts/arguments和rest.md","raw":"---\ntitle: arguments和rest\ntags: JavaScript\ncategories: JavaScript\nabbrlink: e5332c52\ndata: 2017/9/16\n---\n## arguments 参数\n> 只在函数内部起作用，指向当前函数调用者传入的所有参数。\n\n```javascript\nvar bar = (x) => {\n    console.log(x); // a\n    for(let i = 0; i < arguments.length; i++){\n        console.log(arguments[i]); // 根据参数索引打印参数\n    }\n};\nbar('a', 'b', 'c');\n```\n\n* 利用`arguments`可以获得调用者传入的所有参数。\n* `arguments`常用于判断传入参数个数。\n\n## rest 不定参数\n> JS 允许函数接收任意个参数，当参数个数不确定的情况下可以使用不定参数。\n```javascript\n\"use strict\"; // 严格模式\n// 接受任意个参数返回它们的和\nfunction sum(...rest) { // 不定参数写在参数最后，前面使用 ... 标识\n  let result = 0;\n  for (let i of rest) { // rest 是一个数组实例\n      result += i;\n  }\n  console.log(result);\n}\nsum(1, 2, 3, 4); // 传入参数\n```\n不定参数写在参数最后，传入参数先绑定已有的参数，多余的参数以数组形式存入不定参数。","slug":"arguments和rest","published":1,"date":"2017-11-12T02:20:31.243Z","updated":"2017-11-12T02:20:31.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xj5001tdfbxmw7beio9","content":"<h2 id=\"arguments-参数\"><a href=\"#arguments-参数\" class=\"headerlink\" title=\"arguments 参数\"></a>arguments 参数</h2><blockquote>\n<p>只在函数内部起作用，指向当前函数调用者传入的所有参数。</p>\n</blockquote>\n<pre><code class=\"javascript\">var bar = (x) =&gt; {\n    console.log(x); // a\n    for(let i = 0; i &lt; arguments.length; i++){\n        console.log(arguments[i]); // 根据参数索引打印参数\n    }\n};\nbar(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);\n</code></pre>\n<ul>\n<li>利用<code>arguments</code>可以获得调用者传入的所有参数。</li>\n<li><code>arguments</code>常用于判断传入参数个数。</li>\n</ul>\n<h2 id=\"rest-不定参数\"><a href=\"#rest-不定参数\" class=\"headerlink\" title=\"rest 不定参数\"></a>rest 不定参数</h2><blockquote>\n<p>JS 允许函数接收任意个参数，当参数个数不确定的情况下可以使用不定参数。</p>\n<pre><code class=\"javascript\">&quot;use strict&quot;; // 严格模式\n// 接受任意个参数返回它们的和\nfunction sum(...rest) { // 不定参数写在参数最后，前面使用 ... 标识\n  let result = 0;\n  for (let i of rest) { // rest 是一个数组实例\n      result += i;\n  }\n  console.log(result);\n}\nsum(1, 2, 3, 4); // 传入参数\n</code></pre>\n<p>不定参数写在参数最后，传入参数先绑定已有的参数，多余的参数以数组形式存入不定参数。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"arguments-参数\"><a href=\"#arguments-参数\" class=\"headerlink\" title=\"arguments 参数\"></a>arguments 参数</h2><blockquote>\n<p>只在函数内部起作用，指向当前函数调用者传入的所有参数。</p>\n</blockquote>\n<pre><code class=\"javascript\">var bar = (x) =&gt; {\n    console.log(x); // a\n    for(let i = 0; i &lt; arguments.length; i++){\n        console.log(arguments[i]); // 根据参数索引打印参数\n    }\n};\nbar(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);\n</code></pre>\n<ul>\n<li>利用<code>arguments</code>可以获得调用者传入的所有参数。</li>\n<li><code>arguments</code>常用于判断传入参数个数。</li>\n</ul>\n<h2 id=\"rest-不定参数\"><a href=\"#rest-不定参数\" class=\"headerlink\" title=\"rest 不定参数\"></a>rest 不定参数</h2><blockquote>\n<p>JS 允许函数接收任意个参数，当参数个数不确定的情况下可以使用不定参数。</p>\n<pre><code class=\"javascript\">&quot;use strict&quot;; // 严格模式\n// 接受任意个参数返回它们的和\nfunction sum(...rest) { // 不定参数写在参数最后，前面使用 ... 标识\n  let result = 0;\n  for (let i of rest) { // rest 是一个数组实例\n      result += i;\n  }\n  console.log(result);\n}\nsum(1, 2, 3, 4); // 传入参数\n</code></pre>\n<p>不定参数写在参数最后，传入参数先绑定已有的参数，多余的参数以数组形式存入不定参数。</p>\n</blockquote>\n"},{"title":"git基础","abbrlink":"9891ebc8","data":"2017/9/16","_content":"\n## git 基础命令\n### git 全局配置\n\n```\ngit config —global\tuser.name \"roojay\"\ngit\tconfig —global\tuser.email \"roojay520@gmail.com\"\n```\n\n### 创建文件夹 test\n```\nmkdir test\n```\n### 切换到 test 文件夹\n```\n cd test\n```\n### 新建 readme.md 文件\n```\n touch readme.md\n```\n\n### 初始化仓库\n```\n git init\n```\n### 查看仓库信息\n```\n git status\n```\n### 添加 readme.md 到缓存区\n```\n git add readme.md\n```\n### 将 readme.md 移除缓存区\n```\n git rm\t--cached readme.md\n```\n### 删除 readme.md 文件\n\n```\n  rm readme.md\n```\n\n### 删除文件 test 文件夹\n\n```\n rm -r test\n```\n### 提交文件到本地仓库\n```\n git commit\t-m 'first commit' //m 后面的 'fisrst commit' 表示提交信息\n```\n### 查看操作日志\n```\ngit\tlog\n```\n## branch 操作\n### 查看本地分支\n\n    git branch\n### 查看远程分支\n\n```\ngit branch -r\n```\n\n### 创建新分支 test\n\n    git\tbranch test\n### 切换分支\n\n    git\tcheckout test\n\n### 快速创建加切换\n\n    git\tcheckout -b test\n### 删除本地分支\n    git\tbranch\t-d\n    //强制删除本地分支\n    git branch -D test\n### 删除远程分支\n\n```\ngit push origin:testA\n```\n### 远程分支迁至本地\n\n```\ngit checkout testA origin/testA\n```\n\n### 版本标签\n```\ngit\ttag //查看版本记录\ngit tag v1.0.0 //创建版本 v1.0.0 标签\ngit checkout v1.0.0 //切换到v1.0.0 版本状态\n```\n## 提交代码到 GitHub\n### 1.生成 SSH\n```\nssh-keygen -t rsa\n```\n> 执行完以上命令后，在 C:/Users/Username/.ssh 文件下生成两个文件\tid_rsa（密钥）\t和\tid_rsa.pub（公钥）\n\n### 2.GitHub 添加 SSH key\n\n>  将 id_rsa.pub 的内容添加到\tGitHub： Setting→SSH keys and GPG keys→New SSH key\n>  输入\t`ssh -T git@github.com`测试是否添加成功\n\n### 3. Push 推送\n```\n//将本地代码推到远程 master 分支\ngit push origin master\n```\n### 4. Pull 拉取\n\n```\n//将远程 master 分支的代码拉取到本地\ngit pull origin master\n```\n### 5. 提交代码\n```\n//clone 自己的项目\ngit\tclone git@github.com:roojay520/test.git\n//修改 test 项目代码\n//commit 文件\ngit add change.md\ngit commit -m 'change file'\n//推送到 GitHub\ngit\tpush origin\tmaster\n```\n### 6. 关联本地已有项目\n> 假如我们需要把本地已有的 test1 项目的所有代码提交到 GitHub 上的 test\t项目。\n\n```\n//将本地 test1 项目与远程 test 项目关联\ngit\tremote add origin git@github.com:roojay520/test.git\n//其中 orgin 是远程仓库的名字\n//查看当前项目的远程仓库\ngit\tremote -v\n//向远程仓库提交代码\ngit push origin\tmaster\n```\n## git 进阶\n\n## 版本回退\n\n* 在Git中，用`HEAD`表示当前版本，上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。\n\n* 使用`git reflog`用来查看命令历史，或者使用`git log`查看提交 log，找到提交的 ` commit id`。\n\n* 使用`git reset`命令进行版本回退。\n\n  ```\n  //这个 HEAD 可以是具体的 commit id\n  git reset --hard HEAD^\n  ```\n\n## 常用配置\n### 用户配置\n> 全局设置用户名和用户邮箱\n> user.name 用户名； user.email 用户邮箱\n```\ngit\tconfig --global\tuser.name \"roojay\"\ngit\tconfig --global user.email \"roojay520@gmail.com\"\n```\n> 如果单独的某一个项目想要用特定的邮箱，切换到你的项目，以码把\t--global 参数去除，执行一遍。\n```\ngit\tconfig user.name \"roojay\"\ngit\tconfig user.email \"roojay520@gmail.com\"\n```\n### 快捷配置 alias\n>为命令设置别名\n```\n//切换 ck\ngit config --global alias.ck checkout #别名\n//提交 cm\ngit config --global alias.cm commit\n//查看信息 st\ngit config --global alias.st status\n//分支 br\ngit config --global alias.br branch\n```\n> 组合命令\n\n```\n//推送 psm\ngit config --global alias.psm 'push origin master'\n//拉取 plm\ngit config --global alias.plm 'pull origin master'\n```\n\n```\n//个性日志输出 lg\ngit config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\"\n//设置个性日志输出\ngit log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\n```\n\n## 合并分支\n> rebase\t跟 merge\t的区别可以理解成有两个书架，需要把两个书架的书整理到一起去，第一种做法是\tmerge\t，直接腾出一块地方把另一个书架的书全部放进去，这种做法你可以知道哪些书是来自另一个书架的；第二种做法就是 rebase\t，他会把两个书架的书先进行比较，按照购书的时间来给他重新排序，然后重新放置好，这样做的好处就是合并之后的书架看起来很有逻辑，但是你很难清晰的知道哪些书来自哪个书架的。\n\n### merge 暴力合并\n> 在 testA 分支开发完了一个功能，合并到主分支\tmaster\t上去\n```\ngit checkout master\ngit merge testA\n```\n\n### rebase 比较合并\n\n```\ngit checkout master\ngit rebase testA\n```\n","source":"_posts/git 操作指南.md","raw":"---\ntitle: git基础\ntags: Git\ncategories: Git\nabbrlink: 9891ebc8\ndata: 2017/9/16\n---\n\n## git 基础命令\n### git 全局配置\n\n```\ngit config —global\tuser.name \"roojay\"\ngit\tconfig —global\tuser.email \"roojay520@gmail.com\"\n```\n\n### 创建文件夹 test\n```\nmkdir test\n```\n### 切换到 test 文件夹\n```\n cd test\n```\n### 新建 readme.md 文件\n```\n touch readme.md\n```\n\n### 初始化仓库\n```\n git init\n```\n### 查看仓库信息\n```\n git status\n```\n### 添加 readme.md 到缓存区\n```\n git add readme.md\n```\n### 将 readme.md 移除缓存区\n```\n git rm\t--cached readme.md\n```\n### 删除 readme.md 文件\n\n```\n  rm readme.md\n```\n\n### 删除文件 test 文件夹\n\n```\n rm -r test\n```\n### 提交文件到本地仓库\n```\n git commit\t-m 'first commit' //m 后面的 'fisrst commit' 表示提交信息\n```\n### 查看操作日志\n```\ngit\tlog\n```\n## branch 操作\n### 查看本地分支\n\n    git branch\n### 查看远程分支\n\n```\ngit branch -r\n```\n\n### 创建新分支 test\n\n    git\tbranch test\n### 切换分支\n\n    git\tcheckout test\n\n### 快速创建加切换\n\n    git\tcheckout -b test\n### 删除本地分支\n    git\tbranch\t-d\n    //强制删除本地分支\n    git branch -D test\n### 删除远程分支\n\n```\ngit push origin:testA\n```\n### 远程分支迁至本地\n\n```\ngit checkout testA origin/testA\n```\n\n### 版本标签\n```\ngit\ttag //查看版本记录\ngit tag v1.0.0 //创建版本 v1.0.0 标签\ngit checkout v1.0.0 //切换到v1.0.0 版本状态\n```\n## 提交代码到 GitHub\n### 1.生成 SSH\n```\nssh-keygen -t rsa\n```\n> 执行完以上命令后，在 C:/Users/Username/.ssh 文件下生成两个文件\tid_rsa（密钥）\t和\tid_rsa.pub（公钥）\n\n### 2.GitHub 添加 SSH key\n\n>  将 id_rsa.pub 的内容添加到\tGitHub： Setting→SSH keys and GPG keys→New SSH key\n>  输入\t`ssh -T git@github.com`测试是否添加成功\n\n### 3. Push 推送\n```\n//将本地代码推到远程 master 分支\ngit push origin master\n```\n### 4. Pull 拉取\n\n```\n//将远程 master 分支的代码拉取到本地\ngit pull origin master\n```\n### 5. 提交代码\n```\n//clone 自己的项目\ngit\tclone git@github.com:roojay520/test.git\n//修改 test 项目代码\n//commit 文件\ngit add change.md\ngit commit -m 'change file'\n//推送到 GitHub\ngit\tpush origin\tmaster\n```\n### 6. 关联本地已有项目\n> 假如我们需要把本地已有的 test1 项目的所有代码提交到 GitHub 上的 test\t项目。\n\n```\n//将本地 test1 项目与远程 test 项目关联\ngit\tremote add origin git@github.com:roojay520/test.git\n//其中 orgin 是远程仓库的名字\n//查看当前项目的远程仓库\ngit\tremote -v\n//向远程仓库提交代码\ngit push origin\tmaster\n```\n## git 进阶\n\n## 版本回退\n\n* 在Git中，用`HEAD`表示当前版本，上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上100个版本写100个`^`比较容易数不过来，所以写成`HEAD~100`。\n\n* 使用`git reflog`用来查看命令历史，或者使用`git log`查看提交 log，找到提交的 ` commit id`。\n\n* 使用`git reset`命令进行版本回退。\n\n  ```\n  //这个 HEAD 可以是具体的 commit id\n  git reset --hard HEAD^\n  ```\n\n## 常用配置\n### 用户配置\n> 全局设置用户名和用户邮箱\n> user.name 用户名； user.email 用户邮箱\n```\ngit\tconfig --global\tuser.name \"roojay\"\ngit\tconfig --global user.email \"roojay520@gmail.com\"\n```\n> 如果单独的某一个项目想要用特定的邮箱，切换到你的项目，以码把\t--global 参数去除，执行一遍。\n```\ngit\tconfig user.name \"roojay\"\ngit\tconfig user.email \"roojay520@gmail.com\"\n```\n### 快捷配置 alias\n>为命令设置别名\n```\n//切换 ck\ngit config --global alias.ck checkout #别名\n//提交 cm\ngit config --global alias.cm commit\n//查看信息 st\ngit config --global alias.st status\n//分支 br\ngit config --global alias.br branch\n```\n> 组合命令\n\n```\n//推送 psm\ngit config --global alias.psm 'push origin master'\n//拉取 plm\ngit config --global alias.plm 'pull origin master'\n```\n\n```\n//个性日志输出 lg\ngit config --global alias.lg \"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\"\n//设置个性日志输出\ngit log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\n```\n\n## 合并分支\n> rebase\t跟 merge\t的区别可以理解成有两个书架，需要把两个书架的书整理到一起去，第一种做法是\tmerge\t，直接腾出一块地方把另一个书架的书全部放进去，这种做法你可以知道哪些书是来自另一个书架的；第二种做法就是 rebase\t，他会把两个书架的书先进行比较，按照购书的时间来给他重新排序，然后重新放置好，这样做的好处就是合并之后的书架看起来很有逻辑，但是你很难清晰的知道哪些书来自哪个书架的。\n\n### merge 暴力合并\n> 在 testA 分支开发完了一个功能，合并到主分支\tmaster\t上去\n```\ngit checkout master\ngit merge testA\n```\n\n### rebase 比较合并\n\n```\ngit checkout master\ngit rebase testA\n```\n","slug":"git 操作指南","published":1,"date":"2017-11-12T02:21:03.050Z","updated":"2017-11-12T02:21:03.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xjb001xdfbx6x0b4adq","content":"<h2 id=\"git-基础命令\"><a href=\"#git-基础命令\" class=\"headerlink\" title=\"git 基础命令\"></a>git 基础命令</h2><h3 id=\"git-全局配置\"><a href=\"#git-全局配置\" class=\"headerlink\" title=\"git 全局配置\"></a>git 全局配置</h3><pre><code>git config —global    user.name &quot;roojay&quot;\ngit    config —global    user.email &quot;roojay520@gmail.com&quot;\n</code></pre><h3 id=\"创建文件夹-test\"><a href=\"#创建文件夹-test\" class=\"headerlink\" title=\"创建文件夹 test\"></a>创建文件夹 test</h3><pre><code>mkdir test\n</code></pre><h3 id=\"切换到-test-文件夹\"><a href=\"#切换到-test-文件夹\" class=\"headerlink\" title=\"切换到 test 文件夹\"></a>切换到 test 文件夹</h3><pre><code> cd test\n</code></pre><h3 id=\"新建-readme-md-文件\"><a href=\"#新建-readme-md-文件\" class=\"headerlink\" title=\"新建 readme.md 文件\"></a>新建 readme.md 文件</h3><pre><code> touch readme.md\n</code></pre><h3 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h3><pre><code> git init\n</code></pre><h3 id=\"查看仓库信息\"><a href=\"#查看仓库信息\" class=\"headerlink\" title=\"查看仓库信息\"></a>查看仓库信息</h3><pre><code> git status\n</code></pre><h3 id=\"添加-readme-md-到缓存区\"><a href=\"#添加-readme-md-到缓存区\" class=\"headerlink\" title=\"添加 readme.md 到缓存区\"></a>添加 readme.md 到缓存区</h3><pre><code> git add readme.md\n</code></pre><h3 id=\"将-readme-md-移除缓存区\"><a href=\"#将-readme-md-移除缓存区\" class=\"headerlink\" title=\"将 readme.md 移除缓存区\"></a>将 readme.md 移除缓存区</h3><pre><code> git rm    --cached readme.md\n</code></pre><h3 id=\"删除-readme-md-文件\"><a href=\"#删除-readme-md-文件\" class=\"headerlink\" title=\"删除 readme.md 文件\"></a>删除 readme.md 文件</h3><pre><code>  rm readme.md\n</code></pre><h3 id=\"删除文件-test-文件夹\"><a href=\"#删除文件-test-文件夹\" class=\"headerlink\" title=\"删除文件 test 文件夹\"></a>删除文件 test 文件夹</h3><pre><code> rm -r test\n</code></pre><h3 id=\"提交文件到本地仓库\"><a href=\"#提交文件到本地仓库\" class=\"headerlink\" title=\"提交文件到本地仓库\"></a>提交文件到本地仓库</h3><pre><code> git commit    -m &#39;first commit&#39; //m 后面的 &#39;fisrst commit&#39; 表示提交信息\n</code></pre><h3 id=\"查看操作日志\"><a href=\"#查看操作日志\" class=\"headerlink\" title=\"查看操作日志\"></a>查看操作日志</h3><pre><code>git    log\n</code></pre><h2 id=\"branch-操作\"><a href=\"#branch-操作\" class=\"headerlink\" title=\"branch 操作\"></a>branch 操作</h2><h3 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h3><pre><code>git branch\n</code></pre><h3 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h3><pre><code>git branch -r\n</code></pre><h3 id=\"创建新分支-test\"><a href=\"#创建新分支-test\" class=\"headerlink\" title=\"创建新分支 test\"></a>创建新分支 test</h3><pre><code>git    branch test\n</code></pre><h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><pre><code>git    checkout test\n</code></pre><h3 id=\"快速创建加切换\"><a href=\"#快速创建加切换\" class=\"headerlink\" title=\"快速创建加切换\"></a>快速创建加切换</h3><pre><code>git    checkout -b test\n</code></pre><h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><pre><code>git    branch    -d\n//强制删除本地分支\ngit branch -D test\n</code></pre><h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><pre><code>git push origin:testA\n</code></pre><h3 id=\"远程分支迁至本地\"><a href=\"#远程分支迁至本地\" class=\"headerlink\" title=\"远程分支迁至本地\"></a>远程分支迁至本地</h3><pre><code>git checkout testA origin/testA\n</code></pre><h3 id=\"版本标签\"><a href=\"#版本标签\" class=\"headerlink\" title=\"版本标签\"></a>版本标签</h3><pre><code>git    tag //查看版本记录\ngit tag v1.0.0 //创建版本 v1.0.0 标签\ngit checkout v1.0.0 //切换到v1.0.0 版本状态\n</code></pre><h2 id=\"提交代码到-GitHub\"><a href=\"#提交代码到-GitHub\" class=\"headerlink\" title=\"提交代码到 GitHub\"></a>提交代码到 GitHub</h2><h3 id=\"1-生成-SSH\"><a href=\"#1-生成-SSH\" class=\"headerlink\" title=\"1.生成 SSH\"></a>1.生成 SSH</h3><pre><code>ssh-keygen -t rsa\n</code></pre><blockquote>\n<p>执行完以上命令后，在 C:/Users/Username/.ssh 文件下生成两个文件    id_rsa（密钥）    和    id_rsa.pub（公钥）</p>\n</blockquote>\n<h3 id=\"2-GitHub-添加-SSH-key\"><a href=\"#2-GitHub-添加-SSH-key\" class=\"headerlink\" title=\"2.GitHub 添加 SSH key\"></a>2.GitHub 添加 SSH key</h3><blockquote>\n<p> 将 id_rsa.pub 的内容添加到    GitHub： Setting→SSH keys and GPG keys→New SSH key<br> 输入    <code>ssh -T git@github.com</code>测试是否添加成功</p>\n</blockquote>\n<h3 id=\"3-Push-推送\"><a href=\"#3-Push-推送\" class=\"headerlink\" title=\"3. Push 推送\"></a>3. Push 推送</h3><pre><code>//将本地代码推到远程 master 分支\ngit push origin master\n</code></pre><h3 id=\"4-Pull-拉取\"><a href=\"#4-Pull-拉取\" class=\"headerlink\" title=\"4. Pull 拉取\"></a>4. Pull 拉取</h3><pre><code>//将远程 master 分支的代码拉取到本地\ngit pull origin master\n</code></pre><h3 id=\"5-提交代码\"><a href=\"#5-提交代码\" class=\"headerlink\" title=\"5. 提交代码\"></a>5. 提交代码</h3><pre><code>//clone 自己的项目\ngit    clone git@github.com:roojay520/test.git\n//修改 test 项目代码\n//commit 文件\ngit add change.md\ngit commit -m &#39;change file&#39;\n//推送到 GitHub\ngit    push origin    master\n</code></pre><h3 id=\"6-关联本地已有项目\"><a href=\"#6-关联本地已有项目\" class=\"headerlink\" title=\"6. 关联本地已有项目\"></a>6. 关联本地已有项目</h3><blockquote>\n<p>假如我们需要把本地已有的 test1 项目的所有代码提交到 GitHub 上的 test    项目。</p>\n</blockquote>\n<pre><code>//将本地 test1 项目与远程 test 项目关联\ngit    remote add origin git@github.com:roojay520/test.git\n//其中 orgin 是远程仓库的名字\n//查看当前项目的远程仓库\ngit    remote -v\n//向远程仓库提交代码\ngit push origin    master\n</code></pre><h2 id=\"git-进阶\"><a href=\"#git-进阶\" class=\"headerlink\" title=\"git 进阶\"></a>git 进阶</h2><h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><ul>\n<li><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>\n</li>\n<li><p>使用<code>git reflog</code>用来查看命令历史，或者使用<code>git log</code>查看提交 log，找到提交的 <code>commit id</code>。</p>\n</li>\n<li><p>使用<code>git reset</code>命令进行版本回退。</p>\n<pre><code>//这个 HEAD 可以是具体的 commit id\ngit reset --hard HEAD^\n</code></pre></li>\n</ul>\n<h2 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h2><h3 id=\"用户配置\"><a href=\"#用户配置\" class=\"headerlink\" title=\"用户配置\"></a>用户配置</h3><blockquote>\n<p>全局设置用户名和用户邮箱<br>user.name 用户名； user.email 用户邮箱</p>\n<pre><code>git    config --global    user.name &quot;roojay&quot;\ngit    config --global user.email &quot;roojay520@gmail.com&quot;\n</code></pre><p>如果单独的某一个项目想要用特定的邮箱，切换到你的项目，以码把    –global 参数去除，执行一遍。</p>\n<pre><code>git    config user.name &quot;roojay&quot;\ngit    config user.email &quot;roojay520@gmail.com&quot;\n</code></pre><h3 id=\"快捷配置-alias\"><a href=\"#快捷配置-alias\" class=\"headerlink\" title=\"快捷配置 alias\"></a>快捷配置 alias</h3><p>为命令设置别名</p>\n<pre><code>//切换 ck\ngit config --global alias.ck checkout #别名\n//提交 cm\ngit config --global alias.cm commit\n//查看信息 st\ngit config --global alias.st status\n//分支 br\ngit config --global alias.br branch\n</code></pre><p>组合命令</p>\n</blockquote>\n<pre><code>//推送 psm\ngit config --global alias.psm &#39;push origin master&#39;\n//拉取 plm\ngit config --global alias.plm &#39;pull origin master&#39;\n</code></pre><pre><code>//个性日志输出 lg\ngit config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative&quot;\n//设置个性日志输出\ngit log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative\n</code></pre><h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><blockquote>\n<p>rebase    跟 merge    的区别可以理解成有两个书架，需要把两个书架的书整理到一起去，第一种做法是    merge    ，直接腾出一块地方把另一个书架的书全部放进去，这种做法你可以知道哪些书是来自另一个书架的；第二种做法就是 rebase    ，他会把两个书架的书先进行比较，按照购书的时间来给他重新排序，然后重新放置好，这样做的好处就是合并之后的书架看起来很有逻辑，但是你很难清晰的知道哪些书来自哪个书架的。</p>\n</blockquote>\n<h3 id=\"merge-暴力合并\"><a href=\"#merge-暴力合并\" class=\"headerlink\" title=\"merge 暴力合并\"></a>merge 暴力合并</h3><blockquote>\n<p>在 testA 分支开发完了一个功能，合并到主分支    master    上去</p>\n<pre><code>git checkout master\ngit merge testA\n</code></pre></blockquote>\n<h3 id=\"rebase-比较合并\"><a href=\"#rebase-比较合并\" class=\"headerlink\" title=\"rebase 比较合并\"></a>rebase 比较合并</h3><pre><code>git checkout master\ngit rebase testA\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git-基础命令\"><a href=\"#git-基础命令\" class=\"headerlink\" title=\"git 基础命令\"></a>git 基础命令</h2><h3 id=\"git-全局配置\"><a href=\"#git-全局配置\" class=\"headerlink\" title=\"git 全局配置\"></a>git 全局配置</h3><pre><code>git config —global    user.name &quot;roojay&quot;\ngit    config —global    user.email &quot;roojay520@gmail.com&quot;\n</code></pre><h3 id=\"创建文件夹-test\"><a href=\"#创建文件夹-test\" class=\"headerlink\" title=\"创建文件夹 test\"></a>创建文件夹 test</h3><pre><code>mkdir test\n</code></pre><h3 id=\"切换到-test-文件夹\"><a href=\"#切换到-test-文件夹\" class=\"headerlink\" title=\"切换到 test 文件夹\"></a>切换到 test 文件夹</h3><pre><code> cd test\n</code></pre><h3 id=\"新建-readme-md-文件\"><a href=\"#新建-readme-md-文件\" class=\"headerlink\" title=\"新建 readme.md 文件\"></a>新建 readme.md 文件</h3><pre><code> touch readme.md\n</code></pre><h3 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h3><pre><code> git init\n</code></pre><h3 id=\"查看仓库信息\"><a href=\"#查看仓库信息\" class=\"headerlink\" title=\"查看仓库信息\"></a>查看仓库信息</h3><pre><code> git status\n</code></pre><h3 id=\"添加-readme-md-到缓存区\"><a href=\"#添加-readme-md-到缓存区\" class=\"headerlink\" title=\"添加 readme.md 到缓存区\"></a>添加 readme.md 到缓存区</h3><pre><code> git add readme.md\n</code></pre><h3 id=\"将-readme-md-移除缓存区\"><a href=\"#将-readme-md-移除缓存区\" class=\"headerlink\" title=\"将 readme.md 移除缓存区\"></a>将 readme.md 移除缓存区</h3><pre><code> git rm    --cached readme.md\n</code></pre><h3 id=\"删除-readme-md-文件\"><a href=\"#删除-readme-md-文件\" class=\"headerlink\" title=\"删除 readme.md 文件\"></a>删除 readme.md 文件</h3><pre><code>  rm readme.md\n</code></pre><h3 id=\"删除文件-test-文件夹\"><a href=\"#删除文件-test-文件夹\" class=\"headerlink\" title=\"删除文件 test 文件夹\"></a>删除文件 test 文件夹</h3><pre><code> rm -r test\n</code></pre><h3 id=\"提交文件到本地仓库\"><a href=\"#提交文件到本地仓库\" class=\"headerlink\" title=\"提交文件到本地仓库\"></a>提交文件到本地仓库</h3><pre><code> git commit    -m &#39;first commit&#39; //m 后面的 &#39;fisrst commit&#39; 表示提交信息\n</code></pre><h3 id=\"查看操作日志\"><a href=\"#查看操作日志\" class=\"headerlink\" title=\"查看操作日志\"></a>查看操作日志</h3><pre><code>git    log\n</code></pre><h2 id=\"branch-操作\"><a href=\"#branch-操作\" class=\"headerlink\" title=\"branch 操作\"></a>branch 操作</h2><h3 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h3><pre><code>git branch\n</code></pre><h3 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h3><pre><code>git branch -r\n</code></pre><h3 id=\"创建新分支-test\"><a href=\"#创建新分支-test\" class=\"headerlink\" title=\"创建新分支 test\"></a>创建新分支 test</h3><pre><code>git    branch test\n</code></pre><h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><pre><code>git    checkout test\n</code></pre><h3 id=\"快速创建加切换\"><a href=\"#快速创建加切换\" class=\"headerlink\" title=\"快速创建加切换\"></a>快速创建加切换</h3><pre><code>git    checkout -b test\n</code></pre><h3 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h3><pre><code>git    branch    -d\n//强制删除本地分支\ngit branch -D test\n</code></pre><h3 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h3><pre><code>git push origin:testA\n</code></pre><h3 id=\"远程分支迁至本地\"><a href=\"#远程分支迁至本地\" class=\"headerlink\" title=\"远程分支迁至本地\"></a>远程分支迁至本地</h3><pre><code>git checkout testA origin/testA\n</code></pre><h3 id=\"版本标签\"><a href=\"#版本标签\" class=\"headerlink\" title=\"版本标签\"></a>版本标签</h3><pre><code>git    tag //查看版本记录\ngit tag v1.0.0 //创建版本 v1.0.0 标签\ngit checkout v1.0.0 //切换到v1.0.0 版本状态\n</code></pre><h2 id=\"提交代码到-GitHub\"><a href=\"#提交代码到-GitHub\" class=\"headerlink\" title=\"提交代码到 GitHub\"></a>提交代码到 GitHub</h2><h3 id=\"1-生成-SSH\"><a href=\"#1-生成-SSH\" class=\"headerlink\" title=\"1.生成 SSH\"></a>1.生成 SSH</h3><pre><code>ssh-keygen -t rsa\n</code></pre><blockquote>\n<p>执行完以上命令后，在 C:/Users/Username/.ssh 文件下生成两个文件    id_rsa（密钥）    和    id_rsa.pub（公钥）</p>\n</blockquote>\n<h3 id=\"2-GitHub-添加-SSH-key\"><a href=\"#2-GitHub-添加-SSH-key\" class=\"headerlink\" title=\"2.GitHub 添加 SSH key\"></a>2.GitHub 添加 SSH key</h3><blockquote>\n<p> 将 id_rsa.pub 的内容添加到    GitHub： Setting→SSH keys and GPG keys→New SSH key<br> 输入    <code>ssh -T git@github.com</code>测试是否添加成功</p>\n</blockquote>\n<h3 id=\"3-Push-推送\"><a href=\"#3-Push-推送\" class=\"headerlink\" title=\"3. Push 推送\"></a>3. Push 推送</h3><pre><code>//将本地代码推到远程 master 分支\ngit push origin master\n</code></pre><h3 id=\"4-Pull-拉取\"><a href=\"#4-Pull-拉取\" class=\"headerlink\" title=\"4. Pull 拉取\"></a>4. Pull 拉取</h3><pre><code>//将远程 master 分支的代码拉取到本地\ngit pull origin master\n</code></pre><h3 id=\"5-提交代码\"><a href=\"#5-提交代码\" class=\"headerlink\" title=\"5. 提交代码\"></a>5. 提交代码</h3><pre><code>//clone 自己的项目\ngit    clone git@github.com:roojay520/test.git\n//修改 test 项目代码\n//commit 文件\ngit add change.md\ngit commit -m &#39;change file&#39;\n//推送到 GitHub\ngit    push origin    master\n</code></pre><h3 id=\"6-关联本地已有项目\"><a href=\"#6-关联本地已有项目\" class=\"headerlink\" title=\"6. 关联本地已有项目\"></a>6. 关联本地已有项目</h3><blockquote>\n<p>假如我们需要把本地已有的 test1 项目的所有代码提交到 GitHub 上的 test    项目。</p>\n</blockquote>\n<pre><code>//将本地 test1 项目与远程 test 项目关联\ngit    remote add origin git@github.com:roojay520/test.git\n//其中 orgin 是远程仓库的名字\n//查看当前项目的远程仓库\ngit    remote -v\n//向远程仓库提交代码\ngit push origin    master\n</code></pre><h2 id=\"git-进阶\"><a href=\"#git-进阶\" class=\"headerlink\" title=\"git 进阶\"></a>git 进阶</h2><h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><ul>\n<li><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>\n</li>\n<li><p>使用<code>git reflog</code>用来查看命令历史，或者使用<code>git log</code>查看提交 log，找到提交的 <code>commit id</code>。</p>\n</li>\n<li><p>使用<code>git reset</code>命令进行版本回退。</p>\n<pre><code>//这个 HEAD 可以是具体的 commit id\ngit reset --hard HEAD^\n</code></pre></li>\n</ul>\n<h2 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h2><h3 id=\"用户配置\"><a href=\"#用户配置\" class=\"headerlink\" title=\"用户配置\"></a>用户配置</h3><blockquote>\n<p>全局设置用户名和用户邮箱<br>user.name 用户名； user.email 用户邮箱</p>\n<pre><code>git    config --global    user.name &quot;roojay&quot;\ngit    config --global user.email &quot;roojay520@gmail.com&quot;\n</code></pre><p>如果单独的某一个项目想要用特定的邮箱，切换到你的项目，以码把    –global 参数去除，执行一遍。</p>\n<pre><code>git    config user.name &quot;roojay&quot;\ngit    config user.email &quot;roojay520@gmail.com&quot;\n</code></pre><h3 id=\"快捷配置-alias\"><a href=\"#快捷配置-alias\" class=\"headerlink\" title=\"快捷配置 alias\"></a>快捷配置 alias</h3><p>为命令设置别名</p>\n<pre><code>//切换 ck\ngit config --global alias.ck checkout #别名\n//提交 cm\ngit config --global alias.cm commit\n//查看信息 st\ngit config --global alias.st status\n//分支 br\ngit config --global alias.br branch\n</code></pre><p>组合命令</p>\n</blockquote>\n<pre><code>//推送 psm\ngit config --global alias.psm &#39;push origin master&#39;\n//拉取 plm\ngit config --global alias.plm &#39;pull origin master&#39;\n</code></pre><pre><code>//个性日志输出 lg\ngit config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative&quot;\n//设置个性日志输出\ngit log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative\n</code></pre><h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><blockquote>\n<p>rebase    跟 merge    的区别可以理解成有两个书架，需要把两个书架的书整理到一起去，第一种做法是    merge    ，直接腾出一块地方把另一个书架的书全部放进去，这种做法你可以知道哪些书是来自另一个书架的；第二种做法就是 rebase    ，他会把两个书架的书先进行比较，按照购书的时间来给他重新排序，然后重新放置好，这样做的好处就是合并之后的书架看起来很有逻辑，但是你很难清晰的知道哪些书来自哪个书架的。</p>\n</blockquote>\n<h3 id=\"merge-暴力合并\"><a href=\"#merge-暴力合并\" class=\"headerlink\" title=\"merge 暴力合并\"></a>merge 暴力合并</h3><blockquote>\n<p>在 testA 分支开发完了一个功能，合并到主分支    master    上去</p>\n<pre><code>git checkout master\ngit merge testA\n</code></pre></blockquote>\n<h3 id=\"rebase-比较合并\"><a href=\"#rebase-比较合并\" class=\"headerlink\" title=\"rebase 比较合并\"></a>rebase 比较合并</h3><pre><code>git checkout master\ngit rebase testA\n</code></pre>"},{"title":"html列表","abbrlink":"a465a2c5","date":"2017-09-16T12:04:38.000Z","_content":"\n## html 列表\n\n### 1. 无序列表\n使用标签: `ul` `li`\n**常用属性:**\n`disc`(实心圆)\n`circle`(空心圆)\n`square`(正方形)\n\n### 2. 有序列表\n使用标签: `ol` `li`\n**常用属性: **\n`A`(大写字母ABC编号)\n`a`(小写字母abc编号)\n`I`(大写罗马数字编号)\n`i`(小写罗马数字编号)\n`start`(规定编号从何值开始)\n\n### 3. 列表嵌套\n列表之间可以互相嵌套\n\n### 4. 自定义列表\n没有编号，只有列表格式。\n使用标签: `dl`(自定义列表) `dt`(列表项) `dd`(列表描述)","source":"_posts/html列表.md","raw":"---\ntitle: html列表\ntags: HTML\ncategories: HTML\nabbrlink: a465a2c5\ndate: 2017-09-16 20:04:38\n---\n\n## html 列表\n\n### 1. 无序列表\n使用标签: `ul` `li`\n**常用属性:**\n`disc`(实心圆)\n`circle`(空心圆)\n`square`(正方形)\n\n### 2. 有序列表\n使用标签: `ol` `li`\n**常用属性: **\n`A`(大写字母ABC编号)\n`a`(小写字母abc编号)\n`I`(大写罗马数字编号)\n`i`(小写罗马数字编号)\n`start`(规定编号从何值开始)\n\n### 3. 列表嵌套\n列表之间可以互相嵌套\n\n### 4. 自定义列表\n没有编号，只有列表格式。\n使用标签: `dl`(自定义列表) `dt`(列表项) `dd`(列表描述)","slug":"html列表","published":1,"updated":"2017-11-12T02:21:47.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xje0021dfbxmf756w6l","content":"<h2 id=\"html-列表\"><a href=\"#html-列表\" class=\"headerlink\" title=\"html 列表\"></a>html 列表</h2><h3 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1. 无序列表\"></a>1. 无序列表</h3><p>使用标签: <code>ul</code> <code>li</code><br><strong>常用属性:</strong><br><code>disc</code>(实心圆)<br><code>circle</code>(空心圆)<br><code>square</code>(正方形)</p>\n<h3 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2. 有序列表\"></a>2. 有序列表</h3><p>使用标签: <code>ol</code> <code>li</code><br><strong>常用属性: </strong><br><code>A</code>(大写字母ABC编号)<br><code>a</code>(小写字母abc编号)<br><code>I</code>(大写罗马数字编号)<br><code>i</code>(小写罗马数字编号)<br><code>start</code>(规定编号从何值开始)</p>\n<h3 id=\"3-列表嵌套\"><a href=\"#3-列表嵌套\" class=\"headerlink\" title=\"3. 列表嵌套\"></a>3. 列表嵌套</h3><p>列表之间可以互相嵌套</p>\n<h3 id=\"4-自定义列表\"><a href=\"#4-自定义列表\" class=\"headerlink\" title=\"4. 自定义列表\"></a>4. 自定义列表</h3><p>没有编号，只有列表格式。<br>使用标签: <code>dl</code>(自定义列表) <code>dt</code>(列表项) <code>dd</code>(列表描述)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"html-列表\"><a href=\"#html-列表\" class=\"headerlink\" title=\"html 列表\"></a>html 列表</h2><h3 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1. 无序列表\"></a>1. 无序列表</h3><p>使用标签: <code>ul</code> <code>li</code><br><strong>常用属性:</strong><br><code>disc</code>(实心圆)<br><code>circle</code>(空心圆)<br><code>square</code>(正方形)</p>\n<h3 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2. 有序列表\"></a>2. 有序列表</h3><p>使用标签: <code>ol</code> <code>li</code><br><strong>常用属性: </strong><br><code>A</code>(大写字母ABC编号)<br><code>a</code>(小写字母abc编号)<br><code>I</code>(大写罗马数字编号)<br><code>i</code>(小写罗马数字编号)<br><code>start</code>(规定编号从何值开始)</p>\n<h3 id=\"3-列表嵌套\"><a href=\"#3-列表嵌套\" class=\"headerlink\" title=\"3. 列表嵌套\"></a>3. 列表嵌套</h3><p>列表之间可以互相嵌套</p>\n<h3 id=\"4-自定义列表\"><a href=\"#4-自定义列表\" class=\"headerlink\" title=\"4. 自定义列表\"></a>4. 自定义列表</h3><p>没有编号，只有列表格式。<br>使用标签: <code>dl</code>(自定义列表) <code>dt</code>(列表项) <code>dd</code>(列表描述)</p>\n"},{"title":"html基础","abbrlink":"1a147173","data":"2017/9/16","_content":"\n## 完整 HTML 树\n\n![DOM](https://i.loli.net/2017/10/26/59f1ff406e5f5.png)\n* 相关的 CSS 文件（针对样式）：\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n```\n\n* 相关的 JavaScript 文件（更改渲染和行为的多用途脚本）：\n\n```html\n<script src=\"myjavascripts.js\"></script>\n```\n\n* 粗体斜体\n\n```html\n<!-- 推荐使用<strong>进行加粗  -->\n <strong>粗体</strong>\n<!-- 推荐使用<em>进行斜体显示  -->\n<em>斜体</em>\n```\n\n* `<sup>` 标签定义上标文本。\n* `<sub>` 标签定义下标文本。\n\n\n","source":"_posts/html基础.md","raw":"---\ntitle: html基础\ntags: HTML\ncategories: HTML\nabbrlink: 1a147173\ndata: 2017/9/16\n---\n\n## 完整 HTML 树\n\n![DOM](https://i.loli.net/2017/10/26/59f1ff406e5f5.png)\n* 相关的 CSS 文件（针对样式）：\n\n```html\n<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">\n```\n\n* 相关的 JavaScript 文件（更改渲染和行为的多用途脚本）：\n\n```html\n<script src=\"myjavascripts.js\"></script>\n```\n\n* 粗体斜体\n\n```html\n<!-- 推荐使用<strong>进行加粗  -->\n <strong>粗体</strong>\n<!-- 推荐使用<em>进行斜体显示  -->\n<em>斜体</em>\n```\n\n* `<sup>` 标签定义上标文本。\n* `<sub>` 标签定义下标文本。\n\n\n","slug":"html基础","published":1,"date":"2017-11-12T02:22:07.510Z","updated":"2017-11-12T02:22:07.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xjl0025dfbxyyhgvcdr","content":"<h2 id=\"完整-HTML-树\"><a href=\"#完整-HTML-树\" class=\"headerlink\" title=\"完整 HTML 树\"></a>完整 HTML 树</h2><p><img src=\"https://i.loli.net/2017/10/26/59f1ff406e5f5.png\" alt=\"DOM\"></p>\n<ul>\n<li>相关的 CSS 文件（针对样式）：</li>\n</ul>\n<pre><code class=\"html\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;\n</code></pre>\n<ul>\n<li>相关的 JavaScript 文件（更改渲染和行为的多用途脚本）：</li>\n</ul>\n<pre><code class=\"html\">&lt;script src=&quot;myjavascripts.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<ul>\n<li>粗体斜体</li>\n</ul>\n<pre><code class=\"html\">&lt;!-- 推荐使用&lt;strong&gt;进行加粗  --&gt;\n &lt;strong&gt;粗体&lt;/strong&gt;\n&lt;!-- 推荐使用&lt;em&gt;进行斜体显示  --&gt;\n&lt;em&gt;斜体&lt;/em&gt;\n</code></pre>\n<ul>\n<li><code>&lt;sup&gt;</code> 标签定义上标文本。</li>\n<li><code>&lt;sub&gt;</code> 标签定义下标文本。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"完整-HTML-树\"><a href=\"#完整-HTML-树\" class=\"headerlink\" title=\"完整 HTML 树\"></a>完整 HTML 树</h2><p><img src=\"https://i.loli.net/2017/10/26/59f1ff406e5f5.png\" alt=\"DOM\"></p>\n<ul>\n<li>相关的 CSS 文件（针对样式）：</li>\n</ul>\n<pre><code class=\"html\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;\n</code></pre>\n<ul>\n<li>相关的 JavaScript 文件（更改渲染和行为的多用途脚本）：</li>\n</ul>\n<pre><code class=\"html\">&lt;script src=&quot;myjavascripts.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<ul>\n<li>粗体斜体</li>\n</ul>\n<pre><code class=\"html\">&lt;!-- 推荐使用&lt;strong&gt;进行加粗  --&gt;\n &lt;strong&gt;粗体&lt;/strong&gt;\n&lt;!-- 推荐使用&lt;em&gt;进行斜体显示  --&gt;\n&lt;em&gt;斜体&lt;/em&gt;\n</code></pre>\n<ul>\n<li><code>&lt;sup&gt;</code> 标签定义上标文本。</li>\n<li><code>&lt;sub&gt;</code> 标签定义下标文本。</li>\n</ul>\n"},{"title":"jQuery基础","data":"2017-11-11T16:00:00.000Z","abbrlink":"889563","_content":"> CDN 方式引入 jQuery\n<script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\n## 选择器操作 DOM 节点\n* $(\"选择器\"); 可以通过选择器选择 DOM 节点\n* jQuery(\"h1\"); 等同于 $(\"h1\"); 返回 h1\n* $(\"h1\").text(); 返回 h1 里面的 text\n* $(\"h1\").text(\"Hello World!\") 更改覆盖 h1 的内容\n\n**注意DOM 加载完成之后 jQuery 开始运行，否则 jQuery 操作会被覆盖，不会生效。**\n```javascript\n// 文档加载完成后执行替换方法\njQuery(document).ready(function(){\n    $(\"h1\").text(\"Hello World!);\n});\n// 或者使用以下方法\n$(document).ready(function(){\n    $(\"h1\").text(\"Hello World!);\n});\n```\n\n### 伪类选择器\n```javascript\n.class li:first; // 选择列表里面的第一个元素\n.class li:last; // 选择列表里面的最后一个元素\n.class li:odd; // 选择列表里面的奇数位元素\n.class li:even; // 选择列表里面的偶数位元素\n```\n## 遍历寻找操作 DOM 节点\n> 速度快于选择器操作\n```javascript\n$(\".class\").find(\"li\");\n```\n### 遍历伪类选择\n```javascript\n$(\".class\").first(); // 选择列表第一个元素\n$(\".class\").last(); // 选择列表最后一个元素\n$(\".class\").odd(); // 选择列表奇数位元素\n$(\".class\").even(); // 选择列表偶数位元素\n```\n###  上下遍历\n\n```javascript\n$(\".class\").parent(\"li\"); // 向上一层遍历，得到直系父元素\n$(\".class\").children(\"li\"); // 向下遍历，得到直系子元素\n```","source":"_posts/jQuery.md","raw":"---\ntitle: jQuery基础\ntags: jQuery\ncategories: JavaScript\ndata: 2017-11-12\nabbrlink: '889563'\n---\n> CDN 方式引入 jQuery\n<script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\n## 选择器操作 DOM 节点\n* $(\"选择器\"); 可以通过选择器选择 DOM 节点\n* jQuery(\"h1\"); 等同于 $(\"h1\"); 返回 h1\n* $(\"h1\").text(); 返回 h1 里面的 text\n* $(\"h1\").text(\"Hello World!\") 更改覆盖 h1 的内容\n\n**注意DOM 加载完成之后 jQuery 开始运行，否则 jQuery 操作会被覆盖，不会生效。**\n```javascript\n// 文档加载完成后执行替换方法\njQuery(document).ready(function(){\n    $(\"h1\").text(\"Hello World!);\n});\n// 或者使用以下方法\n$(document).ready(function(){\n    $(\"h1\").text(\"Hello World!);\n});\n```\n\n### 伪类选择器\n```javascript\n.class li:first; // 选择列表里面的第一个元素\n.class li:last; // 选择列表里面的最后一个元素\n.class li:odd; // 选择列表里面的奇数位元素\n.class li:even; // 选择列表里面的偶数位元素\n```\n## 遍历寻找操作 DOM 节点\n> 速度快于选择器操作\n```javascript\n$(\".class\").find(\"li\");\n```\n### 遍历伪类选择\n```javascript\n$(\".class\").first(); // 选择列表第一个元素\n$(\".class\").last(); // 选择列表最后一个元素\n$(\".class\").odd(); // 选择列表奇数位元素\n$(\".class\").even(); // 选择列表偶数位元素\n```\n###  上下遍历\n\n```javascript\n$(\".class\").parent(\"li\"); // 向上一层遍历，得到直系父元素\n$(\".class\").children(\"li\"); // 向下遍历，得到直系子元素\n```","slug":"jQuery","published":1,"date":"2017-11-12T03:44:52.279Z","updated":"2017-11-12T03:44:52.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xjn0028dfbxj3r2wfqw","content":"<blockquote>\n<p>CDN 方式引入 jQuery</p>\n<script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\n</blockquote>\n<h2 id=\"选择器操作-DOM-节点\"><a href=\"#选择器操作-DOM-节点\" class=\"headerlink\" title=\"选择器操作 DOM 节点\"></a>选择器操作 DOM 节点</h2><ul>\n<li>$(“选择器”); 可以通过选择器选择 DOM 节点</li>\n<li>jQuery(“h1”); 等同于 $(“h1”); 返回 h1</li>\n<li>$(“h1”).text(); 返回 h1 里面的 text</li>\n<li>$(“h1”).text(“Hello World!”) 更改覆盖 h1 的内容</li>\n</ul>\n<p><strong>注意DOM 加载完成之后 jQuery 开始运行，否则 jQuery 操作会被覆盖，不会生效。</strong></p>\n<pre><code class=\"javascript\">// 文档加载完成后执行替换方法\njQuery(document).ready(function(){\n    $(&quot;h1&quot;).text(&quot;Hello World!);\n});\n// 或者使用以下方法\n$(document).ready(function(){\n    $(&quot;h1&quot;).text(&quot;Hello World!);\n});\n</code></pre>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><pre><code class=\"javascript\">.class li:first; // 选择列表里面的第一个元素\n.class li:last; // 选择列表里面的最后一个元素\n.class li:odd; // 选择列表里面的奇数位元素\n.class li:even; // 选择列表里面的偶数位元素\n</code></pre>\n<h2 id=\"遍历寻找操作-DOM-节点\"><a href=\"#遍历寻找操作-DOM-节点\" class=\"headerlink\" title=\"遍历寻找操作 DOM 节点\"></a>遍历寻找操作 DOM 节点</h2><blockquote>\n<p>速度快于选择器操作</p>\n<pre><code class=\"javascript\">$(&quot;.class&quot;).find(&quot;li&quot;);\n</code></pre>\n<h3 id=\"遍历伪类选择\"><a href=\"#遍历伪类选择\" class=\"headerlink\" title=\"遍历伪类选择\"></a>遍历伪类选择</h3><pre><code class=\"javascript\">$(&quot;.class&quot;).first(); // 选择列表第一个元素\n$(&quot;.class&quot;).last(); // 选择列表最后一个元素\n$(&quot;.class&quot;).odd(); // 选择列表奇数位元素\n$(&quot;.class&quot;).even(); // 选择列表偶数位元素\n</code></pre>\n<h3 id=\"上下遍历\"><a href=\"#上下遍历\" class=\"headerlink\" title=\"上下遍历\"></a>上下遍历</h3></blockquote>\n<pre><code class=\"javascript\">$(&quot;.class&quot;).parent(&quot;li&quot;); // 向上一层遍历，得到直系父元素\n$(&quot;.class&quot;).children(&quot;li&quot;); // 向下遍历，得到直系子元素\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>CDN 方式引入 jQuery</p>\n<script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js\"></script>\n\n</blockquote>\n<h2 id=\"选择器操作-DOM-节点\"><a href=\"#选择器操作-DOM-节点\" class=\"headerlink\" title=\"选择器操作 DOM 节点\"></a>选择器操作 DOM 节点</h2><ul>\n<li>$(“选择器”); 可以通过选择器选择 DOM 节点</li>\n<li>jQuery(“h1”); 等同于 $(“h1”); 返回 h1</li>\n<li>$(“h1”).text(); 返回 h1 里面的 text</li>\n<li>$(“h1”).text(“Hello World!”) 更改覆盖 h1 的内容</li>\n</ul>\n<p><strong>注意DOM 加载完成之后 jQuery 开始运行，否则 jQuery 操作会被覆盖，不会生效。</strong></p>\n<pre><code class=\"javascript\">// 文档加载完成后执行替换方法\njQuery(document).ready(function(){\n    $(&quot;h1&quot;).text(&quot;Hello World!);\n});\n// 或者使用以下方法\n$(document).ready(function(){\n    $(&quot;h1&quot;).text(&quot;Hello World!);\n});\n</code></pre>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3><pre><code class=\"javascript\">.class li:first; // 选择列表里面的第一个元素\n.class li:last; // 选择列表里面的最后一个元素\n.class li:odd; // 选择列表里面的奇数位元素\n.class li:even; // 选择列表里面的偶数位元素\n</code></pre>\n<h2 id=\"遍历寻找操作-DOM-节点\"><a href=\"#遍历寻找操作-DOM-节点\" class=\"headerlink\" title=\"遍历寻找操作 DOM 节点\"></a>遍历寻找操作 DOM 节点</h2><blockquote>\n<p>速度快于选择器操作</p>\n<pre><code class=\"javascript\">$(&quot;.class&quot;).find(&quot;li&quot;);\n</code></pre>\n<h3 id=\"遍历伪类选择\"><a href=\"#遍历伪类选择\" class=\"headerlink\" title=\"遍历伪类选择\"></a>遍历伪类选择</h3><pre><code class=\"javascript\">$(&quot;.class&quot;).first(); // 选择列表第一个元素\n$(&quot;.class&quot;).last(); // 选择列表最后一个元素\n$(&quot;.class&quot;).odd(); // 选择列表奇数位元素\n$(&quot;.class&quot;).even(); // 选择列表偶数位元素\n</code></pre>\n<h3 id=\"上下遍历\"><a href=\"#上下遍历\" class=\"headerlink\" title=\"上下遍历\"></a>上下遍历</h3></blockquote>\n<pre><code class=\"javascript\">$(&quot;.class&quot;).parent(&quot;li&quot;); // 向上一层遍历，得到直系父元素\n$(&quot;.class&quot;).children(&quot;li&quot;); // 向下遍历，得到直系子元素\n</code></pre>\n"},{"title":"MongoDB安装","abbrlink":"c5d54bc1","date":"2017-09-17T14:09:17.000Z","_content":"## MongoDB\n安装使用:\n1. 官网下载 MongoDB: https://www.mongodb.com/download-center#community\n2. 选择 Custom 安装\n3. 创建数据目录，**数据目录应该放在根目录下**(如: C:\\ )。\ndata\n├── db\n│   ├── mongo.config\n└── log\n    └── MongoDB.log\n4. 启动服务：`mongod --dbpath c:\\data\\db`， 由于windows power shell 限制，使用 `.\\mongod --dbpath c:\\data\\db`命令。\n5. 将 MongoDB 设为 windows 服务开机自启动：\n`mongod.exe --bind_ip yourIPadress --logpath \"C:\\data\\dbConf\\mongodb.log\" --logappend --dbpath \"C:\\data\\db\" --port yourPortNumber --serviceName \"YourServiceName\" --serviceDisplayName \"YourServiceName\" --install`\n    * --bind_ip\t绑定服务 IP，若绑定 127.0.0.1，则只能本机访问，不指定默认本地所有IP。\n    * --logpath\t指定 MongoDB 日志文件，注意是指定文件不是目录。\n    * --logappend\t使用追加的方式写日志。\n    * --dbpath\t指定数据库路径\n    * --port\t指定服务端口号，默认端口27017\n    * --serviceName\t指定服务名称\n    * --serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。\n    * --install\t指定作为一个Windows服务安装。\n\n##  Robo 3T\n一个 Mongo 可视化工具，更便捷的操作 MongoDB 。\n1. 下载安装：https://robomongo.org/download\n1. windows 开启端口，控制面板 → 系统和安全 → Windows 防火墙 → 高级设置 → 入站规则 → 新建规则 → 端口 → 27017\n1. 打开 Robo 3T → create  → 设置 name 为 localhost → 端口为 27017  → save → connect","source":"_posts/mongodb安装.md","raw":"---\ntitle: MongoDB安装\ntags: MongoDB\ncategories: 数据库\nabbrlink: c5d54bc1\ndate: 2017-09-17 22:09:17\n---\n## MongoDB\n安装使用:\n1. 官网下载 MongoDB: https://www.mongodb.com/download-center#community\n2. 选择 Custom 安装\n3. 创建数据目录，**数据目录应该放在根目录下**(如: C:\\ )。\ndata\n├── db\n│   ├── mongo.config\n└── log\n    └── MongoDB.log\n4. 启动服务：`mongod --dbpath c:\\data\\db`， 由于windows power shell 限制，使用 `.\\mongod --dbpath c:\\data\\db`命令。\n5. 将 MongoDB 设为 windows 服务开机自启动：\n`mongod.exe --bind_ip yourIPadress --logpath \"C:\\data\\dbConf\\mongodb.log\" --logappend --dbpath \"C:\\data\\db\" --port yourPortNumber --serviceName \"YourServiceName\" --serviceDisplayName \"YourServiceName\" --install`\n    * --bind_ip\t绑定服务 IP，若绑定 127.0.0.1，则只能本机访问，不指定默认本地所有IP。\n    * --logpath\t指定 MongoDB 日志文件，注意是指定文件不是目录。\n    * --logappend\t使用追加的方式写日志。\n    * --dbpath\t指定数据库路径\n    * --port\t指定服务端口号，默认端口27017\n    * --serviceName\t指定服务名称\n    * --serviceDisplayName\t指定服务名称，有多个mongodb服务时执行。\n    * --install\t指定作为一个Windows服务安装。\n\n##  Robo 3T\n一个 Mongo 可视化工具，更便捷的操作 MongoDB 。\n1. 下载安装：https://robomongo.org/download\n1. windows 开启端口，控制面板 → 系统和安全 → Windows 防火墙 → 高级设置 → 入站规则 → 新建规则 → 端口 → 27017\n1. 打开 Robo 3T → create  → 设置 name 为 localhost → 端口为 27017  → save → connect","slug":"mongodb安装","published":1,"updated":"2017-11-12T02:23:47.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xjr002ddfbxofl9yspi","content":"<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><p>安装使用:</p>\n<ol>\n<li>官网下载 MongoDB: <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"external\">https://www.mongodb.com/download-center#community</a></li>\n<li>选择 Custom 安装</li>\n<li>创建数据目录，<strong>数据目录应该放在根目录下</strong>(如: C:\\ )。<br>data<br>├── db<br>│   ├── mongo.config<br>└── log<br> └── MongoDB.log</li>\n<li>启动服务：<code>mongod --dbpath c:\\data\\db</code>， 由于windows power shell 限制，使用 <code>.\\mongod --dbpath c:\\data\\db</code>命令。</li>\n<li>将 MongoDB 设为 windows 服务开机自启动：<br><code>mongod.exe --bind_ip yourIPadress --logpath &quot;C:\\data\\dbConf\\mongodb.log&quot; --logappend --dbpath &quot;C:\\data\\db&quot; --port yourPortNumber --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install</code><ul>\n<li>–bind_ip    绑定服务 IP，若绑定 127.0.0.1，则只能本机访问，不指定默认本地所有IP。</li>\n<li>–logpath    指定 MongoDB 日志文件，注意是指定文件不是目录。</li>\n<li>–logappend    使用追加的方式写日志。</li>\n<li>–dbpath    指定数据库路径</li>\n<li>–port    指定服务端口号，默认端口27017</li>\n<li>–serviceName    指定服务名称</li>\n<li>–serviceDisplayName    指定服务名称，有多个mongodb服务时执行。</li>\n<li>–install    指定作为一个Windows服务安装。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Robo-3T\"><a href=\"#Robo-3T\" class=\"headerlink\" title=\"Robo 3T\"></a>Robo 3T</h2><p>一个 Mongo 可视化工具，更便捷的操作 MongoDB 。</p>\n<ol>\n<li>下载安装：<a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"external\">https://robomongo.org/download</a></li>\n<li>windows 开启端口，控制面板 → 系统和安全 → Windows 防火墙 → 高级设置 → 入站规则 → 新建规则 → 端口 → 27017</li>\n<li>打开 Robo 3T → create  → 设置 name 为 localhost → 端口为 27017  → save → connect</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><p>安装使用:</p>\n<ol>\n<li>官网下载 MongoDB: <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"external\">https://www.mongodb.com/download-center#community</a></li>\n<li>选择 Custom 安装</li>\n<li>创建数据目录，<strong>数据目录应该放在根目录下</strong>(如: C:\\ )。<br>data<br>├── db<br>│   ├── mongo.config<br>└── log<br> └── MongoDB.log</li>\n<li>启动服务：<code>mongod --dbpath c:\\data\\db</code>， 由于windows power shell 限制，使用 <code>.\\mongod --dbpath c:\\data\\db</code>命令。</li>\n<li>将 MongoDB 设为 windows 服务开机自启动：<br><code>mongod.exe --bind_ip yourIPadress --logpath &quot;C:\\data\\dbConf\\mongodb.log&quot; --logappend --dbpath &quot;C:\\data\\db&quot; --port yourPortNumber --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install</code><ul>\n<li>–bind_ip    绑定服务 IP，若绑定 127.0.0.1，则只能本机访问，不指定默认本地所有IP。</li>\n<li>–logpath    指定 MongoDB 日志文件，注意是指定文件不是目录。</li>\n<li>–logappend    使用追加的方式写日志。</li>\n<li>–dbpath    指定数据库路径</li>\n<li>–port    指定服务端口号，默认端口27017</li>\n<li>–serviceName    指定服务名称</li>\n<li>–serviceDisplayName    指定服务名称，有多个mongodb服务时执行。</li>\n<li>–install    指定作为一个Windows服务安装。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Robo-3T\"><a href=\"#Robo-3T\" class=\"headerlink\" title=\"Robo 3T\"></a>Robo 3T</h2><p>一个 Mongo 可视化工具，更便捷的操作 MongoDB 。</p>\n<ol>\n<li>下载安装：<a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"external\">https://robomongo.org/download</a></li>\n<li>windows 开启端口，控制面板 → 系统和安全 → Windows 防火墙 → 高级设置 → 入站规则 → 新建规则 → 端口 → 27017</li>\n<li>打开 Robo 3T → create  → 设置 name 为 localhost → 端口为 27017  → save → connect</li>\n</ol>\n"},{"title":"JS基础基础","abbrlink":"d4c7d8e9","data":"2017/9/16","_content":"\n## JS简介\n\n* Netscape公司的Brendan Eich设计JS，只能运行在浏览器中。\n* Ryan Dahl于2009年设计node.js，JS可以在服务端运行。\n* JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而传统编程语言，会在执行前对所有代码进行编译。\n* _proto_ 实现继承关系。\n* 对象名.prototype在原型对象层次优化子对象对公共方法的调用。\n* 语法糖使javascript贴近java语法。\n\n## 基础\n### 数据类型\n#### 字符串（String）\n* str.length; 查看一个字符串的长度。\n* str.charAt(index); 获取单个字符。\n* str.split(\"a\"); 指定从 a 处分割字符串为字符串数组。\n* str.slice(开始索引， 结束索引); 获取一个字符串中的一部分内容，字符串切片。\n* str[]; 通过索引获取单个字符。\n* str.indexOf('所选字符'); 获取字符串中单个或者多个字符索引，如果找不到成员，返回 -1\n* str.toLowerCase(); 将字符串转化为小写返回。\n* str.toUpperCase(); 将字符串转化为大写返回。\n```javascript\n// 字符串操作\nvar str = '东风无力百花残';\n// 获取字符串长度 a\nvar a = str.length;\n// 获取字符 '花' 的索引\nvar b = str.indexOf('花');\n// 通过索引获取字符 '百花'\nvar c = str.slice(b - 1, b + 1);\nconsole.log(\"字符串长度：\" + a + \"\\n花的索引：\" + b + \"\\n获取花字符：\" + c);\n```\n\n```javascript\n/* 将一个大小混写的人名，姓全部转换为大写，名除首字母外全部转换为小写。\n*/\n// 定义一个 name 字符串\nvar name = \"ALbERt EINstEin\";\nfunction nameChanger(name) {\n  // 定义 finaNmae 复制 name 内容\n let finaName = name;\n  // 以空格为参考，分割字符串为字符串数组\n  // names = [\"ALbERt\", \"EINstEin\"]\n  let names = name.split(\" \");\n  // slice(0， 1) 选择首字母转换为大写，slice(1) 选择后面的字符转换为小写\n  names[0] = names[0].slice(0, 1).toUpperCase() + names[0].slice(1).toLowerCase();\n  // 设置第二个数组元素全部为大写\n  names[1] = names[1].toUpperCase();\n  // 将数组中的所有元素转换为一个字符串\n  // 设定空格为分隔符\n  finaName = names.join(\" \");\n  console.log(finaName);\n}\nnameChanger(name);\n```\n#### 数组(Array)\n* splice(index, num, item1,.....,itemN); 用于插入、删除或替换数组的元素。\n  * index （必须） 删除/添加元素的开始下标。\n  * num （必须） 删除元素的数量。\n  * item （可选） 要添加的新元素。\n* pop(); 删除数组末尾的元素。\n* push(\"item\"); 添加元素到数组末尾。\n* shift(); 删除数组头部元素。\n* unshift(\"item\"); 添加元素到数组头部。\n\n#### 数字(Number) 所有数字以 64 位浮点数储存.\n* JavaScript 使用数字表示形式的 8 字节 IEEE 754 浮点标准来表示数字。  这意味着您可以编写最大为 1.79769x10308 和最小为 5x10-324 的数字。\n* 以零开头且后面的数字都小于 8， 会被识别为八进制数。\n* 0x 或 0X开头为十六进制数。\n* 八进制或者十六进制数字不能有小数部分。\n* JavaScript 区分正零和负零。\n\n#### 布尔(Boolean)\n* 可将任何表达式用作比较表达式。计算结果为 0、null、undefined 或空字符串的任何表达式被解释为 false。\n\n#### 对象(Object)\n* 确定对象属性是否存在，可使用 in 运算符：\n```javascript\n// 定义一个 people 对象\nvar people = {\n  name: 'xiaoming',\n  age: 12,\n};\n// 判断 people 对象中是否存在 name 属性\nif('name' in people) {\n  console.log('true');\n}\nelse {\n  console.log('flase');\n}\n// 输出 true\n```\n\n#### 日期(Date)\n#### 方法(function)\n* indexOf('目标', 开始位置 ); 获取数组成员索引，开始位置可省略不写。若成员不存在返回值为 -1。\n* splice(index, num); 删除指定索引 index 位置的数组成员，num 指删除数量。返回值为删除的数组。\n\n#### 空（Null）\n* 表示什么都没有，将变量赋值 null 可以清除变量的内容（不删除变量）。\n```javascript\n  var num = null; // 值为空 null\n  typeof num; //返回值为 object\n```\n\n#### 未定义（Undefined）\n* 变量的值未定义。可以将变量与 undefined 进行比较确定变量是否存在。\n* 也可以通过将变量的类型与字符串“undefined”进行比较确定其类型是否为 undefined。\n```javascript\n  var num;\n  typeof num; // 返回值为 undefined\n```\n**null 和 undefined 的值相等，类型不同。null 值的行为与数字 0 类似，而 undefined 的行为与特定值 NaN（非数字）类似。**\n\nJavaScript 拥有动态类型，相同的变量可用作不同的类型：\n```javascript\nvar x;               // 此时 x 为 undefined\nvar x = 5;           // 此时 x 为数字\nvar x = 'hello';      // 此时 x 为字符串\n```\n\n#### 强制转换\n* JavaScript 是一个弱类型的语言，其变量类型由其值的类型决定。\n* 字符串、数字和布尔值的强制转换规则：\n    * 如果添加一个数字和字符串，则该数字会强制转换为字符串。\n    * 如果添加一个布尔值和字符串，则该布尔值会强制转换为字符串。\n    * 如果添加一个数字和布尔值，则该布尔值会强制转换为数字。\n\n##### parseFloat\n将字符串转换为浮点数。\n`parseFloat(numString);` numString 参数是一个包含浮点数的字符串。函数返回一个等于 numString 中包含的数字的数值。如果 numString 的前缀无法解析为浮点数，则返回 NaN（非数字）。\n\n##### parseInt\n将字符串转为整数。\n`parseInt(numString, radix);`numString 参数是要转换为数字的字符串。radix(2~36) 为需要转成整数的进制。若没有指定基数：以\"0x\"或者\"0X\"开头, 则是 16 进制；0 开头为 8 进制或者 10 进制，具体由环境决定；其它默认是 10 进制。 函数将其第一个参数转换为字符串然后再解析它，解析成功返回一个进制指定的整数，反之返回 NaN。\n\n## 操作符\n操作符优先级;\n| 运算符                             | 说明                                                   |\n| ---------------------------------- | ------------------------------------------------------ |\n| .[ ] ( )                           | 字段访问、数组索引、函数调用和表达式分组               |\n| ++ -- - ~ ! delete new typeof void | 一元运算符、返回数据类型、对象创建、未定义的值         |\n| * / %                              | 相乘，相除，取模                                       |\n| + - +                              | 相加、相减、字符串串联                                 |\n| << >> >>>                          | 移位                                                   |\n| < <= > >= instanceof               | 小于、小于或等于、大于、大于或等于、是否为特定类的实例 |\n| == != === !==                      | 相等、不相等、全等，不全等                             |\n| &&                                 | 逻辑“与”                                             |\n| `||`                               | 逻辑“或”                                             |\n| ?:                                 | 三元条件运算                                           |\n| = OP=                              | 赋值、赋值运算（如 += 和 &=）                          |\n| ,                                  | 多个计算                                               |\n### 逻辑运算符\n==  **只比较两边的值，与类型无关。**当值相等时返回 true，\n===  **同时比较两边的类型和值**，只有当类型和值都相等时返回 true。\n\n!=  **只比较两边的类型，与值无关**，类型相同返回 true，类型不同返回 false\n!== **只要值或者类型有一个不相等**，返回 ture\n\n### 位运算符\n* 两个整数交换数值\n`a ^= b;\nb ^= a;\na ^= b;`\n```javascript\n// 位操作快速交换两个整数的值\nvar a = 10;\nvar b = 12;\na ^= b;\nb ^= a;\na ^= b;\nconsole.log('a is:' + a + '\\nb is:' + b); // a is:12 b is:10\n```\n## 函数\n> 函数也称为'全局方法'。\n### 箭头函数\n#### 常见错误\n* 错误1：使用箭头函数定义对象的方法\n* 错误2：在原型上使用箭头函数\n#### 适用场景\n* 箭头函数适合于无复杂逻辑或者无副作用的纯函数场景下，例如用在map、reduce、filter的回调函数定义中；\n* 不要在最外层定义箭头函数，因为在函数内部操作this会很容易污染全局作用域。最起码在箭头函数外部包一层普通函数，将this控制在可见的范围内；\n* 如开头所述，箭头函数最吸引人的地方是简洁。在有多层函数嵌套的情况下，箭头函数的简洁性并没有很大的提升，反而影响了函数的作用范围的识别度，这种情况不建议使用箭头函数。\n#### 副作用\n1. 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n2. 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n3. 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。\n4. 不可以使用yield命令，因此箭头函数不能用作Generator函数。\n### in 运算符\n判断某个属性是否属于这个对象。\n`'name' in obj`\n* 'name' 属性值\n*  obj 对象\n\n### instanceof 运算符\n返回值为布尔类型，判断一个对象是否为特定类的一个实例。\n`result = obj instanceof class`\n* result 返回值\n* obj 对象\n* class 特定类\n\n### 其它运算符\n#### typeof\n* 可以使用 typeof 操作符来检测变量的数据类型。`typeof 66  // 返回值为 number `。\n* 在JavaScript中，数组是一种特殊的对象类型。 typeof [1,2,3,4] 返回 object。\n\n\n### 单双引号\n* 同一种引号不能嵌套,最外层一般使用单引号，避免和 HTML 里面的冲突：\n\n```javascript\n//会报错误\n\"\"name\" + 18\"\n//正确的方式\n'\"name\" + 18'\n```\n### 模板字符串\n> 允许嵌入表达式的字符串。使用反引号（``）代替单引号或者双引号，中间包含特定语法（${表达式}）,表达式是任意 JavaScript 表达式（如变量或函数）。\n```javascript\n  `hello ${表达式}`;\n   `sun ${a + b}`\n```\n\n## 变量\n* JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。\n* 声明新变量时，可以使用关键词 \"new\" 来声明其类型。`var x = new String;`\n* 使用 let 和 var 关键字声明变量，let的作用域是块，而var的作用域是函数。\n* 如果把值直接赋给尚未声明的变量，该变量将被自动作为全局变量声明。\n* let 可以声明作用域被限制在块级中的变量、语句或者表达式。var声明的变量是全局或者整个函数块的。\n* let声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。\n* 在 HTML 中, 全局变量都是 window 对象: 所有数据变量都属于 window 对象。\n\n```javascript\nfunction varTest() {\n  var x = 1;\n  if (true) {\n    var x = 2;  // 同样的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示2\n}\n\nfunction letTest() {\n  let x = 1;\n  if (true) {\n    let x = 2;  // 不同的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示1\n```\n\n* 在程序或者函数的顶层，let并不会像var一样在全局对象上创造一个属性.\n\n```javascript\nvar x = 'global';\nlet y = 'global';\nconsole.log(this.x); // \"global\"\nconsole.log(this.y); // undefined\n```\n\n## JS 面向对象\n* javascript是基于原型的面向对象的语言，没有类的概念。\n\n### 创建对象\n\n  - JS中不用 class 创建对象\n  - 对象：属性加方法构成\n\n```javascript\n  //创建一个 people 对象，拥有 name 属性和 speak 方法\n  var people = {\n      country: \"CN\";\n      from: funcation(){\n          console.log(\"From\" + this.conuntry)\n      }\n  }；\n  people.from();\n  //由于对象并不和类关联， 我们可以随意地给这个对象增加属性\n  people.speak = \"Chinese\";\n  console.log(people.speak);\n  ```\n\n### 继承\n\n  - 继承就是让两个对象建立关联，\n  - 在 Javascript 中每个对象都有一个特殊的属性叫做__proto__， 你可以用这个属性去关联另外一个对象(原型)。\n\n```javascript\n    //定义一个american对象\n    var american = {\n      country: \"US\";\n      _proto_: people;//指向people对象\n    }；\n    //定义一个chinese对象\n    var chinese = {\n      country: \"CN\";\n      _proto_:people;//指向people对象\n    };\n    american.from();\n    chinese.from();\n  ```\n\n- american, chinese 的原型都是 people，当 from() 方法被调用时，先在自身的方法列表中寻找，找不到时再去原型中去寻找，如果原型中找不到，就去原型的原型中寻找，直到 Object 那里，如果还找不到，那就是方法未定义。这些对象通过_proto_建立了一个原型链。\n\n### 构造函数 原型\n* 将原型对象放入 Object.prototype 中，每次 new 新对象时，js会自动建立原型链。\n\n```javascript\n  function Student(name){\n    this.name = name;\n  }\n  Student.prototype = {\n    say: function(){\n      console.log(\"My name is\" + this.name);\n    }\n  }\n  //创建新对象，js自动构建原型链继承 say 方法\n  var xiaoming = new Student(\"xiaoming\");\n  var laowang = new Student(\"laowang\");\n\n  xiaoming.say();\n  laowang.say();\n  ```\n\n### 语法糖\n\n```javascript\n  class Student{\n    constructor(name){\n      this.name = name;\n    }\n    say(){\n      console.log(\"My name is\" + this.name);\n    }\n  }\n\n  var xiaoming = new Student(\"xiaoming\");\n  xiaoming.say();\n  ```\n### 闭包\n\n  ​\n\n## AJAX 异步调用\n\n* 异步的 JavaScript 和 XML\n* AJAX 是一种用于创建快速动态网页的技术。\n* 通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n* 传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。\n* 例如服务器返回下面的 XML 数据：\n\n```xml\n<book>\n    <isbn>978-7-229-03093-3</isbn>\n    <name>三体</name>\n    <author>刘慈欣</author>\n   <introduction>中国最牛的科幻书</introduction>\n   <price>38.00</price>\n</book>\n```\n\n* 上面的数据中，标签占去了大部分，数据比较臃肿。\n\n## JSON\n\n* JavaScript 对象表示法（JavaScript Object Notation）。\n* JSON 是存储和交换文本信息的语法。类似 XML。\n* JSON 比 XML 更小、更快，更易解析。\n* JSON.parse(); 解析一个JSON字符串，可选地转换生成的值及其属性，并返回值。\n* JSON.stringify(); 返回与指定值相对应的一个JSON字符串，可选地仅包含某些属性或以用户定义的方式替换属性值。\n\n```javascript\n//这种结构完全可以表达上面的xml 内容\nvar book = {\n\"isbn\": \"978-7-229-03093-3\",\n\"name\": \"三体\",\n \"author\": \"刘慈欣\",\n\"introduction\": \"中国最牛的科幻书\",\n\"price\": \"38.00\"\n }\n//JS语法还支持数组，可以表达多个对象\nvar books = [\n {\n\"isbn\": \"978-7-229-03093-3\",\n\"name\": \"三体\",\n\"author\": \"刘慈欣\",\n\"introduction\": \"中国最牛的科幻书\",\n\"price\": \"38.00\"\n },\n {\n\"isbn\": \"978-7-229-03094-1\",\n\"name\": \"我是一个线程\",\n\"author\": \"刘欣\",\n\"introduction\": \"一个线程的自述\",\n\"price\": \"0.0\"\n }\n```\n\n* books[0].name -->返回“三体\"\n* books[1].author -->返回“刘欣”\n","source":"_posts/js基础.md","raw":"---\ntitle: JS基础基础\ntags: JavaScript\ncategories: JavaScript\nabbrlink: d4c7d8e9\ndata: 2017/9/16\n---\n\n## JS简介\n\n* Netscape公司的Brendan Eich设计JS，只能运行在浏览器中。\n* Ryan Dahl于2009年设计node.js，JS可以在服务端运行。\n* JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而传统编程语言，会在执行前对所有代码进行编译。\n* _proto_ 实现继承关系。\n* 对象名.prototype在原型对象层次优化子对象对公共方法的调用。\n* 语法糖使javascript贴近java语法。\n\n## 基础\n### 数据类型\n#### 字符串（String）\n* str.length; 查看一个字符串的长度。\n* str.charAt(index); 获取单个字符。\n* str.split(\"a\"); 指定从 a 处分割字符串为字符串数组。\n* str.slice(开始索引， 结束索引); 获取一个字符串中的一部分内容，字符串切片。\n* str[]; 通过索引获取单个字符。\n* str.indexOf('所选字符'); 获取字符串中单个或者多个字符索引，如果找不到成员，返回 -1\n* str.toLowerCase(); 将字符串转化为小写返回。\n* str.toUpperCase(); 将字符串转化为大写返回。\n```javascript\n// 字符串操作\nvar str = '东风无力百花残';\n// 获取字符串长度 a\nvar a = str.length;\n// 获取字符 '花' 的索引\nvar b = str.indexOf('花');\n// 通过索引获取字符 '百花'\nvar c = str.slice(b - 1, b + 1);\nconsole.log(\"字符串长度：\" + a + \"\\n花的索引：\" + b + \"\\n获取花字符：\" + c);\n```\n\n```javascript\n/* 将一个大小混写的人名，姓全部转换为大写，名除首字母外全部转换为小写。\n*/\n// 定义一个 name 字符串\nvar name = \"ALbERt EINstEin\";\nfunction nameChanger(name) {\n  // 定义 finaNmae 复制 name 内容\n let finaName = name;\n  // 以空格为参考，分割字符串为字符串数组\n  // names = [\"ALbERt\", \"EINstEin\"]\n  let names = name.split(\" \");\n  // slice(0， 1) 选择首字母转换为大写，slice(1) 选择后面的字符转换为小写\n  names[0] = names[0].slice(0, 1).toUpperCase() + names[0].slice(1).toLowerCase();\n  // 设置第二个数组元素全部为大写\n  names[1] = names[1].toUpperCase();\n  // 将数组中的所有元素转换为一个字符串\n  // 设定空格为分隔符\n  finaName = names.join(\" \");\n  console.log(finaName);\n}\nnameChanger(name);\n```\n#### 数组(Array)\n* splice(index, num, item1,.....,itemN); 用于插入、删除或替换数组的元素。\n  * index （必须） 删除/添加元素的开始下标。\n  * num （必须） 删除元素的数量。\n  * item （可选） 要添加的新元素。\n* pop(); 删除数组末尾的元素。\n* push(\"item\"); 添加元素到数组末尾。\n* shift(); 删除数组头部元素。\n* unshift(\"item\"); 添加元素到数组头部。\n\n#### 数字(Number) 所有数字以 64 位浮点数储存.\n* JavaScript 使用数字表示形式的 8 字节 IEEE 754 浮点标准来表示数字。  这意味着您可以编写最大为 1.79769x10308 和最小为 5x10-324 的数字。\n* 以零开头且后面的数字都小于 8， 会被识别为八进制数。\n* 0x 或 0X开头为十六进制数。\n* 八进制或者十六进制数字不能有小数部分。\n* JavaScript 区分正零和负零。\n\n#### 布尔(Boolean)\n* 可将任何表达式用作比较表达式。计算结果为 0、null、undefined 或空字符串的任何表达式被解释为 false。\n\n#### 对象(Object)\n* 确定对象属性是否存在，可使用 in 运算符：\n```javascript\n// 定义一个 people 对象\nvar people = {\n  name: 'xiaoming',\n  age: 12,\n};\n// 判断 people 对象中是否存在 name 属性\nif('name' in people) {\n  console.log('true');\n}\nelse {\n  console.log('flase');\n}\n// 输出 true\n```\n\n#### 日期(Date)\n#### 方法(function)\n* indexOf('目标', 开始位置 ); 获取数组成员索引，开始位置可省略不写。若成员不存在返回值为 -1。\n* splice(index, num); 删除指定索引 index 位置的数组成员，num 指删除数量。返回值为删除的数组。\n\n#### 空（Null）\n* 表示什么都没有，将变量赋值 null 可以清除变量的内容（不删除变量）。\n```javascript\n  var num = null; // 值为空 null\n  typeof num; //返回值为 object\n```\n\n#### 未定义（Undefined）\n* 变量的值未定义。可以将变量与 undefined 进行比较确定变量是否存在。\n* 也可以通过将变量的类型与字符串“undefined”进行比较确定其类型是否为 undefined。\n```javascript\n  var num;\n  typeof num; // 返回值为 undefined\n```\n**null 和 undefined 的值相等，类型不同。null 值的行为与数字 0 类似，而 undefined 的行为与特定值 NaN（非数字）类似。**\n\nJavaScript 拥有动态类型，相同的变量可用作不同的类型：\n```javascript\nvar x;               // 此时 x 为 undefined\nvar x = 5;           // 此时 x 为数字\nvar x = 'hello';      // 此时 x 为字符串\n```\n\n#### 强制转换\n* JavaScript 是一个弱类型的语言，其变量类型由其值的类型决定。\n* 字符串、数字和布尔值的强制转换规则：\n    * 如果添加一个数字和字符串，则该数字会强制转换为字符串。\n    * 如果添加一个布尔值和字符串，则该布尔值会强制转换为字符串。\n    * 如果添加一个数字和布尔值，则该布尔值会强制转换为数字。\n\n##### parseFloat\n将字符串转换为浮点数。\n`parseFloat(numString);` numString 参数是一个包含浮点数的字符串。函数返回一个等于 numString 中包含的数字的数值。如果 numString 的前缀无法解析为浮点数，则返回 NaN（非数字）。\n\n##### parseInt\n将字符串转为整数。\n`parseInt(numString, radix);`numString 参数是要转换为数字的字符串。radix(2~36) 为需要转成整数的进制。若没有指定基数：以\"0x\"或者\"0X\"开头, 则是 16 进制；0 开头为 8 进制或者 10 进制，具体由环境决定；其它默认是 10 进制。 函数将其第一个参数转换为字符串然后再解析它，解析成功返回一个进制指定的整数，反之返回 NaN。\n\n## 操作符\n操作符优先级;\n| 运算符                             | 说明                                                   |\n| ---------------------------------- | ------------------------------------------------------ |\n| .[ ] ( )                           | 字段访问、数组索引、函数调用和表达式分组               |\n| ++ -- - ~ ! delete new typeof void | 一元运算符、返回数据类型、对象创建、未定义的值         |\n| * / %                              | 相乘，相除，取模                                       |\n| + - +                              | 相加、相减、字符串串联                                 |\n| << >> >>>                          | 移位                                                   |\n| < <= > >= instanceof               | 小于、小于或等于、大于、大于或等于、是否为特定类的实例 |\n| == != === !==                      | 相等、不相等、全等，不全等                             |\n| &&                                 | 逻辑“与”                                             |\n| `||`                               | 逻辑“或”                                             |\n| ?:                                 | 三元条件运算                                           |\n| = OP=                              | 赋值、赋值运算（如 += 和 &=）                          |\n| ,                                  | 多个计算                                               |\n### 逻辑运算符\n==  **只比较两边的值，与类型无关。**当值相等时返回 true，\n===  **同时比较两边的类型和值**，只有当类型和值都相等时返回 true。\n\n!=  **只比较两边的类型，与值无关**，类型相同返回 true，类型不同返回 false\n!== **只要值或者类型有一个不相等**，返回 ture\n\n### 位运算符\n* 两个整数交换数值\n`a ^= b;\nb ^= a;\na ^= b;`\n```javascript\n// 位操作快速交换两个整数的值\nvar a = 10;\nvar b = 12;\na ^= b;\nb ^= a;\na ^= b;\nconsole.log('a is:' + a + '\\nb is:' + b); // a is:12 b is:10\n```\n## 函数\n> 函数也称为'全局方法'。\n### 箭头函数\n#### 常见错误\n* 错误1：使用箭头函数定义对象的方法\n* 错误2：在原型上使用箭头函数\n#### 适用场景\n* 箭头函数适合于无复杂逻辑或者无副作用的纯函数场景下，例如用在map、reduce、filter的回调函数定义中；\n* 不要在最外层定义箭头函数，因为在函数内部操作this会很容易污染全局作用域。最起码在箭头函数外部包一层普通函数，将this控制在可见的范围内；\n* 如开头所述，箭头函数最吸引人的地方是简洁。在有多层函数嵌套的情况下，箭头函数的简洁性并没有很大的提升，反而影响了函数的作用范围的识别度，这种情况不建议使用箭头函数。\n#### 副作用\n1. 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n2. 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n3. 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。\n4. 不可以使用yield命令，因此箭头函数不能用作Generator函数。\n### in 运算符\n判断某个属性是否属于这个对象。\n`'name' in obj`\n* 'name' 属性值\n*  obj 对象\n\n### instanceof 运算符\n返回值为布尔类型，判断一个对象是否为特定类的一个实例。\n`result = obj instanceof class`\n* result 返回值\n* obj 对象\n* class 特定类\n\n### 其它运算符\n#### typeof\n* 可以使用 typeof 操作符来检测变量的数据类型。`typeof 66  // 返回值为 number `。\n* 在JavaScript中，数组是一种特殊的对象类型。 typeof [1,2,3,4] 返回 object。\n\n\n### 单双引号\n* 同一种引号不能嵌套,最外层一般使用单引号，避免和 HTML 里面的冲突：\n\n```javascript\n//会报错误\n\"\"name\" + 18\"\n//正确的方式\n'\"name\" + 18'\n```\n### 模板字符串\n> 允许嵌入表达式的字符串。使用反引号（``）代替单引号或者双引号，中间包含特定语法（${表达式}）,表达式是任意 JavaScript 表达式（如变量或函数）。\n```javascript\n  `hello ${表达式}`;\n   `sun ${a + b}`\n```\n\n## 变量\n* JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。\n* 声明新变量时，可以使用关键词 \"new\" 来声明其类型。`var x = new String;`\n* 使用 let 和 var 关键字声明变量，let的作用域是块，而var的作用域是函数。\n* 如果把值直接赋给尚未声明的变量，该变量将被自动作为全局变量声明。\n* let 可以声明作用域被限制在块级中的变量、语句或者表达式。var声明的变量是全局或者整个函数块的。\n* let声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。\n* 在 HTML 中, 全局变量都是 window 对象: 所有数据变量都属于 window 对象。\n\n```javascript\nfunction varTest() {\n  var x = 1;\n  if (true) {\n    var x = 2;  // 同样的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示2\n}\n\nfunction letTest() {\n  let x = 1;\n  if (true) {\n    let x = 2;  // 不同的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示1\n```\n\n* 在程序或者函数的顶层，let并不会像var一样在全局对象上创造一个属性.\n\n```javascript\nvar x = 'global';\nlet y = 'global';\nconsole.log(this.x); // \"global\"\nconsole.log(this.y); // undefined\n```\n\n## JS 面向对象\n* javascript是基于原型的面向对象的语言，没有类的概念。\n\n### 创建对象\n\n  - JS中不用 class 创建对象\n  - 对象：属性加方法构成\n\n```javascript\n  //创建一个 people 对象，拥有 name 属性和 speak 方法\n  var people = {\n      country: \"CN\";\n      from: funcation(){\n          console.log(\"From\" + this.conuntry)\n      }\n  }；\n  people.from();\n  //由于对象并不和类关联， 我们可以随意地给这个对象增加属性\n  people.speak = \"Chinese\";\n  console.log(people.speak);\n  ```\n\n### 继承\n\n  - 继承就是让两个对象建立关联，\n  - 在 Javascript 中每个对象都有一个特殊的属性叫做__proto__， 你可以用这个属性去关联另外一个对象(原型)。\n\n```javascript\n    //定义一个american对象\n    var american = {\n      country: \"US\";\n      _proto_: people;//指向people对象\n    }；\n    //定义一个chinese对象\n    var chinese = {\n      country: \"CN\";\n      _proto_:people;//指向people对象\n    };\n    american.from();\n    chinese.from();\n  ```\n\n- american, chinese 的原型都是 people，当 from() 方法被调用时，先在自身的方法列表中寻找，找不到时再去原型中去寻找，如果原型中找不到，就去原型的原型中寻找，直到 Object 那里，如果还找不到，那就是方法未定义。这些对象通过_proto_建立了一个原型链。\n\n### 构造函数 原型\n* 将原型对象放入 Object.prototype 中，每次 new 新对象时，js会自动建立原型链。\n\n```javascript\n  function Student(name){\n    this.name = name;\n  }\n  Student.prototype = {\n    say: function(){\n      console.log(\"My name is\" + this.name);\n    }\n  }\n  //创建新对象，js自动构建原型链继承 say 方法\n  var xiaoming = new Student(\"xiaoming\");\n  var laowang = new Student(\"laowang\");\n\n  xiaoming.say();\n  laowang.say();\n  ```\n\n### 语法糖\n\n```javascript\n  class Student{\n    constructor(name){\n      this.name = name;\n    }\n    say(){\n      console.log(\"My name is\" + this.name);\n    }\n  }\n\n  var xiaoming = new Student(\"xiaoming\");\n  xiaoming.say();\n  ```\n### 闭包\n\n  ​\n\n## AJAX 异步调用\n\n* 异步的 JavaScript 和 XML\n* AJAX 是一种用于创建快速动态网页的技术。\n* 通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。\n* 传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。\n* 例如服务器返回下面的 XML 数据：\n\n```xml\n<book>\n    <isbn>978-7-229-03093-3</isbn>\n    <name>三体</name>\n    <author>刘慈欣</author>\n   <introduction>中国最牛的科幻书</introduction>\n   <price>38.00</price>\n</book>\n```\n\n* 上面的数据中，标签占去了大部分，数据比较臃肿。\n\n## JSON\n\n* JavaScript 对象表示法（JavaScript Object Notation）。\n* JSON 是存储和交换文本信息的语法。类似 XML。\n* JSON 比 XML 更小、更快，更易解析。\n* JSON.parse(); 解析一个JSON字符串，可选地转换生成的值及其属性，并返回值。\n* JSON.stringify(); 返回与指定值相对应的一个JSON字符串，可选地仅包含某些属性或以用户定义的方式替换属性值。\n\n```javascript\n//这种结构完全可以表达上面的xml 内容\nvar book = {\n\"isbn\": \"978-7-229-03093-3\",\n\"name\": \"三体\",\n \"author\": \"刘慈欣\",\n\"introduction\": \"中国最牛的科幻书\",\n\"price\": \"38.00\"\n }\n//JS语法还支持数组，可以表达多个对象\nvar books = [\n {\n\"isbn\": \"978-7-229-03093-3\",\n\"name\": \"三体\",\n\"author\": \"刘慈欣\",\n\"introduction\": \"中国最牛的科幻书\",\n\"price\": \"38.00\"\n },\n {\n\"isbn\": \"978-7-229-03094-1\",\n\"name\": \"我是一个线程\",\n\"author\": \"刘欣\",\n\"introduction\": \"一个线程的自述\",\n\"price\": \"0.0\"\n }\n```\n\n* books[0].name -->返回“三体\"\n* books[1].author -->返回“刘欣”\n","slug":"js基础","published":1,"date":"2017-11-12T02:22:42.811Z","updated":"2017-11-12T02:22:42.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xjt002gdfbxj4o13dpr","content":"<h2 id=\"JS简介\"><a href=\"#JS简介\" class=\"headerlink\" title=\"JS简介\"></a>JS简介</h2><ul>\n<li>Netscape公司的Brendan Eich设计JS，只能运行在浏览器中。</li>\n<li>Ryan Dahl于2009年设计node.js，JS可以在服务端运行。</li>\n<li>JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而传统编程语言，会在执行前对所有代码进行编译。</li>\n<li><em>proto</em> 实现继承关系。</li>\n<li>对象名.prototype在原型对象层次优化子对象对公共方法的调用。</li>\n<li>语法糖使javascript贴近java语法。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><h4 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h4><ul>\n<li>str.length; 查看一个字符串的长度。</li>\n<li>str.charAt(index); 获取单个字符。</li>\n<li>str.split(“a”); 指定从 a 处分割字符串为字符串数组。</li>\n<li>str.slice(开始索引， 结束索引); 获取一个字符串中的一部分内容，字符串切片。</li>\n<li>str[]; 通过索引获取单个字符。</li>\n<li>str.indexOf(‘所选字符’); 获取字符串中单个或者多个字符索引，如果找不到成员，返回 -1</li>\n<li>str.toLowerCase(); 将字符串转化为小写返回。</li>\n<li>str.toUpperCase(); 将字符串转化为大写返回。<pre><code class=\"javascript\">// 字符串操作\nvar str = &#39;东风无力百花残&#39;;\n// 获取字符串长度 a\nvar a = str.length;\n// 获取字符 &#39;花&#39; 的索引\nvar b = str.indexOf(&#39;花&#39;);\n// 通过索引获取字符 &#39;百花&#39;\nvar c = str.slice(b - 1, b + 1);\nconsole.log(&quot;字符串长度：&quot; + a + &quot;\\n花的索引：&quot; + b + &quot;\\n获取花字符：&quot; + c);\n</code></pre>\n</li>\n</ul>\n<pre><code class=\"javascript\">/* 将一个大小混写的人名，姓全部转换为大写，名除首字母外全部转换为小写。\n*/\n// 定义一个 name 字符串\nvar name = &quot;ALbERt EINstEin&quot;;\nfunction nameChanger(name) {\n  // 定义 finaNmae 复制 name 内容\n let finaName = name;\n  // 以空格为参考，分割字符串为字符串数组\n  // names = [&quot;ALbERt&quot;, &quot;EINstEin&quot;]\n  let names = name.split(&quot; &quot;);\n  // slice(0， 1) 选择首字母转换为大写，slice(1) 选择后面的字符转换为小写\n  names[0] = names[0].slice(0, 1).toUpperCase() + names[0].slice(1).toLowerCase();\n  // 设置第二个数组元素全部为大写\n  names[1] = names[1].toUpperCase();\n  // 将数组中的所有元素转换为一个字符串\n  // 设定空格为分隔符\n  finaName = names.join(&quot; &quot;);\n  console.log(finaName);\n}\nnameChanger(name);\n</code></pre>\n<h4 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h4><ul>\n<li>splice(index, num, item1,…..,itemN); 用于插入、删除或替换数组的元素。<ul>\n<li>index （必须） 删除/添加元素的开始下标。</li>\n<li>num （必须） 删除元素的数量。</li>\n<li>item （可选） 要添加的新元素。</li>\n</ul>\n</li>\n<li>pop(); 删除数组末尾的元素。</li>\n<li>push(“item”); 添加元素到数组末尾。</li>\n<li>shift(); 删除数组头部元素。</li>\n<li>unshift(“item”); 添加元素到数组头部。</li>\n</ul>\n<h4 id=\"数字-Number-所有数字以-64-位浮点数储存\"><a href=\"#数字-Number-所有数字以-64-位浮点数储存\" class=\"headerlink\" title=\"数字(Number) 所有数字以 64 位浮点数储存.\"></a>数字(Number) 所有数字以 64 位浮点数储存.</h4><ul>\n<li>JavaScript 使用数字表示形式的 8 字节 IEEE 754 浮点标准来表示数字。  这意味着您可以编写最大为 1.79769x10308 和最小为 5x10-324 的数字。</li>\n<li>以零开头且后面的数字都小于 8， 会被识别为八进制数。</li>\n<li>0x 或 0X开头为十六进制数。</li>\n<li>八进制或者十六进制数字不能有小数部分。</li>\n<li>JavaScript 区分正零和负零。</li>\n</ul>\n<h4 id=\"布尔-Boolean\"><a href=\"#布尔-Boolean\" class=\"headerlink\" title=\"布尔(Boolean)\"></a>布尔(Boolean)</h4><ul>\n<li>可将任何表达式用作比较表达式。计算结果为 0、null、undefined 或空字符串的任何表达式被解释为 false。</li>\n</ul>\n<h4 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h4><ul>\n<li>确定对象属性是否存在，可使用 in 运算符：<pre><code class=\"javascript\">// 定义一个 people 对象\nvar people = {\nname: &#39;xiaoming&#39;,\nage: 12,\n};\n// 判断 people 对象中是否存在 name 属性\nif(&#39;name&#39; in people) {\nconsole.log(&#39;true&#39;);\n}\nelse {\nconsole.log(&#39;flase&#39;);\n}\n// 输出 true\n</code></pre>\n</li>\n</ul>\n<h4 id=\"日期-Date\"><a href=\"#日期-Date\" class=\"headerlink\" title=\"日期(Date)\"></a>日期(Date)</h4><h4 id=\"方法-function\"><a href=\"#方法-function\" class=\"headerlink\" title=\"方法(function)\"></a>方法(function)</h4><ul>\n<li>indexOf(‘目标’, 开始位置 ); 获取数组成员索引，开始位置可省略不写。若成员不存在返回值为 -1。</li>\n<li>splice(index, num); 删除指定索引 index 位置的数组成员，num 指删除数量。返回值为删除的数组。</li>\n</ul>\n<h4 id=\"空（Null）\"><a href=\"#空（Null）\" class=\"headerlink\" title=\"空（Null）\"></a>空（Null）</h4><ul>\n<li>表示什么都没有，将变量赋值 null 可以清除变量的内容（不删除变量）。<pre><code class=\"javascript\">var num = null; // 值为空 null\ntypeof num; //返回值为 object\n</code></pre>\n</li>\n</ul>\n<h4 id=\"未定义（Undefined）\"><a href=\"#未定义（Undefined）\" class=\"headerlink\" title=\"未定义（Undefined）\"></a>未定义（Undefined）</h4><ul>\n<li>变量的值未定义。可以将变量与 undefined 进行比较确定变量是否存在。</li>\n<li>也可以通过将变量的类型与字符串“undefined”进行比较确定其类型是否为 undefined。<pre><code class=\"javascript\">var num;\ntypeof num; // 返回值为 undefined\n</code></pre>\n<strong>null 和 undefined 的值相等，类型不同。null 值的行为与数字 0 类似，而 undefined 的行为与特定值 NaN（非数字）类似。</strong></li>\n</ul>\n<p>JavaScript 拥有动态类型，相同的变量可用作不同的类型：</p>\n<pre><code class=\"javascript\">var x;               // 此时 x 为 undefined\nvar x = 5;           // 此时 x 为数字\nvar x = &#39;hello&#39;;      // 此时 x 为字符串\n</code></pre>\n<h4 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h4><ul>\n<li>JavaScript 是一个弱类型的语言，其变量类型由其值的类型决定。</li>\n<li>字符串、数字和布尔值的强制转换规则：<ul>\n<li>如果添加一个数字和字符串，则该数字会强制转换为字符串。</li>\n<li>如果添加一个布尔值和字符串，则该布尔值会强制转换为字符串。</li>\n<li>如果添加一个数字和布尔值，则该布尔值会强制转换为数字。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat\"></a>parseFloat</h5><p>将字符串转换为浮点数。<br><code>parseFloat(numString);</code> numString 参数是一个包含浮点数的字符串。函数返回一个等于 numString 中包含的数字的数值。如果 numString 的前缀无法解析为浮点数，则返回 NaN（非数字）。</p>\n<h5 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt\"></a>parseInt</h5><p>将字符串转为整数。<br><code>parseInt(numString, radix);</code>numString 参数是要转换为数字的字符串。radix(2~36) 为需要转成整数的进制。若没有指定基数：以”0x”或者”0X”开头, 则是 16 进制；0 开头为 8 进制或者 10 进制，具体由环境决定；其它默认是 10 进制。 函数将其第一个参数转换为字符串然后再解析它，解析成功返回一个进制指定的整数，反之返回 NaN。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>操作符优先级;<br>| 运算符                             | 说明                                                   |<br>| ———————————- | —————————————————— |<br>| .[ ] ( )                           | 字段访问、数组索引、函数调用和表达式分组               |<br>| ++ – - ~ ! delete new typeof void | 一元运算符、返回数据类型、对象创建、未定义的值         |<br>| * / %                              | 相乘，相除，取模                                       |<br>| + - +                              | 相加、相减、字符串串联                                 |<br>| &lt;&lt; &gt;&gt; &gt;&gt;&gt;                          | 移位                                                   |<br>| &lt; &lt;= &gt; &gt;= instanceof               | 小于、小于或等于、大于、大于或等于、是否为特定类的实例 |<br>| == != === !==                      | 相等、不相等、全等，不全等                             |<br>| &amp;&amp;                                 | 逻辑“与”                                             |<br>| <code>||</code>                               | 逻辑“或”                                             |<br>| ?:                                 | 三元条件运算                                           |<br>| = OP=                              | 赋值、赋值运算（如 += 和 &amp;=）                          |<br>| ,                                  | 多个计算                                               |</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>==  <strong>只比较两边的值，与类型无关。</strong>当值相等时返回 true，<br>===  <strong>同时比较两边的类型和值</strong>，只有当类型和值都相等时返回 true。</p>\n<p>!=  <strong>只比较两边的类型，与值无关</strong>，类型相同返回 true，类型不同返回 false<br>!== <strong>只要值或者类型有一个不相等</strong>，返回 ture</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><ul>\n<li>两个整数交换数值<br><code>a ^= b;\nb ^= a;\na ^= b;</code><pre><code class=\"javascript\">// 位操作快速交换两个整数的值\nvar a = 10;\nvar b = 12;\na ^= b;\nb ^= a;\na ^= b;\nconsole.log(&#39;a is:&#39; + a + &#39;\\nb is:&#39; + b); // a is:12 b is:10\n</code></pre>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote>\n<p>函数也称为’全局方法’。</p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><h4 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h4></blockquote>\n</li>\n<li>错误1：使用箭头函数定义对象的方法</li>\n<li>错误2：在原型上使用箭头函数<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4></li>\n<li>箭头函数适合于无复杂逻辑或者无副作用的纯函数场景下，例如用在map、reduce、filter的回调函数定义中；</li>\n<li>不要在最外层定义箭头函数，因为在函数内部操作this会很容易污染全局作用域。最起码在箭头函数外部包一层普通函数，将this控制在可见的范围内；</li>\n<li>如开头所述，箭头函数最吸引人的地方是简洁。在有多层函数嵌套的情况下，箭头函数的简洁性并没有很大的提升，反而影响了函数的作用范围的识别度，这种情况不建议使用箭头函数。<h4 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h4></li>\n</ul>\n<ol>\n<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>\n<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>\n<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</li>\n<li>不可以使用yield命令，因此箭头函数不能用作Generator函数。<h3 id=\"in-运算符\"><a href=\"#in-运算符\" class=\"headerlink\" title=\"in 运算符\"></a>in 运算符</h3>判断某个属性是否属于这个对象。<br><code>&#39;name&#39; in obj</code></li>\n</ol>\n<ul>\n<li>‘name’ 属性值</li>\n<li>obj 对象</li>\n</ul>\n<h3 id=\"instanceof-运算符\"><a href=\"#instanceof-运算符\" class=\"headerlink\" title=\"instanceof 运算符\"></a>instanceof 运算符</h3><p>返回值为布尔类型，判断一个对象是否为特定类的一个实例。<br><code>result = obj instanceof class</code></p>\n<ul>\n<li>result 返回值</li>\n<li>obj 对象</li>\n<li>class 特定类</li>\n</ul>\n<h3 id=\"其它运算符\"><a href=\"#其它运算符\" class=\"headerlink\" title=\"其它运算符\"></a>其它运算符</h3><h4 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h4><ul>\n<li>可以使用 typeof 操作符来检测变量的数据类型。<code>typeof 66  // 返回值为 number</code>。</li>\n<li>在JavaScript中，数组是一种特殊的对象类型。 typeof [1,2,3,4] 返回 object。</li>\n</ul>\n<h3 id=\"单双引号\"><a href=\"#单双引号\" class=\"headerlink\" title=\"单双引号\"></a>单双引号</h3><ul>\n<li>同一种引号不能嵌套,最外层一般使用单引号，避免和 HTML 里面的冲突：</li>\n</ul>\n<pre><code class=\"javascript\">//会报错误\n&quot;&quot;name&quot; + 18&quot;\n//正确的方式\n&#39;&quot;name&quot; + 18&#39;\n</code></pre>\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h3><blockquote>\n<p>允许嵌入表达式的字符串。使用反引号（``）代替单引号或者双引号，中间包含特定语法（${表达式}）,表达式是任意 JavaScript 表达式（如变量或函数）。</p>\n<pre><code class=\"javascript\">  `hello ${表达式}`;\n   `sun ${a + b}`\n</code></pre>\n</blockquote>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</li>\n<li>声明新变量时，可以使用关键词 “new” 来声明其类型。<code>var x = new String;</code></li>\n<li>使用 let 和 var 关键字声明变量，let的作用域是块，而var的作用域是函数。</li>\n<li>如果把值直接赋给尚未声明的变量，该变量将被自动作为全局变量声明。</li>\n<li>let 可以声明作用域被限制在块级中的变量、语句或者表达式。var声明的变量是全局或者整个函数块的。</li>\n<li>let声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。</li>\n<li>在 HTML 中, 全局变量都是 window 对象: 所有数据变量都属于 window 对象。</li>\n</ul>\n<pre><code class=\"javascript\">function varTest() {\n  var x = 1;\n  if (true) {\n    var x = 2;  // 同样的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示2\n}\n\nfunction letTest() {\n  let x = 1;\n  if (true) {\n    let x = 2;  // 不同的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示1\n</code></pre>\n<ul>\n<li>在程序或者函数的顶层，let并不会像var一样在全局对象上创造一个属性.</li>\n</ul>\n<pre><code class=\"javascript\">var x = &#39;global&#39;;\nlet y = &#39;global&#39;;\nconsole.log(this.x); // &quot;global&quot;\nconsole.log(this.y); // undefined\n</code></pre>\n<h2 id=\"JS-面向对象\"><a href=\"#JS-面向对象\" class=\"headerlink\" title=\"JS 面向对象\"></a>JS 面向对象</h2><ul>\n<li>javascript是基于原型的面向对象的语言，没有类的概念。</li>\n</ul>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><ul>\n<li>JS中不用 class 创建对象</li>\n<li>对象：属性加方法构成</li>\n</ul>\n<pre><code class=\"javascript\">  //创建一个 people 对象，拥有 name 属性和 speak 方法\n  var people = {\n      country: &quot;CN&quot;;\n      from: funcation(){\n          console.log(&quot;From&quot; + this.conuntry)\n      }\n  }；\n  people.from();\n  //由于对象并不和类关联， 我们可以随意地给这个对象增加属性\n  people.speak = &quot;Chinese&quot;;\n  console.log(people.speak);\n</code></pre>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><ul>\n<li>继承就是让两个对象建立关联，</li>\n<li>在 Javascript 中每个对象都有一个特殊的属性叫做<strong>proto</strong>， 你可以用这个属性去关联另外一个对象(原型)。</li>\n</ul>\n<pre><code class=\"javascript\">    //定义一个american对象\n    var american = {\n      country: &quot;US&quot;;\n      _proto_: people;//指向people对象\n    }；\n    //定义一个chinese对象\n    var chinese = {\n      country: &quot;CN&quot;;\n      _proto_:people;//指向people对象\n    };\n    american.from();\n    chinese.from();\n</code></pre>\n<ul>\n<li>american, chinese 的原型都是 people，当 from() 方法被调用时，先在自身的方法列表中寻找，找不到时再去原型中去寻找，如果原型中找不到，就去原型的原型中寻找，直到 Object 那里，如果还找不到，那就是方法未定义。这些对象通过<em>proto</em>建立了一个原型链。</li>\n</ul>\n<h3 id=\"构造函数-原型\"><a href=\"#构造函数-原型\" class=\"headerlink\" title=\"构造函数 原型\"></a>构造函数 原型</h3><ul>\n<li>将原型对象放入 Object.prototype 中，每次 new 新对象时，js会自动建立原型链。</li>\n</ul>\n<pre><code class=\"javascript\">  function Student(name){\n    this.name = name;\n  }\n  Student.prototype = {\n    say: function(){\n      console.log(&quot;My name is&quot; + this.name);\n    }\n  }\n  //创建新对象，js自动构建原型链继承 say 方法\n  var xiaoming = new Student(&quot;xiaoming&quot;);\n  var laowang = new Student(&quot;laowang&quot;);\n\n  xiaoming.say();\n  laowang.say();\n</code></pre>\n<h3 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h3><pre><code class=\"javascript\">  class Student{\n    constructor(name){\n      this.name = name;\n    }\n    say(){\n      console.log(&quot;My name is&quot; + this.name);\n    }\n  }\n\n  var xiaoming = new Student(&quot;xiaoming&quot;);\n  xiaoming.say();\n</code></pre>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>  ​</p>\n<h2 id=\"AJAX-异步调用\"><a href=\"#AJAX-异步调用\" class=\"headerlink\" title=\"AJAX 异步调用\"></a>AJAX 异步调用</h2><ul>\n<li>异步的 JavaScript 和 XML</li>\n<li>AJAX 是一种用于创建快速动态网页的技术。</li>\n<li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li>\n<li>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</li>\n<li>例如服务器返回下面的 XML 数据：</li>\n</ul>\n<pre><code class=\"xml\">&lt;book&gt;\n    &lt;isbn&gt;978-7-229-03093-3&lt;/isbn&gt;\n    &lt;name&gt;三体&lt;/name&gt;\n    &lt;author&gt;刘慈欣&lt;/author&gt;\n   &lt;introduction&gt;中国最牛的科幻书&lt;/introduction&gt;\n   &lt;price&gt;38.00&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\n<ul>\n<li>上面的数据中，标签占去了大部分，数据比较臃肿。</li>\n</ul>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><ul>\n<li>JavaScript 对象表示法（JavaScript Object Notation）。</li>\n<li>JSON 是存储和交换文本信息的语法。类似 XML。</li>\n<li>JSON 比 XML 更小、更快，更易解析。</li>\n<li>JSON.parse(); 解析一个JSON字符串，可选地转换生成的值及其属性，并返回值。</li>\n<li>JSON.stringify(); 返回与指定值相对应的一个JSON字符串，可选地仅包含某些属性或以用户定义的方式替换属性值。</li>\n</ul>\n<pre><code class=\"javascript\">//这种结构完全可以表达上面的xml 内容\nvar book = {\n&quot;isbn&quot;: &quot;978-7-229-03093-3&quot;,\n&quot;name&quot;: &quot;三体&quot;,\n &quot;author&quot;: &quot;刘慈欣&quot;,\n&quot;introduction&quot;: &quot;中国最牛的科幻书&quot;,\n&quot;price&quot;: &quot;38.00&quot;\n }\n//JS语法还支持数组，可以表达多个对象\nvar books = [\n {\n&quot;isbn&quot;: &quot;978-7-229-03093-3&quot;,\n&quot;name&quot;: &quot;三体&quot;,\n&quot;author&quot;: &quot;刘慈欣&quot;,\n&quot;introduction&quot;: &quot;中国最牛的科幻书&quot;,\n&quot;price&quot;: &quot;38.00&quot;\n },\n {\n&quot;isbn&quot;: &quot;978-7-229-03094-1&quot;,\n&quot;name&quot;: &quot;我是一个线程&quot;,\n&quot;author&quot;: &quot;刘欣&quot;,\n&quot;introduction&quot;: &quot;一个线程的自述&quot;,\n&quot;price&quot;: &quot;0.0&quot;\n }\n</code></pre>\n<ul>\n<li>books[0].name –&gt;返回“三体”</li>\n<li>books[1].author –&gt;返回“刘欣”</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JS简介\"><a href=\"#JS简介\" class=\"headerlink\" title=\"JS简介\"></a>JS简介</h2><ul>\n<li>Netscape公司的Brendan Eich设计JS，只能运行在浏览器中。</li>\n<li>Ryan Dahl于2009年设计node.js，JS可以在服务端运行。</li>\n<li>JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而传统编程语言，会在执行前对所有代码进行编译。</li>\n<li><em>proto</em> 实现继承关系。</li>\n<li>对象名.prototype在原型对象层次优化子对象对公共方法的调用。</li>\n<li>语法糖使javascript贴近java语法。</li>\n</ul>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><h4 id=\"字符串（String）\"><a href=\"#字符串（String）\" class=\"headerlink\" title=\"字符串（String）\"></a>字符串（String）</h4><ul>\n<li>str.length; 查看一个字符串的长度。</li>\n<li>str.charAt(index); 获取单个字符。</li>\n<li>str.split(“a”); 指定从 a 处分割字符串为字符串数组。</li>\n<li>str.slice(开始索引， 结束索引); 获取一个字符串中的一部分内容，字符串切片。</li>\n<li>str[]; 通过索引获取单个字符。</li>\n<li>str.indexOf(‘所选字符’); 获取字符串中单个或者多个字符索引，如果找不到成员，返回 -1</li>\n<li>str.toLowerCase(); 将字符串转化为小写返回。</li>\n<li>str.toUpperCase(); 将字符串转化为大写返回。<pre><code class=\"javascript\">// 字符串操作\nvar str = &#39;东风无力百花残&#39;;\n// 获取字符串长度 a\nvar a = str.length;\n// 获取字符 &#39;花&#39; 的索引\nvar b = str.indexOf(&#39;花&#39;);\n// 通过索引获取字符 &#39;百花&#39;\nvar c = str.slice(b - 1, b + 1);\nconsole.log(&quot;字符串长度：&quot; + a + &quot;\\n花的索引：&quot; + b + &quot;\\n获取花字符：&quot; + c);\n</code></pre>\n</li>\n</ul>\n<pre><code class=\"javascript\">/* 将一个大小混写的人名，姓全部转换为大写，名除首字母外全部转换为小写。\n*/\n// 定义一个 name 字符串\nvar name = &quot;ALbERt EINstEin&quot;;\nfunction nameChanger(name) {\n  // 定义 finaNmae 复制 name 内容\n let finaName = name;\n  // 以空格为参考，分割字符串为字符串数组\n  // names = [&quot;ALbERt&quot;, &quot;EINstEin&quot;]\n  let names = name.split(&quot; &quot;);\n  // slice(0， 1) 选择首字母转换为大写，slice(1) 选择后面的字符转换为小写\n  names[0] = names[0].slice(0, 1).toUpperCase() + names[0].slice(1).toLowerCase();\n  // 设置第二个数组元素全部为大写\n  names[1] = names[1].toUpperCase();\n  // 将数组中的所有元素转换为一个字符串\n  // 设定空格为分隔符\n  finaName = names.join(&quot; &quot;);\n  console.log(finaName);\n}\nnameChanger(name);\n</code></pre>\n<h4 id=\"数组-Array\"><a href=\"#数组-Array\" class=\"headerlink\" title=\"数组(Array)\"></a>数组(Array)</h4><ul>\n<li>splice(index, num, item1,…..,itemN); 用于插入、删除或替换数组的元素。<ul>\n<li>index （必须） 删除/添加元素的开始下标。</li>\n<li>num （必须） 删除元素的数量。</li>\n<li>item （可选） 要添加的新元素。</li>\n</ul>\n</li>\n<li>pop(); 删除数组末尾的元素。</li>\n<li>push(“item”); 添加元素到数组末尾。</li>\n<li>shift(); 删除数组头部元素。</li>\n<li>unshift(“item”); 添加元素到数组头部。</li>\n</ul>\n<h4 id=\"数字-Number-所有数字以-64-位浮点数储存\"><a href=\"#数字-Number-所有数字以-64-位浮点数储存\" class=\"headerlink\" title=\"数字(Number) 所有数字以 64 位浮点数储存.\"></a>数字(Number) 所有数字以 64 位浮点数储存.</h4><ul>\n<li>JavaScript 使用数字表示形式的 8 字节 IEEE 754 浮点标准来表示数字。  这意味着您可以编写最大为 1.79769x10308 和最小为 5x10-324 的数字。</li>\n<li>以零开头且后面的数字都小于 8， 会被识别为八进制数。</li>\n<li>0x 或 0X开头为十六进制数。</li>\n<li>八进制或者十六进制数字不能有小数部分。</li>\n<li>JavaScript 区分正零和负零。</li>\n</ul>\n<h4 id=\"布尔-Boolean\"><a href=\"#布尔-Boolean\" class=\"headerlink\" title=\"布尔(Boolean)\"></a>布尔(Boolean)</h4><ul>\n<li>可将任何表达式用作比较表达式。计算结果为 0、null、undefined 或空字符串的任何表达式被解释为 false。</li>\n</ul>\n<h4 id=\"对象-Object\"><a href=\"#对象-Object\" class=\"headerlink\" title=\"对象(Object)\"></a>对象(Object)</h4><ul>\n<li>确定对象属性是否存在，可使用 in 运算符：<pre><code class=\"javascript\">// 定义一个 people 对象\nvar people = {\nname: &#39;xiaoming&#39;,\nage: 12,\n};\n// 判断 people 对象中是否存在 name 属性\nif(&#39;name&#39; in people) {\nconsole.log(&#39;true&#39;);\n}\nelse {\nconsole.log(&#39;flase&#39;);\n}\n// 输出 true\n</code></pre>\n</li>\n</ul>\n<h4 id=\"日期-Date\"><a href=\"#日期-Date\" class=\"headerlink\" title=\"日期(Date)\"></a>日期(Date)</h4><h4 id=\"方法-function\"><a href=\"#方法-function\" class=\"headerlink\" title=\"方法(function)\"></a>方法(function)</h4><ul>\n<li>indexOf(‘目标’, 开始位置 ); 获取数组成员索引，开始位置可省略不写。若成员不存在返回值为 -1。</li>\n<li>splice(index, num); 删除指定索引 index 位置的数组成员，num 指删除数量。返回值为删除的数组。</li>\n</ul>\n<h4 id=\"空（Null）\"><a href=\"#空（Null）\" class=\"headerlink\" title=\"空（Null）\"></a>空（Null）</h4><ul>\n<li>表示什么都没有，将变量赋值 null 可以清除变量的内容（不删除变量）。<pre><code class=\"javascript\">var num = null; // 值为空 null\ntypeof num; //返回值为 object\n</code></pre>\n</li>\n</ul>\n<h4 id=\"未定义（Undefined）\"><a href=\"#未定义（Undefined）\" class=\"headerlink\" title=\"未定义（Undefined）\"></a>未定义（Undefined）</h4><ul>\n<li>变量的值未定义。可以将变量与 undefined 进行比较确定变量是否存在。</li>\n<li>也可以通过将变量的类型与字符串“undefined”进行比较确定其类型是否为 undefined。<pre><code class=\"javascript\">var num;\ntypeof num; // 返回值为 undefined\n</code></pre>\n<strong>null 和 undefined 的值相等，类型不同。null 值的行为与数字 0 类似，而 undefined 的行为与特定值 NaN（非数字）类似。</strong></li>\n</ul>\n<p>JavaScript 拥有动态类型，相同的变量可用作不同的类型：</p>\n<pre><code class=\"javascript\">var x;               // 此时 x 为 undefined\nvar x = 5;           // 此时 x 为数字\nvar x = &#39;hello&#39;;      // 此时 x 为字符串\n</code></pre>\n<h4 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h4><ul>\n<li>JavaScript 是一个弱类型的语言，其变量类型由其值的类型决定。</li>\n<li>字符串、数字和布尔值的强制转换规则：<ul>\n<li>如果添加一个数字和字符串，则该数字会强制转换为字符串。</li>\n<li>如果添加一个布尔值和字符串，则该布尔值会强制转换为字符串。</li>\n<li>如果添加一个数字和布尔值，则该布尔值会强制转换为数字。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat\"></a>parseFloat</h5><p>将字符串转换为浮点数。<br><code>parseFloat(numString);</code> numString 参数是一个包含浮点数的字符串。函数返回一个等于 numString 中包含的数字的数值。如果 numString 的前缀无法解析为浮点数，则返回 NaN（非数字）。</p>\n<h5 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt\"></a>parseInt</h5><p>将字符串转为整数。<br><code>parseInt(numString, radix);</code>numString 参数是要转换为数字的字符串。radix(2~36) 为需要转成整数的进制。若没有指定基数：以”0x”或者”0X”开头, 则是 16 进制；0 开头为 8 进制或者 10 进制，具体由环境决定；其它默认是 10 进制。 函数将其第一个参数转换为字符串然后再解析它，解析成功返回一个进制指定的整数，反之返回 NaN。</p>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><p>操作符优先级;<br>| 运算符                             | 说明                                                   |<br>| ———————————- | —————————————————— |<br>| .[ ] ( )                           | 字段访问、数组索引、函数调用和表达式分组               |<br>| ++ – - ~ ! delete new typeof void | 一元运算符、返回数据类型、对象创建、未定义的值         |<br>| * / %                              | 相乘，相除，取模                                       |<br>| + - +                              | 相加、相减、字符串串联                                 |<br>| &lt;&lt; &gt;&gt; &gt;&gt;&gt;                          | 移位                                                   |<br>| &lt; &lt;= &gt; &gt;= instanceof               | 小于、小于或等于、大于、大于或等于、是否为特定类的实例 |<br>| == != === !==                      | 相等、不相等、全等，不全等                             |<br>| &amp;&amp;                                 | 逻辑“与”                                             |<br>| <code>||</code>                               | 逻辑“或”                                             |<br>| ?:                                 | 三元条件运算                                           |<br>| = OP=                              | 赋值、赋值运算（如 += 和 &amp;=）                          |<br>| ,                                  | 多个计算                                               |</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>==  <strong>只比较两边的值，与类型无关。</strong>当值相等时返回 true，<br>===  <strong>同时比较两边的类型和值</strong>，只有当类型和值都相等时返回 true。</p>\n<p>!=  <strong>只比较两边的类型，与值无关</strong>，类型相同返回 true，类型不同返回 false<br>!== <strong>只要值或者类型有一个不相等</strong>，返回 ture</p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><ul>\n<li>两个整数交换数值<br><code>a ^= b;\nb ^= a;\na ^= b;</code><pre><code class=\"javascript\">// 位操作快速交换两个整数的值\nvar a = 10;\nvar b = 12;\na ^= b;\nb ^= a;\na ^= b;\nconsole.log(&#39;a is:&#39; + a + &#39;\\nb is:&#39; + b); // a is:12 b is:10\n</code></pre>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><blockquote>\n<p>函数也称为’全局方法’。</p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><h4 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h4></blockquote>\n</li>\n<li>错误1：使用箭头函数定义对象的方法</li>\n<li>错误2：在原型上使用箭头函数<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4></li>\n<li>箭头函数适合于无复杂逻辑或者无副作用的纯函数场景下，例如用在map、reduce、filter的回调函数定义中；</li>\n<li>不要在最外层定义箭头函数，因为在函数内部操作this会很容易污染全局作用域。最起码在箭头函数外部包一层普通函数，将this控制在可见的范围内；</li>\n<li>如开头所述，箭头函数最吸引人的地方是简洁。在有多层函数嵌套的情况下，箭头函数的简洁性并没有很大的提升，反而影响了函数的作用范围的识别度，这种情况不建议使用箭头函数。<h4 id=\"副作用\"><a href=\"#副作用\" class=\"headerlink\" title=\"副作用\"></a>副作用</h4></li>\n</ul>\n<ol>\n<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>\n<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>\n<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</li>\n<li>不可以使用yield命令，因此箭头函数不能用作Generator函数。<h3 id=\"in-运算符\"><a href=\"#in-运算符\" class=\"headerlink\" title=\"in 运算符\"></a>in 运算符</h3>判断某个属性是否属于这个对象。<br><code>&#39;name&#39; in obj</code></li>\n</ol>\n<ul>\n<li>‘name’ 属性值</li>\n<li>obj 对象</li>\n</ul>\n<h3 id=\"instanceof-运算符\"><a href=\"#instanceof-运算符\" class=\"headerlink\" title=\"instanceof 运算符\"></a>instanceof 运算符</h3><p>返回值为布尔类型，判断一个对象是否为特定类的一个实例。<br><code>result = obj instanceof class</code></p>\n<ul>\n<li>result 返回值</li>\n<li>obj 对象</li>\n<li>class 特定类</li>\n</ul>\n<h3 id=\"其它运算符\"><a href=\"#其它运算符\" class=\"headerlink\" title=\"其它运算符\"></a>其它运算符</h3><h4 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h4><ul>\n<li>可以使用 typeof 操作符来检测变量的数据类型。<code>typeof 66  // 返回值为 number</code>。</li>\n<li>在JavaScript中，数组是一种特殊的对象类型。 typeof [1,2,3,4] 返回 object。</li>\n</ul>\n<h3 id=\"单双引号\"><a href=\"#单双引号\" class=\"headerlink\" title=\"单双引号\"></a>单双引号</h3><ul>\n<li>同一种引号不能嵌套,最外层一般使用单引号，避免和 HTML 里面的冲突：</li>\n</ul>\n<pre><code class=\"javascript\">//会报错误\n&quot;&quot;name&quot; + 18&quot;\n//正确的方式\n&#39;&quot;name&quot; + 18&#39;\n</code></pre>\n<h3 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h3><blockquote>\n<p>允许嵌入表达式的字符串。使用反引号（``）代替单引号或者双引号，中间包含特定语法（${表达式}）,表达式是任意 JavaScript 表达式（如变量或函数）。</p>\n<pre><code class=\"javascript\">  `hello ${表达式}`;\n   `sun ${a + b}`\n</code></pre>\n</blockquote>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><ul>\n<li>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</li>\n<li>声明新变量时，可以使用关键词 “new” 来声明其类型。<code>var x = new String;</code></li>\n<li>使用 let 和 var 关键字声明变量，let的作用域是块，而var的作用域是函数。</li>\n<li>如果把值直接赋给尚未声明的变量，该变量将被自动作为全局变量声明。</li>\n<li>let 可以声明作用域被限制在块级中的变量、语句或者表达式。var声明的变量是全局或者整个函数块的。</li>\n<li>let声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。</li>\n<li>在 HTML 中, 全局变量都是 window 对象: 所有数据变量都属于 window 对象。</li>\n</ul>\n<pre><code class=\"javascript\">function varTest() {\n  var x = 1;\n  if (true) {\n    var x = 2;  // 同样的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示2\n}\n\nfunction letTest() {\n  let x = 1;\n  if (true) {\n    let x = 2;  // 不同的变量\n    console.log(x);  // 显示2\n  }\n  console.log(x);  // 显示1\n</code></pre>\n<ul>\n<li>在程序或者函数的顶层，let并不会像var一样在全局对象上创造一个属性.</li>\n</ul>\n<pre><code class=\"javascript\">var x = &#39;global&#39;;\nlet y = &#39;global&#39;;\nconsole.log(this.x); // &quot;global&quot;\nconsole.log(this.y); // undefined\n</code></pre>\n<h2 id=\"JS-面向对象\"><a href=\"#JS-面向对象\" class=\"headerlink\" title=\"JS 面向对象\"></a>JS 面向对象</h2><ul>\n<li>javascript是基于原型的面向对象的语言，没有类的概念。</li>\n</ul>\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><ul>\n<li>JS中不用 class 创建对象</li>\n<li>对象：属性加方法构成</li>\n</ul>\n<pre><code class=\"javascript\">  //创建一个 people 对象，拥有 name 属性和 speak 方法\n  var people = {\n      country: &quot;CN&quot;;\n      from: funcation(){\n          console.log(&quot;From&quot; + this.conuntry)\n      }\n  }；\n  people.from();\n  //由于对象并不和类关联， 我们可以随意地给这个对象增加属性\n  people.speak = &quot;Chinese&quot;;\n  console.log(people.speak);\n</code></pre>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><ul>\n<li>继承就是让两个对象建立关联，</li>\n<li>在 Javascript 中每个对象都有一个特殊的属性叫做<strong>proto</strong>， 你可以用这个属性去关联另外一个对象(原型)。</li>\n</ul>\n<pre><code class=\"javascript\">    //定义一个american对象\n    var american = {\n      country: &quot;US&quot;;\n      _proto_: people;//指向people对象\n    }；\n    //定义一个chinese对象\n    var chinese = {\n      country: &quot;CN&quot;;\n      _proto_:people;//指向people对象\n    };\n    american.from();\n    chinese.from();\n</code></pre>\n<ul>\n<li>american, chinese 的原型都是 people，当 from() 方法被调用时，先在自身的方法列表中寻找，找不到时再去原型中去寻找，如果原型中找不到，就去原型的原型中寻找，直到 Object 那里，如果还找不到，那就是方法未定义。这些对象通过<em>proto</em>建立了一个原型链。</li>\n</ul>\n<h3 id=\"构造函数-原型\"><a href=\"#构造函数-原型\" class=\"headerlink\" title=\"构造函数 原型\"></a>构造函数 原型</h3><ul>\n<li>将原型对象放入 Object.prototype 中，每次 new 新对象时，js会自动建立原型链。</li>\n</ul>\n<pre><code class=\"javascript\">  function Student(name){\n    this.name = name;\n  }\n  Student.prototype = {\n    say: function(){\n      console.log(&quot;My name is&quot; + this.name);\n    }\n  }\n  //创建新对象，js自动构建原型链继承 say 方法\n  var xiaoming = new Student(&quot;xiaoming&quot;);\n  var laowang = new Student(&quot;laowang&quot;);\n\n  xiaoming.say();\n  laowang.say();\n</code></pre>\n<h3 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h3><pre><code class=\"javascript\">  class Student{\n    constructor(name){\n      this.name = name;\n    }\n    say(){\n      console.log(&quot;My name is&quot; + this.name);\n    }\n  }\n\n  var xiaoming = new Student(&quot;xiaoming&quot;);\n  xiaoming.say();\n</code></pre>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>  ​</p>\n<h2 id=\"AJAX-异步调用\"><a href=\"#AJAX-异步调用\" class=\"headerlink\" title=\"AJAX 异步调用\"></a>AJAX 异步调用</h2><ul>\n<li>异步的 JavaScript 和 XML</li>\n<li>AJAX 是一种用于创建快速动态网页的技术。</li>\n<li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li>\n<li>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</li>\n<li>例如服务器返回下面的 XML 数据：</li>\n</ul>\n<pre><code class=\"xml\">&lt;book&gt;\n    &lt;isbn&gt;978-7-229-03093-3&lt;/isbn&gt;\n    &lt;name&gt;三体&lt;/name&gt;\n    &lt;author&gt;刘慈欣&lt;/author&gt;\n   &lt;introduction&gt;中国最牛的科幻书&lt;/introduction&gt;\n   &lt;price&gt;38.00&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\n<ul>\n<li>上面的数据中，标签占去了大部分，数据比较臃肿。</li>\n</ul>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><ul>\n<li>JavaScript 对象表示法（JavaScript Object Notation）。</li>\n<li>JSON 是存储和交换文本信息的语法。类似 XML。</li>\n<li>JSON 比 XML 更小、更快，更易解析。</li>\n<li>JSON.parse(); 解析一个JSON字符串，可选地转换生成的值及其属性，并返回值。</li>\n<li>JSON.stringify(); 返回与指定值相对应的一个JSON字符串，可选地仅包含某些属性或以用户定义的方式替换属性值。</li>\n</ul>\n<pre><code class=\"javascript\">//这种结构完全可以表达上面的xml 内容\nvar book = {\n&quot;isbn&quot;: &quot;978-7-229-03093-3&quot;,\n&quot;name&quot;: &quot;三体&quot;,\n &quot;author&quot;: &quot;刘慈欣&quot;,\n&quot;introduction&quot;: &quot;中国最牛的科幻书&quot;,\n&quot;price&quot;: &quot;38.00&quot;\n }\n//JS语法还支持数组，可以表达多个对象\nvar books = [\n {\n&quot;isbn&quot;: &quot;978-7-229-03093-3&quot;,\n&quot;name&quot;: &quot;三体&quot;,\n&quot;author&quot;: &quot;刘慈欣&quot;,\n&quot;introduction&quot;: &quot;中国最牛的科幻书&quot;,\n&quot;price&quot;: &quot;38.00&quot;\n },\n {\n&quot;isbn&quot;: &quot;978-7-229-03094-1&quot;,\n&quot;name&quot;: &quot;我是一个线程&quot;,\n&quot;author&quot;: &quot;刘欣&quot;,\n&quot;introduction&quot;: &quot;一个线程的自述&quot;,\n&quot;price&quot;: &quot;0.0&quot;\n }\n</code></pre>\n<ul>\n<li>books[0].name –&gt;返回“三体”</li>\n<li>books[1].author –&gt;返回“刘欣”</li>\n</ul>\n"},{"title":"vue + firebase 模拟实现地址选择四级联动","mathjax":true,"abbrlink":"90b768b0","date":"2017-11-18T03:26:21.000Z","_content":"\n## vue + firebase 模拟实现地址选择四级联动\n\n使用 vue + firebase 完成一个简单的地址选择器, 使用 webpack 打包生成.\n\n将地址数据导入到 firebase 实时数据库中, 在应用中通过 firebase + vuefire 获得数据, 再使用 vue 将数据渲染到页面上.\n\n* 安装 firebase 和 vuefire:\n`npm i -S firebase vuefire`\n\n* 在入口文件中注册使用 vuefire 和 firebase:\n```JavaScript\n// main.js\nimport VueFire from 'vuefire';\nimport Firebase from 'firebase';\n\nVue.use(VueFire);\n\n```\n在 vue 组件中注册使用 firebase\n```javascript\nimport Firebase from 'firebase';\n\nconst config = {\n    apiKey: 'AIzaSyBSHeqABc_pmcXwBgP4GhIvO3DH9eJtZlo',\n    authDomain: 'roojay123.firebaseapp.com',\n    databaseURL: 'https://roojay123.firebaseio.com',\n    projectId: 'roojay123',\n    storageBucket: 'roojay123.appspot.com',\n    messagingSenderId: '691637156012'\n};\n// 注册 app\nFirebase.initializeApp(config);\n// 获取数据库引用\nconst db = Firebase.database();\n```\n通过 `.ref('/')` 取得位于根目录下的地址数据数组:\n```JavaScript\nfirebase: {\n        data: db.ref('/')\n    },\n```\n使用 vue `v-for` 指令, 将数组数据渲染到页面列表中.\n\n为列表绑定一个 click 方法, 用于获取点击元素的 index, 在根据这个 index 的值渲染后面其他列表的数据.\n\n![gif](https://i.loli.net/2017/11/18/5a0f0ff5c6cdb.gif)\n\n查看:\n\n`$ npm i`\n\n`$ npm run dev `\n\n[Github Demo 地址](https://github.com/roojay520/vue-firebase)","source":"_posts/vue + firebase 模拟实现地址选择四级联动.md","raw":"---\ntitle: vue + firebase 模拟实现地址选择四级联动\nmathjax: true\nabbrlink: 90b768b0\ntags:\n  - Vue\n  - Firebase\ndate: 2017-11-18 11:26:21\n---\n\n## vue + firebase 模拟实现地址选择四级联动\n\n使用 vue + firebase 完成一个简单的地址选择器, 使用 webpack 打包生成.\n\n将地址数据导入到 firebase 实时数据库中, 在应用中通过 firebase + vuefire 获得数据, 再使用 vue 将数据渲染到页面上.\n\n* 安装 firebase 和 vuefire:\n`npm i -S firebase vuefire`\n\n* 在入口文件中注册使用 vuefire 和 firebase:\n```JavaScript\n// main.js\nimport VueFire from 'vuefire';\nimport Firebase from 'firebase';\n\nVue.use(VueFire);\n\n```\n在 vue 组件中注册使用 firebase\n```javascript\nimport Firebase from 'firebase';\n\nconst config = {\n    apiKey: 'AIzaSyBSHeqABc_pmcXwBgP4GhIvO3DH9eJtZlo',\n    authDomain: 'roojay123.firebaseapp.com',\n    databaseURL: 'https://roojay123.firebaseio.com',\n    projectId: 'roojay123',\n    storageBucket: 'roojay123.appspot.com',\n    messagingSenderId: '691637156012'\n};\n// 注册 app\nFirebase.initializeApp(config);\n// 获取数据库引用\nconst db = Firebase.database();\n```\n通过 `.ref('/')` 取得位于根目录下的地址数据数组:\n```JavaScript\nfirebase: {\n        data: db.ref('/')\n    },\n```\n使用 vue `v-for` 指令, 将数组数据渲染到页面列表中.\n\n为列表绑定一个 click 方法, 用于获取点击元素的 index, 在根据这个 index 的值渲染后面其他列表的数据.\n\n![gif](https://i.loli.net/2017/11/18/5a0f0ff5c6cdb.gif)\n\n查看:\n\n`$ npm i`\n\n`$ npm run dev `\n\n[Github Demo 地址](https://github.com/roojay520/vue-firebase)","slug":"vue + firebase 模拟实现地址选择四级联动","published":1,"updated":"2017-11-30T11:19:14.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xk0002kdfbxhjn9824v","content":"<h2 id=\"vue-firebase-模拟实现地址选择四级联动\"><a href=\"#vue-firebase-模拟实现地址选择四级联动\" class=\"headerlink\" title=\"vue + firebase 模拟实现地址选择四级联动\"></a>vue + firebase 模拟实现地址选择四级联动</h2><p>使用 vue + firebase 完成一个简单的地址选择器, 使用 webpack 打包生成.</p>\n<p>将地址数据导入到 firebase 实时数据库中, 在应用中通过 firebase + vuefire 获得数据, 再使用 vue 将数据渲染到页面上.</p>\n<ul>\n<li><p>安装 firebase 和 vuefire:<br><code>npm i -S firebase vuefire</code></p>\n</li>\n<li><p>在入口文件中注册使用 vuefire 和 firebase:<br>```JavaScript<br>// main.js<br>import VueFire from ‘vuefire’;<br>import Firebase from ‘firebase’;</p>\n</li>\n</ul>\n<p>Vue.use(VueFire);</p>\n<pre><code>在 vue 组件中注册使用 firebase\n```javascript\nimport Firebase from &#39;firebase&#39;;\n\nconst config = {\n    apiKey: &#39;AIzaSyBSHeqABc_pmcXwBgP4GhIvO3DH9eJtZlo&#39;,\n    authDomain: &#39;roojay123.firebaseapp.com&#39;,\n    databaseURL: &#39;https://roojay123.firebaseio.com&#39;,\n    projectId: &#39;roojay123&#39;,\n    storageBucket: &#39;roojay123.appspot.com&#39;,\n    messagingSenderId: &#39;691637156012&#39;\n};\n// 注册 app\nFirebase.initializeApp(config);\n// 获取数据库引用\nconst db = Firebase.database();\n</code></pre><p>通过 <code>.ref(&#39;/&#39;)</code> 取得位于根目录下的地址数据数组:</p>\n<pre><code class=\"JavaScript\">firebase: {\n        data: db.ref(&#39;/&#39;)\n    },\n</code></pre>\n<p>使用 vue <code>v-for</code> 指令, 将数组数据渲染到页面列表中.</p>\n<p>为列表绑定一个 click 方法, 用于获取点击元素的 index, 在根据这个 index 的值渲染后面其他列表的数据.</p>\n<p><img src=\"https://i.loli.net/2017/11/18/5a0f0ff5c6cdb.gif\" alt=\"gif\"></p>\n<p>查看:</p>\n<p><code>$ npm i</code></p>\n<p><code>$ npm run dev</code></p>\n<p><a href=\"https://github.com/roojay520/vue-firebase\" target=\"_blank\" rel=\"external\">Github Demo 地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"vue-firebase-模拟实现地址选择四级联动\"><a href=\"#vue-firebase-模拟实现地址选择四级联动\" class=\"headerlink\" title=\"vue + firebase 模拟实现地址选择四级联动\"></a>vue + firebase 模拟实现地址选择四级联动</h2><p>使用 vue + firebase 完成一个简单的地址选择器, 使用 webpack 打包生成.</p>\n<p>将地址数据导入到 firebase 实时数据库中, 在应用中通过 firebase + vuefire 获得数据, 再使用 vue 将数据渲染到页面上.</p>\n<ul>\n<li><p>安装 firebase 和 vuefire:<br><code>npm i -S firebase vuefire</code></p>\n</li>\n<li><p>在入口文件中注册使用 vuefire 和 firebase:<br>```JavaScript<br>// main.js<br>import VueFire from ‘vuefire’;<br>import Firebase from ‘firebase’;</p>\n</li>\n</ul>\n<p>Vue.use(VueFire);</p>\n<pre><code>在 vue 组件中注册使用 firebase\n```javascript\nimport Firebase from &#39;firebase&#39;;\n\nconst config = {\n    apiKey: &#39;AIzaSyBSHeqABc_pmcXwBgP4GhIvO3DH9eJtZlo&#39;,\n    authDomain: &#39;roojay123.firebaseapp.com&#39;,\n    databaseURL: &#39;https://roojay123.firebaseio.com&#39;,\n    projectId: &#39;roojay123&#39;,\n    storageBucket: &#39;roojay123.appspot.com&#39;,\n    messagingSenderId: &#39;691637156012&#39;\n};\n// 注册 app\nFirebase.initializeApp(config);\n// 获取数据库引用\nconst db = Firebase.database();\n</code></pre><p>通过 <code>.ref(&#39;/&#39;)</code> 取得位于根目录下的地址数据数组:</p>\n<pre><code class=\"JavaScript\">firebase: {\n        data: db.ref(&#39;/&#39;)\n    },\n</code></pre>\n<p>使用 vue <code>v-for</code> 指令, 将数组数据渲染到页面列表中.</p>\n<p>为列表绑定一个 click 方法, 用于获取点击元素的 index, 在根据这个 index 的值渲染后面其他列表的数据.</p>\n<p><img src=\"https://i.loli.net/2017/11/18/5a0f0ff5c6cdb.gif\" alt=\"gif\"></p>\n<p>查看:</p>\n<p><code>$ npm i</code></p>\n<p><code>$ npm run dev</code></p>\n<p><a href=\"https://github.com/roojay520/vue-firebase\" target=\"_blank\" rel=\"external\">Github Demo 地址</a></p>\n"},{"title":"js术语中英对照表","abbrlink":"6ad0123c","data":"2017/9/16","_content":"## 编译相关\n\n* compile 编译\n* tokenizing 分词\n* lexing 词法分析\n* toekn 词法单元\n* parsing 解析/语法分析\n* Abstract Syntax Tree(AST) 抽象语法树\n* raw code 代码生成\n* LHS(Left-hand Side) 赋值操作左侧，进行赋值操作\n* RHS(Right-hand Side) 赋值操作非左侧，进行取值操作\n\n## 异常\n\n* ReferenceError 引用错误\n* TypeError 类型错误\n\n## 函数\n\nImmediately Invoked Function Expression(IIFE) 立即执行函数表达式\nTemporal dead zone(TDZ) 暂时性死区\nExecution context 执行上下文\n","source":"_posts/中英术语对照表.md","raw":"---\ntitle: js术语中英对照表\ntags: JavaScript\ncategories: JavaScript\nabbrlink: 6ad0123c\ndata: 2017/9/16\n---\n## 编译相关\n\n* compile 编译\n* tokenizing 分词\n* lexing 词法分析\n* toekn 词法单元\n* parsing 解析/语法分析\n* Abstract Syntax Tree(AST) 抽象语法树\n* raw code 代码生成\n* LHS(Left-hand Side) 赋值操作左侧，进行赋值操作\n* RHS(Right-hand Side) 赋值操作非左侧，进行取值操作\n\n## 异常\n\n* ReferenceError 引用错误\n* TypeError 类型错误\n\n## 函数\n\nImmediately Invoked Function Expression(IIFE) 立即执行函数表达式\nTemporal dead zone(TDZ) 暂时性死区\nExecution context 执行上下文\n","slug":"中英术语对照表","published":1,"date":"2017-11-12T02:26:58.693Z","updated":"2017-11-12T02:26:58.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xk3002ndfbxw2rv4vnu","content":"<h2 id=\"编译相关\"><a href=\"#编译相关\" class=\"headerlink\" title=\"编译相关\"></a>编译相关</h2><ul>\n<li>compile 编译</li>\n<li>tokenizing 分词</li>\n<li>lexing 词法分析</li>\n<li>toekn 词法单元</li>\n<li>parsing 解析/语法分析</li>\n<li>Abstract Syntax Tree(AST) 抽象语法树</li>\n<li>raw code 代码生成</li>\n<li>LHS(Left-hand Side) 赋值操作左侧，进行赋值操作</li>\n<li>RHS(Right-hand Side) 赋值操作非左侧，进行取值操作</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ul>\n<li>ReferenceError 引用错误</li>\n<li>TypeError 类型错误</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>Immediately Invoked Function Expression(IIFE) 立即执行函数表达式<br>Temporal dead zone(TDZ) 暂时性死区<br>Execution context 执行上下文</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"编译相关\"><a href=\"#编译相关\" class=\"headerlink\" title=\"编译相关\"></a>编译相关</h2><ul>\n<li>compile 编译</li>\n<li>tokenizing 分词</li>\n<li>lexing 词法分析</li>\n<li>toekn 词法单元</li>\n<li>parsing 解析/语法分析</li>\n<li>Abstract Syntax Tree(AST) 抽象语法树</li>\n<li>raw code 代码生成</li>\n<li>LHS(Left-hand Side) 赋值操作左侧，进行赋值操作</li>\n<li>RHS(Right-hand Side) 赋值操作非左侧，进行取值操作</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><ul>\n<li>ReferenceError 引用错误</li>\n<li>TypeError 类型错误</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>Immediately Invoked Function Expression(IIFE) 立即执行函数表达式<br>Temporal dead zone(TDZ) 暂时性死区<br>Execution context 执行上下文</p>\n"},{"title":"webpack 基础使用","mathjax":true,"abbrlink":"b4ba32f9","date":"2017-11-17T12:28:23.000Z","_content":"\n> Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。\n\n### 模块\n\n#### CommonJS\nNode.js 遵循 CommonJS 规范, 模块通过 `exports` 或者 `module.exports` 导出需要暴露的接口, 使用 `require` 方法同步加载所要依赖的其它模块.\n\n```javascript\n// bar.js 导出文件\nexports.addSum = (a, b) => a + b;\n// 或者\nmodule.exports = function(a, b){\n    return a + b;\n}\n\n// foo.js 引入文件\nconst addSum = require('bar');\n// 或者 const addSum = require('./bar.js');\nconst result = addSum(2, 5); // 7\n\n```\n\n#### ES6 模块\nES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西(require 是运行时加载模块)。ES6 通过过 `export` 命令显式指定输出的代码，再通过 `import` 命令输入。\n\n\n```javascript\n// bar.js\nconst sumAdd = (x, y) => x + y;\nconst sumMinus = (a, b) => a - b;\n// 导出两个方法\nexport {sumAdd, sumMinus};\n\n// foo.js\n// 只加载 sumAdd 方法\nimport {sumAdd} from './bar';\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 报错\n\n// 加载两个方法\nimport {sumAdd,sumMinus } from './bar';\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n\n// 加载所有模块\nimport './bar';\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n```\n`export default` 用于导出匿名函数.\n`import()` 类似于 Node 的 `require `方法，区别主要是前者是异步加载，后者是同步加载.\n`import()`返回一个 Promise 对象.\n\n### webpack\n\n> Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。\n\n![webpack](https://ooo.0o0.ooo/2017/11/14/5a0ab0cbd7554.png)\n\n#### Loader\nWebpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。任何资源都可以成为 Webpack 可以处理的模块。\n\n#### 插件\n plugin 和 loader 的区别是, loader 是在 import 时根据不同的文件名, 匹配不同的 loader对这个文件做处理,而 plugin 关注的不是文件的格式, 而是在编译的各个阶段, 会触发不同的事件,让你可以干预每个编译阶段.\n\n#### 配置文件\n\n```bash\n# 初始化一个项目,生成 package.json 文件\n$ npm init\n```\n更改 package.json 文件:\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Webpack setting.\",\n  \"scripts\": {\n    \"dev\": \"set type=dev&webpack&webpack-dev-server --open\",\n    \"build\": \"set type=build&webpack\"\n  },\n  \"keywords\": [\n    \"webpack\"\n  ],\n  \"author\": \"roojay <roojay520@gmail.com>\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/roojay520/webpack.git\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"autoprefixer\": \"^7.1.6\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"copy-webpack-plugin\": \"^4.2.0\",\n    \"css-loader\": \"^0.28.7\",\n    \"extract-text-webpack-plugin\": \"^3.0.2\",\n    \"file-loader\": \"^1.1.5\",\n    \"glob\": \"^7.1.2\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"html-withimg-loader\": \"^0.1.16\",\n    \"node-sass\": \"^4.5.3\",\n    \"postcss-loader\": \"^2.0.8\",\n    \"purify-css\": \"^1.2.5\",\n    \"purifycss-webpack\": \"^0.7.0\",\n    \"sass-loader\": \"^6.0.6\",\n    \"style-loader\": \"^0.19.0\",\n    \"uglifyjs-webpack-plugin\": \"^1.0.1\",\n    \"url-loader\": \"^0.6.2\",\n    \"webpack\": \"^3.8.1\",\n    \"webpack-dev-server\": \"^2.9.3\"\n  },\n  \"dependencies\": {\n    \"normalize.css\": \"^7.0.0\"\n  }\n}\n```\n设置 webpack.config 文件\n```js\n// 路径支持\nconst path = require('path');\n// node glob 对象\nconst glob = require('glob');\n// 引 入webpack 内部文件\nconst webpack = require('webpack');\n// css 分离导出插件\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n// js 压缩\nconst UglifyPlugin = require('uglifyjs-webpack-plugin');\n// html 插入\nconst HtmlPlugin = require('html-webpack-plugin');\n// 去掉未使用的 CSS,减少 CSS 冗余\nconst PurifyCss = require('purifycss-webpack');\n// 无需编译打包的静态资源转移\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n// 公共路径配置\nlet publicPath;\nprocess.env.type === 'build' ? (publicPath = 'http://cdn.roojay.com/') : (publicPath = 'http://127.0.0.1:4399/');\n\nmodule.exports = {\n    // 开发调试设置\n    devtool: 'eval-source-map',\n    // 入口文件\n    entry: {\n        // js 入口文件\n        app: `${__dirname}/src/main.js`\n        // 第三方库抽离\n        // jquery: 'jquery',\n        // vue: 'vue'\n    },\n    // 出口文件\n    output: {\n        // 打包文件路径\n        path: `${__dirname}/dist/`,\n        filename: 'js/[name].[hash:6].js',\n        publicPath: website.publicPath\n    },\n    // 模块\n    module: {\n        // 编译规则\n        rules: [\n             // 配置 babel\n            {\n                test: /\\.js$/,\n                use: {\n                    loader: 'babel-loader',\n                // 匹配正则表达式排除\n                exclude: /node_modules/\n            },\n            // 配置sass编译规则\n            {\n                // 匹配处理文件的扩展名的正则表达式\n                test: /\\.(css|scss)$/,\n                // 使用模块的名称\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: [{\n                        loader: 'css-loader',\n                        options: {\n                            minimize: true,\n                            sourceMap: true,\n                            modules: true,\n                            importLoaders: 1\n                        }\n                    },\n                        // 前缀自动插入\n                    {\n                        loader: 'postcss-loader'\n                    },\n                        // scss 转换\n                    {\n                        loader: 'sass-loader'\n                    }\n                    ]\n                })\n            },\n            // 图片字体处理\n            {\n                test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 将小于 10KB 的图片转换为成 Base64 的格式，写入JS。\n                        limit: 10240,\n                        outputPath: 'images/'\n                    }\n                }\n            },\n            // html 文件中引入 <img> 标签\n            {\n                test: /\\.(htm|html)$/i,\n                loader: 'html-withimg-loader'\n            }\n        ]\n    },\n    // 插件配置\n    plugins: [\n        // 开头文件插入\n        new webpack.BannerPlugin('Created by @Roojay.')\n        // 打包生成 html\n        new HtmlPlugin({\n            // 开启 html 压缩\n            minify: {\n                // 去掉属性双引号\n                removeAttributeQuotes: true\n            },\n            // 避免缓存JS\n            hash: true,\n            // html 打包模板文件路径\n            template: './src/index.html'\n        }),\n        // css 打包分离\n        new ExtractTextPlugin('./css/[name].[hash:6].css'),\n        // 去掉未使用的 css\n        // 如果存在使用 js 更改元素类名实现 css 样式,不要启用这个插件 启用 css-loader 里面的压缩\n        // new PurifyCss({\n        //     // 配置解析规则的路径(绝对路径)\n        //     paths: glob.sync(path.join(__dirname, 'src/*.html')),\n        //     // css 空格压缩\n        //     minimize: true\n        // }),\n        // js压缩\n        new UglifyPlugin({\n            uglifyOptions: {\n                ie8: false,\n                output: {\n                    // 去掉注释\n                    comments: false,\n                    // 压缩掉空格\n                    beautify: false\n                },\n                mangle: {\n                    keep_fnames: true\n                },\n                compress: {\n                    drop_console: true\n                }\n            }\n        }),\n        // 无需编译的静态资源转移\n        new CopyWebpackPlugin([{\n            from: `${__dirname}/src/docs`,\n            to: './docs'\n        }]),\n        // 启用热加载\n        new webpack.HotModuleReplacementPlugin(),\n        // 第三方类库引入\n        // new webpack.ProvidePlugin({\n        // $: \"jquery\",\n        // Vue: \"vue\"\n        // }),\n        // 第三方库打包抽离\n        // new webpack.optimize.CommonsChunkPlugin({\n        //     // 入口引入时的名字\n        //     name: ['vue', 'jquery'],\n        //     // 打包文件的路径\n        //     filename: 'static/js/[name].min.js',\n        //     // 最小打包模块\n        //     minChunks: 3\n        // }),\n    ],\n    // watch 配置\n    watchOptions: {\n        // 检测文件修改时间,单位(毫秒)\n        poll: 1000,\n        // 防止误操作重复打包,半秒内重复保存,不执行打包操作\n        aggregeateTimeout: 500,\n        ignore: /node_modules/\n    },\n    // 配置开发时用的服务器\n    devServer: {\n        contentBase: path.resolve(__dirname, 'dist'),\n        host: '127.0.0.1',\n        // 服务端压缩开启\n        compress: true,\n        port: 4399,\n        historyApiFallback: true\n    }\n};\n\n```","source":"_posts/webpack 基础使用.md","raw":"---\ntitle: webpack 基础使用\nmathjax: true\nabbrlink: b4ba32f9\ntags: Webpack\ndate: 2017-11-17 20:28:23\n---\n\n> Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。\n\n### 模块\n\n#### CommonJS\nNode.js 遵循 CommonJS 规范, 模块通过 `exports` 或者 `module.exports` 导出需要暴露的接口, 使用 `require` 方法同步加载所要依赖的其它模块.\n\n```javascript\n// bar.js 导出文件\nexports.addSum = (a, b) => a + b;\n// 或者\nmodule.exports = function(a, b){\n    return a + b;\n}\n\n// foo.js 引入文件\nconst addSum = require('bar');\n// 或者 const addSum = require('./bar.js');\nconst result = addSum(2, 5); // 7\n\n```\n\n#### ES6 模块\nES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西(require 是运行时加载模块)。ES6 通过过 `export` 命令显式指定输出的代码，再通过 `import` 命令输入。\n\n\n```javascript\n// bar.js\nconst sumAdd = (x, y) => x + y;\nconst sumMinus = (a, b) => a - b;\n// 导出两个方法\nexport {sumAdd, sumMinus};\n\n// foo.js\n// 只加载 sumAdd 方法\nimport {sumAdd} from './bar';\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 报错\n\n// 加载两个方法\nimport {sumAdd,sumMinus } from './bar';\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n\n// 加载所有模块\nimport './bar';\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n```\n`export default` 用于导出匿名函数.\n`import()` 类似于 Node 的 `require `方法，区别主要是前者是异步加载，后者是同步加载.\n`import()`返回一个 Promise 对象.\n\n### webpack\n\n> Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。\n\n![webpack](https://ooo.0o0.ooo/2017/11/14/5a0ab0cbd7554.png)\n\n#### Loader\nWebpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。任何资源都可以成为 Webpack 可以处理的模块。\n\n#### 插件\n plugin 和 loader 的区别是, loader 是在 import 时根据不同的文件名, 匹配不同的 loader对这个文件做处理,而 plugin 关注的不是文件的格式, 而是在编译的各个阶段, 会触发不同的事件,让你可以干预每个编译阶段.\n\n#### 配置文件\n\n```bash\n# 初始化一个项目,生成 package.json 文件\n$ npm init\n```\n更改 package.json 文件:\n```json\n{\n  \"name\": \"webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Webpack setting.\",\n  \"scripts\": {\n    \"dev\": \"set type=dev&webpack&webpack-dev-server --open\",\n    \"build\": \"set type=build&webpack\"\n  },\n  \"keywords\": [\n    \"webpack\"\n  ],\n  \"author\": \"roojay <roojay520@gmail.com>\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/roojay520/webpack.git\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"autoprefixer\": \"^7.1.6\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"copy-webpack-plugin\": \"^4.2.0\",\n    \"css-loader\": \"^0.28.7\",\n    \"extract-text-webpack-plugin\": \"^3.0.2\",\n    \"file-loader\": \"^1.1.5\",\n    \"glob\": \"^7.1.2\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"html-withimg-loader\": \"^0.1.16\",\n    \"node-sass\": \"^4.5.3\",\n    \"postcss-loader\": \"^2.0.8\",\n    \"purify-css\": \"^1.2.5\",\n    \"purifycss-webpack\": \"^0.7.0\",\n    \"sass-loader\": \"^6.0.6\",\n    \"style-loader\": \"^0.19.0\",\n    \"uglifyjs-webpack-plugin\": \"^1.0.1\",\n    \"url-loader\": \"^0.6.2\",\n    \"webpack\": \"^3.8.1\",\n    \"webpack-dev-server\": \"^2.9.3\"\n  },\n  \"dependencies\": {\n    \"normalize.css\": \"^7.0.0\"\n  }\n}\n```\n设置 webpack.config 文件\n```js\n// 路径支持\nconst path = require('path');\n// node glob 对象\nconst glob = require('glob');\n// 引 入webpack 内部文件\nconst webpack = require('webpack');\n// css 分离导出插件\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n// js 压缩\nconst UglifyPlugin = require('uglifyjs-webpack-plugin');\n// html 插入\nconst HtmlPlugin = require('html-webpack-plugin');\n// 去掉未使用的 CSS,减少 CSS 冗余\nconst PurifyCss = require('purifycss-webpack');\n// 无需编译打包的静态资源转移\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\n// 公共路径配置\nlet publicPath;\nprocess.env.type === 'build' ? (publicPath = 'http://cdn.roojay.com/') : (publicPath = 'http://127.0.0.1:4399/');\n\nmodule.exports = {\n    // 开发调试设置\n    devtool: 'eval-source-map',\n    // 入口文件\n    entry: {\n        // js 入口文件\n        app: `${__dirname}/src/main.js`\n        // 第三方库抽离\n        // jquery: 'jquery',\n        // vue: 'vue'\n    },\n    // 出口文件\n    output: {\n        // 打包文件路径\n        path: `${__dirname}/dist/`,\n        filename: 'js/[name].[hash:6].js',\n        publicPath: website.publicPath\n    },\n    // 模块\n    module: {\n        // 编译规则\n        rules: [\n             // 配置 babel\n            {\n                test: /\\.js$/,\n                use: {\n                    loader: 'babel-loader',\n                // 匹配正则表达式排除\n                exclude: /node_modules/\n            },\n            // 配置sass编译规则\n            {\n                // 匹配处理文件的扩展名的正则表达式\n                test: /\\.(css|scss)$/,\n                // 使用模块的名称\n                use: ExtractTextPlugin.extract({\n                    fallback: 'style-loader',\n                    use: [{\n                        loader: 'css-loader',\n                        options: {\n                            minimize: true,\n                            sourceMap: true,\n                            modules: true,\n                            importLoaders: 1\n                        }\n                    },\n                        // 前缀自动插入\n                    {\n                        loader: 'postcss-loader'\n                    },\n                        // scss 转换\n                    {\n                        loader: 'sass-loader'\n                    }\n                    ]\n                })\n            },\n            // 图片字体处理\n            {\n                test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 将小于 10KB 的图片转换为成 Base64 的格式，写入JS。\n                        limit: 10240,\n                        outputPath: 'images/'\n                    }\n                }\n            },\n            // html 文件中引入 <img> 标签\n            {\n                test: /\\.(htm|html)$/i,\n                loader: 'html-withimg-loader'\n            }\n        ]\n    },\n    // 插件配置\n    plugins: [\n        // 开头文件插入\n        new webpack.BannerPlugin('Created by @Roojay.')\n        // 打包生成 html\n        new HtmlPlugin({\n            // 开启 html 压缩\n            minify: {\n                // 去掉属性双引号\n                removeAttributeQuotes: true\n            },\n            // 避免缓存JS\n            hash: true,\n            // html 打包模板文件路径\n            template: './src/index.html'\n        }),\n        // css 打包分离\n        new ExtractTextPlugin('./css/[name].[hash:6].css'),\n        // 去掉未使用的 css\n        // 如果存在使用 js 更改元素类名实现 css 样式,不要启用这个插件 启用 css-loader 里面的压缩\n        // new PurifyCss({\n        //     // 配置解析规则的路径(绝对路径)\n        //     paths: glob.sync(path.join(__dirname, 'src/*.html')),\n        //     // css 空格压缩\n        //     minimize: true\n        // }),\n        // js压缩\n        new UglifyPlugin({\n            uglifyOptions: {\n                ie8: false,\n                output: {\n                    // 去掉注释\n                    comments: false,\n                    // 压缩掉空格\n                    beautify: false\n                },\n                mangle: {\n                    keep_fnames: true\n                },\n                compress: {\n                    drop_console: true\n                }\n            }\n        }),\n        // 无需编译的静态资源转移\n        new CopyWebpackPlugin([{\n            from: `${__dirname}/src/docs`,\n            to: './docs'\n        }]),\n        // 启用热加载\n        new webpack.HotModuleReplacementPlugin(),\n        // 第三方类库引入\n        // new webpack.ProvidePlugin({\n        // $: \"jquery\",\n        // Vue: \"vue\"\n        // }),\n        // 第三方库打包抽离\n        // new webpack.optimize.CommonsChunkPlugin({\n        //     // 入口引入时的名字\n        //     name: ['vue', 'jquery'],\n        //     // 打包文件的路径\n        //     filename: 'static/js/[name].min.js',\n        //     // 最小打包模块\n        //     minChunks: 3\n        // }),\n    ],\n    // watch 配置\n    watchOptions: {\n        // 检测文件修改时间,单位(毫秒)\n        poll: 1000,\n        // 防止误操作重复打包,半秒内重复保存,不执行打包操作\n        aggregeateTimeout: 500,\n        ignore: /node_modules/\n    },\n    // 配置开发时用的服务器\n    devServer: {\n        contentBase: path.resolve(__dirname, 'dist'),\n        host: '127.0.0.1',\n        // 服务端压缩开启\n        compress: true,\n        port: 4399,\n        historyApiFallback: true\n    }\n};\n\n```","slug":"webpack 基础使用","published":1,"updated":"2017-11-17T12:56:07.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xk8002rdfbxrvvuw4i4","content":"<blockquote>\n<p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p>\n</blockquote>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><h4 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h4><p>Node.js 遵循 CommonJS 规范, 模块通过 <code>exports</code> 或者 <code>module.exports</code> 导出需要暴露的接口, 使用 <code>require</code> 方法同步加载所要依赖的其它模块.</p>\n<pre><code class=\"javascript\">// bar.js 导出文件\nexports.addSum = (a, b) =&gt; a + b;\n// 或者\nmodule.exports = function(a, b){\n    return a + b;\n}\n\n// foo.js 引入文件\nconst addSum = require(&#39;bar&#39;);\n// 或者 const addSum = require(&#39;./bar.js&#39;);\nconst result = addSum(2, 5); // 7\n</code></pre>\n<h4 id=\"ES6-模块\"><a href=\"#ES6-模块\" class=\"headerlink\" title=\"ES6 模块\"></a>ES6 模块</h4><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西(require 是运行时加载模块)。ES6 通过过 <code>export</code> 命令显式指定输出的代码，再通过 <code>import</code> 命令输入。</p>\n<pre><code class=\"javascript\">// bar.js\nconst sumAdd = (x, y) =&gt; x + y;\nconst sumMinus = (a, b) =&gt; a - b;\n// 导出两个方法\nexport {sumAdd, sumMinus};\n\n// foo.js\n// 只加载 sumAdd 方法\nimport {sumAdd} from &#39;./bar&#39;;\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 报错\n\n// 加载两个方法\nimport {sumAdd,sumMinus } from &#39;./bar&#39;;\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n\n// 加载所有模块\nimport &#39;./bar&#39;;\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n</code></pre>\n<p><code>export default</code> 用于导出匿名函数.<br><code>import()</code> 类似于 Node 的 <code>require</code>方法，区别主要是前者是异步加载，后者是同步加载.<br><code>import()</code>返回一个 Promise 对象.</p>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><blockquote>\n<p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p>\n</blockquote>\n<p><img src=\"https://ooo.0o0.ooo/2017/11/14/5a0ab0cbd7554.png\" alt=\"webpack\"></p>\n<h4 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h4><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。任何资源都可以成为 Webpack 可以处理的模块。</p>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p> plugin 和 loader 的区别是, loader 是在 import 时根据不同的文件名, 匹配不同的 loader对这个文件做处理,而 plugin 关注的不是文件的格式, 而是在编译的各个阶段, 会触发不同的事件,让你可以干预每个编译阶段.</p>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><pre><code class=\"bash\"># 初始化一个项目,生成 package.json 文件\n$ npm init\n</code></pre>\n<p>更改 package.json 文件:</p>\n<pre><code class=\"json\">{\n  &quot;name&quot;: &quot;webpack&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Webpack setting.&quot;,\n  &quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;set type=dev&amp;webpack&amp;webpack-dev-server --open&quot;,\n    &quot;build&quot;: &quot;set type=build&amp;webpack&quot;\n  },\n  &quot;keywords&quot;: [\n    &quot;webpack&quot;\n  ],\n  &quot;author&quot;: &quot;roojay &lt;roojay520@gmail.com&gt;&quot;,\n  &quot;repository&quot;: {\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;https://github.com/roojay520/webpack.git&quot;\n  },\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;autoprefixer&quot;: &quot;^7.1.6&quot;,\n    &quot;babel-core&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-loader&quot;: &quot;^7.1.2&quot;,\n    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,\n    &quot;copy-webpack-plugin&quot;: &quot;^4.2.0&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.7&quot;,\n    &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.2&quot;,\n    &quot;file-loader&quot;: &quot;^1.1.5&quot;,\n    &quot;glob&quot;: &quot;^7.1.2&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,\n    &quot;html-withimg-loader&quot;: &quot;^0.1.16&quot;,\n    &quot;node-sass&quot;: &quot;^4.5.3&quot;,\n    &quot;postcss-loader&quot;: &quot;^2.0.8&quot;,\n    &quot;purify-css&quot;: &quot;^1.2.5&quot;,\n    &quot;purifycss-webpack&quot;: &quot;^0.7.0&quot;,\n    &quot;sass-loader&quot;: &quot;^6.0.6&quot;,\n    &quot;style-loader&quot;: &quot;^0.19.0&quot;,\n    &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.0.1&quot;,\n    &quot;url-loader&quot;: &quot;^0.6.2&quot;,\n    &quot;webpack&quot;: &quot;^3.8.1&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.9.3&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;normalize.css&quot;: &quot;^7.0.0&quot;\n  }\n}\n</code></pre>\n<p>设置 webpack.config 文件</p>\n<pre><code class=\"js\">// 路径支持\nconst path = require(&#39;path&#39;);\n// node glob 对象\nconst glob = require(&#39;glob&#39;);\n// 引 入webpack 内部文件\nconst webpack = require(&#39;webpack&#39;);\n// css 分离导出插件\nconst ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;);\n// js 压缩\nconst UglifyPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);\n// html 插入\nconst HtmlPlugin = require(&#39;html-webpack-plugin&#39;);\n// 去掉未使用的 CSS,减少 CSS 冗余\nconst PurifyCss = require(&#39;purifycss-webpack&#39;);\n// 无需编译打包的静态资源转移\nconst CopyWebpackPlugin = require(&#39;copy-webpack-plugin&#39;);\n// 公共路径配置\nlet publicPath;\nprocess.env.type === &#39;build&#39; ? (publicPath = &#39;http://cdn.roojay.com/&#39;) : (publicPath = &#39;http://127.0.0.1:4399/&#39;);\n\nmodule.exports = {\n    // 开发调试设置\n    devtool: &#39;eval-source-map&#39;,\n    // 入口文件\n    entry: {\n        // js 入口文件\n        app: `${__dirname}/src/main.js`\n        // 第三方库抽离\n        // jquery: &#39;jquery&#39;,\n        // vue: &#39;vue&#39;\n    },\n    // 出口文件\n    output: {\n        // 打包文件路径\n        path: `${__dirname}/dist/`,\n        filename: &#39;js/[name].[hash:6].js&#39;,\n        publicPath: website.publicPath\n    },\n    // 模块\n    module: {\n        // 编译规则\n        rules: [\n             // 配置 babel\n            {\n                test: /\\.js$/,\n                use: {\n                    loader: &#39;babel-loader&#39;,\n                // 匹配正则表达式排除\n                exclude: /node_modules/\n            },\n            // 配置sass编译规则\n            {\n                // 匹配处理文件的扩展名的正则表达式\n                test: /\\.(css|scss)$/,\n                // 使用模块的名称\n                use: ExtractTextPlugin.extract({\n                    fallback: &#39;style-loader&#39;,\n                    use: [{\n                        loader: &#39;css-loader&#39;,\n                        options: {\n                            minimize: true,\n                            sourceMap: true,\n                            modules: true,\n                            importLoaders: 1\n                        }\n                    },\n                        // 前缀自动插入\n                    {\n                        loader: &#39;postcss-loader&#39;\n                    },\n                        // scss 转换\n                    {\n                        loader: &#39;sass-loader&#39;\n                    }\n                    ]\n                })\n            },\n            // 图片字体处理\n            {\n                test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\n                use: {\n                    loader: &#39;url-loader&#39;,\n                    options: {\n                        // 将小于 10KB 的图片转换为成 Base64 的格式，写入JS。\n                        limit: 10240,\n                        outputPath: &#39;images/&#39;\n                    }\n                }\n            },\n            // html 文件中引入 &lt;img&gt; 标签\n            {\n                test: /\\.(htm|html)$/i,\n                loader: &#39;html-withimg-loader&#39;\n            }\n        ]\n    },\n    // 插件配置\n    plugins: [\n        // 开头文件插入\n        new webpack.BannerPlugin(&#39;Created by @Roojay.&#39;)\n        // 打包生成 html\n        new HtmlPlugin({\n            // 开启 html 压缩\n            minify: {\n                // 去掉属性双引号\n                removeAttributeQuotes: true\n            },\n            // 避免缓存JS\n            hash: true,\n            // html 打包模板文件路径\n            template: &#39;./src/index.html&#39;\n        }),\n        // css 打包分离\n        new ExtractTextPlugin(&#39;./css/[name].[hash:6].css&#39;),\n        // 去掉未使用的 css\n        // 如果存在使用 js 更改元素类名实现 css 样式,不要启用这个插件 启用 css-loader 里面的压缩\n        // new PurifyCss({\n        //     // 配置解析规则的路径(绝对路径)\n        //     paths: glob.sync(path.join(__dirname, &#39;src/*.html&#39;)),\n        //     // css 空格压缩\n        //     minimize: true\n        // }),\n        // js压缩\n        new UglifyPlugin({\n            uglifyOptions: {\n                ie8: false,\n                output: {\n                    // 去掉注释\n                    comments: false,\n                    // 压缩掉空格\n                    beautify: false\n                },\n                mangle: {\n                    keep_fnames: true\n                },\n                compress: {\n                    drop_console: true\n                }\n            }\n        }),\n        // 无需编译的静态资源转移\n        new CopyWebpackPlugin([{\n            from: `${__dirname}/src/docs`,\n            to: &#39;./docs&#39;\n        }]),\n        // 启用热加载\n        new webpack.HotModuleReplacementPlugin(),\n        // 第三方类库引入\n        // new webpack.ProvidePlugin({\n        // $: &quot;jquery&quot;,\n        // Vue: &quot;vue&quot;\n        // }),\n        // 第三方库打包抽离\n        // new webpack.optimize.CommonsChunkPlugin({\n        //     // 入口引入时的名字\n        //     name: [&#39;vue&#39;, &#39;jquery&#39;],\n        //     // 打包文件的路径\n        //     filename: &#39;static/js/[name].min.js&#39;,\n        //     // 最小打包模块\n        //     minChunks: 3\n        // }),\n    ],\n    // watch 配置\n    watchOptions: {\n        // 检测文件修改时间,单位(毫秒)\n        poll: 1000,\n        // 防止误操作重复打包,半秒内重复保存,不执行打包操作\n        aggregeateTimeout: 500,\n        ignore: /node_modules/\n    },\n    // 配置开发时用的服务器\n    devServer: {\n        contentBase: path.resolve(__dirname, &#39;dist&#39;),\n        host: &#39;127.0.0.1&#39;,\n        // 服务端压缩开启\n        compress: true,\n        port: 4399,\n        historyApiFallback: true\n    }\n};\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p>\n</blockquote>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><h4 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h4><p>Node.js 遵循 CommonJS 规范, 模块通过 <code>exports</code> 或者 <code>module.exports</code> 导出需要暴露的接口, 使用 <code>require</code> 方法同步加载所要依赖的其它模块.</p>\n<pre><code class=\"javascript\">// bar.js 导出文件\nexports.addSum = (a, b) =&gt; a + b;\n// 或者\nmodule.exports = function(a, b){\n    return a + b;\n}\n\n// foo.js 引入文件\nconst addSum = require(&#39;bar&#39;);\n// 或者 const addSum = require(&#39;./bar.js&#39;);\nconst result = addSum(2, 5); // 7\n</code></pre>\n<h4 id=\"ES6-模块\"><a href=\"#ES6-模块\" class=\"headerlink\" title=\"ES6 模块\"></a>ES6 模块</h4><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西(require 是运行时加载模块)。ES6 通过过 <code>export</code> 命令显式指定输出的代码，再通过 <code>import</code> 命令输入。</p>\n<pre><code class=\"javascript\">// bar.js\nconst sumAdd = (x, y) =&gt; x + y;\nconst sumMinus = (a, b) =&gt; a - b;\n// 导出两个方法\nexport {sumAdd, sumMinus};\n\n// foo.js\n// 只加载 sumAdd 方法\nimport {sumAdd} from &#39;./bar&#39;;\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 报错\n\n// 加载两个方法\nimport {sumAdd,sumMinus } from &#39;./bar&#39;;\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n\n// 加载所有模块\nimport &#39;./bar&#39;;\nsumAdd(2, 3); // 5\nsumMinus(3, 2); // 1\n</code></pre>\n<p><code>export default</code> 用于导出匿名函数.<br><code>import()</code> 类似于 Node 的 <code>require</code>方法，区别主要是前者是异步加载，后者是同步加载.<br><code>import()</code>返回一个 Promise 对象.</p>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><blockquote>\n<p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p>\n</blockquote>\n<p><img src=\"https://ooo.0o0.ooo/2017/11/14/5a0ab0cbd7554.png\" alt=\"webpack\"></p>\n<h4 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h4><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。任何资源都可以成为 Webpack 可以处理的模块。</p>\n<h4 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h4><p> plugin 和 loader 的区别是, loader 是在 import 时根据不同的文件名, 匹配不同的 loader对这个文件做处理,而 plugin 关注的不是文件的格式, 而是在编译的各个阶段, 会触发不同的事件,让你可以干预每个编译阶段.</p>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><pre><code class=\"bash\"># 初始化一个项目,生成 package.json 文件\n$ npm init\n</code></pre>\n<p>更改 package.json 文件:</p>\n<pre><code class=\"json\">{\n  &quot;name&quot;: &quot;webpack&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Webpack setting.&quot;,\n  &quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;set type=dev&amp;webpack&amp;webpack-dev-server --open&quot;,\n    &quot;build&quot;: &quot;set type=build&amp;webpack&quot;\n  },\n  &quot;keywords&quot;: [\n    &quot;webpack&quot;\n  ],\n  &quot;author&quot;: &quot;roojay &lt;roojay520@gmail.com&gt;&quot;,\n  &quot;repository&quot;: {\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;https://github.com/roojay520/webpack.git&quot;\n  },\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;autoprefixer&quot;: &quot;^7.1.6&quot;,\n    &quot;babel-core&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-loader&quot;: &quot;^7.1.2&quot;,\n    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,\n    &quot;copy-webpack-plugin&quot;: &quot;^4.2.0&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.7&quot;,\n    &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.2&quot;,\n    &quot;file-loader&quot;: &quot;^1.1.5&quot;,\n    &quot;glob&quot;: &quot;^7.1.2&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,\n    &quot;html-withimg-loader&quot;: &quot;^0.1.16&quot;,\n    &quot;node-sass&quot;: &quot;^4.5.3&quot;,\n    &quot;postcss-loader&quot;: &quot;^2.0.8&quot;,\n    &quot;purify-css&quot;: &quot;^1.2.5&quot;,\n    &quot;purifycss-webpack&quot;: &quot;^0.7.0&quot;,\n    &quot;sass-loader&quot;: &quot;^6.0.6&quot;,\n    &quot;style-loader&quot;: &quot;^0.19.0&quot;,\n    &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.0.1&quot;,\n    &quot;url-loader&quot;: &quot;^0.6.2&quot;,\n    &quot;webpack&quot;: &quot;^3.8.1&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.9.3&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;normalize.css&quot;: &quot;^7.0.0&quot;\n  }\n}\n</code></pre>\n<p>设置 webpack.config 文件</p>\n<pre><code class=\"js\">// 路径支持\nconst path = require(&#39;path&#39;);\n// node glob 对象\nconst glob = require(&#39;glob&#39;);\n// 引 入webpack 内部文件\nconst webpack = require(&#39;webpack&#39;);\n// css 分离导出插件\nconst ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;);\n// js 压缩\nconst UglifyPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);\n// html 插入\nconst HtmlPlugin = require(&#39;html-webpack-plugin&#39;);\n// 去掉未使用的 CSS,减少 CSS 冗余\nconst PurifyCss = require(&#39;purifycss-webpack&#39;);\n// 无需编译打包的静态资源转移\nconst CopyWebpackPlugin = require(&#39;copy-webpack-plugin&#39;);\n// 公共路径配置\nlet publicPath;\nprocess.env.type === &#39;build&#39; ? (publicPath = &#39;http://cdn.roojay.com/&#39;) : (publicPath = &#39;http://127.0.0.1:4399/&#39;);\n\nmodule.exports = {\n    // 开发调试设置\n    devtool: &#39;eval-source-map&#39;,\n    // 入口文件\n    entry: {\n        // js 入口文件\n        app: `${__dirname}/src/main.js`\n        // 第三方库抽离\n        // jquery: &#39;jquery&#39;,\n        // vue: &#39;vue&#39;\n    },\n    // 出口文件\n    output: {\n        // 打包文件路径\n        path: `${__dirname}/dist/`,\n        filename: &#39;js/[name].[hash:6].js&#39;,\n        publicPath: website.publicPath\n    },\n    // 模块\n    module: {\n        // 编译规则\n        rules: [\n             // 配置 babel\n            {\n                test: /\\.js$/,\n                use: {\n                    loader: &#39;babel-loader&#39;,\n                // 匹配正则表达式排除\n                exclude: /node_modules/\n            },\n            // 配置sass编译规则\n            {\n                // 匹配处理文件的扩展名的正则表达式\n                test: /\\.(css|scss)$/,\n                // 使用模块的名称\n                use: ExtractTextPlugin.extract({\n                    fallback: &#39;style-loader&#39;,\n                    use: [{\n                        loader: &#39;css-loader&#39;,\n                        options: {\n                            minimize: true,\n                            sourceMap: true,\n                            modules: true,\n                            importLoaders: 1\n                        }\n                    },\n                        // 前缀自动插入\n                    {\n                        loader: &#39;postcss-loader&#39;\n                    },\n                        // scss 转换\n                    {\n                        loader: &#39;sass-loader&#39;\n                    }\n                    ]\n                })\n            },\n            // 图片字体处理\n            {\n                test: /\\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\\?.+)?$/,\n                use: {\n                    loader: &#39;url-loader&#39;,\n                    options: {\n                        // 将小于 10KB 的图片转换为成 Base64 的格式，写入JS。\n                        limit: 10240,\n                        outputPath: &#39;images/&#39;\n                    }\n                }\n            },\n            // html 文件中引入 &lt;img&gt; 标签\n            {\n                test: /\\.(htm|html)$/i,\n                loader: &#39;html-withimg-loader&#39;\n            }\n        ]\n    },\n    // 插件配置\n    plugins: [\n        // 开头文件插入\n        new webpack.BannerPlugin(&#39;Created by @Roojay.&#39;)\n        // 打包生成 html\n        new HtmlPlugin({\n            // 开启 html 压缩\n            minify: {\n                // 去掉属性双引号\n                removeAttributeQuotes: true\n            },\n            // 避免缓存JS\n            hash: true,\n            // html 打包模板文件路径\n            template: &#39;./src/index.html&#39;\n        }),\n        // css 打包分离\n        new ExtractTextPlugin(&#39;./css/[name].[hash:6].css&#39;),\n        // 去掉未使用的 css\n        // 如果存在使用 js 更改元素类名实现 css 样式,不要启用这个插件 启用 css-loader 里面的压缩\n        // new PurifyCss({\n        //     // 配置解析规则的路径(绝对路径)\n        //     paths: glob.sync(path.join(__dirname, &#39;src/*.html&#39;)),\n        //     // css 空格压缩\n        //     minimize: true\n        // }),\n        // js压缩\n        new UglifyPlugin({\n            uglifyOptions: {\n                ie8: false,\n                output: {\n                    // 去掉注释\n                    comments: false,\n                    // 压缩掉空格\n                    beautify: false\n                },\n                mangle: {\n                    keep_fnames: true\n                },\n                compress: {\n                    drop_console: true\n                }\n            }\n        }),\n        // 无需编译的静态资源转移\n        new CopyWebpackPlugin([{\n            from: `${__dirname}/src/docs`,\n            to: &#39;./docs&#39;\n        }]),\n        // 启用热加载\n        new webpack.HotModuleReplacementPlugin(),\n        // 第三方类库引入\n        // new webpack.ProvidePlugin({\n        // $: &quot;jquery&quot;,\n        // Vue: &quot;vue&quot;\n        // }),\n        // 第三方库打包抽离\n        // new webpack.optimize.CommonsChunkPlugin({\n        //     // 入口引入时的名字\n        //     name: [&#39;vue&#39;, &#39;jquery&#39;],\n        //     // 打包文件的路径\n        //     filename: &#39;static/js/[name].min.js&#39;,\n        //     // 最小打包模块\n        //     minChunks: 3\n        // }),\n    ],\n    // watch 配置\n    watchOptions: {\n        // 检测文件修改时间,单位(毫秒)\n        poll: 1000,\n        // 防止误操作重复打包,半秒内重复保存,不执行打包操作\n        aggregeateTimeout: 500,\n        ignore: /node_modules/\n    },\n    // 配置开发时用的服务器\n    devServer: {\n        contentBase: path.resolve(__dirname, &#39;dist&#39;),\n        host: &#39;127.0.0.1&#39;,\n        // 服务端压缩开启\n        compress: true,\n        port: 4399,\n        historyApiFallback: true\n    }\n};\n</code></pre>\n"},{"title":"作用域以及 LHS 和 RHS 查询","abbrlink":"b917f198","data":"2017/9/16","_content":"## 作用域\n\n**1.** 作用域是一套规则，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，用于确定在何处以及如何查找变量（标识符），并实施一套非常严格的规则，用于确定当前执行的代码对这些标识符的访问权限。作用域就是函数或者变量能被访问到的范围。\n\n**2.** 作用域有两种工作模型：\n* 词法作用域(JavaScript)：词法作用域就是定义在词法阶段的作用域。\n* 动态作用域(Bash脚本)\n\n**3.** 全局变量会自动成为全局对象（比如浏览器中的 window 对象）的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。例如：`window.a`\n\n这样可以访问到被局部同名变量所遮蔽的全局变量。\n\n## 执行上下文\n\n**执行上下文在运行时确定，词法作用域在定义时确定。**\n\n### 欺骗作用域\n\n无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数**被声明时所处的位置**决定。\n\nJavaScript 中有两个机制可以“欺骗”词法作用域：eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在\n运行时）。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作\n用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。\n\n#### eval()函数欺骗\n\nJavaScript 中的 eval() 函数可以接受一个字符串为参数，并将传入的字符串视为好像在书写时就存在于程序中这个位置的 JavaScript 代码进行执行。例如：\n\n```javascript\nvar a = 66;\nfunction bar(str, b) {\n    eval(str);\n    console.log(a, b); // 55 10\n}\n\nbar('var a = 55;', 10);\n```\n使用 eval() 函数可以将代码以动态形式插入一个指定位置，如果 eval() 中所执行的代码包含一个或多个声明（函数或者变量），就会对词法作用域的环境进行修改，达到欺诈伪装的效果。\n\n在严格模式下，eval() 函数拥有这自己的词法作用域，其中的声明将无法修改作用域。\n\n这个函数的副作用是引擎无法在编译时对作用域查找进行优化，会导致代码运行变慢，不建议使用。\n\n## LHS 和 RHS查询\n### LHS 查询\n\n**对变量进行赋值操作，那么就会使用 LHS 查询。**\n\n当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎。\n\n严格模式禁止自动或隐式地创建全局变量。 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询失败时类似的 ReferenceError 异常。\n\n### RHS 查询\n\n**查找获取某个变量的值，就会使用 RHS 查询。**\n\n如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。","source":"_posts/作用域以及LHS和RHS.md","raw":"---\ntitle: 作用域以及 LHS 和 RHS 查询\ntags: YouDon'tKnowJavaScript\ncategories: JavaScript\nabbrlink: b917f198\ndata: 2017/9/16\n---\n## 作用域\n\n**1.** 作用域是一套规则，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，用于确定在何处以及如何查找变量（标识符），并实施一套非常严格的规则，用于确定当前执行的代码对这些标识符的访问权限。作用域就是函数或者变量能被访问到的范围。\n\n**2.** 作用域有两种工作模型：\n* 词法作用域(JavaScript)：词法作用域就是定义在词法阶段的作用域。\n* 动态作用域(Bash脚本)\n\n**3.** 全局变量会自动成为全局对象（比如浏览器中的 window 对象）的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。例如：`window.a`\n\n这样可以访问到被局部同名变量所遮蔽的全局变量。\n\n## 执行上下文\n\n**执行上下文在运行时确定，词法作用域在定义时确定。**\n\n### 欺骗作用域\n\n无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数**被声明时所处的位置**决定。\n\nJavaScript 中有两个机制可以“欺骗”词法作用域：eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在\n运行时）。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作\n用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。\n\n#### eval()函数欺骗\n\nJavaScript 中的 eval() 函数可以接受一个字符串为参数，并将传入的字符串视为好像在书写时就存在于程序中这个位置的 JavaScript 代码进行执行。例如：\n\n```javascript\nvar a = 66;\nfunction bar(str, b) {\n    eval(str);\n    console.log(a, b); // 55 10\n}\n\nbar('var a = 55;', 10);\n```\n使用 eval() 函数可以将代码以动态形式插入一个指定位置，如果 eval() 中所执行的代码包含一个或多个声明（函数或者变量），就会对词法作用域的环境进行修改，达到欺诈伪装的效果。\n\n在严格模式下，eval() 函数拥有这自己的词法作用域，其中的声明将无法修改作用域。\n\n这个函数的副作用是引擎无法在编译时对作用域查找进行优化，会导致代码运行变慢，不建议使用。\n\n## LHS 和 RHS查询\n### LHS 查询\n\n**对变量进行赋值操作，那么就会使用 LHS 查询。**\n\n当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎。\n\n严格模式禁止自动或隐式地创建全局变量。 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询失败时类似的 ReferenceError 异常。\n\n### RHS 查询\n\n**查找获取某个变量的值，就会使用 RHS 查询。**\n\n如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。","slug":"作用域以及LHS和RHS","published":1,"date":"2017-11-17T12:34:30.705Z","updated":"2017-11-17T12:34:30.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xka002udfbxxanr4prj","content":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><strong>1.</strong> 作用域是一套规则，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，用于确定在何处以及如何查找变量（标识符），并实施一套非常严格的规则，用于确定当前执行的代码对这些标识符的访问权限。作用域就是函数或者变量能被访问到的范围。</p>\n<p><strong>2.</strong> 作用域有两种工作模型：</p>\n<ul>\n<li>词法作用域(JavaScript)：词法作用域就是定义在词法阶段的作用域。</li>\n<li>动态作用域(Bash脚本)</li>\n</ul>\n<p><strong>3.</strong> 全局变量会自动成为全局对象（比如浏览器中的 window 对象）的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。例如：<code>window.a</code></p>\n<p>这样可以访问到被局部同名变量所遮蔽的全局变量。</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h2><p><strong>执行上下文在运行时确定，词法作用域在定义时确定。</strong></p>\n<h3 id=\"欺骗作用域\"><a href=\"#欺骗作用域\" class=\"headerlink\" title=\"欺骗作用域\"></a>欺骗作用域</h3><p>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数<strong>被声明时所处的位置</strong>决定。</p>\n<p>JavaScript 中有两个机制可以“欺骗”词法作用域：eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在<br>运行时）。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作<br>用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。</p>\n<h4 id=\"eval-函数欺骗\"><a href=\"#eval-函数欺骗\" class=\"headerlink\" title=\"eval()函数欺骗\"></a>eval()函数欺骗</h4><p>JavaScript 中的 eval() 函数可以接受一个字符串为参数，并将传入的字符串视为好像在书写时就存在于程序中这个位置的 JavaScript 代码进行执行。例如：</p>\n<pre><code class=\"javascript\">var a = 66;\nfunction bar(str, b) {\n    eval(str);\n    console.log(a, b); // 55 10\n}\n\nbar(&#39;var a = 55;&#39;, 10);\n</code></pre>\n<p>使用 eval() 函数可以将代码以动态形式插入一个指定位置，如果 eval() 中所执行的代码包含一个或多个声明（函数或者变量），就会对词法作用域的环境进行修改，达到欺诈伪装的效果。</p>\n<p>在严格模式下，eval() 函数拥有这自己的词法作用域，其中的声明将无法修改作用域。</p>\n<p>这个函数的副作用是引擎无法在编译时对作用域查找进行优化，会导致代码运行变慢，不建议使用。</p>\n<h2 id=\"LHS-和-RHS查询\"><a href=\"#LHS-和-RHS查询\" class=\"headerlink\" title=\"LHS 和 RHS查询\"></a>LHS 和 RHS查询</h2><h3 id=\"LHS-查询\"><a href=\"#LHS-查询\" class=\"headerlink\" title=\"LHS 查询\"></a>LHS 查询</h3><p><strong>对变量进行赋值操作，那么就会使用 LHS 查询。</strong></p>\n<p>当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎。</p>\n<p>严格模式禁止自动或隐式地创建全局变量。 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询失败时类似的 ReferenceError 异常。</p>\n<h3 id=\"RHS-查询\"><a href=\"#RHS-查询\" class=\"headerlink\" title=\"RHS 查询\"></a>RHS 查询</h3><p><strong>查找获取某个变量的值，就会使用 RHS 查询。</strong></p>\n<p>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p><strong>1.</strong> 作用域是一套规则，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，用于确定在何处以及如何查找变量（标识符），并实施一套非常严格的规则，用于确定当前执行的代码对这些标识符的访问权限。作用域就是函数或者变量能被访问到的范围。</p>\n<p><strong>2.</strong> 作用域有两种工作模型：</p>\n<ul>\n<li>词法作用域(JavaScript)：词法作用域就是定义在词法阶段的作用域。</li>\n<li>动态作用域(Bash脚本)</li>\n</ul>\n<p><strong>3.</strong> 全局变量会自动成为全局对象（比如浏览器中的 window 对象）的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。例如：<code>window.a</code></p>\n<p>这样可以访问到被局部同名变量所遮蔽的全局变量。</p>\n<h2 id=\"执行上下文\"><a href=\"#执行上下文\" class=\"headerlink\" title=\"执行上下文\"></a>执行上下文</h2><p><strong>执行上下文在运行时确定，词法作用域在定义时确定。</strong></p>\n<h3 id=\"欺骗作用域\"><a href=\"#欺骗作用域\" class=\"headerlink\" title=\"欺骗作用域\"></a>欺骗作用域</h3><p>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数<strong>被声明时所处的位置</strong>决定。</p>\n<p>JavaScript 中有两个机制可以“欺骗”词法作用域：eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在<br>运行时）。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作<br>用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。</p>\n<h4 id=\"eval-函数欺骗\"><a href=\"#eval-函数欺骗\" class=\"headerlink\" title=\"eval()函数欺骗\"></a>eval()函数欺骗</h4><p>JavaScript 中的 eval() 函数可以接受一个字符串为参数，并将传入的字符串视为好像在书写时就存在于程序中这个位置的 JavaScript 代码进行执行。例如：</p>\n<pre><code class=\"javascript\">var a = 66;\nfunction bar(str, b) {\n    eval(str);\n    console.log(a, b); // 55 10\n}\n\nbar(&#39;var a = 55;&#39;, 10);\n</code></pre>\n<p>使用 eval() 函数可以将代码以动态形式插入一个指定位置，如果 eval() 中所执行的代码包含一个或多个声明（函数或者变量），就会对词法作用域的环境进行修改，达到欺诈伪装的效果。</p>\n<p>在严格模式下，eval() 函数拥有这自己的词法作用域，其中的声明将无法修改作用域。</p>\n<p>这个函数的副作用是引擎无法在编译时对作用域查找进行优化，会导致代码运行变慢，不建议使用。</p>\n<h2 id=\"LHS-和-RHS查询\"><a href=\"#LHS-和-RHS查询\" class=\"headerlink\" title=\"LHS 和 RHS查询\"></a>LHS 和 RHS查询</h2><h3 id=\"LHS-查询\"><a href=\"#LHS-查询\" class=\"headerlink\" title=\"LHS 查询\"></a>LHS 查询</h3><p><strong>对变量进行赋值操作，那么就会使用 LHS 查询。</strong></p>\n<p>当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎。</p>\n<p>严格模式禁止自动或隐式地创建全局变量。 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询失败时类似的 ReferenceError 异常。</p>\n<h3 id=\"RHS-查询\"><a href=\"#RHS-查询\" class=\"headerlink\" title=\"RHS 查询\"></a>RHS 查询</h3><p><strong>查找获取某个变量的值，就会使用 RHS 查询。</strong></p>\n<p>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。</p>\n"},{"title":"作用域闭包","abbrlink":"78f2b66e","data":"2017/9/16","_content":"## 闭包\n\nwiki 上对闭包的定义：\n闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），**是引用了自由变量的函数。**这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为**闭包是由函数和与其相关的引用环境组合而成的实体。**\n\n**自由变量的定义**：在 fn() 作用域中使用的变量 x，却没有在 fn() 作用域中声明（即在其他作用域中声明的），对于 foo() 作用域来说，x 就是一个自由变量。\n\n当函数**可以记住并访问所在的词法作用域**时，就产生了**闭包**，即使函数是在自己定义的词法作用域以外的地方执行。\n\n闭包使得函数在**定义时的词法作用域以外**的地方被调用时，函数**可以继续访问定义时的词法作用域**。\n\n在 JavaScript 中有垃圾回收器用来释放不再使用的内存空间，通过使用闭包可以阻止这件事情的发生，使得这个函数的内部作用域一直存活。\n\n在函数 foo() 内部定义了函数 func()， func() 引用了其父函数作用域的变量，对这个内部作用域的引用就叫作闭包。\n\n```javascript\nfunction foo() {\n    let a = 0;\n\n    return function func() {\n        console.log(a);\n        a++;\n    };\n}\nconst bar = foo();\nconst baz = foo();\nbar(); // 0\nbar(); // 1 闭包保存上次计算的值\nbar(); // 2\nbaz(); // 0 新生成函数\n\n```\n将 foo() 内部定义的func() 函数作为一个参数，传递给在全局作用域下定义的 bar() 函数，从而达到访问 func() 词法作用域的目的。\n\n无论通过何种手段**将内部函数传递到所在的词法作用域以外**，它都会**持有对原始定义作用域的引用**，无论在何处**执行这个函数都会使用闭包**。\n\n\n","source":"_posts/作用域闭包.md","raw":"---\ntitle: 作用域闭包\ntags: YouDon'tKnowJavaScript\ncategories: JavaScript\nabbrlink: 78f2b66e\ndata: 2017/9/16\n---\n## 闭包\n\nwiki 上对闭包的定义：\n闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），**是引用了自由变量的函数。**这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为**闭包是由函数和与其相关的引用环境组合而成的实体。**\n\n**自由变量的定义**：在 fn() 作用域中使用的变量 x，却没有在 fn() 作用域中声明（即在其他作用域中声明的），对于 foo() 作用域来说，x 就是一个自由变量。\n\n当函数**可以记住并访问所在的词法作用域**时，就产生了**闭包**，即使函数是在自己定义的词法作用域以外的地方执行。\n\n闭包使得函数在**定义时的词法作用域以外**的地方被调用时，函数**可以继续访问定义时的词法作用域**。\n\n在 JavaScript 中有垃圾回收器用来释放不再使用的内存空间，通过使用闭包可以阻止这件事情的发生，使得这个函数的内部作用域一直存活。\n\n在函数 foo() 内部定义了函数 func()， func() 引用了其父函数作用域的变量，对这个内部作用域的引用就叫作闭包。\n\n```javascript\nfunction foo() {\n    let a = 0;\n\n    return function func() {\n        console.log(a);\n        a++;\n    };\n}\nconst bar = foo();\nconst baz = foo();\nbar(); // 0\nbar(); // 1 闭包保存上次计算的值\nbar(); // 2\nbaz(); // 0 新生成函数\n\n```\n将 foo() 内部定义的func() 函数作为一个参数，传递给在全局作用域下定义的 bar() 函数，从而达到访问 func() 词法作用域的目的。\n\n无论通过何种手段**将内部函数传递到所在的词法作用域以外**，它都会**持有对原始定义作用域的引用**，无论在何处**执行这个函数都会使用闭包**。\n\n\n","slug":"作用域闭包","published":1,"date":"2017-11-17T12:55:49.241Z","updated":"2017-11-17T12:55:49.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xke002ydfbx6cnngb13","content":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>wiki 上对闭包的定义：<br>闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），<strong>是引用了自由变量的函数。</strong>这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为<strong>闭包是由函数和与其相关的引用环境组合而成的实体。</strong></p>\n<p><strong>自由变量的定义</strong>：在 fn() 作用域中使用的变量 x，却没有在 fn() 作用域中声明（即在其他作用域中声明的），对于 foo() 作用域来说，x 就是一个自由变量。</p>\n<p>当函数<strong>可以记住并访问所在的词法作用域</strong>时，就产生了<strong>闭包</strong>，即使函数是在自己定义的词法作用域以外的地方执行。</p>\n<p>闭包使得函数在<strong>定义时的词法作用域以外</strong>的地方被调用时，函数<strong>可以继续访问定义时的词法作用域</strong>。</p>\n<p>在 JavaScript 中有垃圾回收器用来释放不再使用的内存空间，通过使用闭包可以阻止这件事情的发生，使得这个函数的内部作用域一直存活。</p>\n<p>在函数 foo() 内部定义了函数 func()， func() 引用了其父函数作用域的变量，对这个内部作用域的引用就叫作闭包。</p>\n<pre><code class=\"javascript\">function foo() {\n    let a = 0;\n\n    return function func() {\n        console.log(a);\n        a++;\n    };\n}\nconst bar = foo();\nconst baz = foo();\nbar(); // 0\nbar(); // 1 闭包保存上次计算的值\nbar(); // 2\nbaz(); // 0 新生成函数\n</code></pre>\n<p>将 foo() 内部定义的func() 函数作为一个参数，传递给在全局作用域下定义的 bar() 函数，从而达到访问 func() 词法作用域的目的。</p>\n<p>无论通过何种手段<strong>将内部函数传递到所在的词法作用域以外</strong>，它都会<strong>持有对原始定义作用域的引用</strong>，无论在何处<strong>执行这个函数都会使用闭包</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>wiki 上对闭包的定义：<br>闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），<strong>是引用了自由变量的函数。</strong>这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为<strong>闭包是由函数和与其相关的引用环境组合而成的实体。</strong></p>\n<p><strong>自由变量的定义</strong>：在 fn() 作用域中使用的变量 x，却没有在 fn() 作用域中声明（即在其他作用域中声明的），对于 foo() 作用域来说，x 就是一个自由变量。</p>\n<p>当函数<strong>可以记住并访问所在的词法作用域</strong>时，就产生了<strong>闭包</strong>，即使函数是在自己定义的词法作用域以外的地方执行。</p>\n<p>闭包使得函数在<strong>定义时的词法作用域以外</strong>的地方被调用时，函数<strong>可以继续访问定义时的词法作用域</strong>。</p>\n<p>在 JavaScript 中有垃圾回收器用来释放不再使用的内存空间，通过使用闭包可以阻止这件事情的发生，使得这个函数的内部作用域一直存活。</p>\n<p>在函数 foo() 内部定义了函数 func()， func() 引用了其父函数作用域的变量，对这个内部作用域的引用就叫作闭包。</p>\n<pre><code class=\"javascript\">function foo() {\n    let a = 0;\n\n    return function func() {\n        console.log(a);\n        a++;\n    };\n}\nconst bar = foo();\nconst baz = foo();\nbar(); // 0\nbar(); // 1 闭包保存上次计算的值\nbar(); // 2\nbaz(); // 0 新生成函数\n</code></pre>\n<p>将 foo() 内部定义的func() 函数作为一个参数，传递给在全局作用域下定义的 bar() 函数，从而达到访问 func() 词法作用域的目的。</p>\n<p>无论通过何种手段<strong>将内部函数传递到所在的词法作用域以外</strong>，它都会<strong>持有对原始定义作用域的引用</strong>，无论在何处<strong>执行这个函数都会使用闭包</strong>。</p>\n"},{"title":"全局命名空间和模块","abbrlink":"f9a582e","data":"2017/9/16","_content":"\n## 全局命名空间\n\n库通常会在全局作用域中声明一个名字独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。\n\n例如：\n```javascript\nvar mylibrary = {\n    name: 'haha',\n    eat: (name) => {\n        console.log(`${name} is eating`);\n    }\n};\n```\n\n## 模块管理\n\n通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。\n\n用作用域的规则，强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突。\n","source":"_posts/全局命名空间和模块.md","raw":"---\ntitle: 全局命名空间和模块\ntags: YouDon'tKnowJavaScript\ncategories: JavaScript\nabbrlink: f9a582e\ndata: 2017/9/16\n---\n\n## 全局命名空间\n\n库通常会在全局作用域中声明一个名字独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。\n\n例如：\n```javascript\nvar mylibrary = {\n    name: 'haha',\n    eat: (name) => {\n        console.log(`${name} is eating`);\n    }\n};\n```\n\n## 模块管理\n\n通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。\n\n用作用域的规则，强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突。\n","slug":"全局命名空间和模块","published":1,"date":"2017-11-12T02:28:48.866Z","updated":"2017-11-12T02:28:48.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xkk0032dfbxz5tnvpg3","content":"<h2 id=\"全局命名空间\"><a href=\"#全局命名空间\" class=\"headerlink\" title=\"全局命名空间\"></a>全局命名空间</h2><p>库通常会在全局作用域中声明一个名字独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。</p>\n<p>例如：</p>\n<pre><code class=\"javascript\">var mylibrary = {\n    name: &#39;haha&#39;,\n    eat: (name) =&gt; {\n        console.log(`${name} is eating`);\n    }\n};\n</code></pre>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h2><p>通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。</p>\n<p>用作用域的规则，强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"全局命名空间\"><a href=\"#全局命名空间\" class=\"headerlink\" title=\"全局命名空间\"></a>全局命名空间</h2><p>库通常会在全局作用域中声明一个名字独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。</p>\n<p>例如：</p>\n<pre><code class=\"javascript\">var mylibrary = {\n    name: &#39;haha&#39;,\n    eat: (name) =&gt; {\n        console.log(`${name} is eating`);\n    }\n};\n</code></pre>\n<h2 id=\"模块管理\"><a href=\"#模块管理\" class=\"headerlink\" title=\"模块管理\"></a>模块管理</h2><p>通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。</p>\n<p>用作用域的规则，强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突。</p>\n"},{"title":"内部类","abbrlink":"9bc01b38","data":"2017/6/16","_content":"\n* 内部类：一个类定义在另一个类的里面。\n\n#### 示例： ####\n>\n```java\nclass A{\n\tclass B{\n\t}\n}\n```\nB这个类被称之为A的内部类。\n编译之后生成A.class和A$B.class。\n内部类可以随意使用外部类的成员变量。\n\n# 内部类的使用方法 #\n#### 示例： ####\n```java\nclass A{\n\tint i;\n\tclass B{\n\t\tint j;\n\t\tint funB(){\n\t\t\tint result = i + j;\n\t\t\tSystem.out.println(result);\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nclass Test{\n\tpublic static void main(String args[]){\n\t\tA a = new A();\n\n\t\tA.B b = a.new B();\n\n\t\ta.i = 5;\n\t\tb.j = 6;\n\t\tb.funB();\n\t}\n}\n```\n\n# 匿名内部类的使用方法 #\n* 匿名内部类：没有名字的内部类。\n\n#### 示例： ####\n```java\ninterface A{\n\tpublic void doSth();\n}\nclass B{\n\tpublic void fun(A a){\n\t\tSystem.out.println(\"B类的fun函数\");\n\t\ta.doSth();\n\t}\n}\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tB b = new B();\n\t\tb.fun(new A(){\n\t\t\tpublic void doSth(){\n\t\t\t\tSystem.out.println(\"匿名内部类\");\n\t\t\t}\n\t\t});\n\t}\n}\n```","source":"_posts/内部类.md","raw":"---\ntitle: 内部类\ntags: Java\ncategories: Java\nabbrlink: 9bc01b38\ndata: 2017/6/16\n---\n\n* 内部类：一个类定义在另一个类的里面。\n\n#### 示例： ####\n>\n```java\nclass A{\n\tclass B{\n\t}\n}\n```\nB这个类被称之为A的内部类。\n编译之后生成A.class和A$B.class。\n内部类可以随意使用外部类的成员变量。\n\n# 内部类的使用方法 #\n#### 示例： ####\n```java\nclass A{\n\tint i;\n\tclass B{\n\t\tint j;\n\t\tint funB(){\n\t\t\tint result = i + j;\n\t\t\tSystem.out.println(result);\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nclass Test{\n\tpublic static void main(String args[]){\n\t\tA a = new A();\n\n\t\tA.B b = a.new B();\n\n\t\ta.i = 5;\n\t\tb.j = 6;\n\t\tb.funB();\n\t}\n}\n```\n\n# 匿名内部类的使用方法 #\n* 匿名内部类：没有名字的内部类。\n\n#### 示例： ####\n```java\ninterface A{\n\tpublic void doSth();\n}\nclass B{\n\tpublic void fun(A a){\n\t\tSystem.out.println(\"B类的fun函数\");\n\t\ta.doSth();\n\t}\n}\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tB b = new B();\n\t\tb.fun(new A(){\n\t\t\tpublic void doSth(){\n\t\t\t\tSystem.out.println(\"匿名内部类\");\n\t\t\t}\n\t\t});\n\t}\n}\n```","slug":"内部类","published":1,"date":"2017-11-12T02:16:07.651Z","updated":"2017-11-12T02:16:07.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xkn0035dfbxbrsmw5k6","content":"<ul>\n<li>内部类：一个类定义在另一个类的里面。</li>\n</ul>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>&gt;</p>\n<pre><code class=\"java\">class A{\n    class B{\n    }\n}\n</code></pre>\n<p>B这个类被称之为A的内部类。<br>编译之后生成A.class和A$B.class。<br>内部类可以随意使用外部类的成员变量。</p>\n<h1 id=\"内部类的使用方法\"><a href=\"#内部类的使用方法\" class=\"headerlink\" title=\"内部类的使用方法\"></a>内部类的使用方法</h1><h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">class A{\n    int i;\n    class B{\n        int j;\n        int funB(){\n            int result = i + j;\n            System.out.println(result);\n            return result;\n        }\n    }\n}\n\nclass Test{\n    public static void main(String args[]){\n        A a = new A();\n\n        A.B b = a.new B();\n\n        a.i = 5;\n        b.j = 6;\n        b.funB();\n    }\n}\n</code></pre>\n<h1 id=\"匿名内部类的使用方法\"><a href=\"#匿名内部类的使用方法\" class=\"headerlink\" title=\"匿名内部类的使用方法\"></a>匿名内部类的使用方法</h1><ul>\n<li>匿名内部类：没有名字的内部类。</li>\n</ul>\n<h4 id=\"示例：-2\"><a href=\"#示例：-2\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">interface A{\n    public void doSth();\n}\nclass B{\n    public void fun(A a){\n        System.out.println(&quot;B类的fun函数&quot;);\n        a.doSth();\n    }\n}\npublic class Test{\n    public static void main(String args[]){\n        B b = new B();\n        b.fun(new A(){\n            public void doSth(){\n                System.out.println(&quot;匿名内部类&quot;);\n            }\n        });\n    }\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>内部类：一个类定义在另一个类的里面。</li>\n</ul>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>&gt;</p>\n<pre><code class=\"java\">class A{\n    class B{\n    }\n}\n</code></pre>\n<p>B这个类被称之为A的内部类。<br>编译之后生成A.class和A$B.class。<br>内部类可以随意使用外部类的成员变量。</p>\n<h1 id=\"内部类的使用方法\"><a href=\"#内部类的使用方法\" class=\"headerlink\" title=\"内部类的使用方法\"></a>内部类的使用方法</h1><h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">class A{\n    int i;\n    class B{\n        int j;\n        int funB(){\n            int result = i + j;\n            System.out.println(result);\n            return result;\n        }\n    }\n}\n\nclass Test{\n    public static void main(String args[]){\n        A a = new A();\n\n        A.B b = a.new B();\n\n        a.i = 5;\n        b.j = 6;\n        b.funB();\n    }\n}\n</code></pre>\n<h1 id=\"匿名内部类的使用方法\"><a href=\"#匿名内部类的使用方法\" class=\"headerlink\" title=\"匿名内部类的使用方法\"></a>匿名内部类的使用方法</h1><ul>\n<li>匿名内部类：没有名字的内部类。</li>\n</ul>\n<h4 id=\"示例：-2\"><a href=\"#示例：-2\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">interface A{\n    public void doSth();\n}\nclass B{\n    public void fun(A a){\n        System.out.println(&quot;B类的fun函数&quot;);\n        a.doSth();\n    }\n}\npublic class Test{\n    public static void main(String args[]){\n        B b = new B();\n        b.fun(new A(){\n            public void doSth(){\n                System.out.println(&quot;匿名内部类&quot;);\n            }\n        });\n    }\n}\n</code></pre>\n"},{"title":"throw和throws","date":"2017-06-15T16:00:00.000Z","abbrlink":"29cc0096","_content":"\n## throw ##\n### throw的作用 ###\n\n- 如果Java虚拟机不能判断异常e，可以生成异常对象e，用throw加上这个异常对象抛出这个异常。\n>\n示例：\n```java\npackage src;\nclass People{\n\tprivate int age;\n\tpublic void setAge(int age){\n\t\tif(age < 0){\n\t\t\tRuntimeException e = new RuntimeException(\"年龄不能为负数\");\n\t\t\tthrow e;\n\t\t}\n\t\tthis.age = age;\n\t\tSystem.out.println(age);\n\t}\n}\nclass Test{\n\tpublic static void main(String args[]){\n\t\tPeople people = new People();\n\t\tpeople.setAge(-20);\n\t}\n}\n```\n\n运行结果：\n![](http://i.imgur.com/hSqdO9z.png)\n\n\n##  throws ##\n### throws ###\n\n- 声明一个函数可能产生异常，函数不对异常进行处理，在调用函数的地方对异常进行处理。\n>\n示例：\n```java\npackage src1;\nclass People{\n\tprivate int age;\n\tpublic void setAge(int age)  throws Exception{\n\t\tif(age < 0){\n\t\t\tException e = new Exception(\"年龄不能为负数\");\n\t\t\tthrow e;\n\t\t}\n\t\tthis.age = age;\n\t\tSystem.out.println(age);\n\t}\n}\nclass Test{\n\tpublic static void main(String args[]){\n\t\tPeople people = new People();\n\t\ttry{\n\t\t\tpeople.setAge(-20);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/wJqKdCu.png)","source":"_posts/关键字throw和throws.md","raw":"---\ntitle: throw和throws\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 29cc0096\n---\n\n## throw ##\n### throw的作用 ###\n\n- 如果Java虚拟机不能判断异常e，可以生成异常对象e，用throw加上这个异常对象抛出这个异常。\n>\n示例：\n```java\npackage src;\nclass People{\n\tprivate int age;\n\tpublic void setAge(int age){\n\t\tif(age < 0){\n\t\t\tRuntimeException e = new RuntimeException(\"年龄不能为负数\");\n\t\t\tthrow e;\n\t\t}\n\t\tthis.age = age;\n\t\tSystem.out.println(age);\n\t}\n}\nclass Test{\n\tpublic static void main(String args[]){\n\t\tPeople people = new People();\n\t\tpeople.setAge(-20);\n\t}\n}\n```\n\n运行结果：\n![](http://i.imgur.com/hSqdO9z.png)\n\n\n##  throws ##\n### throws ###\n\n- 声明一个函数可能产生异常，函数不对异常进行处理，在调用函数的地方对异常进行处理。\n>\n示例：\n```java\npackage src1;\nclass People{\n\tprivate int age;\n\tpublic void setAge(int age)  throws Exception{\n\t\tif(age < 0){\n\t\t\tException e = new Exception(\"年龄不能为负数\");\n\t\t\tthrow e;\n\t\t}\n\t\tthis.age = age;\n\t\tSystem.out.println(age);\n\t}\n}\nclass Test{\n\tpublic static void main(String args[]){\n\t\tPeople people = new People();\n\t\ttry{\n\t\t\tpeople.setAge(-20);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}\n}\n```\n运行结果：\n![](http://i.imgur.com/wJqKdCu.png)","slug":"关键字throw和throws","published":1,"updated":"2017-11-12T02:29:00.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xkq0039dfbxivw09vqr","content":"<h2 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h2><h3 id=\"throw的作用\"><a href=\"#throw的作用\" class=\"headerlink\" title=\"throw的作用\"></a>throw的作用</h3><ul>\n<li>如果Java虚拟机不能判断异常e，可以生成异常对象e，用throw加上这个异常对象抛出这个异常。<br>&gt;<br>示例：<pre><code class=\"java\">package src;\nclass People{\n  private int age;\n  public void setAge(int age){\n      if(age &lt; 0){\n          RuntimeException e = new RuntimeException(&quot;年龄不能为负数&quot;);\n          throw e;\n      }\n      this.age = age;\n      System.out.println(age);\n  }\n}\nclass Test{\n  public static void main(String args[]){\n      People people = new People();\n      people.setAge(-20);\n  }\n}\n</code></pre>\n</li>\n</ul>\n<p>运行结果：<br><img src=\"http://i.imgur.com/hSqdO9z.png\" alt=\"\"></p>\n<h2 id=\"throws\"><a href=\"#throws\" class=\"headerlink\" title=\"throws\"></a>throws</h2><h3 id=\"throws-1\"><a href=\"#throws-1\" class=\"headerlink\" title=\"throws\"></a>throws</h3><ul>\n<li>声明一个函数可能产生异常，函数不对异常进行处理，在调用函数的地方对异常进行处理。<br>&gt;<br>示例：<pre><code class=\"java\">package src1;\nclass People{\n  private int age;\n  public void setAge(int age)  throws Exception{\n      if(age &lt; 0){\n          Exception e = new Exception(&quot;年龄不能为负数&quot;);\n          throw e;\n      }\n      this.age = age;\n      System.out.println(age);\n  }\n}\nclass Test{\n  public static void main(String args[]){\n      People people = new People();\n      try{\n          people.setAge(-20);\n      }\n      catch(Exception e){\n          System.out.println(e);\n      }\n  }\n}\n</code></pre>\n运行结果：<br><img src=\"http://i.imgur.com/wJqKdCu.png\" alt=\"\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"throw\"><a href=\"#throw\" class=\"headerlink\" title=\"throw\"></a>throw</h2><h3 id=\"throw的作用\"><a href=\"#throw的作用\" class=\"headerlink\" title=\"throw的作用\"></a>throw的作用</h3><ul>\n<li>如果Java虚拟机不能判断异常e，可以生成异常对象e，用throw加上这个异常对象抛出这个异常。<br>&gt;<br>示例：<pre><code class=\"java\">package src;\nclass People{\n  private int age;\n  public void setAge(int age){\n      if(age &lt; 0){\n          RuntimeException e = new RuntimeException(&quot;年龄不能为负数&quot;);\n          throw e;\n      }\n      this.age = age;\n      System.out.println(age);\n  }\n}\nclass Test{\n  public static void main(String args[]){\n      People people = new People();\n      people.setAge(-20);\n  }\n}\n</code></pre>\n</li>\n</ul>\n<p>运行结果：<br><img src=\"http://i.imgur.com/hSqdO9z.png\" alt=\"\"></p>\n<h2 id=\"throws\"><a href=\"#throws\" class=\"headerlink\" title=\"throws\"></a>throws</h2><h3 id=\"throws-1\"><a href=\"#throws-1\" class=\"headerlink\" title=\"throws\"></a>throws</h3><ul>\n<li>声明一个函数可能产生异常，函数不对异常进行处理，在调用函数的地方对异常进行处理。<br>&gt;<br>示例：<pre><code class=\"java\">package src1;\nclass People{\n  private int age;\n  public void setAge(int age)  throws Exception{\n      if(age &lt; 0){\n          Exception e = new Exception(&quot;年龄不能为负数&quot;);\n          throw e;\n      }\n      this.age = age;\n      System.out.println(age);\n  }\n}\nclass Test{\n  public static void main(String args[]){\n      People people = new People();\n      try{\n          people.setAge(-20);\n      }\n      catch(Exception e){\n          System.out.println(e);\n      }\n  }\n}\n</code></pre>\n运行结果：<br><img src=\"http://i.imgur.com/wJqKdCu.png\" alt=\"\"></li>\n</ul>\n"},{"title":"函数作用域及块作用域","abbrlink":"70cbbc9f","data":"2017/9/16","_content":"\n## 最小特权原则\n\n最小特权原则也叫最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\n\n### 函数封装\n\n将函数和变量包裹在一个外部包装函数的作用域中，使用这个作用域将这些具体的细节隐藏起来，实现函数的封装。\n1. 可以避免同名标识符之间的冲突，避免全局变量污染。\n2. 将具体内容私有化，防止外部以非预期的方式使用内部私有的内容。\n\n## 函数作用域\n\n函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。\n\n**函数声明:**\n```javascript\nfunction foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n}\n\nfoo();\n```\n\n**立即执行函数表达式：**\n```javascript\n(function foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n})();\n\n```\n\n区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位置（不仅仅是一行代码，而是整个声明中的位置）。**如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。**\n\n函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。\n1. 函数声明中，foo 被绑定在所在的作用域中，可以在外部通过 foo() 来调用它。\n2. 函数表达式中，foo 被绑定在函数表达式自身的函数中，外部不能访问调用，只能在其(function foo(){...}) 中的`...`位置被访问。\n\n### 匿名函数表达式\n\n函数表达式可以匿名，而函数声明则不可以省略函数名。\n\n### 立即执行函数表达式（IIFE）\n\n立即执行函数表达式（Immediately Invoked Function Expression），将函数包含在一对（）中，成为一个函数表达式，在末尾加上另一对（）可以立即执行这个函数。\n第一个（）将函数变成表达式，第二个（） 执行了这个函数。\n\n#### IIFE 的两种写法\n\n1. 立即执行函数表达式：\n\n```javascript\n(function foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n})();\n\n```\n2. 另一种改进形式写法将调用的（）移到了用来包装的（）里面。\n\n```javascript\n(function foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n}());\n```\n\n两种写法功能上一样，凭个人喜好。\n\n#### IIFE 表达式的用法\n\n1. 匿名函数表达式\n\n```javascript\n(() => {\n    const a = 6;\n    console.log(a); // a\n})();\n```\n\n2. 将它当作**函数调用**，并传递参数进去\n\n```javascript\nconst name = 'haha';\n(function IIFE(name) {\n    console.log(name); // haha\n})(name);\n\n```\n\n3. 倒置代码的运行顺序，将需要运行的函数放在第二位， IIFE 执行之后，放在第二位的函数被当作参数传递进去。\n\n```javascript\nconst objA = {\n    name: 'haha',\n};\n\n(function IIFE(foo) {\n    foo(objA);\n}((obj) => {\n    const name = '3';\n    console.log(name); // 3\n    console.log(obj.name); // haha\n}));\n```\n第二部分为一个匿名函数，被当作一个参数 foo 传入到 IIFE 函数的第一部分。最后匿名函数调用执行，将一个全局对象 objA 传入当作 obj 的参数值。\n\n## 块作用域\n\n块作用域是一个用来对之前的最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息。\n\n块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指 { .. } 内部）。\n\n只想在 for 循环内部的上下文中使用 i，所以在 for 循环的头部使用 var 声明一个变量 i，但实际上 i 会被绑定在外部作用域（函数或全局）中，在全局范围内都有效。\n\n```javascript\nvar arr = [];\nfor (var i = 0; i < 10; i++) {\n  arr[i] = function() {\n    console.log(i);\n  };\n}\narr[6](); // 10\n\n```\nconsole.log(i) 内部的 i 指向全局的的 i，最后循环完毕后在执行 arr[6]()，这时全局的 i 的值为 10.\n\nES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。\n\n### Let 变量\n\nlet 关键字可以将变量绑定到所在的任意作用域中（通常是 {  ..  } 内部）。换句话说，let 为其声明的变量隐式地了所在的块作用域。\n\n```javascript\nvar arr = [];\nfor (let i = 0; i < 10; i++) {\n  arr[i] = function () {\n    console.log(i);\n  };\n}\narr[6](); // 6\n```\n\n由 let 声明的 i，每次循环都在循环的内部重新生成了一次变量，\n\n```javascript\nvar arr = [];\nfor (let i = 0; i < 10; i++) {\n    let _i = i;\n  arr[i] = function () {\n    console.log(_i);\n  };\n}\narr[6](); // 6\n```\nfor 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。\n\nlet 声明的变量只在它所在的代码块有效。\n\n```javascript\n{\n    var a = 6;\n    let b = 9;\n}\n\nconsole.log(a); // 6\nconsole.log(b); // b is not defined\n```\n### 暂时性死区\n\n在代码块内，使用 let 命令声明变量，在声明之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）.\n\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\nES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```javascript\nvar tmp = 6;\n\nif(true) {\n  tmp = 3; // ReferenceError\n  let tmp;\n}\n```\n\n","source":"_posts/函数作用域及块作用域.md","raw":"---\ntitle: 函数作用域及块作用域\ntags: YouDon'tKnowJavaScript\ncategories: JavaScript\nabbrlink: 70cbbc9f\ndata: 2017/9/16\n---\n\n## 最小特权原则\n\n最小特权原则也叫最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。\n\n### 函数封装\n\n将函数和变量包裹在一个外部包装函数的作用域中，使用这个作用域将这些具体的细节隐藏起来，实现函数的封装。\n1. 可以避免同名标识符之间的冲突，避免全局变量污染。\n2. 将具体内容私有化，防止外部以非预期的方式使用内部私有的内容。\n\n## 函数作用域\n\n函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。\n\n**函数声明:**\n```javascript\nfunction foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n}\n\nfoo();\n```\n\n**立即执行函数表达式：**\n```javascript\n(function foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n})();\n\n```\n\n区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位置（不仅仅是一行代码，而是整个声明中的位置）。**如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。**\n\n函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。\n1. 函数声明中，foo 被绑定在所在的作用域中，可以在外部通过 foo() 来调用它。\n2. 函数表达式中，foo 被绑定在函数表达式自身的函数中，外部不能访问调用，只能在其(function foo(){...}) 中的`...`位置被访问。\n\n### 匿名函数表达式\n\n函数表达式可以匿名，而函数声明则不可以省略函数名。\n\n### 立即执行函数表达式（IIFE）\n\n立即执行函数表达式（Immediately Invoked Function Expression），将函数包含在一对（）中，成为一个函数表达式，在末尾加上另一对（）可以立即执行这个函数。\n第一个（）将函数变成表达式，第二个（） 执行了这个函数。\n\n#### IIFE 的两种写法\n\n1. 立即执行函数表达式：\n\n```javascript\n(function foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n})();\n\n```\n2. 另一种改进形式写法将调用的（）移到了用来包装的（）里面。\n\n```javascript\n(function foo() {\n    for (let i = 0; i < 10; i++) {\n        console.log(i);\n    }\n}());\n```\n\n两种写法功能上一样，凭个人喜好。\n\n#### IIFE 表达式的用法\n\n1. 匿名函数表达式\n\n```javascript\n(() => {\n    const a = 6;\n    console.log(a); // a\n})();\n```\n\n2. 将它当作**函数调用**，并传递参数进去\n\n```javascript\nconst name = 'haha';\n(function IIFE(name) {\n    console.log(name); // haha\n})(name);\n\n```\n\n3. 倒置代码的运行顺序，将需要运行的函数放在第二位， IIFE 执行之后，放在第二位的函数被当作参数传递进去。\n\n```javascript\nconst objA = {\n    name: 'haha',\n};\n\n(function IIFE(foo) {\n    foo(objA);\n}((obj) => {\n    const name = '3';\n    console.log(name); // 3\n    console.log(obj.name); // haha\n}));\n```\n第二部分为一个匿名函数，被当作一个参数 foo 传入到 IIFE 函数的第一部分。最后匿名函数调用执行，将一个全局对象 objA 传入当作 obj 的参数值。\n\n## 块作用域\n\n块作用域是一个用来对之前的最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息。\n\n块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指 { .. } 内部）。\n\n只想在 for 循环内部的上下文中使用 i，所以在 for 循环的头部使用 var 声明一个变量 i，但实际上 i 会被绑定在外部作用域（函数或全局）中，在全局范围内都有效。\n\n```javascript\nvar arr = [];\nfor (var i = 0; i < 10; i++) {\n  arr[i] = function() {\n    console.log(i);\n  };\n}\narr[6](); // 10\n\n```\nconsole.log(i) 内部的 i 指向全局的的 i，最后循环完毕后在执行 arr[6]()，这时全局的 i 的值为 10.\n\nES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。\n\n### Let 变量\n\nlet 关键字可以将变量绑定到所在的任意作用域中（通常是 {  ..  } 内部）。换句话说，let 为其声明的变量隐式地了所在的块作用域。\n\n```javascript\nvar arr = [];\nfor (let i = 0; i < 10; i++) {\n  arr[i] = function () {\n    console.log(i);\n  };\n}\narr[6](); // 6\n```\n\n由 let 声明的 i，每次循环都在循环的内部重新生成了一次变量，\n\n```javascript\nvar arr = [];\nfor (let i = 0; i < 10; i++) {\n    let _i = i;\n  arr[i] = function () {\n    console.log(_i);\n  };\n}\narr[6](); // 6\n```\nfor 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。\n\nlet 声明的变量只在它所在的代码块有效。\n\n```javascript\n{\n    var a = 6;\n    let b = 9;\n}\n\nconsole.log(a); // 6\nconsole.log(b); // b is not defined\n```\n### 暂时性死区\n\n在代码块内，使用 let 命令声明变量，在声明之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）.\n\n```javascript\nif (true) {\n  // TDZ开始\n  tmp = 'abc'; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n```\nES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。\n\n只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。\n\n```javascript\nvar tmp = 6;\n\nif(true) {\n  tmp = 3; // ReferenceError\n  let tmp;\n}\n```\n\n","slug":"函数作用域及块作用域","published":1,"date":"2017-11-17T13:00:34.471Z","updated":"2017-11-17T13:00:34.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xks003cdfbxthi3xulj","content":"<h2 id=\"最小特权原则\"><a href=\"#最小特权原则\" class=\"headerlink\" title=\"最小特权原则\"></a>最小特权原则</h2><p>最小特权原则也叫最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</p>\n<h3 id=\"函数封装\"><a href=\"#函数封装\" class=\"headerlink\" title=\"函数封装\"></a>函数封装</h3><p>将函数和变量包裹在一个外部包装函数的作用域中，使用这个作用域将这些具体的细节隐藏起来，实现函数的封装。</p>\n<ol>\n<li>可以避免同名标识符之间的冲突，避免全局变量污染。</li>\n<li>将具体内容私有化，防止外部以非预期的方式使用内部私有的内容。</li>\n</ol>\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。</p>\n<p><strong>函数声明:</strong></p>\n<pre><code class=\"javascript\">function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n}\n\nfoo();\n</code></pre>\n<p><strong>立即执行函数表达式：</strong></p>\n<pre><code class=\"javascript\">(function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n})();\n</code></pre>\n<p>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位置（不仅仅是一行代码，而是整个声明中的位置）。<strong>如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</strong></p>\n<p>函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。</p>\n<ol>\n<li>函数声明中，foo 被绑定在所在的作用域中，可以在外部通过 foo() 来调用它。</li>\n<li>函数表达式中，foo 被绑定在函数表达式自身的函数中，外部不能访问调用，只能在其(function foo(){…}) 中的<code>...</code>位置被访问。</li>\n</ol>\n<h3 id=\"匿名函数表达式\"><a href=\"#匿名函数表达式\" class=\"headerlink\" title=\"匿名函数表达式\"></a>匿名函数表达式</h3><p>函数表达式可以匿名，而函数声明则不可以省略函数名。</p>\n<h3 id=\"立即执行函数表达式（IIFE）\"><a href=\"#立即执行函数表达式（IIFE）\" class=\"headerlink\" title=\"立即执行函数表达式（IIFE）\"></a>立即执行函数表达式（IIFE）</h3><p>立即执行函数表达式（Immediately Invoked Function Expression），将函数包含在一对（）中，成为一个函数表达式，在末尾加上另一对（）可以立即执行这个函数。<br>第一个（）将函数变成表达式，第二个（） 执行了这个函数。</p>\n<h4 id=\"IIFE-的两种写法\"><a href=\"#IIFE-的两种写法\" class=\"headerlink\" title=\"IIFE 的两种写法\"></a>IIFE 的两种写法</h4><ol>\n<li>立即执行函数表达式：</li>\n</ol>\n<pre><code class=\"javascript\">(function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n})();\n</code></pre>\n<ol>\n<li>另一种改进形式写法将调用的（）移到了用来包装的（）里面。</li>\n</ol>\n<pre><code class=\"javascript\">(function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n}());\n</code></pre>\n<p>两种写法功能上一样，凭个人喜好。</p>\n<h4 id=\"IIFE-表达式的用法\"><a href=\"#IIFE-表达式的用法\" class=\"headerlink\" title=\"IIFE 表达式的用法\"></a>IIFE 表达式的用法</h4><ol>\n<li>匿名函数表达式</li>\n</ol>\n<pre><code class=\"javascript\">(() =&gt; {\n    const a = 6;\n    console.log(a); // a\n})();\n</code></pre>\n<ol>\n<li>将它当作<strong>函数调用</strong>，并传递参数进去</li>\n</ol>\n<pre><code class=\"javascript\">const name = &#39;haha&#39;;\n(function IIFE(name) {\n    console.log(name); // haha\n})(name);\n</code></pre>\n<ol>\n<li>倒置代码的运行顺序，将需要运行的函数放在第二位， IIFE 执行之后，放在第二位的函数被当作参数传递进去。</li>\n</ol>\n<pre><code class=\"javascript\">const objA = {\n    name: &#39;haha&#39;,\n};\n\n(function IIFE(foo) {\n    foo(objA);\n}((obj) =&gt; {\n    const name = &#39;3&#39;;\n    console.log(name); // 3\n    console.log(obj.name); // haha\n}));\n</code></pre>\n<p>第二部分为一个匿名函数，被当作一个参数 foo 传入到 IIFE 函数的第一部分。最后匿名函数调用执行，将一个全局对象 objA 传入当作 obj 的参数值。</p>\n<h2 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h2><p>块作用域是一个用来对之前的最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息。</p>\n<p>块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指 { .. } 内部）。</p>\n<p>只想在 for 循环内部的上下文中使用 i，所以在 for 循环的头部使用 var 声明一个变量 i，但实际上 i 会被绑定在外部作用域（函数或全局）中，在全局范围内都有效。</p>\n<pre><code class=\"javascript\">var arr = [];\nfor (var i = 0; i &lt; 10; i++) {\n  arr[i] = function() {\n    console.log(i);\n  };\n}\narr[6](); // 10\n</code></pre>\n<p>console.log(i) 内部的 i 指向全局的的 i，最后循环完毕后在执行 arr<a href=\"\">6</a>，这时全局的 i 的值为 10.</p>\n<p>ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。</p>\n<h3 id=\"Let-变量\"><a href=\"#Let-变量\" class=\"headerlink\" title=\"Let 变量\"></a>Let 变量</h3><p>let 关键字可以将变量绑定到所在的任意作用域中（通常是 {  ..  } 内部）。换句话说，let 为其声明的变量隐式地了所在的块作用域。</p>\n<pre><code class=\"javascript\">var arr = [];\nfor (let i = 0; i &lt; 10; i++) {\n  arr[i] = function () {\n    console.log(i);\n  };\n}\narr[6](); // 6\n</code></pre>\n<p>由 let 声明的 i，每次循环都在循环的内部重新生成了一次变量，</p>\n<pre><code class=\"javascript\">var arr = [];\nfor (let i = 0; i &lt; 10; i++) {\n    let _i = i;\n  arr[i] = function () {\n    console.log(_i);\n  };\n}\narr[6](); // 6\n</code></pre>\n<p>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p>\n<p>let 声明的变量只在它所在的代码块有效。</p>\n<pre><code class=\"javascript\">{\n    var a = 6;\n    let b = 9;\n}\n\nconsole.log(a); // 6\nconsole.log(b); // b is not defined\n</code></pre>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>在代码块内，使用 let 命令声明变量，在声明之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）.</p>\n<pre><code class=\"javascript\">if (true) {\n  // TDZ开始\n  tmp = &#39;abc&#39;; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n</code></pre>\n<p>ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<pre><code class=\"javascript\">var tmp = 6;\n\nif(true) {\n  tmp = 3; // ReferenceError\n  let tmp;\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"最小特权原则\"><a href=\"#最小特权原则\" class=\"headerlink\" title=\"最小特权原则\"></a>最小特权原则</h2><p>最小特权原则也叫最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</p>\n<h3 id=\"函数封装\"><a href=\"#函数封装\" class=\"headerlink\" title=\"函数封装\"></a>函数封装</h3><p>将函数和变量包裹在一个外部包装函数的作用域中，使用这个作用域将这些具体的细节隐藏起来，实现函数的封装。</p>\n<ol>\n<li>可以避免同名标识符之间的冲突，避免全局变量污染。</li>\n<li>将具体内容私有化，防止外部以非预期的方式使用内部私有的内容。</li>\n</ol>\n<h2 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h2><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。</p>\n<p><strong>函数声明:</strong></p>\n<pre><code class=\"javascript\">function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n}\n\nfoo();\n</code></pre>\n<p><strong>立即执行函数表达式：</strong></p>\n<pre><code class=\"javascript\">(function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n})();\n</code></pre>\n<p>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位置（不仅仅是一行代码，而是整个声明中的位置）。<strong>如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</strong></p>\n<p>函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。</p>\n<ol>\n<li>函数声明中，foo 被绑定在所在的作用域中，可以在外部通过 foo() 来调用它。</li>\n<li>函数表达式中，foo 被绑定在函数表达式自身的函数中，外部不能访问调用，只能在其(function foo(){…}) 中的<code>...</code>位置被访问。</li>\n</ol>\n<h3 id=\"匿名函数表达式\"><a href=\"#匿名函数表达式\" class=\"headerlink\" title=\"匿名函数表达式\"></a>匿名函数表达式</h3><p>函数表达式可以匿名，而函数声明则不可以省略函数名。</p>\n<h3 id=\"立即执行函数表达式（IIFE）\"><a href=\"#立即执行函数表达式（IIFE）\" class=\"headerlink\" title=\"立即执行函数表达式（IIFE）\"></a>立即执行函数表达式（IIFE）</h3><p>立即执行函数表达式（Immediately Invoked Function Expression），将函数包含在一对（）中，成为一个函数表达式，在末尾加上另一对（）可以立即执行这个函数。<br>第一个（）将函数变成表达式，第二个（） 执行了这个函数。</p>\n<h4 id=\"IIFE-的两种写法\"><a href=\"#IIFE-的两种写法\" class=\"headerlink\" title=\"IIFE 的两种写法\"></a>IIFE 的两种写法</h4><ol>\n<li>立即执行函数表达式：</li>\n</ol>\n<pre><code class=\"javascript\">(function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n})();\n</code></pre>\n<ol>\n<li>另一种改进形式写法将调用的（）移到了用来包装的（）里面。</li>\n</ol>\n<pre><code class=\"javascript\">(function foo() {\n    for (let i = 0; i &lt; 10; i++) {\n        console.log(i);\n    }\n}());\n</code></pre>\n<p>两种写法功能上一样，凭个人喜好。</p>\n<h4 id=\"IIFE-表达式的用法\"><a href=\"#IIFE-表达式的用法\" class=\"headerlink\" title=\"IIFE 表达式的用法\"></a>IIFE 表达式的用法</h4><ol>\n<li>匿名函数表达式</li>\n</ol>\n<pre><code class=\"javascript\">(() =&gt; {\n    const a = 6;\n    console.log(a); // a\n})();\n</code></pre>\n<ol>\n<li>将它当作<strong>函数调用</strong>，并传递参数进去</li>\n</ol>\n<pre><code class=\"javascript\">const name = &#39;haha&#39;;\n(function IIFE(name) {\n    console.log(name); // haha\n})(name);\n</code></pre>\n<ol>\n<li>倒置代码的运行顺序，将需要运行的函数放在第二位， IIFE 执行之后，放在第二位的函数被当作参数传递进去。</li>\n</ol>\n<pre><code class=\"javascript\">const objA = {\n    name: &#39;haha&#39;,\n};\n\n(function IIFE(foo) {\n    foo(objA);\n}((obj) =&gt; {\n    const name = &#39;3&#39;;\n    console.log(name); // 3\n    console.log(obj.name); // haha\n}));\n</code></pre>\n<p>第二部分为一个匿名函数，被当作一个参数 foo 传入到 IIFE 函数的第一部分。最后匿名函数调用执行，将一个全局对象 objA 传入当作 obj 的参数值。</p>\n<h2 id=\"块作用域\"><a href=\"#块作用域\" class=\"headerlink\" title=\"块作用域\"></a>块作用域</h2><p>块作用域是一个用来对之前的最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息。</p>\n<p>块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指 { .. } 内部）。</p>\n<p>只想在 for 循环内部的上下文中使用 i，所以在 for 循环的头部使用 var 声明一个变量 i，但实际上 i 会被绑定在外部作用域（函数或全局）中，在全局范围内都有效。</p>\n<pre><code class=\"javascript\">var arr = [];\nfor (var i = 0; i &lt; 10; i++) {\n  arr[i] = function() {\n    console.log(i);\n  };\n}\narr[6](); // 10\n</code></pre>\n<p>console.log(i) 内部的 i 指向全局的的 i，最后循环完毕后在执行 arr<a href=\"\">6</a>，这时全局的 i 的值为 10.</p>\n<p>ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。</p>\n<h3 id=\"Let-变量\"><a href=\"#Let-变量\" class=\"headerlink\" title=\"Let 变量\"></a>Let 变量</h3><p>let 关键字可以将变量绑定到所在的任意作用域中（通常是 {  ..  } 内部）。换句话说，let 为其声明的变量隐式地了所在的块作用域。</p>\n<pre><code class=\"javascript\">var arr = [];\nfor (let i = 0; i &lt; 10; i++) {\n  arr[i] = function () {\n    console.log(i);\n  };\n}\narr[6](); // 6\n</code></pre>\n<p>由 let 声明的 i，每次循环都在循环的内部重新生成了一次变量，</p>\n<pre><code class=\"javascript\">var arr = [];\nfor (let i = 0; i &lt; 10; i++) {\n    let _i = i;\n  arr[i] = function () {\n    console.log(_i);\n  };\n}\narr[6](); // 6\n</code></pre>\n<p>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p>\n<p>let 声明的变量只在它所在的代码块有效。</p>\n<pre><code class=\"javascript\">{\n    var a = 6;\n    let b = 9;\n}\n\nconsole.log(a); // 6\nconsole.log(b); // b is not defined\n</code></pre>\n<h3 id=\"暂时性死区\"><a href=\"#暂时性死区\" class=\"headerlink\" title=\"暂时性死区\"></a>暂时性死区</h3><p>在代码块内，使用 let 命令声明变量，在声明之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）.</p>\n<pre><code class=\"javascript\">if (true) {\n  // TDZ开始\n  tmp = &#39;abc&#39;; // ReferenceError\n  console.log(tmp); // ReferenceError\n\n  let tmp; // TDZ结束\n  console.log(tmp); // undefined\n\n  tmp = 123;\n  console.log(tmp); // 123\n}\n</code></pre>\n<p>ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p>\n<p>只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p>\n<pre><code class=\"javascript\">var tmp = 6;\n\nif(true) {\n  tmp = 3; // ReferenceError\n  let tmp;\n}\n</code></pre>\n"},{"title":"前端学习资源","abbrlink":"422fbc06","data":"2017/9/16","_content":"## 导航\n\n* 前端导航：http://webjike.com/web.html\n## HTML\n\n* HTML MDN：https://developer.mozilla.org/zh-CN/docs/Web/HTML\n* HTML5 MDN：https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5\n\t* H5资源：http://www.html5tricks.com/\n* HTML语义化\n\n## CSS\n\n* CSS MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS\n\t* CSS 布局：http://zh.learnlayout.com/\n* CSS3 MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3\n* scss 中文网：https://www.sass.hk/\n\t*Sass (3.4.21) 中文文档：http://www.css88.com/doc/sass/#features\n* stylus 中文文档：http://www.zhangxinxu.com/jq/stylus/\n\n\n## JavaScipt\n\n* JavaScript MDN：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n* DOM操作（jQuery、React）\n\n## 框架\n\n* Bootstrap 中文网：http://www.bootcss.com/\n* Vue.js\n* React\n* Angular 4\n\n## UI设计\n\n* 免费高清图：https://pixabay.com/\n* 网页背景抓取：http://stylifyme.com/\n* Material中文：https://www.mdui.org/design/#\n* Material：https://www.materialui.co/\n* Flatui：https://flatuicolors.com/\n* Uplabs：https://www.uplabs.com/web\n* 花瓣：http://huaban.com/boards/3511269/\n* 颜色进制转换：http://www.sioe.cn/yingyong/yanse-rgb-16/\n\n* CSS 动画\n* JavaScript 动画\n* 字体\n\t* 汉字标准格式：https://css.hanzi.co/manual\n\t* Google Fonts：https://fonts.google.com/\n\t* Google Fonts 中文版：http://www.googlefonts.cn/\n\t* 360 Google 字体库：https://cdn.baomitu.com/index/fonts\n* ICON\n\t* 在线标签：https://shields.io/\n\t* Awesome 在线 ：http://fontawesome.io/icons/\n\t* Easyicon 下载：http://www.easyicon.net/\n\t* Icon 爱看搜索：http://www.iconpng.com/\n\t* Favico 在线制作：http://www.faviconico.org/favicon\n\t* Material ：https://material.io/icons/\n\t* 阿里巴巴 ：http://www.iconfont.cn/\n\t* Sample： https://simpleicons.org/\n\t* Flaticon：https://www.flaticon.com/\n\n* PS 切图\n* 响应式设计\n* Flexbox 布局\n\t* 阮一峰：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\n* 网格布局\n\n## Node.js\n\n* node.js 中文网：http://nodejs.cn/\n* node.js 中文社区：https://cnodejs.org/\n\t* 一起学Node.js：https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb\n\t*七天学会NodeJS：http://nqdeng.github.io/7-days-nodejs/\n\n# 进阶\n## TypeScript\n\n* 中文网：https://www.tslang.cn/\n* TypeScript Handbook(中文版)：https://zhongsp.gitbooks.io/typescript-handbook/content/\n\n### ECMAScript\n* ECMAScript 5\n\t* W3C 规范镜像版: http://yanhaijing.com/es5/#null\n\t* 自学手稿版： http://es5.weijieblog.com/\n* ECMAScript 6 阮一峰：http://es6.ruanyifeng.com/\n\n### 正则表达式\n\n* 三十分钟入门：https://deerchao.net/tutorials/regex/regex.htm\n\n### 工程化\n\n* gulp 中文网：http://www.gulpjs.com.cn/\n* NPM 淘宝镜像:http://npm.taobao.org/\n* AppVeyor 自动部署：https://ci.appveyor.com/\n\n# 资源\n\n* 收藏夹：http://u-hey.com/20/126\n\n## 图片压缩\n\n* 腾讯ISUX前端智图：http://zhitu.isux.us/\n\n## 在线编程\n\nCODEPEN：https://codepen.io/\nJSFiddle：https://jsfiddle.net/\n\n## MarkDown 语法\n\n* MarkDown 中文：http://wowubuntu.com/markdown/index.html\n\n## 代码高亮\n\nHighlightjs：https://highlightjs.org/static/demo/\n\n## CDN 静态资源库\n\n* 360 前端静态资源库：https://cdn.baomitu.com/\n* Staticfile CDN：https://www.staticfile.org/\n* 又拍云：http://www.bootcdn.cn/\n\n# 前端团队\n\n* 阿里巴巴国际UED:http://www.aliued.com/\n* 淘宝前端团队（FED）:http://taobaofed.org/\n* 腾讯Alloy Team：http://www.alloyteam.com/\n* 腾讯ISUX：https://isux.tencent.com/\n* 百度FEX：http://fex.baidu.com/\n* 京东Aotu：https://aotu.io/\n* 360 奇舞：https://75team.com/","source":"_posts/前端学习资源.md","raw":"---\ntitle: 前端学习资源\ntags: Web\ncategories: 其他\nabbrlink: 422fbc06\ndata: 2017/9/16\n---\n## 导航\n\n* 前端导航：http://webjike.com/web.html\n## HTML\n\n* HTML MDN：https://developer.mozilla.org/zh-CN/docs/Web/HTML\n* HTML5 MDN：https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5\n\t* H5资源：http://www.html5tricks.com/\n* HTML语义化\n\n## CSS\n\n* CSS MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS\n\t* CSS 布局：http://zh.learnlayout.com/\n* CSS3 MDN：https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3\n* scss 中文网：https://www.sass.hk/\n\t*Sass (3.4.21) 中文文档：http://www.css88.com/doc/sass/#features\n* stylus 中文文档：http://www.zhangxinxu.com/jq/stylus/\n\n\n## JavaScipt\n\n* JavaScript MDN：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n* DOM操作（jQuery、React）\n\n## 框架\n\n* Bootstrap 中文网：http://www.bootcss.com/\n* Vue.js\n* React\n* Angular 4\n\n## UI设计\n\n* 免费高清图：https://pixabay.com/\n* 网页背景抓取：http://stylifyme.com/\n* Material中文：https://www.mdui.org/design/#\n* Material：https://www.materialui.co/\n* Flatui：https://flatuicolors.com/\n* Uplabs：https://www.uplabs.com/web\n* 花瓣：http://huaban.com/boards/3511269/\n* 颜色进制转换：http://www.sioe.cn/yingyong/yanse-rgb-16/\n\n* CSS 动画\n* JavaScript 动画\n* 字体\n\t* 汉字标准格式：https://css.hanzi.co/manual\n\t* Google Fonts：https://fonts.google.com/\n\t* Google Fonts 中文版：http://www.googlefonts.cn/\n\t* 360 Google 字体库：https://cdn.baomitu.com/index/fonts\n* ICON\n\t* 在线标签：https://shields.io/\n\t* Awesome 在线 ：http://fontawesome.io/icons/\n\t* Easyicon 下载：http://www.easyicon.net/\n\t* Icon 爱看搜索：http://www.iconpng.com/\n\t* Favico 在线制作：http://www.faviconico.org/favicon\n\t* Material ：https://material.io/icons/\n\t* 阿里巴巴 ：http://www.iconfont.cn/\n\t* Sample： https://simpleicons.org/\n\t* Flaticon：https://www.flaticon.com/\n\n* PS 切图\n* 响应式设计\n* Flexbox 布局\n\t* 阮一峰：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\n* 网格布局\n\n## Node.js\n\n* node.js 中文网：http://nodejs.cn/\n* node.js 中文社区：https://cnodejs.org/\n\t* 一起学Node.js：https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb\n\t*七天学会NodeJS：http://nqdeng.github.io/7-days-nodejs/\n\n# 进阶\n## TypeScript\n\n* 中文网：https://www.tslang.cn/\n* TypeScript Handbook(中文版)：https://zhongsp.gitbooks.io/typescript-handbook/content/\n\n### ECMAScript\n* ECMAScript 5\n\t* W3C 规范镜像版: http://yanhaijing.com/es5/#null\n\t* 自学手稿版： http://es5.weijieblog.com/\n* ECMAScript 6 阮一峰：http://es6.ruanyifeng.com/\n\n### 正则表达式\n\n* 三十分钟入门：https://deerchao.net/tutorials/regex/regex.htm\n\n### 工程化\n\n* gulp 中文网：http://www.gulpjs.com.cn/\n* NPM 淘宝镜像:http://npm.taobao.org/\n* AppVeyor 自动部署：https://ci.appveyor.com/\n\n# 资源\n\n* 收藏夹：http://u-hey.com/20/126\n\n## 图片压缩\n\n* 腾讯ISUX前端智图：http://zhitu.isux.us/\n\n## 在线编程\n\nCODEPEN：https://codepen.io/\nJSFiddle：https://jsfiddle.net/\n\n## MarkDown 语法\n\n* MarkDown 中文：http://wowubuntu.com/markdown/index.html\n\n## 代码高亮\n\nHighlightjs：https://highlightjs.org/static/demo/\n\n## CDN 静态资源库\n\n* 360 前端静态资源库：https://cdn.baomitu.com/\n* Staticfile CDN：https://www.staticfile.org/\n* 又拍云：http://www.bootcdn.cn/\n\n# 前端团队\n\n* 阿里巴巴国际UED:http://www.aliued.com/\n* 淘宝前端团队（FED）:http://taobaofed.org/\n* 腾讯Alloy Team：http://www.alloyteam.com/\n* 腾讯ISUX：https://isux.tencent.com/\n* 百度FEX：http://fex.baidu.com/\n* 京东Aotu：https://aotu.io/\n* 360 奇舞：https://75team.com/","slug":"前端学习资源","published":1,"date":"2017-11-12T02:29:50.895Z","updated":"2017-11-12T02:29:50.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xkz003hdfbx8ohn5g7f","content":"<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><ul>\n<li><p>前端导航：<a href=\"http://webjike.com/web.html\" target=\"_blank\" rel=\"external\">http://webjike.com/web.html</a></p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2></li>\n<li><p>HTML MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p>\n</li>\n<li>HTML5 MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5</a><ul>\n<li>H5资源：<a href=\"http://www.html5tricks.com/\" target=\"_blank\" rel=\"external\">http://www.html5tricks.com/</a></li>\n</ul>\n</li>\n<li>HTML语义化</li>\n</ul>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li>CSS MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a><ul>\n<li>CSS 布局：<a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"external\">http://zh.learnlayout.com/</a></li>\n</ul>\n</li>\n<li>CSS3 MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3</a></li>\n<li>scss 中文网：<a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"external\">https://www.sass.hk/</a><br>  *Sass (3.4.21) 中文文档：<a href=\"http://www.css88.com/doc/sass/#features\" target=\"_blank\" rel=\"external\">http://www.css88.com/doc/sass/#features</a></li>\n<li>stylus 中文文档：<a href=\"http://www.zhangxinxu.com/jq/stylus/\" target=\"_blank\" rel=\"external\">http://www.zhangxinxu.com/jq/stylus/</a></li>\n</ul>\n<h2 id=\"JavaScipt\"><a href=\"#JavaScipt\" class=\"headerlink\" title=\"JavaScipt\"></a>JavaScipt</h2><ul>\n<li>JavaScript MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></li>\n<li>DOM操作（jQuery、React）</li>\n</ul>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><ul>\n<li>Bootstrap 中文网：<a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">http://www.bootcss.com/</a></li>\n<li>Vue.js</li>\n<li>React</li>\n<li>Angular 4</li>\n</ul>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><ul>\n<li>免费高清图：<a href=\"https://pixabay.com/\" target=\"_blank\" rel=\"external\">https://pixabay.com/</a></li>\n<li>网页背景抓取：<a href=\"http://stylifyme.com/\" target=\"_blank\" rel=\"external\">http://stylifyme.com/</a></li>\n<li>Material中文：<a href=\"https://www.mdui.org/design/#\" target=\"_blank\" rel=\"external\">https://www.mdui.org/design/#</a></li>\n<li>Material：<a href=\"https://www.materialui.co/\" target=\"_blank\" rel=\"external\">https://www.materialui.co/</a></li>\n<li>Flatui：<a href=\"https://flatuicolors.com/\" target=\"_blank\" rel=\"external\">https://flatuicolors.com/</a></li>\n<li>Uplabs：<a href=\"https://www.uplabs.com/web\" target=\"_blank\" rel=\"external\">https://www.uplabs.com/web</a></li>\n<li>花瓣：<a href=\"http://huaban.com/boards/3511269/\" target=\"_blank\" rel=\"external\">http://huaban.com/boards/3511269/</a></li>\n<li><p>颜色进制转换：<a href=\"http://www.sioe.cn/yingyong/yanse-rgb-16/\" target=\"_blank\" rel=\"external\">http://www.sioe.cn/yingyong/yanse-rgb-16/</a></p>\n</li>\n<li><p>CSS 动画</p>\n</li>\n<li>JavaScript 动画</li>\n<li>字体<ul>\n<li>汉字标准格式：<a href=\"https://css.hanzi.co/manual\" target=\"_blank\" rel=\"external\">https://css.hanzi.co/manual</a></li>\n<li>Google Fonts：<a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"external\">https://fonts.google.com/</a></li>\n<li>Google Fonts 中文版：<a href=\"http://www.googlefonts.cn/\" target=\"_blank\" rel=\"external\">http://www.googlefonts.cn/</a></li>\n<li>360 Google 字体库：<a href=\"https://cdn.baomitu.com/index/fonts\" target=\"_blank\" rel=\"external\">https://cdn.baomitu.com/index/fonts</a></li>\n</ul>\n</li>\n<li><p>ICON</p>\n<ul>\n<li>在线标签：<a href=\"https://shields.io/\" target=\"_blank\" rel=\"external\">https://shields.io/</a></li>\n<li>Awesome 在线 ：<a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"external\">http://fontawesome.io/icons/</a></li>\n<li>Easyicon 下载：<a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"external\">http://www.easyicon.net/</a></li>\n<li>Icon 爱看搜索：<a href=\"http://www.iconpng.com/\" target=\"_blank\" rel=\"external\">http://www.iconpng.com/</a></li>\n<li>Favico 在线制作：<a href=\"http://www.faviconico.org/favicon\" target=\"_blank\" rel=\"external\">http://www.faviconico.org/favicon</a></li>\n<li>Material ：<a href=\"https://material.io/icons/\" target=\"_blank\" rel=\"external\">https://material.io/icons/</a></li>\n<li>阿里巴巴 ：<a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"external\">http://www.iconfont.cn/</a></li>\n<li>Sample： <a href=\"https://simpleicons.org/\" target=\"_blank\" rel=\"external\">https://simpleicons.org/</a></li>\n<li>Flaticon：<a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"external\">https://www.flaticon.com/</a></li>\n</ul>\n</li>\n<li><p>PS 切图</p>\n</li>\n<li>响应式设计</li>\n<li>Flexbox 布局<ul>\n<li>阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool</a></li>\n</ul>\n</li>\n<li>网格布局</li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li>node.js 中文网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">http://nodejs.cn/</a></li>\n<li>node.js 中文社区：<a href=\"https://cnodejs.org/\" target=\"_blank\" rel=\"external\">https://cnodejs.org/</a><ul>\n<li>一起学Node.js：<a href=\"https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb\" target=\"_blank\" rel=\"external\">https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb</a><br>*七天学会NodeJS：<a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"external\">http://nqdeng.github.io/7-days-nodejs/</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><ul>\n<li>中文网：<a href=\"https://www.tslang.cn/\" target=\"_blank\" rel=\"external\">https://www.tslang.cn/</a></li>\n<li>TypeScript Handbook(中文版)：<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/\" target=\"_blank\" rel=\"external\">https://zhongsp.gitbooks.io/typescript-handbook/content/</a></li>\n</ul>\n<h3 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h3><ul>\n<li>ECMAScript 5<ul>\n<li>W3C 规范镜像版: <a href=\"http://yanhaijing.com/es5/#null\" target=\"_blank\" rel=\"external\">http://yanhaijing.com/es5/#null</a></li>\n<li>自学手稿版： <a href=\"http://es5.weijieblog.com/\" target=\"_blank\" rel=\"external\">http://es5.weijieblog.com/</a></li>\n</ul>\n</li>\n<li>ECMAScript 6 阮一峰：<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/</a></li>\n</ul>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><ul>\n<li>三十分钟入门：<a href=\"https://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"external\">https://deerchao.net/tutorials/regex/regex.htm</a></li>\n</ul>\n<h3 id=\"工程化\"><a href=\"#工程化\" class=\"headerlink\" title=\"工程化\"></a>工程化</h3><ul>\n<li>gulp 中文网：<a href=\"http://www.gulpjs.com.cn/\" target=\"_blank\" rel=\"external\">http://www.gulpjs.com.cn/</a></li>\n<li>NPM 淘宝镜像:<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n<li>AppVeyor 自动部署：<a href=\"https://ci.appveyor.com/\" target=\"_blank\" rel=\"external\">https://ci.appveyor.com/</a></li>\n</ul>\n<h1 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h1><ul>\n<li>收藏夹：<a href=\"http://u-hey.com/20/126\" target=\"_blank\" rel=\"external\">http://u-hey.com/20/126</a></li>\n</ul>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><ul>\n<li>腾讯ISUX前端智图：<a href=\"http://zhitu.isux.us/\" target=\"_blank\" rel=\"external\">http://zhitu.isux.us/</a></li>\n</ul>\n<h2 id=\"在线编程\"><a href=\"#在线编程\" class=\"headerlink\" title=\"在线编程\"></a>在线编程</h2><p>CODEPEN：<a href=\"https://codepen.io/\" target=\"_blank\" rel=\"external\">https://codepen.io/</a><br>JSFiddle：<a href=\"https://jsfiddle.net/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/</a></p>\n<h2 id=\"MarkDown-语法\"><a href=\"#MarkDown-语法\" class=\"headerlink\" title=\"MarkDown 语法\"></a>MarkDown 语法</h2><ul>\n<li>MarkDown 中文：<a href=\"http://wowubuntu.com/markdown/index.html\" target=\"_blank\" rel=\"external\">http://wowubuntu.com/markdown/index.html</a></li>\n</ul>\n<h2 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h2><p>Highlightjs：<a href=\"https://highlightjs.org/static/demo/\" target=\"_blank\" rel=\"external\">https://highlightjs.org/static/demo/</a></p>\n<h2 id=\"CDN-静态资源库\"><a href=\"#CDN-静态资源库\" class=\"headerlink\" title=\"CDN 静态资源库\"></a>CDN 静态资源库</h2><ul>\n<li>360 前端静态资源库：<a href=\"https://cdn.baomitu.com/\" target=\"_blank\" rel=\"external\">https://cdn.baomitu.com/</a></li>\n<li>Staticfile CDN：<a href=\"https://www.staticfile.org/\" target=\"_blank\" rel=\"external\">https://www.staticfile.org/</a></li>\n<li>又拍云：<a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"external\">http://www.bootcdn.cn/</a></li>\n</ul>\n<h1 id=\"前端团队\"><a href=\"#前端团队\" class=\"headerlink\" title=\"前端团队\"></a>前端团队</h1><ul>\n<li>阿里巴巴国际UED:<a href=\"http://www.aliued.com/\" target=\"_blank\" rel=\"external\">http://www.aliued.com/</a></li>\n<li>淘宝前端团队（FED）:<a href=\"http://taobaofed.org/\" target=\"_blank\" rel=\"external\">http://taobaofed.org/</a></li>\n<li>腾讯Alloy Team：<a href=\"http://www.alloyteam.com/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/</a></li>\n<li>腾讯ISUX：<a href=\"https://isux.tencent.com/\" target=\"_blank\" rel=\"external\">https://isux.tencent.com/</a></li>\n<li>百度FEX：<a href=\"http://fex.baidu.com/\" target=\"_blank\" rel=\"external\">http://fex.baidu.com/</a></li>\n<li>京东Aotu：<a href=\"https://aotu.io/\" target=\"_blank\" rel=\"external\">https://aotu.io/</a></li>\n<li>360 奇舞：<a href=\"https://75team.com/\" target=\"_blank\" rel=\"external\">https://75team.com/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><ul>\n<li><p>前端导航：<a href=\"http://webjike.com/web.html\" target=\"_blank\" rel=\"external\">http://webjike.com/web.html</a></p>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2></li>\n<li><p>HTML MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p>\n</li>\n<li>HTML5 MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5</a><ul>\n<li>H5资源：<a href=\"http://www.html5tricks.com/\" target=\"_blank\" rel=\"external\">http://www.html5tricks.com/</a></li>\n</ul>\n</li>\n<li>HTML语义化</li>\n</ul>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li>CSS MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a><ul>\n<li>CSS 布局：<a href=\"http://zh.learnlayout.com/\" target=\"_blank\" rel=\"external\">http://zh.learnlayout.com/</a></li>\n</ul>\n</li>\n<li>CSS3 MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3</a></li>\n<li>scss 中文网：<a href=\"https://www.sass.hk/\" target=\"_blank\" rel=\"external\">https://www.sass.hk/</a><br>  *Sass (3.4.21) 中文文档：<a href=\"http://www.css88.com/doc/sass/#features\" target=\"_blank\" rel=\"external\">http://www.css88.com/doc/sass/#features</a></li>\n<li>stylus 中文文档：<a href=\"http://www.zhangxinxu.com/jq/stylus/\" target=\"_blank\" rel=\"external\">http://www.zhangxinxu.com/jq/stylus/</a></li>\n</ul>\n<h2 id=\"JavaScipt\"><a href=\"#JavaScipt\" class=\"headerlink\" title=\"JavaScipt\"></a>JavaScipt</h2><ul>\n<li>JavaScript MDN：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></li>\n<li>DOM操作（jQuery、React）</li>\n</ul>\n<h2 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h2><ul>\n<li>Bootstrap 中文网：<a href=\"http://www.bootcss.com/\" target=\"_blank\" rel=\"external\">http://www.bootcss.com/</a></li>\n<li>Vue.js</li>\n<li>React</li>\n<li>Angular 4</li>\n</ul>\n<h2 id=\"UI设计\"><a href=\"#UI设计\" class=\"headerlink\" title=\"UI设计\"></a>UI设计</h2><ul>\n<li>免费高清图：<a href=\"https://pixabay.com/\" target=\"_blank\" rel=\"external\">https://pixabay.com/</a></li>\n<li>网页背景抓取：<a href=\"http://stylifyme.com/\" target=\"_blank\" rel=\"external\">http://stylifyme.com/</a></li>\n<li>Material中文：<a href=\"https://www.mdui.org/design/#\" target=\"_blank\" rel=\"external\">https://www.mdui.org/design/#</a></li>\n<li>Material：<a href=\"https://www.materialui.co/\" target=\"_blank\" rel=\"external\">https://www.materialui.co/</a></li>\n<li>Flatui：<a href=\"https://flatuicolors.com/\" target=\"_blank\" rel=\"external\">https://flatuicolors.com/</a></li>\n<li>Uplabs：<a href=\"https://www.uplabs.com/web\" target=\"_blank\" rel=\"external\">https://www.uplabs.com/web</a></li>\n<li>花瓣：<a href=\"http://huaban.com/boards/3511269/\" target=\"_blank\" rel=\"external\">http://huaban.com/boards/3511269/</a></li>\n<li><p>颜色进制转换：<a href=\"http://www.sioe.cn/yingyong/yanse-rgb-16/\" target=\"_blank\" rel=\"external\">http://www.sioe.cn/yingyong/yanse-rgb-16/</a></p>\n</li>\n<li><p>CSS 动画</p>\n</li>\n<li>JavaScript 动画</li>\n<li>字体<ul>\n<li>汉字标准格式：<a href=\"https://css.hanzi.co/manual\" target=\"_blank\" rel=\"external\">https://css.hanzi.co/manual</a></li>\n<li>Google Fonts：<a href=\"https://fonts.google.com/\" target=\"_blank\" rel=\"external\">https://fonts.google.com/</a></li>\n<li>Google Fonts 中文版：<a href=\"http://www.googlefonts.cn/\" target=\"_blank\" rel=\"external\">http://www.googlefonts.cn/</a></li>\n<li>360 Google 字体库：<a href=\"https://cdn.baomitu.com/index/fonts\" target=\"_blank\" rel=\"external\">https://cdn.baomitu.com/index/fonts</a></li>\n</ul>\n</li>\n<li><p>ICON</p>\n<ul>\n<li>在线标签：<a href=\"https://shields.io/\" target=\"_blank\" rel=\"external\">https://shields.io/</a></li>\n<li>Awesome 在线 ：<a href=\"http://fontawesome.io/icons/\" target=\"_blank\" rel=\"external\">http://fontawesome.io/icons/</a></li>\n<li>Easyicon 下载：<a href=\"http://www.easyicon.net/\" target=\"_blank\" rel=\"external\">http://www.easyicon.net/</a></li>\n<li>Icon 爱看搜索：<a href=\"http://www.iconpng.com/\" target=\"_blank\" rel=\"external\">http://www.iconpng.com/</a></li>\n<li>Favico 在线制作：<a href=\"http://www.faviconico.org/favicon\" target=\"_blank\" rel=\"external\">http://www.faviconico.org/favicon</a></li>\n<li>Material ：<a href=\"https://material.io/icons/\" target=\"_blank\" rel=\"external\">https://material.io/icons/</a></li>\n<li>阿里巴巴 ：<a href=\"http://www.iconfont.cn/\" target=\"_blank\" rel=\"external\">http://www.iconfont.cn/</a></li>\n<li>Sample： <a href=\"https://simpleicons.org/\" target=\"_blank\" rel=\"external\">https://simpleicons.org/</a></li>\n<li>Flaticon：<a href=\"https://www.flaticon.com/\" target=\"_blank\" rel=\"external\">https://www.flaticon.com/</a></li>\n</ul>\n</li>\n<li><p>PS 切图</p>\n</li>\n<li>响应式设计</li>\n<li>Flexbox 布局<ul>\n<li>阮一峰：<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool\" target=\"_blank\" rel=\"external\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool</a></li>\n</ul>\n</li>\n<li>网格布局</li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li>node.js 中文网：<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">http://nodejs.cn/</a></li>\n<li>node.js 中文社区：<a href=\"https://cnodejs.org/\" target=\"_blank\" rel=\"external\">https://cnodejs.org/</a><ul>\n<li>一起学Node.js：<a href=\"https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb\" target=\"_blank\" rel=\"external\">https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb</a><br>*七天学会NodeJS：<a href=\"http://nqdeng.github.io/7-days-nodejs/\" target=\"_blank\" rel=\"external\">http://nqdeng.github.io/7-days-nodejs/</a></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h1><h2 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h2><ul>\n<li>中文网：<a href=\"https://www.tslang.cn/\" target=\"_blank\" rel=\"external\">https://www.tslang.cn/</a></li>\n<li>TypeScript Handbook(中文版)：<a href=\"https://zhongsp.gitbooks.io/typescript-handbook/content/\" target=\"_blank\" rel=\"external\">https://zhongsp.gitbooks.io/typescript-handbook/content/</a></li>\n</ul>\n<h3 id=\"ECMAScript\"><a href=\"#ECMAScript\" class=\"headerlink\" title=\"ECMAScript\"></a>ECMAScript</h3><ul>\n<li>ECMAScript 5<ul>\n<li>W3C 规范镜像版: <a href=\"http://yanhaijing.com/es5/#null\" target=\"_blank\" rel=\"external\">http://yanhaijing.com/es5/#null</a></li>\n<li>自学手稿版： <a href=\"http://es5.weijieblog.com/\" target=\"_blank\" rel=\"external\">http://es5.weijieblog.com/</a></li>\n</ul>\n</li>\n<li>ECMAScript 6 阮一峰：<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/</a></li>\n</ul>\n<h3 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h3><ul>\n<li>三十分钟入门：<a href=\"https://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"external\">https://deerchao.net/tutorials/regex/regex.htm</a></li>\n</ul>\n<h3 id=\"工程化\"><a href=\"#工程化\" class=\"headerlink\" title=\"工程化\"></a>工程化</h3><ul>\n<li>gulp 中文网：<a href=\"http://www.gulpjs.com.cn/\" target=\"_blank\" rel=\"external\">http://www.gulpjs.com.cn/</a></li>\n<li>NPM 淘宝镜像:<a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></li>\n<li>AppVeyor 自动部署：<a href=\"https://ci.appveyor.com/\" target=\"_blank\" rel=\"external\">https://ci.appveyor.com/</a></li>\n</ul>\n<h1 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h1><ul>\n<li>收藏夹：<a href=\"http://u-hey.com/20/126\" target=\"_blank\" rel=\"external\">http://u-hey.com/20/126</a></li>\n</ul>\n<h2 id=\"图片压缩\"><a href=\"#图片压缩\" class=\"headerlink\" title=\"图片压缩\"></a>图片压缩</h2><ul>\n<li>腾讯ISUX前端智图：<a href=\"http://zhitu.isux.us/\" target=\"_blank\" rel=\"external\">http://zhitu.isux.us/</a></li>\n</ul>\n<h2 id=\"在线编程\"><a href=\"#在线编程\" class=\"headerlink\" title=\"在线编程\"></a>在线编程</h2><p>CODEPEN：<a href=\"https://codepen.io/\" target=\"_blank\" rel=\"external\">https://codepen.io/</a><br>JSFiddle：<a href=\"https://jsfiddle.net/\" target=\"_blank\" rel=\"external\">https://jsfiddle.net/</a></p>\n<h2 id=\"MarkDown-语法\"><a href=\"#MarkDown-语法\" class=\"headerlink\" title=\"MarkDown 语法\"></a>MarkDown 语法</h2><ul>\n<li>MarkDown 中文：<a href=\"http://wowubuntu.com/markdown/index.html\" target=\"_blank\" rel=\"external\">http://wowubuntu.com/markdown/index.html</a></li>\n</ul>\n<h2 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h2><p>Highlightjs：<a href=\"https://highlightjs.org/static/demo/\" target=\"_blank\" rel=\"external\">https://highlightjs.org/static/demo/</a></p>\n<h2 id=\"CDN-静态资源库\"><a href=\"#CDN-静态资源库\" class=\"headerlink\" title=\"CDN 静态资源库\"></a>CDN 静态资源库</h2><ul>\n<li>360 前端静态资源库：<a href=\"https://cdn.baomitu.com/\" target=\"_blank\" rel=\"external\">https://cdn.baomitu.com/</a></li>\n<li>Staticfile CDN：<a href=\"https://www.staticfile.org/\" target=\"_blank\" rel=\"external\">https://www.staticfile.org/</a></li>\n<li>又拍云：<a href=\"http://www.bootcdn.cn/\" target=\"_blank\" rel=\"external\">http://www.bootcdn.cn/</a></li>\n</ul>\n<h1 id=\"前端团队\"><a href=\"#前端团队\" class=\"headerlink\" title=\"前端团队\"></a>前端团队</h1><ul>\n<li>阿里巴巴国际UED:<a href=\"http://www.aliued.com/\" target=\"_blank\" rel=\"external\">http://www.aliued.com/</a></li>\n<li>淘宝前端团队（FED）:<a href=\"http://taobaofed.org/\" target=\"_blank\" rel=\"external\">http://taobaofed.org/</a></li>\n<li>腾讯Alloy Team：<a href=\"http://www.alloyteam.com/\" target=\"_blank\" rel=\"external\">http://www.alloyteam.com/</a></li>\n<li>腾讯ISUX：<a href=\"https://isux.tencent.com/\" target=\"_blank\" rel=\"external\">https://isux.tencent.com/</a></li>\n<li>百度FEX：<a href=\"http://fex.baidu.com/\" target=\"_blank\" rel=\"external\">http://fex.baidu.com/</a></li>\n<li>京东Aotu：<a href=\"https://aotu.io/\" target=\"_blank\" rel=\"external\">https://aotu.io/</a></li>\n<li>360 奇舞：<a href=\"https://75team.com/\" target=\"_blank\" rel=\"external\">https://75team.com/</a></li>\n</ul>\n"},{"title":"淘宝双飞翼布局","abbrlink":"ff1e4b17","data":"2017/9/16","_content":"## 淘宝双飞翼布局\n\n> 淘宝双飞翼布局和圣杯布局在前半部分的思路都差不多，只是在解决中间栏内容被挡住时所采用的方法不同。双飞翼布局在 main 下多一个增加 div，不使用相对定位，只用浮动和负边距，解决三栏液态式布局。\n\n### DOM 结构\n\n在 DOM 中按照主列、子列、附加列的顺序排列，保证主列优先加载。\n\n```html\n<div class=\"header\">\n        <strong>三栏布局之双飞翼布局</strong>\n    </div>\n    <div class=\"container\">\n        <div class=\"col main\">\n             <div class=\"main-wrap\">我是一个宽度自适应的主列。</div>\n        </div>\n        <div class=\"col sub\">我是一个子列。</div>\n        <div class=\"col extra\">我是一个附加列。</div>\n    </div>\n    <div class=\"footer\"></div>\n```\n\n以上 DOM 结构中，在 main 中添加了一个子 div，用来解决中间列内容被遮挡问题。\n\n### CSS 样式\n\n去掉相对定位的使用，去掉了父容器的 padding，使用中间栏新增 div 的 margin 解决遮挡问题。\n\n```css\n        body {\n            padding: 0;\n            margin: 0;\n            min-width: 440px;\n        }\n        .header,\n        .footer {\n            background-color: ##1c262f;\n            color: white;\n            text-align: center;\n            font-size: 1.5em;\n        }\n        .container {\n            width: 100%;\n            min-height: 200px;\n        }\n        .col {\n            float: left;\n            color: white;\n            text-align: justify; /* 文字两端对齐 */\n            min-height:120px;\n        }\n        .main{\n            width: 100%;\n        }\n        .sub {\n            background-color: ##ea4335;\n            width: 120px;\n            margin-left: -100%;\n        }\n        .extra {\n            background-color: ##34a853;\n            width: 200px;\n            margin-left: -200px;\n        }\n        .main-wrap {\n            margin-left: 120px;\n            margin-right: 200px;\n            background-color: ##4285f3;\n        }\n        .footr {\n            clear: both;\n        }\n```\n\n为 body 加上一个最小宽度(2 * sub width + extra width),避免网页放大时中间栏被挤到消失。","source":"_posts/双飞翼布局.md","raw":"---\ntitle: 淘宝双飞翼布局\ntags: CSS\ncategories: CSS\nabbrlink: ff1e4b17\ndata: 2017/9/16\n---\n## 淘宝双飞翼布局\n\n> 淘宝双飞翼布局和圣杯布局在前半部分的思路都差不多，只是在解决中间栏内容被挡住时所采用的方法不同。双飞翼布局在 main 下多一个增加 div，不使用相对定位，只用浮动和负边距，解决三栏液态式布局。\n\n### DOM 结构\n\n在 DOM 中按照主列、子列、附加列的顺序排列，保证主列优先加载。\n\n```html\n<div class=\"header\">\n        <strong>三栏布局之双飞翼布局</strong>\n    </div>\n    <div class=\"container\">\n        <div class=\"col main\">\n             <div class=\"main-wrap\">我是一个宽度自适应的主列。</div>\n        </div>\n        <div class=\"col sub\">我是一个子列。</div>\n        <div class=\"col extra\">我是一个附加列。</div>\n    </div>\n    <div class=\"footer\"></div>\n```\n\n以上 DOM 结构中，在 main 中添加了一个子 div，用来解决中间列内容被遮挡问题。\n\n### CSS 样式\n\n去掉相对定位的使用，去掉了父容器的 padding，使用中间栏新增 div 的 margin 解决遮挡问题。\n\n```css\n        body {\n            padding: 0;\n            margin: 0;\n            min-width: 440px;\n        }\n        .header,\n        .footer {\n            background-color: ##1c262f;\n            color: white;\n            text-align: center;\n            font-size: 1.5em;\n        }\n        .container {\n            width: 100%;\n            min-height: 200px;\n        }\n        .col {\n            float: left;\n            color: white;\n            text-align: justify; /* 文字两端对齐 */\n            min-height:120px;\n        }\n        .main{\n            width: 100%;\n        }\n        .sub {\n            background-color: ##ea4335;\n            width: 120px;\n            margin-left: -100%;\n        }\n        .extra {\n            background-color: ##34a853;\n            width: 200px;\n            margin-left: -200px;\n        }\n        .main-wrap {\n            margin-left: 120px;\n            margin-right: 200px;\n            background-color: ##4285f3;\n        }\n        .footr {\n            clear: both;\n        }\n```\n\n为 body 加上一个最小宽度(2 * sub width + extra width),避免网页放大时中间栏被挤到消失。","slug":"双飞翼布局","published":1,"date":"2017-11-12T02:30:05.453Z","updated":"2017-11-12T02:30:05.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xl1003kdfbxv482lp02","content":"<h2 id=\"淘宝双飞翼布局\"><a href=\"#淘宝双飞翼布局\" class=\"headerlink\" title=\"淘宝双飞翼布局\"></a>淘宝双飞翼布局</h2><blockquote>\n<p>淘宝双飞翼布局和圣杯布局在前半部分的思路都差不多，只是在解决中间栏内容被挡住时所采用的方法不同。双飞翼布局在 main 下多一个增加 div，不使用相对定位，只用浮动和负边距，解决三栏液态式布局。</p>\n</blockquote>\n<h3 id=\"DOM-结构\"><a href=\"#DOM-结构\" class=\"headerlink\" title=\"DOM 结构\"></a>DOM 结构</h3><p>在 DOM 中按照主列、子列、附加列的顺序排列，保证主列优先加载。</p>\n<pre><code class=\"html\">&lt;div class=&quot;header&quot;&gt;\n        &lt;strong&gt;三栏布局之双飞翼布局&lt;/strong&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;col main&quot;&gt;\n             &lt;div class=&quot;main-wrap&quot;&gt;我是一个宽度自适应的主列。&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col sub&quot;&gt;我是一个子列。&lt;/div&gt;\n        &lt;div class=&quot;col extra&quot;&gt;我是一个附加列。&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>以上 DOM 结构中，在 main 中添加了一个子 div，用来解决中间列内容被遮挡问题。</p>\n<h3 id=\"CSS-样式\"><a href=\"#CSS-样式\" class=\"headerlink\" title=\"CSS 样式\"></a>CSS 样式</h3><p>去掉相对定位的使用，去掉了父容器的 padding，使用中间栏新增 div 的 margin 解决遮挡问题。</p>\n<pre><code class=\"css\">        body {\n            padding: 0;\n            margin: 0;\n            min-width: 440px;\n        }\n        .header,\n        .footer {\n            background-color: ##1c262f;\n            color: white;\n            text-align: center;\n            font-size: 1.5em;\n        }\n        .container {\n            width: 100%;\n            min-height: 200px;\n        }\n        .col {\n            float: left;\n            color: white;\n            text-align: justify; /* 文字两端对齐 */\n            min-height:120px;\n        }\n        .main{\n            width: 100%;\n        }\n        .sub {\n            background-color: ##ea4335;\n            width: 120px;\n            margin-left: -100%;\n        }\n        .extra {\n            background-color: ##34a853;\n            width: 200px;\n            margin-left: -200px;\n        }\n        .main-wrap {\n            margin-left: 120px;\n            margin-right: 200px;\n            background-color: ##4285f3;\n        }\n        .footr {\n            clear: both;\n        }\n</code></pre>\n<p>为 body 加上一个最小宽度(2 * sub width + extra width),避免网页放大时中间栏被挤到消失。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"淘宝双飞翼布局\"><a href=\"#淘宝双飞翼布局\" class=\"headerlink\" title=\"淘宝双飞翼布局\"></a>淘宝双飞翼布局</h2><blockquote>\n<p>淘宝双飞翼布局和圣杯布局在前半部分的思路都差不多，只是在解决中间栏内容被挡住时所采用的方法不同。双飞翼布局在 main 下多一个增加 div，不使用相对定位，只用浮动和负边距，解决三栏液态式布局。</p>\n</blockquote>\n<h3 id=\"DOM-结构\"><a href=\"#DOM-结构\" class=\"headerlink\" title=\"DOM 结构\"></a>DOM 结构</h3><p>在 DOM 中按照主列、子列、附加列的顺序排列，保证主列优先加载。</p>\n<pre><code class=\"html\">&lt;div class=&quot;header&quot;&gt;\n        &lt;strong&gt;三栏布局之双飞翼布局&lt;/strong&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;col main&quot;&gt;\n             &lt;div class=&quot;main-wrap&quot;&gt;我是一个宽度自适应的主列。&lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col sub&quot;&gt;我是一个子列。&lt;/div&gt;\n        &lt;div class=&quot;col extra&quot;&gt;我是一个附加列。&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n</code></pre>\n<p>以上 DOM 结构中，在 main 中添加了一个子 div，用来解决中间列内容被遮挡问题。</p>\n<h3 id=\"CSS-样式\"><a href=\"#CSS-样式\" class=\"headerlink\" title=\"CSS 样式\"></a>CSS 样式</h3><p>去掉相对定位的使用，去掉了父容器的 padding，使用中间栏新增 div 的 margin 解决遮挡问题。</p>\n<pre><code class=\"css\">        body {\n            padding: 0;\n            margin: 0;\n            min-width: 440px;\n        }\n        .header,\n        .footer {\n            background-color: ##1c262f;\n            color: white;\n            text-align: center;\n            font-size: 1.5em;\n        }\n        .container {\n            width: 100%;\n            min-height: 200px;\n        }\n        .col {\n            float: left;\n            color: white;\n            text-align: justify; /* 文字两端对齐 */\n            min-height:120px;\n        }\n        .main{\n            width: 100%;\n        }\n        .sub {\n            background-color: ##ea4335;\n            width: 120px;\n            margin-left: -100%;\n        }\n        .extra {\n            background-color: ##34a853;\n            width: 200px;\n            margin-left: -200px;\n        }\n        .main-wrap {\n            margin-left: 120px;\n            margin-right: 200px;\n            background-color: ##4285f3;\n        }\n        .footr {\n            clear: both;\n        }\n</code></pre>\n<p>为 body 加上一个最小宽度(2 * sub width + extra width),避免网页放大时中间栏被挤到消失。</p>\n"},{"title":"动手实现一个简单的 vue tabs","mathjax":true,"abbrlink":"44515447","date":"2017-11-20T04:31:14.000Z","_content":"## 动手写一个简单的 vue tabs 切换页\n\n使用第三方的框架的组件进行布局时, 发现出来的效果和自己想要的总是差一点, 所以自己动手写了一个 tabs 选项卡.\n\n整个选项卡分为两个部分: 上半部分的标题和下半部分的内容. 要求是: 当点击到某个选项时, 选项下的光标随之切换, 下半部分的内容更新.\n\nHTML 部分: 将这个 tabs 分为 title 和 views 两个部分, title 部分使用 v-for 循环将一个存着标题的数组渲染到页面中去, views 部分根据当前选择选项的 index 显示对应的内容.\n\n```html\n<template>\n  <div id=\"tabs\">\n    <div class=\"titles\">\n      <ul>\n        <li v-for=\"(goods,index) in goods\"\n          :key=\"goods.index\"\n          @click=\"toggle(index)\">\n          <span :class=\"{selected:select==index}\">{{goods.text}}</span>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"views\">\n      {{views[select].text}}\n    </div>\n    <component :is=\"currentView\">1</component>\n  </div>\n</template>\n```\n\nJavaScript 部分: 一个 title 数组和一个内容数组 views, 一个select 标识符, 用来确定被选中选项的 index 值, 还包括一个 toggle 方法用来响应鼠标点击更改 select 的值.\n```javascript\n<script>\n  export default {\n    data() {\n      return {\n        select: 0,\n        goods: [\n          {text: '下单'},\n          {text: '挂单'},\n          {text: '外卖'},\n          {text: '团购'}],\n        views: [\n          {text: '下单页面'},\n          {text: '挂单页面'},\n          {text: '外卖页面'},\n          {text: '团购页面'}]\n        };\n    },\n    methods: {\n      toggle(index) {\n        this.select = index;\n      }\n    }\n  };\n```\n\nCSS 部分: 这个主要问题是鼠标点击切换标题时, 下面的光标随之移到, 最开始使用 border-bottom 来作为光标, 但发现样式不好控制. 最后使用伪元素, 解决下光标问题. 为标题加一个 span 标签, 给其绑定一个动态的的 class selected, 当前选择元素的 select 和 当前的 index 相等时, 为其添上一个 selected 类.\n```css\n<style lang=\"scss\">\n  #tabs {\n    display: flex;\n    // 让整个页面绝对居中\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n\n    width: 30%;\n    height: 100%;\n    margin: auto;\n    padding: 0;\n    padding: 0 1em;\n\n    font-size: 16px;\n\n    background-color: #fff;\n\n    flex-direction: column;\n    .titles {\n      ul {\n        display: flex;\n\n        list-style: none;\n\n        width: 100%;\n        margin: 0 0 1em 0;\n        padding: 0;\n        border-bottom: 2px solid rgba(0, 0, 0, .18);\n\n        flex-direction: row;\n        justify-content: space-between;\n        li {\n          display: inline;\n\n          margin: 1em 0;\n          &:hover {\n            cursor: pointer;\n          }\n          span {\n            position: relative;\n\n            padding: 1em 0;\n            // 下划线\n            &::after {\n\n              display: block;\n              content: \"\";\n              position: absolute;\n              top: 3.125em; // 文字高度 加上文字上下 padding 值加上父元素 border-bottom 的宽度\n              left: 0;\n\n              width: 2em; // 下划线初始两个字宽度\n              height: 3px;\n\n              background-color: #409eff;\n\n              transition: transform .3s ease-in-out; // 设置缓入缓出效果\n              transform: scale(0, 1); // 将 x 轴缩放为 0\n              transform-origin: 50%; // transform-origin 属性允许改变被转换元素的位置\n            }\n          }\n        }\n        // 选中时样式\n        .selected {\n          color: #409eff;\n          &::after {\n            transform: scale(1, 1); // 选中时恢复\n          }\n        }\n      }\n    }\n  }\n</style>\n```\n效果演示图: ![](http://ou37yhdfy.bkt.clouddn.com/201711201243_855.gif)","source":"_posts/动手实现一个简单的 vue tabs.md","raw":"---\ntitle: 动手实现一个简单的 vue tabs\nmathjax: true\nabbrlink: '44515447'\ntags:\n  - tabs\n  - vue\ncategories: Vue\ndate: 2017-11-20 12:31:14\n---\n## 动手写一个简单的 vue tabs 切换页\n\n使用第三方的框架的组件进行布局时, 发现出来的效果和自己想要的总是差一点, 所以自己动手写了一个 tabs 选项卡.\n\n整个选项卡分为两个部分: 上半部分的标题和下半部分的内容. 要求是: 当点击到某个选项时, 选项下的光标随之切换, 下半部分的内容更新.\n\nHTML 部分: 将这个 tabs 分为 title 和 views 两个部分, title 部分使用 v-for 循环将一个存着标题的数组渲染到页面中去, views 部分根据当前选择选项的 index 显示对应的内容.\n\n```html\n<template>\n  <div id=\"tabs\">\n    <div class=\"titles\">\n      <ul>\n        <li v-for=\"(goods,index) in goods\"\n          :key=\"goods.index\"\n          @click=\"toggle(index)\">\n          <span :class=\"{selected:select==index}\">{{goods.text}}</span>\n        </li>\n      </ul>\n    </div>\n\n    <div class=\"views\">\n      {{views[select].text}}\n    </div>\n    <component :is=\"currentView\">1</component>\n  </div>\n</template>\n```\n\nJavaScript 部分: 一个 title 数组和一个内容数组 views, 一个select 标识符, 用来确定被选中选项的 index 值, 还包括一个 toggle 方法用来响应鼠标点击更改 select 的值.\n```javascript\n<script>\n  export default {\n    data() {\n      return {\n        select: 0,\n        goods: [\n          {text: '下单'},\n          {text: '挂单'},\n          {text: '外卖'},\n          {text: '团购'}],\n        views: [\n          {text: '下单页面'},\n          {text: '挂单页面'},\n          {text: '外卖页面'},\n          {text: '团购页面'}]\n        };\n    },\n    methods: {\n      toggle(index) {\n        this.select = index;\n      }\n    }\n  };\n```\n\nCSS 部分: 这个主要问题是鼠标点击切换标题时, 下面的光标随之移到, 最开始使用 border-bottom 来作为光标, 但发现样式不好控制. 最后使用伪元素, 解决下光标问题. 为标题加一个 span 标签, 给其绑定一个动态的的 class selected, 当前选择元素的 select 和 当前的 index 相等时, 为其添上一个 selected 类.\n```css\n<style lang=\"scss\">\n  #tabs {\n    display: flex;\n    // 让整个页面绝对居中\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n\n    width: 30%;\n    height: 100%;\n    margin: auto;\n    padding: 0;\n    padding: 0 1em;\n\n    font-size: 16px;\n\n    background-color: #fff;\n\n    flex-direction: column;\n    .titles {\n      ul {\n        display: flex;\n\n        list-style: none;\n\n        width: 100%;\n        margin: 0 0 1em 0;\n        padding: 0;\n        border-bottom: 2px solid rgba(0, 0, 0, .18);\n\n        flex-direction: row;\n        justify-content: space-between;\n        li {\n          display: inline;\n\n          margin: 1em 0;\n          &:hover {\n            cursor: pointer;\n          }\n          span {\n            position: relative;\n\n            padding: 1em 0;\n            // 下划线\n            &::after {\n\n              display: block;\n              content: \"\";\n              position: absolute;\n              top: 3.125em; // 文字高度 加上文字上下 padding 值加上父元素 border-bottom 的宽度\n              left: 0;\n\n              width: 2em; // 下划线初始两个字宽度\n              height: 3px;\n\n              background-color: #409eff;\n\n              transition: transform .3s ease-in-out; // 设置缓入缓出效果\n              transform: scale(0, 1); // 将 x 轴缩放为 0\n              transform-origin: 50%; // transform-origin 属性允许改变被转换元素的位置\n            }\n          }\n        }\n        // 选中时样式\n        .selected {\n          color: #409eff;\n          &::after {\n            transform: scale(1, 1); // 选中时恢复\n          }\n        }\n      }\n    }\n  }\n</style>\n```\n效果演示图: ![](http://ou37yhdfy.bkt.clouddn.com/201711201243_855.gif)","slug":"动手实现一个简单的 vue tabs","published":1,"updated":"2017-11-30T11:19:14.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xl3003pdfbxtsqlko0e","content":"<h2 id=\"动手写一个简单的-vue-tabs-切换页\"><a href=\"#动手写一个简单的-vue-tabs-切换页\" class=\"headerlink\" title=\"动手写一个简单的 vue tabs 切换页\"></a>动手写一个简单的 vue tabs 切换页</h2><p>使用第三方的框架的组件进行布局时, 发现出来的效果和自己想要的总是差一点, 所以自己动手写了一个 tabs 选项卡.</p>\n<p>整个选项卡分为两个部分: 上半部分的标题和下半部分的内容. 要求是: 当点击到某个选项时, 选项下的光标随之切换, 下半部分的内容更新.</p>\n<p>HTML 部分: 将这个 tabs 分为 title 和 views 两个部分, title 部分使用 v-for 循环将一个存着标题的数组渲染到页面中去, views 部分根据当前选择选项的 index 显示对应的内容.</p>\n<pre><code class=\"html\">&lt;template&gt;\n  &lt;div id=&quot;tabs&quot;&gt;\n    &lt;div class=&quot;titles&quot;&gt;\n      &lt;ul&gt;\n        &lt;li v-for=&quot;(goods,index) in goods&quot;\n          :key=&quot;goods.index&quot;\n          @click=&quot;toggle(index)&quot;&gt;\n          &lt;span :class=&quot;{selected:select==index}&quot;&gt;{{goods.text}}&lt;/span&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;div class=&quot;views&quot;&gt;\n      {{views[select].text}}\n    &lt;/div&gt;\n    &lt;component :is=&quot;currentView&quot;&gt;1&lt;/component&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>JavaScript 部分: 一个 title 数组和一个内容数组 views, 一个select 标识符, 用来确定被选中选项的 index 值, 还包括一个 toggle 方法用来响应鼠标点击更改 select 的值.</p>\n<pre><code class=\"javascript\">&lt;script&gt;\n  export default {\n    data() {\n      return {\n        select: 0,\n        goods: [\n          {text: &#39;下单&#39;},\n          {text: &#39;挂单&#39;},\n          {text: &#39;外卖&#39;},\n          {text: &#39;团购&#39;}],\n        views: [\n          {text: &#39;下单页面&#39;},\n          {text: &#39;挂单页面&#39;},\n          {text: &#39;外卖页面&#39;},\n          {text: &#39;团购页面&#39;}]\n        };\n    },\n    methods: {\n      toggle(index) {\n        this.select = index;\n      }\n    }\n  };\n</code></pre>\n<p>CSS 部分: 这个主要问题是鼠标点击切换标题时, 下面的光标随之移到, 最开始使用 border-bottom 来作为光标, 但发现样式不好控制. 最后使用伪元素, 解决下光标问题. 为标题加一个 span 标签, 给其绑定一个动态的的 class selected, 当前选择元素的 select 和 当前的 index 相等时, 为其添上一个 selected 类.</p>\n<pre><code class=\"css\">&lt;style lang=&quot;scss&quot;&gt;\n  #tabs {\n    display: flex;\n    // 让整个页面绝对居中\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n\n    width: 30%;\n    height: 100%;\n    margin: auto;\n    padding: 0;\n    padding: 0 1em;\n\n    font-size: 16px;\n\n    background-color: #fff;\n\n    flex-direction: column;\n    .titles {\n      ul {\n        display: flex;\n\n        list-style: none;\n\n        width: 100%;\n        margin: 0 0 1em 0;\n        padding: 0;\n        border-bottom: 2px solid rgba(0, 0, 0, .18);\n\n        flex-direction: row;\n        justify-content: space-between;\n        li {\n          display: inline;\n\n          margin: 1em 0;\n          &amp;:hover {\n            cursor: pointer;\n          }\n          span {\n            position: relative;\n\n            padding: 1em 0;\n            // 下划线\n            &amp;::after {\n\n              display: block;\n              content: &quot;&quot;;\n              position: absolute;\n              top: 3.125em; // 文字高度 加上文字上下 padding 值加上父元素 border-bottom 的宽度\n              left: 0;\n\n              width: 2em; // 下划线初始两个字宽度\n              height: 3px;\n\n              background-color: #409eff;\n\n              transition: transform .3s ease-in-out; // 设置缓入缓出效果\n              transform: scale(0, 1); // 将 x 轴缩放为 0\n              transform-origin: 50%; // transform-origin 属性允许改变被转换元素的位置\n            }\n          }\n        }\n        // 选中时样式\n        .selected {\n          color: #409eff;\n          &amp;::after {\n            transform: scale(1, 1); // 选中时恢复\n          }\n        }\n      }\n    }\n  }\n&lt;/style&gt;\n</code></pre>\n<p>效果演示图: <img src=\"http://ou37yhdfy.bkt.clouddn.com/201711201243_855.gif\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"动手写一个简单的-vue-tabs-切换页\"><a href=\"#动手写一个简单的-vue-tabs-切换页\" class=\"headerlink\" title=\"动手写一个简单的 vue tabs 切换页\"></a>动手写一个简单的 vue tabs 切换页</h2><p>使用第三方的框架的组件进行布局时, 发现出来的效果和自己想要的总是差一点, 所以自己动手写了一个 tabs 选项卡.</p>\n<p>整个选项卡分为两个部分: 上半部分的标题和下半部分的内容. 要求是: 当点击到某个选项时, 选项下的光标随之切换, 下半部分的内容更新.</p>\n<p>HTML 部分: 将这个 tabs 分为 title 和 views 两个部分, title 部分使用 v-for 循环将一个存着标题的数组渲染到页面中去, views 部分根据当前选择选项的 index 显示对应的内容.</p>\n<pre><code class=\"html\">&lt;template&gt;\n  &lt;div id=&quot;tabs&quot;&gt;\n    &lt;div class=&quot;titles&quot;&gt;\n      &lt;ul&gt;\n        &lt;li v-for=&quot;(goods,index) in goods&quot;\n          :key=&quot;goods.index&quot;\n          @click=&quot;toggle(index)&quot;&gt;\n          &lt;span :class=&quot;{selected:select==index}&quot;&gt;{{goods.text}}&lt;/span&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;div class=&quot;views&quot;&gt;\n      {{views[select].text}}\n    &lt;/div&gt;\n    &lt;component :is=&quot;currentView&quot;&gt;1&lt;/component&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>JavaScript 部分: 一个 title 数组和一个内容数组 views, 一个select 标识符, 用来确定被选中选项的 index 值, 还包括一个 toggle 方法用来响应鼠标点击更改 select 的值.</p>\n<pre><code class=\"javascript\">&lt;script&gt;\n  export default {\n    data() {\n      return {\n        select: 0,\n        goods: [\n          {text: &#39;下单&#39;},\n          {text: &#39;挂单&#39;},\n          {text: &#39;外卖&#39;},\n          {text: &#39;团购&#39;}],\n        views: [\n          {text: &#39;下单页面&#39;},\n          {text: &#39;挂单页面&#39;},\n          {text: &#39;外卖页面&#39;},\n          {text: &#39;团购页面&#39;}]\n        };\n    },\n    methods: {\n      toggle(index) {\n        this.select = index;\n      }\n    }\n  };\n</code></pre>\n<p>CSS 部分: 这个主要问题是鼠标点击切换标题时, 下面的光标随之移到, 最开始使用 border-bottom 来作为光标, 但发现样式不好控制. 最后使用伪元素, 解决下光标问题. 为标题加一个 span 标签, 给其绑定一个动态的的 class selected, 当前选择元素的 select 和 当前的 index 相等时, 为其添上一个 selected 类.</p>\n<pre><code class=\"css\">&lt;style lang=&quot;scss&quot;&gt;\n  #tabs {\n    display: flex;\n    // 让整个页面绝对居中\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n\n    width: 30%;\n    height: 100%;\n    margin: auto;\n    padding: 0;\n    padding: 0 1em;\n\n    font-size: 16px;\n\n    background-color: #fff;\n\n    flex-direction: column;\n    .titles {\n      ul {\n        display: flex;\n\n        list-style: none;\n\n        width: 100%;\n        margin: 0 0 1em 0;\n        padding: 0;\n        border-bottom: 2px solid rgba(0, 0, 0, .18);\n\n        flex-direction: row;\n        justify-content: space-between;\n        li {\n          display: inline;\n\n          margin: 1em 0;\n          &amp;:hover {\n            cursor: pointer;\n          }\n          span {\n            position: relative;\n\n            padding: 1em 0;\n            // 下划线\n            &amp;::after {\n\n              display: block;\n              content: &quot;&quot;;\n              position: absolute;\n              top: 3.125em; // 文字高度 加上文字上下 padding 值加上父元素 border-bottom 的宽度\n              left: 0;\n\n              width: 2em; // 下划线初始两个字宽度\n              height: 3px;\n\n              background-color: #409eff;\n\n              transition: transform .3s ease-in-out; // 设置缓入缓出效果\n              transform: scale(0, 1); // 将 x 轴缩放为 0\n              transform-origin: 50%; // transform-origin 属性允许改变被转换元素的位置\n            }\n          }\n        }\n        // 选中时样式\n        .selected {\n          color: #409eff;\n          &amp;::after {\n            transform: scale(1, 1); // 选中时恢复\n          }\n        }\n      }\n    }\n  }\n&lt;/style&gt;\n</code></pre>\n<p>效果演示图: <img src=\"http://ou37yhdfy.bkt.clouddn.com/201711201243_855.gif\" alt=\"\"></p>\n"},{"title":"变量作用域","abbrlink":"7395d6fb","_content":"## 变量作用域\n* JavaScript 的函数可以嵌套，内部函数可以访问外部函数定义的变量，反之则不行。\n* `var`和`let`创建的变量区别在于:\n  1. `var`声明的变量作用域为最近的函数块，`let`声明的变量作用域为最近的闭合块，往往小于函数块。\n  2. `var`声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出`undefined`。\n  3. `let`声明不受变量提升的约束，这意味着`let`声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。`let`声明的变量不能在实际声明之前使用，否则会抛出`ReferenceError`异常。","source":"_posts/变量作用域.md","raw":"---\ntitle: 变量作用域\ntags: YouDon'tKnowJavaScript\ncategories: JavaScript\nabbrlink: 7395d6fb\n---\n## 变量作用域\n* JavaScript 的函数可以嵌套，内部函数可以访问外部函数定义的变量，反之则不行。\n* `var`和`let`创建的变量区别在于:\n  1. `var`声明的变量作用域为最近的函数块，`let`声明的变量作用域为最近的闭合块，往往小于函数块。\n  2. `var`声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出`undefined`。\n  3. `let`声明不受变量提升的约束，这意味着`let`声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。`let`声明的变量不能在实际声明之前使用，否则会抛出`ReferenceError`异常。","slug":"变量作用域","published":1,"date":"2017-11-12T02:38:18.130Z","updated":"2017-11-12T02:38:18.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xl7003sdfbx2doupgyu","content":"<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><ul>\n<li>JavaScript 的函数可以嵌套，内部函数可以访问外部函数定义的变量，反之则不行。</li>\n<li><code>var</code>和<code>let</code>创建的变量区别在于:<ol>\n<li><code>var</code>声明的变量作用域为最近的函数块，<code>let</code>声明的变量作用域为最近的闭合块，往往小于函数块。</li>\n<li><code>var</code>声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出<code>undefined</code>。</li>\n<li><code>let</code>声明不受变量提升的约束，这意味着<code>let</code>声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。<code>let</code>声明的变量不能在实际声明之前使用，否则会抛出<code>ReferenceError</code>异常。</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><ul>\n<li>JavaScript 的函数可以嵌套，内部函数可以访问外部函数定义的变量，反之则不行。</li>\n<li><code>var</code>和<code>let</code>创建的变量区别在于:<ol>\n<li><code>var</code>声明的变量作用域为最近的函数块，<code>let</code>声明的变量作用域为最近的闭合块，往往小于函数块。</li>\n<li><code>var</code>声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出<code>undefined</code>。</li>\n<li><code>let</code>声明不受变量提升的约束，这意味着<code>let</code>声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。<code>let</code>声明的变量不能在实际声明之前使用，否则会抛出<code>ReferenceError</code>异常。</li>\n</ol>\n</li>\n</ul>\n"},{"title":"变量提升","abbrlink":"3080460d","_content":"## 变量与函数提升\n\n**包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。**\n### 变量提升\n\n例如一个 var = 2；声明，在 javascript 引擎中它实际上被分为 2 个部分， 定义声明var a；和赋值声明 a = 2；第一个定义声明在编译阶段进行，第二个赋值声明要等到执行阶段才会进行。\n\n**例1：**\n\n```javascript\na = 2;\nvar a;\nconsole.log(a); // 2\n```\n上面的例子等同于：\n\n```javascript\nvar a;\n\na = 2;\nconsole.log(a); // 2\n```\n\n**例2：**\n\n```javascript\nconsole.log(a); //undefined\nvar a = 2;\n```\n上面的例子等同于：\n\n```javascript\nvar a;\n\nconsole.log(a); //undefined\na = 2;\n```\n#### let 与 var区别\n\n1. `var`声明的变量作用域为最近的函数块，`let`声明的变量作用域为最近的闭合块，往往小于函数块。\n2. `var`声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出`undefined`。\n3. `let`声明不受变量提升的约束，这意味着`let`声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。`let`声明的变量不能在实际声明之前使用，否则会抛出`ReferenceError`异常。\n### 函数提升\n\n**函数声明和变量声明都会被提升,但是函数表达式却不会被提升。**\n\n```javascript\nfoo(); // 1\n\nvar foo;\n\nfunction foo() {\n    console.log(1);\n}\n\nfoo = function() {\n    console.log(2);\n};\n```\n上面的 foo() 函数执行会输出 1，而不是 2 。\n上面的代码等同于：\n\n```javascript\nfunction foo() {\n    console.log(1);\n}\n\nfoo(); // 1\n\nfoo = function() {\n    console.log(2);\n};\n```\n**函数会首先被提升，然后才是变量。**\n\n尽管 var foo 在 function foo(){..} 函数之前，但是 function foo(){..} 函数会被优先提升到了函数顶部， var foo 作为重复的声明会被忽略，但是如果后面再次使用函数声明会覆盖前面的声明。\n\n一个普通块内部的变量声明通常会被提升到所在作用域的顶部，例如：\n\n```javascript\nvar tmp = new Date();\n\nfunction foo() {\n    console.log(tmp);\n    if (false) {\n        var tmp = \"hello world\";\n    }\n}\n\nf(); // undefined\n```\nif 块作用域内部的 tmp 变量被提升到了 foo() 函数作用域的顶部，而赋值操作留在了 if 块作用域内部。上面的代码等同于：\n\n```javascript\nvar tmp = new Date();\n\nfunction foo() {\n    var tmp;\n    console.log(tmp);\n    if (false) {\n        tmp = \"hello world\";\n    }\n}\n\nfoo(); // undefined\n```","source":"_posts/变量提升.md","raw":"---\ntitle: 变量提升\ntags: YouDon'tKnowJavaScript\ncategories: JavaScript\nabbrlink: 3080460d\n---\n## 变量与函数提升\n\n**包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。**\n### 变量提升\n\n例如一个 var = 2；声明，在 javascript 引擎中它实际上被分为 2 个部分， 定义声明var a；和赋值声明 a = 2；第一个定义声明在编译阶段进行，第二个赋值声明要等到执行阶段才会进行。\n\n**例1：**\n\n```javascript\na = 2;\nvar a;\nconsole.log(a); // 2\n```\n上面的例子等同于：\n\n```javascript\nvar a;\n\na = 2;\nconsole.log(a); // 2\n```\n\n**例2：**\n\n```javascript\nconsole.log(a); //undefined\nvar a = 2;\n```\n上面的例子等同于：\n\n```javascript\nvar a;\n\nconsole.log(a); //undefined\na = 2;\n```\n#### let 与 var区别\n\n1. `var`声明的变量作用域为最近的函数块，`let`声明的变量作用域为最近的闭合块，往往小于函数块。\n2. `var`声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出`undefined`。\n3. `let`声明不受变量提升的约束，这意味着`let`声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。`let`声明的变量不能在实际声明之前使用，否则会抛出`ReferenceError`异常。\n### 函数提升\n\n**函数声明和变量声明都会被提升,但是函数表达式却不会被提升。**\n\n```javascript\nfoo(); // 1\n\nvar foo;\n\nfunction foo() {\n    console.log(1);\n}\n\nfoo = function() {\n    console.log(2);\n};\n```\n上面的 foo() 函数执行会输出 1，而不是 2 。\n上面的代码等同于：\n\n```javascript\nfunction foo() {\n    console.log(1);\n}\n\nfoo(); // 1\n\nfoo = function() {\n    console.log(2);\n};\n```\n**函数会首先被提升，然后才是变量。**\n\n尽管 var foo 在 function foo(){..} 函数之前，但是 function foo(){..} 函数会被优先提升到了函数顶部， var foo 作为重复的声明会被忽略，但是如果后面再次使用函数声明会覆盖前面的声明。\n\n一个普通块内部的变量声明通常会被提升到所在作用域的顶部，例如：\n\n```javascript\nvar tmp = new Date();\n\nfunction foo() {\n    console.log(tmp);\n    if (false) {\n        var tmp = \"hello world\";\n    }\n}\n\nf(); // undefined\n```\nif 块作用域内部的 tmp 变量被提升到了 foo() 函数作用域的顶部，而赋值操作留在了 if 块作用域内部。上面的代码等同于：\n\n```javascript\nvar tmp = new Date();\n\nfunction foo() {\n    var tmp;\n    console.log(tmp);\n    if (false) {\n        tmp = \"hello world\";\n    }\n}\n\nfoo(); // undefined\n```","slug":"变量提升","published":1,"date":"2017-11-12T02:30:40.796Z","updated":"2017-11-12T02:30:40.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xl9003vdfbx8ggur965","content":"<h2 id=\"变量与函数提升\"><a href=\"#变量与函数提升\" class=\"headerlink\" title=\"变量与函数提升\"></a>变量与函数提升</h2><p><strong>包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</strong></p>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>例如一个 var = 2；声明，在 javascript 引擎中它实际上被分为 2 个部分， 定义声明var a；和赋值声明 a = 2；第一个定义声明在编译阶段进行，第二个赋值声明要等到执行阶段才会进行。</p>\n<p><strong>例1：</strong></p>\n<pre><code class=\"javascript\">a = 2;\nvar a;\nconsole.log(a); // 2\n</code></pre>\n<p>上面的例子等同于：</p>\n<pre><code class=\"javascript\">var a;\n\na = 2;\nconsole.log(a); // 2\n</code></pre>\n<p><strong>例2：</strong></p>\n<pre><code class=\"javascript\">console.log(a); //undefined\nvar a = 2;\n</code></pre>\n<p>上面的例子等同于：</p>\n<pre><code class=\"javascript\">var a;\n\nconsole.log(a); //undefined\na = 2;\n</code></pre>\n<h4 id=\"let-与-var区别\"><a href=\"#let-与-var区别\" class=\"headerlink\" title=\"let 与 var区别\"></a>let 与 var区别</h4><ol>\n<li><code>var</code>声明的变量作用域为最近的函数块，<code>let</code>声明的变量作用域为最近的闭合块，往往小于函数块。</li>\n<li><code>var</code>声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出<code>undefined</code>。</li>\n<li><code>let</code>声明不受变量提升的约束，这意味着<code>let</code>声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。<code>let</code>声明的变量不能在实际声明之前使用，否则会抛出<code>ReferenceError</code>异常。<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3></li>\n</ol>\n<p><strong>函数声明和变量声明都会被提升,但是函数表达式却不会被提升。</strong></p>\n<pre><code class=\"javascript\">foo(); // 1\n\nvar foo;\n\nfunction foo() {\n    console.log(1);\n}\n\nfoo = function() {\n    console.log(2);\n};\n</code></pre>\n<p>上面的 foo() 函数执行会输出 1，而不是 2 。<br>上面的代码等同于：</p>\n<pre><code class=\"javascript\">function foo() {\n    console.log(1);\n}\n\nfoo(); // 1\n\nfoo = function() {\n    console.log(2);\n};\n</code></pre>\n<p><strong>函数会首先被提升，然后才是变量。</strong></p>\n<p>尽管 var foo 在 function foo(){..} 函数之前，但是 function foo(){..} 函数会被优先提升到了函数顶部， var foo 作为重复的声明会被忽略，但是如果后面再次使用函数声明会覆盖前面的声明。</p>\n<p>一个普通块内部的变量声明通常会被提升到所在作用域的顶部，例如：</p>\n<pre><code class=\"javascript\">var tmp = new Date();\n\nfunction foo() {\n    console.log(tmp);\n    if (false) {\n        var tmp = &quot;hello world&quot;;\n    }\n}\n\nf(); // undefined\n</code></pre>\n<p>if 块作用域内部的 tmp 变量被提升到了 foo() 函数作用域的顶部，而赋值操作留在了 if 块作用域内部。上面的代码等同于：</p>\n<pre><code class=\"javascript\">var tmp = new Date();\n\nfunction foo() {\n    var tmp;\n    console.log(tmp);\n    if (false) {\n        tmp = &quot;hello world&quot;;\n    }\n}\n\nfoo(); // undefined\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量与函数提升\"><a href=\"#变量与函数提升\" class=\"headerlink\" title=\"变量与函数提升\"></a>变量与函数提升</h2><p><strong>包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</strong></p>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>例如一个 var = 2；声明，在 javascript 引擎中它实际上被分为 2 个部分， 定义声明var a；和赋值声明 a = 2；第一个定义声明在编译阶段进行，第二个赋值声明要等到执行阶段才会进行。</p>\n<p><strong>例1：</strong></p>\n<pre><code class=\"javascript\">a = 2;\nvar a;\nconsole.log(a); // 2\n</code></pre>\n<p>上面的例子等同于：</p>\n<pre><code class=\"javascript\">var a;\n\na = 2;\nconsole.log(a); // 2\n</code></pre>\n<p><strong>例2：</strong></p>\n<pre><code class=\"javascript\">console.log(a); //undefined\nvar a = 2;\n</code></pre>\n<p>上面的例子等同于：</p>\n<pre><code class=\"javascript\">var a;\n\nconsole.log(a); //undefined\na = 2;\n</code></pre>\n<h4 id=\"let-与-var区别\"><a href=\"#let-与-var区别\" class=\"headerlink\" title=\"let 与 var区别\"></a>let 与 var区别</h4><ol>\n<li><code>var</code>声明的变量作用域为最近的函数块，<code>let</code>声明的变量作用域为最近的闭合块，往往小于函数块。</li>\n<li><code>var</code>声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出<code>undefined</code>。</li>\n<li><code>let</code>声明不受变量提升的约束，这意味着<code>let</code>声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。<code>let</code>声明的变量不能在实际声明之前使用，否则会抛出<code>ReferenceError</code>异常。<h3 id=\"函数提升\"><a href=\"#函数提升\" class=\"headerlink\" title=\"函数提升\"></a>函数提升</h3></li>\n</ol>\n<p><strong>函数声明和变量声明都会被提升,但是函数表达式却不会被提升。</strong></p>\n<pre><code class=\"javascript\">foo(); // 1\n\nvar foo;\n\nfunction foo() {\n    console.log(1);\n}\n\nfoo = function() {\n    console.log(2);\n};\n</code></pre>\n<p>上面的 foo() 函数执行会输出 1，而不是 2 。<br>上面的代码等同于：</p>\n<pre><code class=\"javascript\">function foo() {\n    console.log(1);\n}\n\nfoo(); // 1\n\nfoo = function() {\n    console.log(2);\n};\n</code></pre>\n<p><strong>函数会首先被提升，然后才是变量。</strong></p>\n<p>尽管 var foo 在 function foo(){..} 函数之前，但是 function foo(){..} 函数会被优先提升到了函数顶部， var foo 作为重复的声明会被忽略，但是如果后面再次使用函数声明会覆盖前面的声明。</p>\n<p>一个普通块内部的变量声明通常会被提升到所在作用域的顶部，例如：</p>\n<pre><code class=\"javascript\">var tmp = new Date();\n\nfunction foo() {\n    console.log(tmp);\n    if (false) {\n        var tmp = &quot;hello world&quot;;\n    }\n}\n\nf(); // undefined\n</code></pre>\n<p>if 块作用域内部的 tmp 变量被提升到了 foo() 函数作用域的顶部，而赋值操作留在了 if 块作用域内部。上面的代码等同于：</p>\n<pre><code class=\"javascript\">var tmp = new Date();\n\nfunction foo() {\n    var tmp;\n    console.log(tmp);\n    if (false) {\n        tmp = &quot;hello world&quot;;\n    }\n}\n\nfoo(); // undefined\n</code></pre>\n"},{"title":"处理流与Decorator模式","date":"2017-06-15T16:00:00.000Z","abbrlink":"bbf344f6","_content":"\n## 处理流 ##\n### BufferedReader\n![](http://i.imgur.com/oGh5e2r.png)\n * readeLine：每次读取一行数据\n  ![](http://i.imgur.com/DqMcSrm.png)\n\n#### 示例： ####\n```java\nimport java.io.*;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tFileReader filereader = null;\n\t\tBufferedReader bufferedreader = null;\n\t\ttry{\n\t\t\tfilereader = new FileReader(\"C:/Users/Jay/Desktop/9.6/src1/read.txt\");\n\t\t\tbufferedreader = new BufferedReader(filereader);\n\t\t\tString line = null;\n\t\t\twhile(true){\n\t\t\t\tline = bufferedreader.readLine();\n\t\t\t\tif(line == null){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(line);\n\t\t\t}\n\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\tfinally{\n\t\t\ttry{\n\t\t\t\tfilereader.close();\n\t\t\t\tbufferedreader.close();\n\t\t\t}\n\t\t\tcatch(Exception e){\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n## Decorator（装饰者）模式 ##\n![](http://i.imgur.com/arkDK8p.png)\n#### 示例： ####\n```java\ninterface Teacher{\n\tpublic void teaching();\n}\n\nclass MathTeacher implements Teacher{\n\tpublic void teaching(){\n\t\tSystem.out.println(\"我是一名数学老师\");\n\t}\n}\n\nclass ChineseTeacher implements Teacher{\n\tpublic void teaching(){\n\t\tSystem.out.println(\"我是一名语文老师\");\n\t}\n}\n\nclass ATeacher implements Teacher{\n\tprivate Teacher teacher;\n\tpublic ATeacher(Teacher teacher){\n\t\tthis.teacher = teacher;\n\t}\n\tpublic void teaching(){\n\t\tSystem.out.println(\"你好，我来自ASchool\");\n\t\tteacher.teaching();\n\t}\n}\n\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tMathTeacher mathTeacher = new MathTeacher();\n\t\tATeacher aTeacher1 = new ATeacher(mathTeacher);\n\t\taTeacher1.teaching();\n\n\n\t\tChineseTeacher chineseTeacher = new ChineseTeacher();\n\t\tATeacher aTeacher2 = new ATeacher(chineseTeacher);\n\t\taTeacher2.teaching();\n\t}\n}\n```","source":"_posts/处理流和Decorator模式.md","raw":"---\ntitle: 处理流与Decorator模式\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: bbf344f6\n---\n\n## 处理流 ##\n### BufferedReader\n![](http://i.imgur.com/oGh5e2r.png)\n * readeLine：每次读取一行数据\n  ![](http://i.imgur.com/DqMcSrm.png)\n\n#### 示例： ####\n```java\nimport java.io.*;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tFileReader filereader = null;\n\t\tBufferedReader bufferedreader = null;\n\t\ttry{\n\t\t\tfilereader = new FileReader(\"C:/Users/Jay/Desktop/9.6/src1/read.txt\");\n\t\t\tbufferedreader = new BufferedReader(filereader);\n\t\t\tString line = null;\n\t\t\twhile(true){\n\t\t\t\tline = bufferedreader.readLine();\n\t\t\t\tif(line == null){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(line);\n\t\t\t}\n\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\tfinally{\n\t\t\ttry{\n\t\t\t\tfilereader.close();\n\t\t\t\tbufferedreader.close();\n\t\t\t}\n\t\t\tcatch(Exception e){\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n\t}\n}\n```\n## Decorator（装饰者）模式 ##\n![](http://i.imgur.com/arkDK8p.png)\n#### 示例： ####\n```java\ninterface Teacher{\n\tpublic void teaching();\n}\n\nclass MathTeacher implements Teacher{\n\tpublic void teaching(){\n\t\tSystem.out.println(\"我是一名数学老师\");\n\t}\n}\n\nclass ChineseTeacher implements Teacher{\n\tpublic void teaching(){\n\t\tSystem.out.println(\"我是一名语文老师\");\n\t}\n}\n\nclass ATeacher implements Teacher{\n\tprivate Teacher teacher;\n\tpublic ATeacher(Teacher teacher){\n\t\tthis.teacher = teacher;\n\t}\n\tpublic void teaching(){\n\t\tSystem.out.println(\"你好，我来自ASchool\");\n\t\tteacher.teaching();\n\t}\n}\n\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tMathTeacher mathTeacher = new MathTeacher();\n\t\tATeacher aTeacher1 = new ATeacher(mathTeacher);\n\t\taTeacher1.teaching();\n\n\n\t\tChineseTeacher chineseTeacher = new ChineseTeacher();\n\t\tATeacher aTeacher2 = new ATeacher(chineseTeacher);\n\t\taTeacher2.teaching();\n\t}\n}\n```","slug":"处理流和Decorator模式","published":1,"updated":"2017-11-12T02:15:55.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xle0040dfbx6fzlljgl","content":"<h2 id=\"处理流\"><a href=\"#处理流\" class=\"headerlink\" title=\"处理流\"></a>处理流</h2><h3 id=\"BufferedReader\"><a href=\"#BufferedReader\" class=\"headerlink\" title=\"BufferedReader\"></a>BufferedReader</h3><p><img src=\"http://i.imgur.com/oGh5e2r.png\" alt=\"\"></p>\n<ul>\n<li>readeLine：每次读取一行数据<br><img src=\"http://i.imgur.com/DqMcSrm.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">import java.io.*;\npublic class Test{\n    public static void main(String args[]){\n        FileReader filereader = null;\n        BufferedReader bufferedreader = null;\n        try{\n            filereader = new FileReader(&quot;C:/Users/Jay/Desktop/9.6/src1/read.txt&quot;);\n            bufferedreader = new BufferedReader(filereader);\n            String line = null;\n            while(true){\n                line = bufferedreader.readLine();\n                if(line == null){\n                    break;\n                }\n                System.out.println(line);\n            }\n\n        }\n        catch(Exception e){\n            System.out.println(e);\n        }\n        finally{\n            try{\n                filereader.close();\n                bufferedreader.close();\n            }\n            catch(Exception e){\n                System.out.println(e);\n            }\n        }\n    }\n}\n</code></pre>\n<h2 id=\"Decorator（装饰者）模式\"><a href=\"#Decorator（装饰者）模式\" class=\"headerlink\" title=\"Decorator（装饰者）模式\"></a>Decorator（装饰者）模式</h2><p><img src=\"http://i.imgur.com/arkDK8p.png\" alt=\"\"></p>\n<h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">interface Teacher{\n    public void teaching();\n}\n\nclass MathTeacher implements Teacher{\n    public void teaching(){\n        System.out.println(&quot;我是一名数学老师&quot;);\n    }\n}\n\nclass ChineseTeacher implements Teacher{\n    public void teaching(){\n        System.out.println(&quot;我是一名语文老师&quot;);\n    }\n}\n\nclass ATeacher implements Teacher{\n    private Teacher teacher;\n    public ATeacher(Teacher teacher){\n        this.teacher = teacher;\n    }\n    public void teaching(){\n        System.out.println(&quot;你好，我来自ASchool&quot;);\n        teacher.teaching();\n    }\n}\n\npublic class Test{\n    public static void main(String args[]){\n        MathTeacher mathTeacher = new MathTeacher();\n        ATeacher aTeacher1 = new ATeacher(mathTeacher);\n        aTeacher1.teaching();\n\n\n        ChineseTeacher chineseTeacher = new ChineseTeacher();\n        ATeacher aTeacher2 = new ATeacher(chineseTeacher);\n        aTeacher2.teaching();\n    }\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"处理流\"><a href=\"#处理流\" class=\"headerlink\" title=\"处理流\"></a>处理流</h2><h3 id=\"BufferedReader\"><a href=\"#BufferedReader\" class=\"headerlink\" title=\"BufferedReader\"></a>BufferedReader</h3><p><img src=\"http://i.imgur.com/oGh5e2r.png\" alt=\"\"></p>\n<ul>\n<li>readeLine：每次读取一行数据<br><img src=\"http://i.imgur.com/DqMcSrm.png\" alt=\"\"></li>\n</ul>\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">import java.io.*;\npublic class Test{\n    public static void main(String args[]){\n        FileReader filereader = null;\n        BufferedReader bufferedreader = null;\n        try{\n            filereader = new FileReader(&quot;C:/Users/Jay/Desktop/9.6/src1/read.txt&quot;);\n            bufferedreader = new BufferedReader(filereader);\n            String line = null;\n            while(true){\n                line = bufferedreader.readLine();\n                if(line == null){\n                    break;\n                }\n                System.out.println(line);\n            }\n\n        }\n        catch(Exception e){\n            System.out.println(e);\n        }\n        finally{\n            try{\n                filereader.close();\n                bufferedreader.close();\n            }\n            catch(Exception e){\n                System.out.println(e);\n            }\n        }\n    }\n}\n</code></pre>\n<h2 id=\"Decorator（装饰者）模式\"><a href=\"#Decorator（装饰者）模式\" class=\"headerlink\" title=\"Decorator（装饰者）模式\"></a>Decorator（装饰者）模式</h2><p><img src=\"http://i.imgur.com/arkDK8p.png\" alt=\"\"></p>\n<h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><pre><code class=\"java\">interface Teacher{\n    public void teaching();\n}\n\nclass MathTeacher implements Teacher{\n    public void teaching(){\n        System.out.println(&quot;我是一名数学老师&quot;);\n    }\n}\n\nclass ChineseTeacher implements Teacher{\n    public void teaching(){\n        System.out.println(&quot;我是一名语文老师&quot;);\n    }\n}\n\nclass ATeacher implements Teacher{\n    private Teacher teacher;\n    public ATeacher(Teacher teacher){\n        this.teacher = teacher;\n    }\n    public void teaching(){\n        System.out.println(&quot;你好，我来自ASchool&quot;);\n        teacher.teaching();\n    }\n}\n\npublic class Test{\n    public static void main(String args[]){\n        MathTeacher mathTeacher = new MathTeacher();\n        ATeacher aTeacher1 = new ATeacher(mathTeacher);\n        aTeacher1.teaching();\n\n\n        ChineseTeacher chineseTeacher = new ChineseTeacher();\n        ATeacher aTeacher2 = new ATeacher(chineseTeacher);\n        aTeacher2.teaching();\n    }\n}\n</code></pre>\n"},{"title":"圣杯布局","abbrlink":"505644b3","data":"2017/9/13","_content":"\n> 圣杯布局是三栏式布局的一种经典解决方案，来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。[原文链接](https://alistapart.com/article/holygrail)，其主要解决以下几种要求：\n\n* 两边侧栏固定宽度，中间栏宽度自适应，\n* 中间栏要放在文档流的前面以优先渲染。\n* 其父元素的高度始终是由三栏中高度最高的元素确定。\n\n## 第一步 建立基本框架\n\n写出基本的 html 框架，构建出基本盒模型，包括`header`, `container`和`footer`三个主体结构，再向`container`中加入三栏：\n\n```html\n<div class=\"header\"></div>\n<div class=\"container\">\n    <div class=\"column center\"></div>\n    <div class=\"column left\"></div>\n    <div class=\"column right\"></div>\n</div>\n<div class=\"footer\"></div>\n```\n\n### 第二步 构建基础布局\n\n将 `container` 的内边距设置为左右两侧边栏各自的宽度，为两侧边栏留下空间。为三栏设置合适的宽度(`center`宽度为 100%，`left`宽度为 120px，`right`宽度为240px)，并且将三者设为向左浮动，同时清除`footer`的上下环境，避免其浮动。最后将`body`的最小宽度设为 480px(2*LC width + RC width)，避免因为`center`部分的宽度小`left`和`right`的宽度导致布局乱掉。\n\n```css\n        body {\n            padding: 0;\n            margin: 0; /* 初始化LCD */\n            min-width: 480px;/* 2*LC-width + RC-width */\n        }\n        .header, .footer {\n            background-color: #1c262f;\n            color: white;\n            text-align: center;\n            font-size: 2em;\n        }\n        .container {\n            padding-left: 120px;  /* LC-width */\n            padding-right: 240px; /* RC-width */\n        }\n        .column {\n            float: left;\n            color: white;\n            position: relative;\n            text-align: justify; /* 文字两端对齐 */\n        }\n        h1 {\n            text-align: center;\n        }\n        .center {\n            background-color: #4285f3;\n            width: 100%;\n        }\n        .left {\n            background-color: #ea4335;\n            width: 120px; /* LC-width */\n        }\n        .right {\n            background-color: #34a853;\n            width: 240px;  /* RC-width */\n        }\n        .footer {\n            clear: both;\n        }\n```\n\n### 第三步 将侧栏放到合适的位置\n\n设置三栏的定位属性为相对定位。设置左边栏的外边距`margin-left: -100%;`(中间栏所占据的宽度)，左边栏上移到中间栏的左边，但是与中间栏部分重叠。此时利用相对定位属性，为左边栏设置一个与其等宽的偏移量`left：-120px;`(相对于`container`的左边线向左偏移 120px)，左边栏刚好占据`container`的左内边距位置。最后设置右边栏的外边距`margin-right: -240px;`(右边栏自身宽度)，使右边栏占据`container`的右内边距位置。\n\n```css\n        .column {\n            float: left;\n            position: relative;\n        }\n        .left {\n            margin-left: -100%;\n            left: -120px;\n        }\n        .right {\n            margin-right: -240px;\n        }\n```","source":"_posts/圣杯布局.md","raw":"---\ntitle: 圣杯布局\ntags: CSS\ncategories: CSS\nabbrlink: 505644b3\ndata: 2017/9/13\n---\n\n> 圣杯布局是三栏式布局的一种经典解决方案，来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。[原文链接](https://alistapart.com/article/holygrail)，其主要解决以下几种要求：\n\n* 两边侧栏固定宽度，中间栏宽度自适应，\n* 中间栏要放在文档流的前面以优先渲染。\n* 其父元素的高度始终是由三栏中高度最高的元素确定。\n\n## 第一步 建立基本框架\n\n写出基本的 html 框架，构建出基本盒模型，包括`header`, `container`和`footer`三个主体结构，再向`container`中加入三栏：\n\n```html\n<div class=\"header\"></div>\n<div class=\"container\">\n    <div class=\"column center\"></div>\n    <div class=\"column left\"></div>\n    <div class=\"column right\"></div>\n</div>\n<div class=\"footer\"></div>\n```\n\n### 第二步 构建基础布局\n\n将 `container` 的内边距设置为左右两侧边栏各自的宽度，为两侧边栏留下空间。为三栏设置合适的宽度(`center`宽度为 100%，`left`宽度为 120px，`right`宽度为240px)，并且将三者设为向左浮动，同时清除`footer`的上下环境，避免其浮动。最后将`body`的最小宽度设为 480px(2*LC width + RC width)，避免因为`center`部分的宽度小`left`和`right`的宽度导致布局乱掉。\n\n```css\n        body {\n            padding: 0;\n            margin: 0; /* 初始化LCD */\n            min-width: 480px;/* 2*LC-width + RC-width */\n        }\n        .header, .footer {\n            background-color: #1c262f;\n            color: white;\n            text-align: center;\n            font-size: 2em;\n        }\n        .container {\n            padding-left: 120px;  /* LC-width */\n            padding-right: 240px; /* RC-width */\n        }\n        .column {\n            float: left;\n            color: white;\n            position: relative;\n            text-align: justify; /* 文字两端对齐 */\n        }\n        h1 {\n            text-align: center;\n        }\n        .center {\n            background-color: #4285f3;\n            width: 100%;\n        }\n        .left {\n            background-color: #ea4335;\n            width: 120px; /* LC-width */\n        }\n        .right {\n            background-color: #34a853;\n            width: 240px;  /* RC-width */\n        }\n        .footer {\n            clear: both;\n        }\n```\n\n### 第三步 将侧栏放到合适的位置\n\n设置三栏的定位属性为相对定位。设置左边栏的外边距`margin-left: -100%;`(中间栏所占据的宽度)，左边栏上移到中间栏的左边，但是与中间栏部分重叠。此时利用相对定位属性，为左边栏设置一个与其等宽的偏移量`left：-120px;`(相对于`container`的左边线向左偏移 120px)，左边栏刚好占据`container`的左内边距位置。最后设置右边栏的外边距`margin-right: -240px;`(右边栏自身宽度)，使右边栏占据`container`的右内边距位置。\n\n```css\n        .column {\n            float: left;\n            position: relative;\n        }\n        .left {\n            margin-left: -100%;\n            left: -120px;\n        }\n        .right {\n            margin-right: -240px;\n        }\n```","slug":"圣杯布局","published":1,"date":"2017-11-12T02:33:24.683Z","updated":"2017-11-12T02:33:24.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xlh0042dfbx8rmgdqkk","content":"<blockquote>\n<p>圣杯布局是三栏式布局的一种经典解决方案，来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。<a href=\"https://alistapart.com/article/holygrail\" target=\"_blank\" rel=\"external\">原文链接</a>，其主要解决以下几种要求：</p>\n</blockquote>\n<ul>\n<li>两边侧栏固定宽度，中间栏宽度自适应，</li>\n<li>中间栏要放在文档流的前面以优先渲染。</li>\n<li>其父元素的高度始终是由三栏中高度最高的元素确定。</li>\n</ul>\n<h2 id=\"第一步-建立基本框架\"><a href=\"#第一步-建立基本框架\" class=\"headerlink\" title=\"第一步 建立基本框架\"></a>第一步 建立基本框架</h2><p>写出基本的 html 框架，构建出基本盒模型，包括<code>header</code>, <code>container</code>和<code>footer</code>三个主体结构，再向<code>container</code>中加入三栏：</p>\n<pre><code class=\"html\">&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;column center&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n</code></pre>\n<h3 id=\"第二步-构建基础布局\"><a href=\"#第二步-构建基础布局\" class=\"headerlink\" title=\"第二步 构建基础布局\"></a>第二步 构建基础布局</h3><p>将 <code>container</code> 的内边距设置为左右两侧边栏各自的宽度，为两侧边栏留下空间。为三栏设置合适的宽度(<code>center</code>宽度为 100%，<code>left</code>宽度为 120px，<code>right</code>宽度为240px)，并且将三者设为向左浮动，同时清除<code>footer</code>的上下环境，避免其浮动。最后将<code>body</code>的最小宽度设为 480px(2*LC width + RC width)，避免因为<code>center</code>部分的宽度小<code>left</code>和<code>right</code>的宽度导致布局乱掉。</p>\n<pre><code class=\"css\">        body {\n            padding: 0;\n            margin: 0; /* 初始化LCD */\n            min-width: 480px;/* 2*LC-width + RC-width */\n        }\n        .header, .footer {\n            background-color: #1c262f;\n            color: white;\n            text-align: center;\n            font-size: 2em;\n        }\n        .container {\n            padding-left: 120px;  /* LC-width */\n            padding-right: 240px; /* RC-width */\n        }\n        .column {\n            float: left;\n            color: white;\n            position: relative;\n            text-align: justify; /* 文字两端对齐 */\n        }\n        h1 {\n            text-align: center;\n        }\n        .center {\n            background-color: #4285f3;\n            width: 100%;\n        }\n        .left {\n            background-color: #ea4335;\n            width: 120px; /* LC-width */\n        }\n        .right {\n            background-color: #34a853;\n            width: 240px;  /* RC-width */\n        }\n        .footer {\n            clear: both;\n        }\n</code></pre>\n<h3 id=\"第三步-将侧栏放到合适的位置\"><a href=\"#第三步-将侧栏放到合适的位置\" class=\"headerlink\" title=\"第三步 将侧栏放到合适的位置\"></a>第三步 将侧栏放到合适的位置</h3><p>设置三栏的定位属性为相对定位。设置左边栏的外边距<code>margin-left: -100%;</code>(中间栏所占据的宽度)，左边栏上移到中间栏的左边，但是与中间栏部分重叠。此时利用相对定位属性，为左边栏设置一个与其等宽的偏移量<code>left：-120px;</code>(相对于<code>container</code>的左边线向左偏移 120px)，左边栏刚好占据<code>container</code>的左内边距位置。最后设置右边栏的外边距<code>margin-right: -240px;</code>(右边栏自身宽度)，使右边栏占据<code>container</code>的右内边距位置。</p>\n<pre><code class=\"css\">        .column {\n            float: left;\n            position: relative;\n        }\n        .left {\n            margin-left: -100%;\n            left: -120px;\n        }\n        .right {\n            margin-right: -240px;\n        }\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>圣杯布局是三栏式布局的一种经典解决方案，来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。<a href=\"https://alistapart.com/article/holygrail\" target=\"_blank\" rel=\"external\">原文链接</a>，其主要解决以下几种要求：</p>\n</blockquote>\n<ul>\n<li>两边侧栏固定宽度，中间栏宽度自适应，</li>\n<li>中间栏要放在文档流的前面以优先渲染。</li>\n<li>其父元素的高度始终是由三栏中高度最高的元素确定。</li>\n</ul>\n<h2 id=\"第一步-建立基本框架\"><a href=\"#第一步-建立基本框架\" class=\"headerlink\" title=\"第一步 建立基本框架\"></a>第一步 建立基本框架</h2><p>写出基本的 html 框架，构建出基本盒模型，包括<code>header</code>, <code>container</code>和<code>footer</code>三个主体结构，再向<code>container</code>中加入三栏：</p>\n<pre><code class=\"html\">&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;\n&lt;div class=&quot;container&quot;&gt;\n    &lt;div class=&quot;column center&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column left&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;column right&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;\n</code></pre>\n<h3 id=\"第二步-构建基础布局\"><a href=\"#第二步-构建基础布局\" class=\"headerlink\" title=\"第二步 构建基础布局\"></a>第二步 构建基础布局</h3><p>将 <code>container</code> 的内边距设置为左右两侧边栏各自的宽度，为两侧边栏留下空间。为三栏设置合适的宽度(<code>center</code>宽度为 100%，<code>left</code>宽度为 120px，<code>right</code>宽度为240px)，并且将三者设为向左浮动，同时清除<code>footer</code>的上下环境，避免其浮动。最后将<code>body</code>的最小宽度设为 480px(2*LC width + RC width)，避免因为<code>center</code>部分的宽度小<code>left</code>和<code>right</code>的宽度导致布局乱掉。</p>\n<pre><code class=\"css\">        body {\n            padding: 0;\n            margin: 0; /* 初始化LCD */\n            min-width: 480px;/* 2*LC-width + RC-width */\n        }\n        .header, .footer {\n            background-color: #1c262f;\n            color: white;\n            text-align: center;\n            font-size: 2em;\n        }\n        .container {\n            padding-left: 120px;  /* LC-width */\n            padding-right: 240px; /* RC-width */\n        }\n        .column {\n            float: left;\n            color: white;\n            position: relative;\n            text-align: justify; /* 文字两端对齐 */\n        }\n        h1 {\n            text-align: center;\n        }\n        .center {\n            background-color: #4285f3;\n            width: 100%;\n        }\n        .left {\n            background-color: #ea4335;\n            width: 120px; /* LC-width */\n        }\n        .right {\n            background-color: #34a853;\n            width: 240px;  /* RC-width */\n        }\n        .footer {\n            clear: both;\n        }\n</code></pre>\n<h3 id=\"第三步-将侧栏放到合适的位置\"><a href=\"#第三步-将侧栏放到合适的位置\" class=\"headerlink\" title=\"第三步 将侧栏放到合适的位置\"></a>第三步 将侧栏放到合适的位置</h3><p>设置三栏的定位属性为相对定位。设置左边栏的外边距<code>margin-left: -100%;</code>(中间栏所占据的宽度)，左边栏上移到中间栏的左边，但是与中间栏部分重叠。此时利用相对定位属性，为左边栏设置一个与其等宽的偏移量<code>left：-120px;</code>(相对于<code>container</code>的左边线向左偏移 120px)，左边栏刚好占据<code>container</code>的左内边距位置。最后设置右边栏的外边距<code>margin-right: -240px;</code>(右边栏自身宽度)，使右边栏占据<code>container</code>的右内边距位置。</p>\n<pre><code class=\"css\">        .column {\n            float: left;\n            position: relative;\n        }\n        .left {\n            margin-left: -100%;\n            left: -120px;\n        }\n        .right {\n            margin-right: -240px;\n        }\n</code></pre>\n"},{"title":"多个SSH管理","abbrlink":"8ee164b8","data":"2017/9/16","_content":"## 多个 SSH key 管理\n\n* 在创建ssh key的时候，将新的密钥进行重新命名，比如id_rsa_coding，使用下面的命令：\n`ssh-keygen -t rsa -C \"roojay520@gmail.com\" -f ~/.ssh/id_rsa_coding`\nb48684451cdeae15e70966c332895a1947144e1e\n\ngit config --global user.name \"roojay\"\ngit config --global user.email \"roojay520@gmail.com\"\n\ngit config --global user.name \"roojay\"\ngit config --global user.email \"roojay@126.com\"\n\nSTATIC_SITE_REPO https://github.com/roojay520/roojay520.github.io\nTARGET_BRANCH master\nGIT_USER_EMAIL roojay520@gmail.com\nGIT_USER_NAME roojay","source":"_posts/多个SHH管理.md","raw":"---\ntitle: 多个SSH管理\ntags: SSH\ncategories: Git\nabbrlink: 8ee164b8\ndata: 2017/9/16\n---\n## 多个 SSH key 管理\n\n* 在创建ssh key的时候，将新的密钥进行重新命名，比如id_rsa_coding，使用下面的命令：\n`ssh-keygen -t rsa -C \"roojay520@gmail.com\" -f ~/.ssh/id_rsa_coding`\nb48684451cdeae15e70966c332895a1947144e1e\n\ngit config --global user.name \"roojay\"\ngit config --global user.email \"roojay520@gmail.com\"\n\ngit config --global user.name \"roojay\"\ngit config --global user.email \"roojay@126.com\"\n\nSTATIC_SITE_REPO https://github.com/roojay520/roojay520.github.io\nTARGET_BRANCH master\nGIT_USER_EMAIL roojay520@gmail.com\nGIT_USER_NAME roojay","slug":"多个SHH管理","published":1,"date":"2017-11-12T02:31:04.502Z","updated":"2017-11-12T02:31:04.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xlk0046dfbx3o74mjet","content":"<h2 id=\"多个-SSH-key-管理\"><a href=\"#多个-SSH-key-管理\" class=\"headerlink\" title=\"多个 SSH key 管理\"></a>多个 SSH key 管理</h2><ul>\n<li>在创建ssh key的时候，将新的密钥进行重新命名，比如id_rsa_coding，使用下面的命令：<br><code>ssh-keygen -t rsa -C &quot;roojay520@gmail.com&quot; -f ~/.ssh/id_rsa_coding</code><br>b48684451cdeae15e70966c332895a1947144e1e</li>\n</ul>\n<p>git config –global user.name “roojay”<br>git config –global user.email “roojay520@gmail.com”</p>\n<p>git config –global user.name “roojay”<br>git config –global user.email “roojay@126.com”</p>\n<p>STATIC_SITE_REPO <a href=\"https://github.com/roojay520/roojay520.github.io\" target=\"_blank\" rel=\"external\">https://github.com/roojay520/roojay520.github.io</a><br>TARGET_BRANCH master<br>GIT_USER_EMAIL roojay520@gmail.com<br>GIT_USER_NAME roojay</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多个-SSH-key-管理\"><a href=\"#多个-SSH-key-管理\" class=\"headerlink\" title=\"多个 SSH key 管理\"></a>多个 SSH key 管理</h2><ul>\n<li>在创建ssh key的时候，将新的密钥进行重新命名，比如id_rsa_coding，使用下面的命令：<br><code>ssh-keygen -t rsa -C &quot;roojay520@gmail.com&quot; -f ~/.ssh/id_rsa_coding</code><br>b48684451cdeae15e70966c332895a1947144e1e</li>\n</ul>\n<p>git config –global user.name “roojay”<br>git config –global user.email “roojay520@gmail.com”</p>\n<p>git config –global user.name “roojay”<br>git config –global user.email “roojay@126.com”</p>\n<p>STATIC_SITE_REPO <a href=\"https://github.com/roojay520/roojay520.github.io\" target=\"_blank\" rel=\"external\">https://github.com/roojay520/roojay520.github.io</a><br>TARGET_BRANCH master<br>GIT_USER_EMAIL roojay520@gmail.com<br>GIT_USER_NAME roojay</p>\n"},{"title":"常用正则表达式","abbrlink":"81d5af05","data":"2017/9/16","_content":"## 一、校验数字的表达式\n\n1. 数字：`^[0-9]*$`\n\n2. n位的数字：`^\\d{n}$`\n\n3. 至少n位的数字：`^\\d{n,}$`\n\n4. m-n位的数字：`^\\d{m,n}$`\n\n5. 零和非零开头的数字：`^(0|[1-9][0-9]*)$`\n\n6. 非零开头的最多带两位小数的数字：`^([1-9][0-9]*)+(.[0-9]{1,2})?$`\n\n7. 带1-2位小数的正数或负数：`^(\\-)?\\d+(\\.\\d{1,2})?$`\n\n8. 正数、负数、和小数：`^(\\-|\\+)?\\d+(\\.\\d+)?$`\n\n9. 有两位小数的正实数：`^[0-9]+(.[0-9]{2})?$`\n\n10. 有1~3位小数的正实数：`^[0-9]+(.[0-9]{1,3})?$`\n\n11. 非零的正整数：`^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$`\n\n12. 非零的负整数：`^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$`\n\n13. 非负整数：`^\\d+$ 或 ^[1-9]\\d*|0$`\n\n14. 非正整数：`^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$`\n\n15. 非负浮点数：`^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$`\n\n16. 非正浮点数：`^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$`\n\n17. 正浮点数：`^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$`\n\n18. 负浮点数：`^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$`\n\n19. 浮点数：`^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$`\n\n## 二、校验字符的表达式\n\n1. 汉字：`^[\\u4e00-\\u9fa5]{0,}$`\n\n2. 英文和数字：`^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$`\n\n3. 长度为3-20的所有字符：`^.{3,20}$`\n\n4. 由26个英文字母组成的字符串：`^[A-Za-z]+$`\n\n5. 由26个大写英文字母组成的字符串：`^[A-Z]+$`\n\n6. 由26个小写英文字母组成的字符串：`^[a-z]+$`\n\n7. 由数字和26个英文字母组成的字符串：`^[A-Za-z0-9]+$`\n\n8. 由数字、26个英文字母或者下划线组成的字符串：`^\\w+$ 或 ^\\w{3,20}$`\n\n9. 中文、英文、数字包括下划线：`^[\\u4E00-\\u9FA5A-Za-z0-9_]+$`\n\n10. 中文、英文、数字但不包括下划线等符号：`^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$`\n\n11. 可以输入含有`^%&',;=?$\\`\"等字符：`[^%&',;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+`\n\n## 三、特殊需求表达式\n\n1. Email地址：`^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`\n\n2. 域名：`[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?`\n\n3. InternetURL：`[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$`\n\n4. 手机号码：    ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n5. 电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：`^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$`\n\n6. 国内电话号码(0511-4405222、021-87888822)：`\\d{3}-\\d{8}|\\d{4}-\\d{7}`\n\n7. 身份证号(15位、18位数字)：`^\\d{15}|\\d{18}$`\n\n8. 短身份证号码(数字、字母x结尾)：`^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$`\n\n9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：`^[a-zA-Z][a-zA-Z0-9_]{4,15}$`\n\n10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：`^[a-zA-Z]\\w{5,17}$`\n\n11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：`^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$`\n\n12. 日期格式：`^\\d{4}-\\d{1,2}-\\d{1,2}`\n\n13. 一年的12个月(01～09和1～12)：`^(0?[1-9]|1[0-2])$`\n\n14. 一个月的31天(01～09和1～31)：`^((0?[1-9])|((1|2)[0-9])|30|31)$`\n\n15. 钱的输入格式：\n\n\ta. 有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：`^[1-9][0-9]*$`\n\n\tb. 这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：`^(0|[1-9][0-9]*)$`\n\n\tc. 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：`^(0|-?[1-9][0-9]*)$`\n\n\te. 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：`^[0-9]+(.[0-9]+)?$`\n\n\tf. 必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：`^[0-9]+(.[0-9]{2})?$`\n\n\tg. 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：`^[0-9]+(.[0-9]{1,2})?$`\n\n\th. 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：`^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$`\n\n\ti. 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：`^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$`\n\n**备注**：这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里\n\n16. xml文件：`^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$`\n\n17. 中文字符的正则表达式：`[\\u4e00-\\u9fa5]`\n\n18. 双字节字符：`[^\\x00-\\xff]` (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n\n19. 空白行的正则表达式：`\\n\\s*\\r` (可以用来删除空白行)\n\n20. HTML标记的正则表达式：`<(\\S*?)[^>]*>.*?</\\1>|<.*? />` (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)\n\n21. 首尾空白字符的正则表达式：`^\\s*|\\s*$或(^\\s*)|(\\s*$)` (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n\n22. 腾讯QQ号：`[1-9][0-9]{4,}` (腾讯QQ号从10000开始)\n\n23. 中国邮政编码：`[1-9]\\d{5}(?!\\d)` (中国邮政编码为6位数字)\n\n24. IP地址：`\\d+\\.\\d+\\.\\d+\\.\\d+` (提取IP地址时有用)\n\n25. IP地址：`((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))`","source":"_posts/常用正则表达式.md","raw":"---\ntitle: 常用正则表达式\ntags: RegEx\ncategories: Tools\nabbrlink: 81d5af05\ndata: 2017/9/16\n---\n## 一、校验数字的表达式\n\n1. 数字：`^[0-9]*$`\n\n2. n位的数字：`^\\d{n}$`\n\n3. 至少n位的数字：`^\\d{n,}$`\n\n4. m-n位的数字：`^\\d{m,n}$`\n\n5. 零和非零开头的数字：`^(0|[1-9][0-9]*)$`\n\n6. 非零开头的最多带两位小数的数字：`^([1-9][0-9]*)+(.[0-9]{1,2})?$`\n\n7. 带1-2位小数的正数或负数：`^(\\-)?\\d+(\\.\\d{1,2})?$`\n\n8. 正数、负数、和小数：`^(\\-|\\+)?\\d+(\\.\\d+)?$`\n\n9. 有两位小数的正实数：`^[0-9]+(.[0-9]{2})?$`\n\n10. 有1~3位小数的正实数：`^[0-9]+(.[0-9]{1,3})?$`\n\n11. 非零的正整数：`^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$`\n\n12. 非零的负整数：`^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$`\n\n13. 非负整数：`^\\d+$ 或 ^[1-9]\\d*|0$`\n\n14. 非正整数：`^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$`\n\n15. 非负浮点数：`^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$`\n\n16. 非正浮点数：`^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$`\n\n17. 正浮点数：`^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$`\n\n18. 负浮点数：`^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$`\n\n19. 浮点数：`^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$`\n\n## 二、校验字符的表达式\n\n1. 汉字：`^[\\u4e00-\\u9fa5]{0,}$`\n\n2. 英文和数字：`^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$`\n\n3. 长度为3-20的所有字符：`^.{3,20}$`\n\n4. 由26个英文字母组成的字符串：`^[A-Za-z]+$`\n\n5. 由26个大写英文字母组成的字符串：`^[A-Z]+$`\n\n6. 由26个小写英文字母组成的字符串：`^[a-z]+$`\n\n7. 由数字和26个英文字母组成的字符串：`^[A-Za-z0-9]+$`\n\n8. 由数字、26个英文字母或者下划线组成的字符串：`^\\w+$ 或 ^\\w{3,20}$`\n\n9. 中文、英文、数字包括下划线：`^[\\u4E00-\\u9FA5A-Za-z0-9_]+$`\n\n10. 中文、英文、数字但不包括下划线等符号：`^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$`\n\n11. 可以输入含有`^%&',;=?$\\`\"等字符：`[^%&',;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+`\n\n## 三、特殊需求表达式\n\n1. Email地址：`^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`\n\n2. 域名：`[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?`\n\n3. InternetURL：`[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$`\n\n4. 手机号码：    ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$\n\n5. 电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：`^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$`\n\n6. 国内电话号码(0511-4405222、021-87888822)：`\\d{3}-\\d{8}|\\d{4}-\\d{7}`\n\n7. 身份证号(15位、18位数字)：`^\\d{15}|\\d{18}$`\n\n8. 短身份证号码(数字、字母x结尾)：`^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$`\n\n9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：`^[a-zA-Z][a-zA-Z0-9_]{4,15}$`\n\n10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：`^[a-zA-Z]\\w{5,17}$`\n\n11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：`^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$`\n\n12. 日期格式：`^\\d{4}-\\d{1,2}-\\d{1,2}`\n\n13. 一年的12个月(01～09和1～12)：`^(0?[1-9]|1[0-2])$`\n\n14. 一个月的31天(01～09和1～31)：`^((0?[1-9])|((1|2)[0-9])|30|31)$`\n\n15. 钱的输入格式：\n\n\ta. 有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：`^[1-9][0-9]*$`\n\n\tb. 这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：`^(0|[1-9][0-9]*)$`\n\n\tc. 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：`^(0|-?[1-9][0-9]*)$`\n\n\te. 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：`^[0-9]+(.[0-9]+)?$`\n\n\tf. 必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：`^[0-9]+(.[0-9]{2})?$`\n\n\tg. 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：`^[0-9]+(.[0-9]{1,2})?$`\n\n\th. 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：`^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$`\n\n\ti. 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：`^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$`\n\n**备注**：这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里\n\n16. xml文件：`^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$`\n\n17. 中文字符的正则表达式：`[\\u4e00-\\u9fa5]`\n\n18. 双字节字符：`[^\\x00-\\xff]` (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n\n19. 空白行的正则表达式：`\\n\\s*\\r` (可以用来删除空白行)\n\n20. HTML标记的正则表达式：`<(\\S*?)[^>]*>.*?</\\1>|<.*? />` (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)\n\n21. 首尾空白字符的正则表达式：`^\\s*|\\s*$或(^\\s*)|(\\s*$)` (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n\n22. 腾讯QQ号：`[1-9][0-9]{4,}` (腾讯QQ号从10000开始)\n\n23. 中国邮政编码：`[1-9]\\d{5}(?!\\d)` (中国邮政编码为6位数字)\n\n24. IP地址：`\\d+\\.\\d+\\.\\d+\\.\\d+` (提取IP地址时有用)\n\n25. IP地址：`((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))`","slug":"常用正则表达式","published":1,"date":"2017-11-12T02:31:27.044Z","updated":"2017-11-12T02:31:27.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xlp0049dfbxvvo6mqt0","content":"<h2 id=\"一、校验数字的表达式\"><a href=\"#一、校验数字的表达式\" class=\"headerlink\" title=\"一、校验数字的表达式\"></a>一、校验数字的表达式</h2><ol>\n<li><p>数字：<code>^[0-9]*$</code></p>\n</li>\n<li><p>n位的数字：<code>^\\d{n}$</code></p>\n</li>\n<li><p>至少n位的数字：<code>^\\d{n,}$</code></p>\n</li>\n<li><p>m-n位的数字：<code>^\\d{m,n}$</code></p>\n</li>\n<li><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p>\n</li>\n<li><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p>\n</li>\n<li><p>带1-2位小数的正数或负数：<code>^(\\-)?\\d+(\\.\\d{1,2})?$</code></p>\n</li>\n<li><p>正数、负数、和小数：<code>^(\\-|\\+)?\\d+(\\.\\d+)?$</code></p>\n</li>\n<li><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p>\n</li>\n<li><p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p>\n</li>\n<li><p>非零的正整数：<code>^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$</code></p>\n</li>\n<li><p>非零的负整数：<code>^\\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\\d*$</code></p>\n</li>\n<li><p>非负整数：<code>^\\d+$ 或 ^[1-9]\\d*|0$</code></p>\n</li>\n<li><p>非正整数：<code>^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$</code></p>\n</li>\n<li><p>非负浮点数：<code>^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</code></p>\n</li>\n<li><p>非正浮点数：<code>^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</code></p>\n</li>\n<li><p>正浮点数：<code>^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p>\n</li>\n<li><p>负浮点数：<code>^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p>\n</li>\n<li><p>浮点数：<code>^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</code></p>\n</li>\n</ol>\n<h2 id=\"二、校验字符的表达式\"><a href=\"#二、校验字符的表达式\" class=\"headerlink\" title=\"二、校验字符的表达式\"></a>二、校验字符的表达式</h2><ol>\n<li><p>汉字：<code>^[\\u4e00-\\u9fa5]{0,}$</code></p>\n</li>\n<li><p>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p>\n</li>\n<li><p>长度为3-20的所有字符：<code>^.{3,20}$</code></p>\n</li>\n<li><p>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p>\n</li>\n<li><p>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p>\n</li>\n<li><p>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p>\n</li>\n<li><p>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p>\n</li>\n<li><p>由数字、26个英文字母或者下划线组成的字符串：<code>^\\w+$ 或 ^\\w{3,20}$</code></p>\n</li>\n<li><p>中文、英文、数字包括下划线：<code>^[\\u4E00-\\u9FA5A-Za-z0-9_]+$</code></p>\n</li>\n<li><p>中文、英文、数字但不包括下划线等符号：<code>^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$</code></p>\n</li>\n<li><p>可以输入含有<code>^%&amp;&#39;,;=?$\\</code>“等字符：<code>[^%&amp;&#39;,;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+</code></p>\n</li>\n</ol>\n<h2 id=\"三、特殊需求表达式\"><a href=\"#三、特殊需求表达式\" class=\"headerlink\" title=\"三、特殊需求表达式\"></a>三、特殊需求表达式</h2><ol>\n<li><p>Email地址：<code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code></p>\n</li>\n<li><p>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p>\n</li>\n<li><p>InternetURL：<code>[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</code></p>\n</li>\n<li><p>手机号码：    ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$</p>\n</li>\n<li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$</code></p>\n</li>\n<li><p>国内电话号码(0511-4405222、021-87888822)：<code>\\d{3}-\\d{8}|\\d{4}-\\d{7}</code></p>\n</li>\n<li><p>身份证号(15位、18位数字)：<code>^\\d{15}|\\d{18}$</code></p>\n</li>\n<li><p>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p>\n</li>\n<li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p>\n</li>\n<li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\\w{5,17}$</code></p>\n</li>\n<li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p>\n</li>\n<li><p>日期格式：<code>^\\d{4}-\\d{1,2}-\\d{1,2}</code></p>\n</li>\n<li><p>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p>\n</li>\n<li><p>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p>\n</li>\n<li><p>钱的输入格式：</p>\n<p>a. 有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p>\n<p>b. 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p>\n<p>c. 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p>\n<p>e. 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p>\n<p>f. 必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p>\n<p>g. 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p>\n<p>h. 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p>\n<p>i. 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></p>\n</li>\n</ol>\n<p><strong>备注</strong>：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p>\n<ol>\n<li><p>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$</code></p>\n</li>\n<li><p>中文字符的正则表达式：<code>[\\u4e00-\\u9fa5]</code></p>\n</li>\n<li><p>双字节字符：<code>[^\\x00-\\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p>\n</li>\n<li><p>空白行的正则表达式：<code>\\n\\s*\\r</code> (可以用来删除空白行)</p>\n</li>\n<li><p>HTML标记的正则表达式：<code>&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p>\n</li>\n<li><p>首尾空白字符的正则表达式：<code>^\\s*|\\s*$或(^\\s*)|(\\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p>\n</li>\n<li><p>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p>\n</li>\n<li><p>中国邮政编码：<code>[1-9]\\d{5}(?!\\d)</code> (中国邮政编码为6位数字)</p>\n</li>\n<li><p>IP地址：<code>\\d+\\.\\d+\\.\\d+\\.\\d+</code> (提取IP地址时有用)</p>\n</li>\n<li><p>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、校验数字的表达式\"><a href=\"#一、校验数字的表达式\" class=\"headerlink\" title=\"一、校验数字的表达式\"></a>一、校验数字的表达式</h2><ol>\n<li><p>数字：<code>^[0-9]*$</code></p>\n</li>\n<li><p>n位的数字：<code>^\\d{n}$</code></p>\n</li>\n<li><p>至少n位的数字：<code>^\\d{n,}$</code></p>\n</li>\n<li><p>m-n位的数字：<code>^\\d{m,n}$</code></p>\n</li>\n<li><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p>\n</li>\n<li><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p>\n</li>\n<li><p>带1-2位小数的正数或负数：<code>^(\\-)?\\d+(\\.\\d{1,2})?$</code></p>\n</li>\n<li><p>正数、负数、和小数：<code>^(\\-|\\+)?\\d+(\\.\\d+)?$</code></p>\n</li>\n<li><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p>\n</li>\n<li><p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p>\n</li>\n<li><p>非零的正整数：<code>^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$</code></p>\n</li>\n<li><p>非零的负整数：<code>^\\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\\d*$</code></p>\n</li>\n<li><p>非负整数：<code>^\\d+$ 或 ^[1-9]\\d*|0$</code></p>\n</li>\n<li><p>非正整数：<code>^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$</code></p>\n</li>\n<li><p>非负浮点数：<code>^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$</code></p>\n</li>\n<li><p>非正浮点数：<code>^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$</code></p>\n</li>\n<li><p>正浮点数：<code>^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p>\n</li>\n<li><p>负浮点数：<code>^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p>\n</li>\n<li><p>浮点数：<code>^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$</code></p>\n</li>\n</ol>\n<h2 id=\"二、校验字符的表达式\"><a href=\"#二、校验字符的表达式\" class=\"headerlink\" title=\"二、校验字符的表达式\"></a>二、校验字符的表达式</h2><ol>\n<li><p>汉字：<code>^[\\u4e00-\\u9fa5]{0,}$</code></p>\n</li>\n<li><p>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p>\n</li>\n<li><p>长度为3-20的所有字符：<code>^.{3,20}$</code></p>\n</li>\n<li><p>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p>\n</li>\n<li><p>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p>\n</li>\n<li><p>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p>\n</li>\n<li><p>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p>\n</li>\n<li><p>由数字、26个英文字母或者下划线组成的字符串：<code>^\\w+$ 或 ^\\w{3,20}$</code></p>\n</li>\n<li><p>中文、英文、数字包括下划线：<code>^[\\u4E00-\\u9FA5A-Za-z0-9_]+$</code></p>\n</li>\n<li><p>中文、英文、数字但不包括下划线等符号：<code>^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$</code></p>\n</li>\n<li><p>可以输入含有<code>^%&amp;&#39;,;=?$\\</code>“等字符：<code>[^%&amp;&#39;,;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+</code></p>\n</li>\n</ol>\n<h2 id=\"三、特殊需求表达式\"><a href=\"#三、特殊需求表达式\" class=\"headerlink\" title=\"三、特殊需求表达式\"></a>三、特殊需求表达式</h2><ol>\n<li><p>Email地址：<code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$</code></p>\n</li>\n<li><p>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p>\n</li>\n<li><p>InternetURL：<code>[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</code></p>\n</li>\n<li><p>手机号码：    ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$</p>\n</li>\n<li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$</code></p>\n</li>\n<li><p>国内电话号码(0511-4405222、021-87888822)：<code>\\d{3}-\\d{8}|\\d{4}-\\d{7}</code></p>\n</li>\n<li><p>身份证号(15位、18位数字)：<code>^\\d{15}|\\d{18}$</code></p>\n</li>\n<li><p>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p>\n</li>\n<li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p>\n</li>\n<li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\\w{5,17}$</code></p>\n</li>\n<li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p>\n</li>\n<li><p>日期格式：<code>^\\d{4}-\\d{1,2}-\\d{1,2}</code></p>\n</li>\n<li><p>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p>\n</li>\n<li><p>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p>\n</li>\n<li><p>钱的输入格式：</p>\n<p>a. 有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p>\n<p>b. 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p>\n<p>c. 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p>\n<p>e. 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p>\n<p>f. 必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p>\n<p>g. 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p>\n<p>h. 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p>\n<p>i. 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></p>\n</li>\n</ol>\n<p><strong>备注</strong>：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p>\n<ol>\n<li><p>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$</code></p>\n</li>\n<li><p>中文字符的正则表达式：<code>[\\u4e00-\\u9fa5]</code></p>\n</li>\n<li><p>双字节字符：<code>[^\\x00-\\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p>\n</li>\n<li><p>空白行的正则表达式：<code>\\n\\s*\\r</code> (可以用来删除空白行)</p>\n</li>\n<li><p>HTML标记的正则表达式：<code>&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p>\n</li>\n<li><p>首尾空白字符的正则表达式：<code>^\\s*|\\s*$或(^\\s*)|(\\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p>\n</li>\n<li><p>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p>\n</li>\n<li><p>中国邮政编码：<code>[1-9]\\d{5}(?!\\d)</code> (中国邮政编码为6位数字)</p>\n</li>\n<li><p>IP地址：<code>\\d+\\.\\d+\\.\\d+\\.\\d+</code> (提取IP地址时有用)</p>\n</li>\n<li><p>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))</code></p>\n</li>\n</ol>\n"},{"title":"接口应用","date":"2017-06-15T16:00:00.000Z","abbrlink":"75336bdc","_content":"\n> 接口定义一种标准：\n\n1. 通过interface定义；\n2. 函数都是抽象函数（只有函数没有函数体）；\n3. 子类通过implements实现；对接口里面的抽象函数进行override；\n```java\n/**\n*定义一个Printer接口，通过HPPrinter，CanonPrinter两个子类去实现\n*/\npackage printer;\n //定义一个Printer接口\ninterface Printer{\n    public void open();\n    public void print(String s);\n    public void close();\n}\n//定义HPPrinter去implements Printer接口\nclass HPPrinter implements Printer{\n    @Override\n    public void open(){\n        System.out.println(\"HPPrinter open\");\n    }\n    public void print(String s){\n        System.out.println(\"HPPrinter print:\" + s);\n    }\n    public void close(){\n        System.out.println(\"HPPrinter close\");\n    }\n}\n//定义CanonPrinter去implements Printer接口\nclass CanonPrinter implements Printer{\n    @Override\n    private void clean(){\n        System.out.println(\"clean\");\n    }\n    public void open(){\n        System.out.println(\"CanonPrinter open\");\n    }\n    public void print(String s){\n        System.out.println(\"CanonPrinter print:\" + s);\n    }\n    public void close(){\n        this.clean();\n        System.out.println(\"CanonPrinter close\");\n    }\n}\n//静态工厂方法模式\nclass PrinterFactory{\n//定义一个静态函数getPrinter(int flag)，返回值类型为Printer\n    public static Printer getPrinter(int flag){\n        Printer printer = null;\n//根据用户选择生成新的对象，并向上转型为Printer类型\n        if (flag == 0){\n            printer = new HPPrinter();\n        }\n        else if(flag == 1){\n            printer = new CanonPrinter();\n        }\n        return printer;\n    }\n}\n//定义一个主函数，对函数进行调用\nclass Test{\n    public static void main(String args[]){\n        int flag = 1;\n        //工厂方法模式调用 类名+函数\n        Printer printer = PrinterFactory.getPrinter(flag);\n        printer.open();\n        printer.print(\"Test\");\n        printer.close();\n    }\n}\n```\n\n\n## 工厂方法 ##\n#### 简单工厂模式 ####\n\n> Java 简单工厂模式（Simple Factory Pattern）又叫静态工厂方法模式（Static FactoryMethod Pattern），通过专门定义一个类来负责创建其他类的实例（将生成对象的代码封装在工厂类中），被创建的实例通常都具有共同的父类。\n\n\n![](https://raw.githubusercontent.com/roojay520/roojaycloud/images/printer.png)\n\n","source":"_posts/接口的应用.md","raw":"---\ntitle: 接口应用\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 75336bdc\n---\n\n> 接口定义一种标准：\n\n1. 通过interface定义；\n2. 函数都是抽象函数（只有函数没有函数体）；\n3. 子类通过implements实现；对接口里面的抽象函数进行override；\n```java\n/**\n*定义一个Printer接口，通过HPPrinter，CanonPrinter两个子类去实现\n*/\npackage printer;\n //定义一个Printer接口\ninterface Printer{\n    public void open();\n    public void print(String s);\n    public void close();\n}\n//定义HPPrinter去implements Printer接口\nclass HPPrinter implements Printer{\n    @Override\n    public void open(){\n        System.out.println(\"HPPrinter open\");\n    }\n    public void print(String s){\n        System.out.println(\"HPPrinter print:\" + s);\n    }\n    public void close(){\n        System.out.println(\"HPPrinter close\");\n    }\n}\n//定义CanonPrinter去implements Printer接口\nclass CanonPrinter implements Printer{\n    @Override\n    private void clean(){\n        System.out.println(\"clean\");\n    }\n    public void open(){\n        System.out.println(\"CanonPrinter open\");\n    }\n    public void print(String s){\n        System.out.println(\"CanonPrinter print:\" + s);\n    }\n    public void close(){\n        this.clean();\n        System.out.println(\"CanonPrinter close\");\n    }\n}\n//静态工厂方法模式\nclass PrinterFactory{\n//定义一个静态函数getPrinter(int flag)，返回值类型为Printer\n    public static Printer getPrinter(int flag){\n        Printer printer = null;\n//根据用户选择生成新的对象，并向上转型为Printer类型\n        if (flag == 0){\n            printer = new HPPrinter();\n        }\n        else if(flag == 1){\n            printer = new CanonPrinter();\n        }\n        return printer;\n    }\n}\n//定义一个主函数，对函数进行调用\nclass Test{\n    public static void main(String args[]){\n        int flag = 1;\n        //工厂方法模式调用 类名+函数\n        Printer printer = PrinterFactory.getPrinter(flag);\n        printer.open();\n        printer.print(\"Test\");\n        printer.close();\n    }\n}\n```\n\n\n## 工厂方法 ##\n#### 简单工厂模式 ####\n\n> Java 简单工厂模式（Simple Factory Pattern）又叫静态工厂方法模式（Static FactoryMethod Pattern），通过专门定义一个类来负责创建其他类的实例（将生成对象的代码封装在工厂类中），被创建的实例通常都具有共同的父类。\n\n\n![](https://raw.githubusercontent.com/roojay520/roojaycloud/images/printer.png)\n\n","slug":"接口的应用","published":1,"updated":"2017-11-12T02:15:45.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xlt004ddfbx34c8l0ye","content":"<blockquote>\n<p>接口定义一种标准：</p>\n</blockquote>\n<ol>\n<li>通过interface定义；</li>\n<li>函数都是抽象函数（只有函数没有函数体）；</li>\n<li>子类通过implements实现；对接口里面的抽象函数进行override；<pre><code class=\"java\">/**\n*定义一个Printer接口，通过HPPrinter，CanonPrinter两个子类去实现\n*/\npackage printer;\n//定义一个Printer接口\ninterface Printer{\n public void open();\n public void print(String s);\n public void close();\n}\n//定义HPPrinter去implements Printer接口\nclass HPPrinter implements Printer{\n @Override\n public void open(){\n     System.out.println(&quot;HPPrinter open&quot;);\n }\n public void print(String s){\n     System.out.println(&quot;HPPrinter print:&quot; + s);\n }\n public void close(){\n     System.out.println(&quot;HPPrinter close&quot;);\n }\n}\n//定义CanonPrinter去implements Printer接口\nclass CanonPrinter implements Printer{\n @Override\n private void clean(){\n     System.out.println(&quot;clean&quot;);\n }\n public void open(){\n     System.out.println(&quot;CanonPrinter open&quot;);\n }\n public void print(String s){\n     System.out.println(&quot;CanonPrinter print:&quot; + s);\n }\n public void close(){\n     this.clean();\n     System.out.println(&quot;CanonPrinter close&quot;);\n }\n}\n//静态工厂方法模式\nclass PrinterFactory{\n//定义一个静态函数getPrinter(int flag)，返回值类型为Printer\n public static Printer getPrinter(int flag){\n     Printer printer = null;\n//根据用户选择生成新的对象，并向上转型为Printer类型\n     if (flag == 0){\n         printer = new HPPrinter();\n     }\n     else if(flag == 1){\n         printer = new CanonPrinter();\n     }\n     return printer;\n }\n}\n//定义一个主函数，对函数进行调用\nclass Test{\n public static void main(String args[]){\n     int flag = 1;\n     //工厂方法模式调用 类名+函数\n     Printer printer = PrinterFactory.getPrinter(flag);\n     printer.open();\n     printer.print(&quot;Test&quot;);\n     printer.close();\n }\n}\n</code></pre>\n</li>\n</ol>\n<h2 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h2><h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><blockquote>\n<p>Java 简单工厂模式（Simple Factory Pattern）又叫静态工厂方法模式（Static FactoryMethod Pattern），通过专门定义一个类来负责创建其他类的实例（将生成对象的代码封装在工厂类中），被创建的实例通常都具有共同的父类。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/roojay520/roojaycloud/images/printer.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>接口定义一种标准：</p>\n</blockquote>\n<ol>\n<li>通过interface定义；</li>\n<li>函数都是抽象函数（只有函数没有函数体）；</li>\n<li>子类通过implements实现；对接口里面的抽象函数进行override；<pre><code class=\"java\">/**\n*定义一个Printer接口，通过HPPrinter，CanonPrinter两个子类去实现\n*/\npackage printer;\n//定义一个Printer接口\ninterface Printer{\n public void open();\n public void print(String s);\n public void close();\n}\n//定义HPPrinter去implements Printer接口\nclass HPPrinter implements Printer{\n @Override\n public void open(){\n     System.out.println(&quot;HPPrinter open&quot;);\n }\n public void print(String s){\n     System.out.println(&quot;HPPrinter print:&quot; + s);\n }\n public void close(){\n     System.out.println(&quot;HPPrinter close&quot;);\n }\n}\n//定义CanonPrinter去implements Printer接口\nclass CanonPrinter implements Printer{\n @Override\n private void clean(){\n     System.out.println(&quot;clean&quot;);\n }\n public void open(){\n     System.out.println(&quot;CanonPrinter open&quot;);\n }\n public void print(String s){\n     System.out.println(&quot;CanonPrinter print:&quot; + s);\n }\n public void close(){\n     this.clean();\n     System.out.println(&quot;CanonPrinter close&quot;);\n }\n}\n//静态工厂方法模式\nclass PrinterFactory{\n//定义一个静态函数getPrinter(int flag)，返回值类型为Printer\n public static Printer getPrinter(int flag){\n     Printer printer = null;\n//根据用户选择生成新的对象，并向上转型为Printer类型\n     if (flag == 0){\n         printer = new HPPrinter();\n     }\n     else if(flag == 1){\n         printer = new CanonPrinter();\n     }\n     return printer;\n }\n}\n//定义一个主函数，对函数进行调用\nclass Test{\n public static void main(String args[]){\n     int flag = 1;\n     //工厂方法模式调用 类名+函数\n     Printer printer = PrinterFactory.getPrinter(flag);\n     printer.open();\n     printer.print(&quot;Test&quot;);\n     printer.close();\n }\n}\n</code></pre>\n</li>\n</ol>\n<h2 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h2><h4 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h4><blockquote>\n<p>Java 简单工厂模式（Simple Factory Pattern）又叫静态工厂方法模式（Static FactoryMethod Pattern），通过专门定义一个类来负责创建其他类的实例（将生成对象的代码封装在工厂类中），被创建的实例通常都具有共同的父类。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/roojay520/roojaycloud/images/printer.png\" alt=\"\"></p>\n"},{"title":"方法","date":"2017-06-15T16:00:00.000Z","abbrlink":"ad01bc3e","_content":"\n> 为解决代码重复编写的问题所设计的特定功能代码块。\n> 方法不能嵌套。\n> main（）方法的作用：调用方法的实例化对象。\n\n方法结构一般为：\n```java\n修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n\t执行语句\n\t...\n\t...\n\treturn 返回值；\n}\n```\n### 方法的重载 ###\n> Java 允许在一个程序中定义多个名称相同的方法","source":"_posts/方法.md","raw":"---\ntitle: 方法\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: ad01bc3e\n---\n\n> 为解决代码重复编写的问题所设计的特定功能代码块。\n> 方法不能嵌套。\n> main（）方法的作用：调用方法的实例化对象。\n\n方法结构一般为：\n```java\n修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n\t执行语句\n\t...\n\t...\n\treturn 返回值；\n}\n```\n### 方法的重载 ###\n> Java 允许在一个程序中定义多个名称相同的方法","slug":"方法","published":1,"updated":"2017-11-12T02:15:34.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xlv004hdfbx16wkxe97","content":"<blockquote>\n<p>为解决代码重复编写的问题所设计的特定功能代码块。<br>方法不能嵌套。<br>main（）方法的作用：调用方法的实例化对象。</p>\n</blockquote>\n<p>方法结构一般为：</p>\n<pre><code class=\"java\">修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n    执行语句\n    ...\n    ...\n    return 返回值；\n}\n</code></pre>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><blockquote>\n<p>Java 允许在一个程序中定义多个名称相同的方法</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>为解决代码重复编写的问题所设计的特定功能代码块。<br>方法不能嵌套。<br>main（）方法的作用：调用方法的实例化对象。</p>\n</blockquote>\n<p>方法结构一般为：</p>\n<pre><code class=\"java\">修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{\n    执行语句\n    ...\n    ...\n    return 返回值；\n}\n</code></pre>\n<h3 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h3><blockquote>\n<p>Java 允许在一个程序中定义多个名称相同的方法</p>\n</blockquote>\n"},{"title":"常用排序算法","abbrlink":"5b90526d","data":"2017/9/15","_content":"\n> 转自@ruanyf大神,留作自己备用.\n\n排序算法是将一系列的值按照顺序进行排列的方法。\n## 冒泡排序\n\n### 简介\n\n冒泡排序（Bubble Sort）是最易懂的排序算法，但是效率较低，生产环境中很少使用。\n\n它的基本思想是：\n\n1. 依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。\n\n2. 再对最后一位以外的数组，重复前面的过程，直至全部排序完成。\n\n由于每进行一次这个过程，在该次比较的最后一个位置上，正确的数会自己冒出来，就好像“冒泡”一样，这种算法因此得名。\n\n以对数组`[3, 2, 4, 5, 1]`进行从小到大排序为例，步骤如下：\n\n1. 第一位的“3”与第二位的“2”进行比较，3大于2，互换位置，数组变成`[2, 3, 4, 5, 1]`。\n\n2. 第二位的“3”与第三位的“4”进行比较，3小于4，数组不变。\n\n3. 第三位的“4”与第四位的“5”进行比较，4小于5，数组不变。\n\n4. 第四位的“5”与第五位的“1”进行比较，5大于1，互换位置，数组变成`[2, 3, 4, 1, 5]`。\n\n第一轮排序完成，可以看到最后一位的5，已经是正确的数了。然后，再对剩下的数`[2, 3, 4, 1]`重复这个过程，每一轮都会在本轮最后一位上出现正确的数。直至剩下最后一个位置，所有排序结束。\n\n### 算法实现\n\n先定义一个交换函数，作用是交换两个位置的值。\n\n```javascript\nfunction swap(myArray, p1, p2){\n  var temp = myArray[p1];\n  myArray[p1] = myArray[p2];\n  myArray[p2] = temp;\n}\n```\n\n然后定义主函数。\n\n```javascript\nfunction bubbleSort(myArray){\n  var len = myArray.length;\n  var i;\n  var j;\n  var stop;\n\n  for (i = 0; i < len - 1; i++){\n    for (j = 0, stop = len - 1 - i; j < stop; j++){\n      if (myArray[j] > myArray[j + 1]){\n        swap(myArray, j, j + 1);\n      }\n    }\n  }\n\n  return myArray;\n}\n```\n\n## 选择排序\n\n### 简介\n\n选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 假定第一位的“3”是最小值。\n\n2. 最小值“3”与第二位的“2”进行比较，2小于3，所以新的最小值是第二位的“2”。\n\n3. 最小值“2”与第三位的“4”进行比较，2小于4，最小值不变。\n\n4. 最小值“2”与第四位的“5”进行比较，2小于5，最小值不变。\n\n5. 最小值“2”与第五位的“1”进行比较，1小于2，所以新的最小值是第五位的“1”。\n\n6. 第五位的“1”与第一位的“3”互换位置，数组变为[1, 2, 4, 5, 3]。\n\n这一轮比较结束后，最小值“1”已经排到正确的位置了，然后对剩下的[2, 4, 5, 3]重复上面的过程。每一轮排序都会将该轮的最小值排到正确的位置，直至剩下最后一个位置，所有排序结束。\n\n### 算法实现\n\n先定义一个交换函数。\n\n```javascript\n\nfunction swap(myArray, p1, p2){\n    var temp = myArray[p1];\n    myArray[p1] = myArray[p2];\n    myArray[p2] = temp;\n}\n\n```\n\n然后定义主函数。\n\n```javascript\n\nfunction selectionSort(myArray){\n\n    var len = myArray.length,\n        min;\n\n    for (i=0; i < len; i++){\n\n        // 将当前位置设为最小值\n        min = i;\n\n        // 检查数组其余部分是否更小\n        for (j=i+1; j < len; j++){\n            if (myArray[j] < myArray[min]){\n                min = j;\n            }\n        }\n\n        // 如果当前位置不是最小值，将其换为最小值\n        if (i != min){\n            swap(myArray, i, min);\n        }\n    }\n\n    return myArray;\n}\n\n```\n\n## 插入排序\n\n### 简介\n\n插入排序（insertion sort）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 将数组分成[3]和[2, 4, 5, 1]两部分，前者是已排序的，后者是未排序的。\n\n2. 取出未排序部分的第一个元素“2”，与已排序部分最后一个元素“3”比较，因为2小于3，所以2排在3前面，整个数组变成[2, 3]和[4, 5, 1]两部分。\n\n3. 取出未排序部分的第一个元素“4”，与已排序部分最后一个元素“3”比较，因为4大于3，所以4排在3后面，整个数组变成[2, 3, 4]和[5, 1]两部分。\n\n4. 取出未排序部分的第一个元素“5”，与已排序部分最后一个元素“4”比较，因为5大于4，所以5排在4后面，整个数组变成[2, 3, 4, 5]和[1]两部分。\n\n5. 取出未排序部分的第一个元素“1”，与已排序部分最后一个元素“5”比较，因为1小于5，所以再与前一个元素“4”比较；因为1小于4，再与前一个元素“3”比较；因为1小于3，再与前一个元素“2”比较；因为小于1小于2，所以“1”排在2的前面，整个数组变成[1, 2, 3, 4, 5]。\n\n### 算法实现\n\n算法的实现如下：\n\n```javascript\n\nfunction insertionSort(myArray) {\n\n    var len     = myArray.length,     // 数组的长度\n        value,                      // 当前比较的值\n        i,                          // 未排序部分的当前位置\n        j;                          // 已排序部分的当前位置\n\n    for (i=0; i < len; i++) {\n\n        // 储存当前位置的值\n        value = myArray[i];\n\n        /*\n         * 当已排序部分的当前元素大于value，\n         * 就将当前元素向后移一位，再将前一位与value比较\n         */\n        for (j=i-1; j > -1 && myArray[j] > value; j--) {\n            myArray[j+1] = myArray[j];\n        }\n\n        myArray[j+1] = value;\n    }\n\n    return myArray;\n}\n\n```\n\n## 合并排序\n\n### 简介\n\n前面三种排序算法只有教学价值，因为效率低，很少实际使用。合并排序（Merge sort）则是一种被广泛使用的排序方法。\n\n它的基本思想是，将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成n个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 将数组分成[3, 2, 4]和[5, 1]两部分。\n\n2. 将[3, 2, 4]分成[3, 2]和[4]两部分。\n\n3. 将[3, 2]分成[3]和[2]两部分，然后合并成[2, 3]。\n\n4. 将[2, 3]和[4]合并成[2, 3, 4]。\n\n5. 将[5, 1]分成[5]和[1]两部分，然后合并成[1, 5]。\n\n6. 将[2, 3, 4]和[1, 5]合并成[1, 2, 3, 4, 5]。\n\n### 算法实现\n\n这里的关键是如何合并两个已经排序的数组。具体实现请看下面的函数。\n\n```javascript\n\nfunction merge(left, right){\n    var result  = [],\n        il      = 0,\n        ir      = 0;\n\n    while (il < left.length && ir < right.length){\n        if (left[il] < right[ir]){\n            result.push(left[il++]);\n        } else {\n            result.push(right[ir++]);\n        }\n    }\n\n    return result.concat(left.slice(il)).concat(right.slice(ir));\n}\n\n```\n\n上面的merge函数，合并两个已经按升序排好序的数组。首先，比较两个数组的第一个元素，将其中较小的一个放入result数组；然后，将其中较大的一个与另一个数组的第二个元素进行比较，再将其中较小的一个放入result数组的第二个位置。以此类推，直到一个数组的所有元素都进入result数组为止，再将另一个数组剩下的元素接着result数组后面返回（使用concat方法）。\n\n有了merge函数，就可以对任意数组排序了。基本方法是将数组不断地拆成两半，直到每一半只包含零个元素或一个元素为止，然后就用merge函数，将拆成两半的数组不断合并，直到合并成一整个排序完成的数组。\n\n```javascript\n\nfunction mergeSort(myArray){\n\n    if (myArray.length < 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle);\n\n    return merge(mergeSort(left), mergeSort(right));\n}\n\n```\n\n上面的代码有一个问题，就是返回的是一个全新的数组，会多占用空间。因此，修改上面的函数，使之在原地排序，不多占用空间。\n\n```javascript\n\nfunction mergeSort(myArray){\n\n    if (myArray.length < 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle),\n        params = merge(mergeSort(left), mergeSort(right));\n\n    // 在返回的数组头部，添加两个元素，第一个是0，第二个是返回的数组长度\n    params.unshift(0, myArray.length);\n\n\t// splice用来替换数组元素，它接受多个参数，\n\t// 第一个是开始替换的位置，第二个是需要替换的个数，后面就是所有新加入的元素。\n\t// 因为splice不接受数组作为参数，所以采用apply的写法。\n\t// 这一句的意思就是原来的myArray数组替换成排序后的myArray\n    myArray.splice.apply(myArray, params);\n\n\t// 返回排序后的数组\n    return myArray;\n}\n\n```\n\n## 快速排序\n\n### 简介\n\n快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。\n\n它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。\n\n具体做法是：\n\n1. 确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。\n\n2. 建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。\n\n3. 左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。\n\n4. 右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。\n\n5. 左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。\n\n6. 对左右两侧重复第2至5步。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 选择中间值“4”作为“支点”。\n\n2. 第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。\n\n3. 倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。\n\n4. 左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。\n\n5. 左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。\n\n6. 右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。\n\n7. 左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。\n\n8. 对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。\n\n### 算法实现\n\n首先部署一个swap函数，用于互换两个位置的值。\n\n```javascript\n\nfunction swap(myArray, firstIndex, secondIndex){\n    var temp = myArray[firstIndex];\n    myArray[firstIndex] = myArray[secondIndex];\n    myArray[secondIndex] = temp;\n}\n\n```\n\n然后，部署一个partition函数，用于完成一轮排序。\n\n```javascript\n\nfunction partition(myArray, left, right) {\n\n    var pivot   = myArray[Math.floor((right + left) / 2)],\n        i       = left,\n        j       = right;\n\n\n    while (i <= j) {\n\n        while (myArray[i] < pivot) {\n            i++;\n        }\n\n        while (myArray[j] > pivot) {\n            j--;\n        }\n\n        if (i <= j) {\n            swap(myArray, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n\n```\n\n接下来，就是递归上面的过程，完成整个排序。\n\n```javascript\n\nfunction quickSort(myArray, left, right) {\n\n\tif (myArray.length < 2) return myArray;\n\n\tleft = (typeof left !== \"number\" ? 0 : left);\n\n\tright = (typeof right !== \"number\" ? myArray.length - 1 : right);\n\n\tvar index  = partition(myArray, left, right);\n\n\t if (left < index - 1) {\n            quickSort(myArray, left, index - 1);\n     }\n\n\t if (index < right) {\n            quickSort(myArray, index, right);\n      }\n\n\t return myArray;\n\n}\n\n```\n\n## 参考链接\n\n- Nicholas C. Zakas, [Computer science in JavaScript: Bubble sort](http://www.nczonline.net/blog/2009/05/26/computer-science-in-javascript-bubble-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Selection sort](http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Insertion sort](http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Merge sort](http://www.nczonline.net/blog/2012/10/02/computer-science-and-javascript-merge-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Quicksort](http://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/)\n","source":"_posts/排序算法.md","raw":"---\ntitle: 常用排序算法\ntags: 算法\ncategories: 编程相关\nabbrlink: 5b90526d\ndata: 2017/9/15\n---\n\n> 转自@ruanyf大神,留作自己备用.\n\n排序算法是将一系列的值按照顺序进行排列的方法。\n## 冒泡排序\n\n### 简介\n\n冒泡排序（Bubble Sort）是最易懂的排序算法，但是效率较低，生产环境中很少使用。\n\n它的基本思想是：\n\n1. 依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。\n\n2. 再对最后一位以外的数组，重复前面的过程，直至全部排序完成。\n\n由于每进行一次这个过程，在该次比较的最后一个位置上，正确的数会自己冒出来，就好像“冒泡”一样，这种算法因此得名。\n\n以对数组`[3, 2, 4, 5, 1]`进行从小到大排序为例，步骤如下：\n\n1. 第一位的“3”与第二位的“2”进行比较，3大于2，互换位置，数组变成`[2, 3, 4, 5, 1]`。\n\n2. 第二位的“3”与第三位的“4”进行比较，3小于4，数组不变。\n\n3. 第三位的“4”与第四位的“5”进行比较，4小于5，数组不变。\n\n4. 第四位的“5”与第五位的“1”进行比较，5大于1，互换位置，数组变成`[2, 3, 4, 1, 5]`。\n\n第一轮排序完成，可以看到最后一位的5，已经是正确的数了。然后，再对剩下的数`[2, 3, 4, 1]`重复这个过程，每一轮都会在本轮最后一位上出现正确的数。直至剩下最后一个位置，所有排序结束。\n\n### 算法实现\n\n先定义一个交换函数，作用是交换两个位置的值。\n\n```javascript\nfunction swap(myArray, p1, p2){\n  var temp = myArray[p1];\n  myArray[p1] = myArray[p2];\n  myArray[p2] = temp;\n}\n```\n\n然后定义主函数。\n\n```javascript\nfunction bubbleSort(myArray){\n  var len = myArray.length;\n  var i;\n  var j;\n  var stop;\n\n  for (i = 0; i < len - 1; i++){\n    for (j = 0, stop = len - 1 - i; j < stop; j++){\n      if (myArray[j] > myArray[j + 1]){\n        swap(myArray, j, j + 1);\n      }\n    }\n  }\n\n  return myArray;\n}\n```\n\n## 选择排序\n\n### 简介\n\n选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 假定第一位的“3”是最小值。\n\n2. 最小值“3”与第二位的“2”进行比较，2小于3，所以新的最小值是第二位的“2”。\n\n3. 最小值“2”与第三位的“4”进行比较，2小于4，最小值不变。\n\n4. 最小值“2”与第四位的“5”进行比较，2小于5，最小值不变。\n\n5. 最小值“2”与第五位的“1”进行比较，1小于2，所以新的最小值是第五位的“1”。\n\n6. 第五位的“1”与第一位的“3”互换位置，数组变为[1, 2, 4, 5, 3]。\n\n这一轮比较结束后，最小值“1”已经排到正确的位置了，然后对剩下的[2, 4, 5, 3]重复上面的过程。每一轮排序都会将该轮的最小值排到正确的位置，直至剩下最后一个位置，所有排序结束。\n\n### 算法实现\n\n先定义一个交换函数。\n\n```javascript\n\nfunction swap(myArray, p1, p2){\n    var temp = myArray[p1];\n    myArray[p1] = myArray[p2];\n    myArray[p2] = temp;\n}\n\n```\n\n然后定义主函数。\n\n```javascript\n\nfunction selectionSort(myArray){\n\n    var len = myArray.length,\n        min;\n\n    for (i=0; i < len; i++){\n\n        // 将当前位置设为最小值\n        min = i;\n\n        // 检查数组其余部分是否更小\n        for (j=i+1; j < len; j++){\n            if (myArray[j] < myArray[min]){\n                min = j;\n            }\n        }\n\n        // 如果当前位置不是最小值，将其换为最小值\n        if (i != min){\n            swap(myArray, i, min);\n        }\n    }\n\n    return myArray;\n}\n\n```\n\n## 插入排序\n\n### 简介\n\n插入排序（insertion sort）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 将数组分成[3]和[2, 4, 5, 1]两部分，前者是已排序的，后者是未排序的。\n\n2. 取出未排序部分的第一个元素“2”，与已排序部分最后一个元素“3”比较，因为2小于3，所以2排在3前面，整个数组变成[2, 3]和[4, 5, 1]两部分。\n\n3. 取出未排序部分的第一个元素“4”，与已排序部分最后一个元素“3”比较，因为4大于3，所以4排在3后面，整个数组变成[2, 3, 4]和[5, 1]两部分。\n\n4. 取出未排序部分的第一个元素“5”，与已排序部分最后一个元素“4”比较，因为5大于4，所以5排在4后面，整个数组变成[2, 3, 4, 5]和[1]两部分。\n\n5. 取出未排序部分的第一个元素“1”，与已排序部分最后一个元素“5”比较，因为1小于5，所以再与前一个元素“4”比较；因为1小于4，再与前一个元素“3”比较；因为1小于3，再与前一个元素“2”比较；因为小于1小于2，所以“1”排在2的前面，整个数组变成[1, 2, 3, 4, 5]。\n\n### 算法实现\n\n算法的实现如下：\n\n```javascript\n\nfunction insertionSort(myArray) {\n\n    var len     = myArray.length,     // 数组的长度\n        value,                      // 当前比较的值\n        i,                          // 未排序部分的当前位置\n        j;                          // 已排序部分的当前位置\n\n    for (i=0; i < len; i++) {\n\n        // 储存当前位置的值\n        value = myArray[i];\n\n        /*\n         * 当已排序部分的当前元素大于value，\n         * 就将当前元素向后移一位，再将前一位与value比较\n         */\n        for (j=i-1; j > -1 && myArray[j] > value; j--) {\n            myArray[j+1] = myArray[j];\n        }\n\n        myArray[j+1] = value;\n    }\n\n    return myArray;\n}\n\n```\n\n## 合并排序\n\n### 简介\n\n前面三种排序算法只有教学价值，因为效率低，很少实际使用。合并排序（Merge sort）则是一种被广泛使用的排序方法。\n\n它的基本思想是，将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成n个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 将数组分成[3, 2, 4]和[5, 1]两部分。\n\n2. 将[3, 2, 4]分成[3, 2]和[4]两部分。\n\n3. 将[3, 2]分成[3]和[2]两部分，然后合并成[2, 3]。\n\n4. 将[2, 3]和[4]合并成[2, 3, 4]。\n\n5. 将[5, 1]分成[5]和[1]两部分，然后合并成[1, 5]。\n\n6. 将[2, 3, 4]和[1, 5]合并成[1, 2, 3, 4, 5]。\n\n### 算法实现\n\n这里的关键是如何合并两个已经排序的数组。具体实现请看下面的函数。\n\n```javascript\n\nfunction merge(left, right){\n    var result  = [],\n        il      = 0,\n        ir      = 0;\n\n    while (il < left.length && ir < right.length){\n        if (left[il] < right[ir]){\n            result.push(left[il++]);\n        } else {\n            result.push(right[ir++]);\n        }\n    }\n\n    return result.concat(left.slice(il)).concat(right.slice(ir));\n}\n\n```\n\n上面的merge函数，合并两个已经按升序排好序的数组。首先，比较两个数组的第一个元素，将其中较小的一个放入result数组；然后，将其中较大的一个与另一个数组的第二个元素进行比较，再将其中较小的一个放入result数组的第二个位置。以此类推，直到一个数组的所有元素都进入result数组为止，再将另一个数组剩下的元素接着result数组后面返回（使用concat方法）。\n\n有了merge函数，就可以对任意数组排序了。基本方法是将数组不断地拆成两半，直到每一半只包含零个元素或一个元素为止，然后就用merge函数，将拆成两半的数组不断合并，直到合并成一整个排序完成的数组。\n\n```javascript\n\nfunction mergeSort(myArray){\n\n    if (myArray.length < 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle);\n\n    return merge(mergeSort(left), mergeSort(right));\n}\n\n```\n\n上面的代码有一个问题，就是返回的是一个全新的数组，会多占用空间。因此，修改上面的函数，使之在原地排序，不多占用空间。\n\n```javascript\n\nfunction mergeSort(myArray){\n\n    if (myArray.length < 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle),\n        params = merge(mergeSort(left), mergeSort(right));\n\n    // 在返回的数组头部，添加两个元素，第一个是0，第二个是返回的数组长度\n    params.unshift(0, myArray.length);\n\n\t// splice用来替换数组元素，它接受多个参数，\n\t// 第一个是开始替换的位置，第二个是需要替换的个数，后面就是所有新加入的元素。\n\t// 因为splice不接受数组作为参数，所以采用apply的写法。\n\t// 这一句的意思就是原来的myArray数组替换成排序后的myArray\n    myArray.splice.apply(myArray, params);\n\n\t// 返回排序后的数组\n    return myArray;\n}\n\n```\n\n## 快速排序\n\n### 简介\n\n快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。\n\n它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。\n\n具体做法是：\n\n1. 确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。\n\n2. 建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。\n\n3. 左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。\n\n4. 右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。\n\n5. 左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。\n\n6. 对左右两侧重复第2至5步。\n\n以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：\n\n1. 选择中间值“4”作为“支点”。\n\n2. 第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。\n\n3. 倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。\n\n4. 左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。\n\n5. 左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。\n\n6. 右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。\n\n7. 左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。\n\n8. 对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。\n\n### 算法实现\n\n首先部署一个swap函数，用于互换两个位置的值。\n\n```javascript\n\nfunction swap(myArray, firstIndex, secondIndex){\n    var temp = myArray[firstIndex];\n    myArray[firstIndex] = myArray[secondIndex];\n    myArray[secondIndex] = temp;\n}\n\n```\n\n然后，部署一个partition函数，用于完成一轮排序。\n\n```javascript\n\nfunction partition(myArray, left, right) {\n\n    var pivot   = myArray[Math.floor((right + left) / 2)],\n        i       = left,\n        j       = right;\n\n\n    while (i <= j) {\n\n        while (myArray[i] < pivot) {\n            i++;\n        }\n\n        while (myArray[j] > pivot) {\n            j--;\n        }\n\n        if (i <= j) {\n            swap(myArray, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n\n```\n\n接下来，就是递归上面的过程，完成整个排序。\n\n```javascript\n\nfunction quickSort(myArray, left, right) {\n\n\tif (myArray.length < 2) return myArray;\n\n\tleft = (typeof left !== \"number\" ? 0 : left);\n\n\tright = (typeof right !== \"number\" ? myArray.length - 1 : right);\n\n\tvar index  = partition(myArray, left, right);\n\n\t if (left < index - 1) {\n            quickSort(myArray, left, index - 1);\n     }\n\n\t if (index < right) {\n            quickSort(myArray, index, right);\n      }\n\n\t return myArray;\n\n}\n\n```\n\n## 参考链接\n\n- Nicholas C. Zakas, [Computer science in JavaScript: Bubble sort](http://www.nczonline.net/blog/2009/05/26/computer-science-in-javascript-bubble-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Selection sort](http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Insertion sort](http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Merge sort](http://www.nczonline.net/blog/2012/10/02/computer-science-and-javascript-merge-sort/)\n- Nicholas C. Zakas, [Computer science in JavaScript: Quicksort](http://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/)\n","slug":"排序算法","published":1,"date":"2017-11-12T02:31:52.133Z","updated":"2017-11-12T02:31:52.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xly004ldfbx72m2wlom","content":"<blockquote>\n<p>转自@ruanyf大神,留作自己备用.</p>\n</blockquote>\n<p>排序算法是将一系列的值按照顺序进行排列的方法。</p>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>冒泡排序（Bubble Sort）是最易懂的排序算法，但是效率较低，生产环境中很少使用。</p>\n<p>它的基本思想是：</p>\n<ol>\n<li><p>依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。</p>\n</li>\n<li><p>再对最后一位以外的数组，重复前面的过程，直至全部排序完成。</p>\n</li>\n</ol>\n<p>由于每进行一次这个过程，在该次比较的最后一个位置上，正确的数会自己冒出来，就好像“冒泡”一样，这种算法因此得名。</p>\n<p>以对数组<code>[3, 2, 4, 5, 1]</code>进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>第一位的“3”与第二位的“2”进行比较，3大于2，互换位置，数组变成<code>[2, 3, 4, 5, 1]</code>。</p>\n</li>\n<li><p>第二位的“3”与第三位的“4”进行比较，3小于4，数组不变。</p>\n</li>\n<li><p>第三位的“4”与第四位的“5”进行比较，4小于5，数组不变。</p>\n</li>\n<li><p>第四位的“5”与第五位的“1”进行比较，5大于1，互换位置，数组变成<code>[2, 3, 4, 1, 5]</code>。</p>\n</li>\n</ol>\n<p>第一轮排序完成，可以看到最后一位的5，已经是正确的数了。然后，再对剩下的数<code>[2, 3, 4, 1]</code>重复这个过程，每一轮都会在本轮最后一位上出现正确的数。直至剩下最后一个位置，所有排序结束。</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>先定义一个交换函数，作用是交换两个位置的值。</p>\n<pre><code class=\"javascript\">function swap(myArray, p1, p2){\n  var temp = myArray[p1];\n  myArray[p1] = myArray[p2];\n  myArray[p2] = temp;\n}\n</code></pre>\n<p>然后定义主函数。</p>\n<pre><code class=\"javascript\">function bubbleSort(myArray){\n  var len = myArray.length;\n  var i;\n  var j;\n  var stop;\n\n  for (i = 0; i &lt; len - 1; i++){\n    for (j = 0, stop = len - 1 - i; j &lt; stop; j++){\n      if (myArray[j] &gt; myArray[j + 1]){\n        swap(myArray, j, j + 1);\n      }\n    }\n  }\n\n  return myArray;\n}\n</code></pre>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。</p>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>假定第一位的“3”是最小值。</p>\n</li>\n<li><p>最小值“3”与第二位的“2”进行比较，2小于3，所以新的最小值是第二位的“2”。</p>\n</li>\n<li><p>最小值“2”与第三位的“4”进行比较，2小于4，最小值不变。</p>\n</li>\n<li><p>最小值“2”与第四位的“5”进行比较，2小于5，最小值不变。</p>\n</li>\n<li><p>最小值“2”与第五位的“1”进行比较，1小于2，所以新的最小值是第五位的“1”。</p>\n</li>\n<li><p>第五位的“1”与第一位的“3”互换位置，数组变为[1, 2, 4, 5, 3]。</p>\n</li>\n</ol>\n<p>这一轮比较结束后，最小值“1”已经排到正确的位置了，然后对剩下的[2, 4, 5, 3]重复上面的过程。每一轮排序都会将该轮的最小值排到正确的位置，直至剩下最后一个位置，所有排序结束。</p>\n<h3 id=\"算法实现-1\"><a href=\"#算法实现-1\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>先定义一个交换函数。</p>\n<pre><code class=\"javascript\">\nfunction swap(myArray, p1, p2){\n    var temp = myArray[p1];\n    myArray[p1] = myArray[p2];\n    myArray[p2] = temp;\n}\n</code></pre>\n<p>然后定义主函数。</p>\n<pre><code class=\"javascript\">\nfunction selectionSort(myArray){\n\n    var len = myArray.length,\n        min;\n\n    for (i=0; i &lt; len; i++){\n\n        // 将当前位置设为最小值\n        min = i;\n\n        // 检查数组其余部分是否更小\n        for (j=i+1; j &lt; len; j++){\n            if (myArray[j] &lt; myArray[min]){\n                min = j;\n            }\n        }\n\n        // 如果当前位置不是最小值，将其换为最小值\n        if (i != min){\n            swap(myArray, i, min);\n        }\n    }\n\n    return myArray;\n}\n</code></pre>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>插入排序（insertion sort）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。</p>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>将数组分成[3]和[2, 4, 5, 1]两部分，前者是已排序的，后者是未排序的。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“2”，与已排序部分最后一个元素“3”比较，因为2小于3，所以2排在3前面，整个数组变成[2, 3]和[4, 5, 1]两部分。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“4”，与已排序部分最后一个元素“3”比较，因为4大于3，所以4排在3后面，整个数组变成[2, 3, 4]和[5, 1]两部分。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“5”，与已排序部分最后一个元素“4”比较，因为5大于4，所以5排在4后面，整个数组变成[2, 3, 4, 5]和[1]两部分。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“1”，与已排序部分最后一个元素“5”比较，因为1小于5，所以再与前一个元素“4”比较；因为1小于4，再与前一个元素“3”比较；因为1小于3，再与前一个元素“2”比较；因为小于1小于2，所以“1”排在2的前面，整个数组变成[1, 2, 3, 4, 5]。</p>\n</li>\n</ol>\n<h3 id=\"算法实现-2\"><a href=\"#算法实现-2\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>算法的实现如下：</p>\n<pre><code class=\"javascript\">\nfunction insertionSort(myArray) {\n\n    var len     = myArray.length,     // 数组的长度\n        value,                      // 当前比较的值\n        i,                          // 未排序部分的当前位置\n        j;                          // 已排序部分的当前位置\n\n    for (i=0; i &lt; len; i++) {\n\n        // 储存当前位置的值\n        value = myArray[i];\n\n        /*\n         * 当已排序部分的当前元素大于value，\n         * 就将当前元素向后移一位，再将前一位与value比较\n         */\n        for (j=i-1; j &gt; -1 &amp;&amp; myArray[j] &gt; value; j--) {\n            myArray[j+1] = myArray[j];\n        }\n\n        myArray[j+1] = value;\n    }\n\n    return myArray;\n}\n</code></pre>\n<h2 id=\"合并排序\"><a href=\"#合并排序\" class=\"headerlink\" title=\"合并排序\"></a>合并排序</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>前面三种排序算法只有教学价值，因为效率低，很少实际使用。合并排序（Merge sort）则是一种被广泛使用的排序方法。</p>\n<p>它的基本思想是，将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成n个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。</p>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>将数组分成[3, 2, 4]和[5, 1]两部分。</p>\n</li>\n<li><p>将[3, 2, 4]分成[3, 2]和[4]两部分。</p>\n</li>\n<li><p>将[3, 2]分成[3]和[2]两部分，然后合并成[2, 3]。</p>\n</li>\n<li><p>将[2, 3]和[4]合并成[2, 3, 4]。</p>\n</li>\n<li><p>将[5, 1]分成[5]和[1]两部分，然后合并成[1, 5]。</p>\n</li>\n<li><p>将[2, 3, 4]和[1, 5]合并成[1, 2, 3, 4, 5]。</p>\n</li>\n</ol>\n<h3 id=\"算法实现-3\"><a href=\"#算法实现-3\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>这里的关键是如何合并两个已经排序的数组。具体实现请看下面的函数。</p>\n<pre><code class=\"javascript\">\nfunction merge(left, right){\n    var result  = [],\n        il      = 0,\n        ir      = 0;\n\n    while (il &lt; left.length &amp;&amp; ir &lt; right.length){\n        if (left[il] &lt; right[ir]){\n            result.push(left[il++]);\n        } else {\n            result.push(right[ir++]);\n        }\n    }\n\n    return result.concat(left.slice(il)).concat(right.slice(ir));\n}\n</code></pre>\n<p>上面的merge函数，合并两个已经按升序排好序的数组。首先，比较两个数组的第一个元素，将其中较小的一个放入result数组；然后，将其中较大的一个与另一个数组的第二个元素进行比较，再将其中较小的一个放入result数组的第二个位置。以此类推，直到一个数组的所有元素都进入result数组为止，再将另一个数组剩下的元素接着result数组后面返回（使用concat方法）。</p>\n<p>有了merge函数，就可以对任意数组排序了。基本方法是将数组不断地拆成两半，直到每一半只包含零个元素或一个元素为止，然后就用merge函数，将拆成两半的数组不断合并，直到合并成一整个排序完成的数组。</p>\n<pre><code class=\"javascript\">\nfunction mergeSort(myArray){\n\n    if (myArray.length &lt; 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle);\n\n    return merge(mergeSort(left), mergeSort(right));\n}\n</code></pre>\n<p>上面的代码有一个问题，就是返回的是一个全新的数组，会多占用空间。因此，修改上面的函数，使之在原地排序，不多占用空间。</p>\n<pre><code class=\"javascript\">\nfunction mergeSort(myArray){\n\n    if (myArray.length &lt; 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle),\n        params = merge(mergeSort(left), mergeSort(right));\n\n    // 在返回的数组头部，添加两个元素，第一个是0，第二个是返回的数组长度\n    params.unshift(0, myArray.length);\n\n    // splice用来替换数组元素，它接受多个参数，\n    // 第一个是开始替换的位置，第二个是需要替换的个数，后面就是所有新加入的元素。\n    // 因为splice不接受数组作为参数，所以采用apply的写法。\n    // 这一句的意思就是原来的myArray数组替换成排序后的myArray\n    myArray.splice.apply(myArray, params);\n\n    // 返回排序后的数组\n    return myArray;\n}\n</code></pre>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。</p>\n<p>它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。</p>\n<p>具体做法是：</p>\n<ol>\n<li><p>确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。</p>\n</li>\n<li><p>建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。</p>\n</li>\n<li><p>左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。</p>\n</li>\n<li><p>右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。</p>\n</li>\n<li><p>左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。</p>\n</li>\n<li><p>对左右两侧重复第2至5步。</p>\n</li>\n</ol>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>选择中间值“4”作为“支点”。</p>\n</li>\n<li><p>第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。</p>\n</li>\n<li><p>倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。</p>\n</li>\n<li><p>左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。</p>\n</li>\n<li><p>左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。</p>\n</li>\n<li><p>右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。</p>\n</li>\n<li><p>左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。</p>\n</li>\n<li><p>对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。</p>\n</li>\n</ol>\n<h3 id=\"算法实现-4\"><a href=\"#算法实现-4\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>首先部署一个swap函数，用于互换两个位置的值。</p>\n<pre><code class=\"javascript\">\nfunction swap(myArray, firstIndex, secondIndex){\n    var temp = myArray[firstIndex];\n    myArray[firstIndex] = myArray[secondIndex];\n    myArray[secondIndex] = temp;\n}\n</code></pre>\n<p>然后，部署一个partition函数，用于完成一轮排序。</p>\n<pre><code class=\"javascript\">\nfunction partition(myArray, left, right) {\n\n    var pivot   = myArray[Math.floor((right + left) / 2)],\n        i       = left,\n        j       = right;\n\n\n    while (i &lt;= j) {\n\n        while (myArray[i] &lt; pivot) {\n            i++;\n        }\n\n        while (myArray[j] &gt; pivot) {\n            j--;\n        }\n\n        if (i &lt;= j) {\n            swap(myArray, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n</code></pre>\n<p>接下来，就是递归上面的过程，完成整个排序。</p>\n<pre><code class=\"javascript\">\nfunction quickSort(myArray, left, right) {\n\n    if (myArray.length &lt; 2) return myArray;\n\n    left = (typeof left !== &quot;number&quot; ? 0 : left);\n\n    right = (typeof right !== &quot;number&quot; ? myArray.length - 1 : right);\n\n    var index  = partition(myArray, left, right);\n\n     if (left &lt; index - 1) {\n            quickSort(myArray, left, index - 1);\n     }\n\n     if (index &lt; right) {\n            quickSort(myArray, index, right);\n      }\n\n     return myArray;\n\n}\n</code></pre>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2009/05/26/computer-science-in-javascript-bubble-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Bubble sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Selection sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Insertion sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/10/02/computer-science-and-javascript-merge-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Merge sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Quicksort</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>转自@ruanyf大神,留作自己备用.</p>\n</blockquote>\n<p>排序算法是将一系列的值按照顺序进行排列的方法。</p>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>冒泡排序（Bubble Sort）是最易懂的排序算法，但是效率较低，生产环境中很少使用。</p>\n<p>它的基本思想是：</p>\n<ol>\n<li><p>依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。</p>\n</li>\n<li><p>再对最后一位以外的数组，重复前面的过程，直至全部排序完成。</p>\n</li>\n</ol>\n<p>由于每进行一次这个过程，在该次比较的最后一个位置上，正确的数会自己冒出来，就好像“冒泡”一样，这种算法因此得名。</p>\n<p>以对数组<code>[3, 2, 4, 5, 1]</code>进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>第一位的“3”与第二位的“2”进行比较，3大于2，互换位置，数组变成<code>[2, 3, 4, 5, 1]</code>。</p>\n</li>\n<li><p>第二位的“3”与第三位的“4”进行比较，3小于4，数组不变。</p>\n</li>\n<li><p>第三位的“4”与第四位的“5”进行比较，4小于5，数组不变。</p>\n</li>\n<li><p>第四位的“5”与第五位的“1”进行比较，5大于1，互换位置，数组变成<code>[2, 3, 4, 1, 5]</code>。</p>\n</li>\n</ol>\n<p>第一轮排序完成，可以看到最后一位的5，已经是正确的数了。然后，再对剩下的数<code>[2, 3, 4, 1]</code>重复这个过程，每一轮都会在本轮最后一位上出现正确的数。直至剩下最后一个位置，所有排序结束。</p>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>先定义一个交换函数，作用是交换两个位置的值。</p>\n<pre><code class=\"javascript\">function swap(myArray, p1, p2){\n  var temp = myArray[p1];\n  myArray[p1] = myArray[p2];\n  myArray[p2] = temp;\n}\n</code></pre>\n<p>然后定义主函数。</p>\n<pre><code class=\"javascript\">function bubbleSort(myArray){\n  var len = myArray.length;\n  var i;\n  var j;\n  var stop;\n\n  for (i = 0; i &lt; len - 1; i++){\n    for (j = 0, stop = len - 1 - i; j &lt; stop; j++){\n      if (myArray[j] &gt; myArray[j + 1]){\n        swap(myArray, j, j + 1);\n      }\n    }\n  }\n\n  return myArray;\n}\n</code></pre>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。</p>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>假定第一位的“3”是最小值。</p>\n</li>\n<li><p>最小值“3”与第二位的“2”进行比较，2小于3，所以新的最小值是第二位的“2”。</p>\n</li>\n<li><p>最小值“2”与第三位的“4”进行比较，2小于4，最小值不变。</p>\n</li>\n<li><p>最小值“2”与第四位的“5”进行比较，2小于5，最小值不变。</p>\n</li>\n<li><p>最小值“2”与第五位的“1”进行比较，1小于2，所以新的最小值是第五位的“1”。</p>\n</li>\n<li><p>第五位的“1”与第一位的“3”互换位置，数组变为[1, 2, 4, 5, 3]。</p>\n</li>\n</ol>\n<p>这一轮比较结束后，最小值“1”已经排到正确的位置了，然后对剩下的[2, 4, 5, 3]重复上面的过程。每一轮排序都会将该轮的最小值排到正确的位置，直至剩下最后一个位置，所有排序结束。</p>\n<h3 id=\"算法实现-1\"><a href=\"#算法实现-1\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>先定义一个交换函数。</p>\n<pre><code class=\"javascript\">\nfunction swap(myArray, p1, p2){\n    var temp = myArray[p1];\n    myArray[p1] = myArray[p2];\n    myArray[p2] = temp;\n}\n</code></pre>\n<p>然后定义主函数。</p>\n<pre><code class=\"javascript\">\nfunction selectionSort(myArray){\n\n    var len = myArray.length,\n        min;\n\n    for (i=0; i &lt; len; i++){\n\n        // 将当前位置设为最小值\n        min = i;\n\n        // 检查数组其余部分是否更小\n        for (j=i+1; j &lt; len; j++){\n            if (myArray[j] &lt; myArray[min]){\n                min = j;\n            }\n        }\n\n        // 如果当前位置不是最小值，将其换为最小值\n        if (i != min){\n            swap(myArray, i, min);\n        }\n    }\n\n    return myArray;\n}\n</code></pre>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>插入排序（insertion sort）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。</p>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>将数组分成[3]和[2, 4, 5, 1]两部分，前者是已排序的，后者是未排序的。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“2”，与已排序部分最后一个元素“3”比较，因为2小于3，所以2排在3前面，整个数组变成[2, 3]和[4, 5, 1]两部分。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“4”，与已排序部分最后一个元素“3”比较，因为4大于3，所以4排在3后面，整个数组变成[2, 3, 4]和[5, 1]两部分。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“5”，与已排序部分最后一个元素“4”比较，因为5大于4，所以5排在4后面，整个数组变成[2, 3, 4, 5]和[1]两部分。</p>\n</li>\n<li><p>取出未排序部分的第一个元素“1”，与已排序部分最后一个元素“5”比较，因为1小于5，所以再与前一个元素“4”比较；因为1小于4，再与前一个元素“3”比较；因为1小于3，再与前一个元素“2”比较；因为小于1小于2，所以“1”排在2的前面，整个数组变成[1, 2, 3, 4, 5]。</p>\n</li>\n</ol>\n<h3 id=\"算法实现-2\"><a href=\"#算法实现-2\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>算法的实现如下：</p>\n<pre><code class=\"javascript\">\nfunction insertionSort(myArray) {\n\n    var len     = myArray.length,     // 数组的长度\n        value,                      // 当前比较的值\n        i,                          // 未排序部分的当前位置\n        j;                          // 已排序部分的当前位置\n\n    for (i=0; i &lt; len; i++) {\n\n        // 储存当前位置的值\n        value = myArray[i];\n\n        /*\n         * 当已排序部分的当前元素大于value，\n         * 就将当前元素向后移一位，再将前一位与value比较\n         */\n        for (j=i-1; j &gt; -1 &amp;&amp; myArray[j] &gt; value; j--) {\n            myArray[j+1] = myArray[j];\n        }\n\n        myArray[j+1] = value;\n    }\n\n    return myArray;\n}\n</code></pre>\n<h2 id=\"合并排序\"><a href=\"#合并排序\" class=\"headerlink\" title=\"合并排序\"></a>合并排序</h2><h3 id=\"简介-3\"><a href=\"#简介-3\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>前面三种排序算法只有教学价值，因为效率低，很少实际使用。合并排序（Merge sort）则是一种被广泛使用的排序方法。</p>\n<p>它的基本思想是，将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成n个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。</p>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>将数组分成[3, 2, 4]和[5, 1]两部分。</p>\n</li>\n<li><p>将[3, 2, 4]分成[3, 2]和[4]两部分。</p>\n</li>\n<li><p>将[3, 2]分成[3]和[2]两部分，然后合并成[2, 3]。</p>\n</li>\n<li><p>将[2, 3]和[4]合并成[2, 3, 4]。</p>\n</li>\n<li><p>将[5, 1]分成[5]和[1]两部分，然后合并成[1, 5]。</p>\n</li>\n<li><p>将[2, 3, 4]和[1, 5]合并成[1, 2, 3, 4, 5]。</p>\n</li>\n</ol>\n<h3 id=\"算法实现-3\"><a href=\"#算法实现-3\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>这里的关键是如何合并两个已经排序的数组。具体实现请看下面的函数。</p>\n<pre><code class=\"javascript\">\nfunction merge(left, right){\n    var result  = [],\n        il      = 0,\n        ir      = 0;\n\n    while (il &lt; left.length &amp;&amp; ir &lt; right.length){\n        if (left[il] &lt; right[ir]){\n            result.push(left[il++]);\n        } else {\n            result.push(right[ir++]);\n        }\n    }\n\n    return result.concat(left.slice(il)).concat(right.slice(ir));\n}\n</code></pre>\n<p>上面的merge函数，合并两个已经按升序排好序的数组。首先，比较两个数组的第一个元素，将其中较小的一个放入result数组；然后，将其中较大的一个与另一个数组的第二个元素进行比较，再将其中较小的一个放入result数组的第二个位置。以此类推，直到一个数组的所有元素都进入result数组为止，再将另一个数组剩下的元素接着result数组后面返回（使用concat方法）。</p>\n<p>有了merge函数，就可以对任意数组排序了。基本方法是将数组不断地拆成两半，直到每一半只包含零个元素或一个元素为止，然后就用merge函数，将拆成两半的数组不断合并，直到合并成一整个排序完成的数组。</p>\n<pre><code class=\"javascript\">\nfunction mergeSort(myArray){\n\n    if (myArray.length &lt; 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle);\n\n    return merge(mergeSort(left), mergeSort(right));\n}\n</code></pre>\n<p>上面的代码有一个问题，就是返回的是一个全新的数组，会多占用空间。因此，修改上面的函数，使之在原地排序，不多占用空间。</p>\n<pre><code class=\"javascript\">\nfunction mergeSort(myArray){\n\n    if (myArray.length &lt; 2) {\n        return myArray;\n    }\n\n    var middle = Math.floor(myArray.length / 2),\n        left    = myArray.slice(0, middle),\n        right   = myArray.slice(middle),\n        params = merge(mergeSort(left), mergeSort(right));\n\n    // 在返回的数组头部，添加两个元素，第一个是0，第二个是返回的数组长度\n    params.unshift(0, myArray.length);\n\n    // splice用来替换数组元素，它接受多个参数，\n    // 第一个是开始替换的位置，第二个是需要替换的个数，后面就是所有新加入的元素。\n    // 因为splice不接受数组作为参数，所以采用apply的写法。\n    // 这一句的意思就是原来的myArray数组替换成排序后的myArray\n    myArray.splice.apply(myArray, params);\n\n    // 返回排序后的数组\n    return myArray;\n}\n</code></pre>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"简介-4\"><a href=\"#简介-4\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。</p>\n<p>它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。</p>\n<p>具体做法是：</p>\n<ol>\n<li><p>确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。</p>\n</li>\n<li><p>建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。</p>\n</li>\n<li><p>左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。</p>\n</li>\n<li><p>右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。</p>\n</li>\n<li><p>左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。</p>\n</li>\n<li><p>对左右两侧重复第2至5步。</p>\n</li>\n</ol>\n<p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p>\n<ol>\n<li><p>选择中间值“4”作为“支点”。</p>\n</li>\n<li><p>第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。</p>\n</li>\n<li><p>倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。</p>\n</li>\n<li><p>左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。</p>\n</li>\n<li><p>左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。</p>\n</li>\n<li><p>右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。</p>\n</li>\n<li><p>左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。</p>\n</li>\n<li><p>对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。</p>\n</li>\n</ol>\n<h3 id=\"算法实现-4\"><a href=\"#算法实现-4\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><p>首先部署一个swap函数，用于互换两个位置的值。</p>\n<pre><code class=\"javascript\">\nfunction swap(myArray, firstIndex, secondIndex){\n    var temp = myArray[firstIndex];\n    myArray[firstIndex] = myArray[secondIndex];\n    myArray[secondIndex] = temp;\n}\n</code></pre>\n<p>然后，部署一个partition函数，用于完成一轮排序。</p>\n<pre><code class=\"javascript\">\nfunction partition(myArray, left, right) {\n\n    var pivot   = myArray[Math.floor((right + left) / 2)],\n        i       = left,\n        j       = right;\n\n\n    while (i &lt;= j) {\n\n        while (myArray[i] &lt; pivot) {\n            i++;\n        }\n\n        while (myArray[j] &gt; pivot) {\n            j--;\n        }\n\n        if (i &lt;= j) {\n            swap(myArray, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    return i;\n}\n</code></pre>\n<p>接下来，就是递归上面的过程，完成整个排序。</p>\n<pre><code class=\"javascript\">\nfunction quickSort(myArray, left, right) {\n\n    if (myArray.length &lt; 2) return myArray;\n\n    left = (typeof left !== &quot;number&quot; ? 0 : left);\n\n    right = (typeof right !== &quot;number&quot; ? myArray.length - 1 : right);\n\n    var index  = partition(myArray, left, right);\n\n     if (left &lt; index - 1) {\n            quickSort(myArray, left, index - 1);\n     }\n\n     if (index &lt; right) {\n            quickSort(myArray, index, right);\n      }\n\n     return myArray;\n\n}\n</code></pre>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2009/05/26/computer-science-in-javascript-bubble-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Bubble sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Selection sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Insertion sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/10/02/computer-science-and-javascript-merge-sort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Merge sort</a></li>\n<li>Nicholas C. Zakas, <a href=\"http://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/\" target=\"_blank\" rel=\"external\">Computer science in JavaScript: Quicksort</a></li>\n</ul>\n"},{"title":"Java中的I/O流","date":"2017-06-15T16:00:00.000Z","abbrlink":"649b2029","_content":"\n## 流的概念和作用\n>\n> 流是数据源到Java程序，Java程序到输出位置之间的管道。\n\n\n## IO流的分类 ##\n>\n1. 根据数据处理类的不同分为：字符流和字节流。\n2. 根据数据流向不同分为：输入流和输出流。\n* 输入输出是以Java程序为参照物的，相对于Java程序本身\n* 输入流：从数据源中读取数据到Java程序中，这个过程称之为输入。\n* 输出流：Java程序将数据写入到其他地方，这个过程称之为输出。\n3. 节点流和处理流。\n4. 节点流：普通的管道；\n5. 处理流：功能性管道，对数据进一步加工。\n\n## 字节流 ##\n### 字节流中的核心类 ###\n\n![](http://i.imgur.com/zhxfDm7.png)\n\n### InputStream ###\n>\n#### int read(byte [] b,int off,int len) ####\nbyte[] b：byte类型数组；\nint off：偏移量；\nint len： 读取数据的量；\n返回值为这次调用read方法读取数据的长度。\n\n### OutputStream ###\n>\n#### void write(byte [] b,int off,int len) ####\nbyte[] b：byte类型数组；\nint off：偏移量；\nint len： 写入数据的量；\n\n\n### 程序步骤 ###\n\n1. 导入类 java.io.*；\n2. 定义主函数；\n3. 声明输入流的引用；\n4. 声明输出流的引用；\n```java\ntry{\n  1.生成代表输入流的对象；\n  2.生成代表输出流的对象；\n  3. 生成一个byte字节数组；\n  4.调用输入流的read方法读取数据；\n  5.定义临时变量接受数据的量；\n  6.调用输出流的write方法写入数据；\n}\ncatch(Exception e){\n\tSysten.out.println(e);\n}\n//finally进行结尾处理\nfinally{\n\ttry{\n\t\tfis.close();\n\t\tfos.close();\n\t}\n\tcatch(Exception e){\n\t\tSystem.out.println(e);\n\t}\n}\n```\n#### 示例 1：\n```java\nimport java.io.*;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//声明输入流引用\n\t\tFileInputStream fis = null;\n\t\t//声明输出流引用\n\t\tFileOutputStream fos = null;\n\t\ttry{\n\t\t\t//生成代表输入流的对象\n\t\t\tfis = new FileInputStream(\"D:/java/8.8/from.txt\");\n\t\t\t//生成代表输入流的对象\n\t\t\tfos = new FileOutputStream(\"D:/java/8.8/to.txt\");\n\t\t\t//生成一个字节型buffer数组\n\t\t\tbyte[] buffer = new byte[100];\n\t\t\t//定义一个临时变量，用于接受调用输入流read方法读取数据的量\n\t\t\tint temp = fis.read(buffer,0,b.length);\n\t\t\t//调用输出流的write方法写入数据\n\t\t\tfos.write(buffer,0,temp);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}\n\t\t//finally进行结尾处理\n\t\tfinally{\n\t\t\ttry{\n\t\t\t\tfis.close();\n\t\t\t\tfos.close();\n\t\t\t}\n\t\t\tcatch(Exception e){\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n}\n```\n\n\n\n## 大文件的读写 ##\n1. 调节buffer数组的大小；\n2. 对read，write方法采取while循环；\n\n#### 示例 2：\n\n```java\nwhile(true){\n\tint temp = fis.read(buffer,0,buffer.length);\n\tif(temp == -1){\n\t\tbreak;\n\t}\n\tfos.write(buffer,0,temp);\n}\n```\n\n## 字符流 ##\n\n* 字符流：是以对写文件时，以字符为基础\n* 字节输入流：Reader <--FileReader\n    * int read(char [] c, int off, int length )\n* 字节输出流：Writer  <--FileWriter\n    * void writer(char [] c, int off, int length)\n\n#### 示例 3：\n```java\nimport java.io.*;\npublic class TestChar{\n\tpublic static void main(String args[]){\n\t\tFileReader fr = null;\n\t\tFileWriter fw = null;\n\t\ttry{\n\t\t\tfr = new FileReader(\"d:/java/9.5/read.txt\");\n\t\t\tfw = new FileWriter(\"d:/java/9.5/write.txt\");\n\t\t\tchar [] buffer = new char[1024];\n\t\t\twhile(true){\n\t\t\t\tint temp = fr.read(buffer, 0, buffer.length);\n\t\t\t\tif(temp == -1){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfw.write(buffer, 0, temp);\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\tfinally{\n\t\t\ttry{\n\t\t\t\tfr.close();\n\t\t\t\tfw.close();\n\t\t\t}\n\t\t\tcatch(Exception e){\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n\t}\n}\n```","source":"_posts/Java的IO流.md","raw":"---\ntitle: Java中的I/O流\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 649b2029\n---\n\n## 流的概念和作用\n>\n> 流是数据源到Java程序，Java程序到输出位置之间的管道。\n\n\n## IO流的分类 ##\n>\n1. 根据数据处理类的不同分为：字符流和字节流。\n2. 根据数据流向不同分为：输入流和输出流。\n* 输入输出是以Java程序为参照物的，相对于Java程序本身\n* 输入流：从数据源中读取数据到Java程序中，这个过程称之为输入。\n* 输出流：Java程序将数据写入到其他地方，这个过程称之为输出。\n3. 节点流和处理流。\n4. 节点流：普通的管道；\n5. 处理流：功能性管道，对数据进一步加工。\n\n## 字节流 ##\n### 字节流中的核心类 ###\n\n![](http://i.imgur.com/zhxfDm7.png)\n\n### InputStream ###\n>\n#### int read(byte [] b,int off,int len) ####\nbyte[] b：byte类型数组；\nint off：偏移量；\nint len： 读取数据的量；\n返回值为这次调用read方法读取数据的长度。\n\n### OutputStream ###\n>\n#### void write(byte [] b,int off,int len) ####\nbyte[] b：byte类型数组；\nint off：偏移量；\nint len： 写入数据的量；\n\n\n### 程序步骤 ###\n\n1. 导入类 java.io.*；\n2. 定义主函数；\n3. 声明输入流的引用；\n4. 声明输出流的引用；\n```java\ntry{\n  1.生成代表输入流的对象；\n  2.生成代表输出流的对象；\n  3. 生成一个byte字节数组；\n  4.调用输入流的read方法读取数据；\n  5.定义临时变量接受数据的量；\n  6.调用输出流的write方法写入数据；\n}\ncatch(Exception e){\n\tSysten.out.println(e);\n}\n//finally进行结尾处理\nfinally{\n\ttry{\n\t\tfis.close();\n\t\tfos.close();\n\t}\n\tcatch(Exception e){\n\t\tSystem.out.println(e);\n\t}\n}\n```\n#### 示例 1：\n```java\nimport java.io.*;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//声明输入流引用\n\t\tFileInputStream fis = null;\n\t\t//声明输出流引用\n\t\tFileOutputStream fos = null;\n\t\ttry{\n\t\t\t//生成代表输入流的对象\n\t\t\tfis = new FileInputStream(\"D:/java/8.8/from.txt\");\n\t\t\t//生成代表输入流的对象\n\t\t\tfos = new FileOutputStream(\"D:/java/8.8/to.txt\");\n\t\t\t//生成一个字节型buffer数组\n\t\t\tbyte[] buffer = new byte[100];\n\t\t\t//定义一个临时变量，用于接受调用输入流read方法读取数据的量\n\t\t\tint temp = fis.read(buffer,0,b.length);\n\t\t\t//调用输出流的write方法写入数据\n\t\t\tfos.write(buffer,0,temp);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}\n\t\t//finally进行结尾处理\n\t\tfinally{\n\t\t\ttry{\n\t\t\t\tfis.close();\n\t\t\t\tfos.close();\n\t\t\t}\n\t\t\tcatch(Exception e){\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n}\n```\n\n\n\n## 大文件的读写 ##\n1. 调节buffer数组的大小；\n2. 对read，write方法采取while循环；\n\n#### 示例 2：\n\n```java\nwhile(true){\n\tint temp = fis.read(buffer,0,buffer.length);\n\tif(temp == -1){\n\t\tbreak;\n\t}\n\tfos.write(buffer,0,temp);\n}\n```\n\n## 字符流 ##\n\n* 字符流：是以对写文件时，以字符为基础\n* 字节输入流：Reader <--FileReader\n    * int read(char [] c, int off, int length )\n* 字节输出流：Writer  <--FileWriter\n    * void writer(char [] c, int off, int length)\n\n#### 示例 3：\n```java\nimport java.io.*;\npublic class TestChar{\n\tpublic static void main(String args[]){\n\t\tFileReader fr = null;\n\t\tFileWriter fw = null;\n\t\ttry{\n\t\t\tfr = new FileReader(\"d:/java/9.5/read.txt\");\n\t\t\tfw = new FileWriter(\"d:/java/9.5/write.txt\");\n\t\t\tchar [] buffer = new char[1024];\n\t\t\twhile(true){\n\t\t\t\tint temp = fr.read(buffer, 0, buffer.length);\n\t\t\t\tif(temp == -1){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfw.write(buffer, 0, temp);\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(e);\n\t\t}\n\t\tfinally{\n\t\t\ttry{\n\t\t\t\tfr.close();\n\t\t\t\tfw.close();\n\t\t\t}\n\t\t\tcatch(Exception e){\n\t\t\t\tSystem.out.println(e);\n\t\t\t}\n\t\t}\n\t}\n}\n```","slug":"Java的IO流","published":1,"updated":"2017-11-12T02:16:29.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xm1004odfbx2m8bphpl","content":"<h2 id=\"流的概念和作用\"><a href=\"#流的概念和作用\" class=\"headerlink\" title=\"流的概念和作用\"></a>流的概念和作用</h2><p>&gt;</p>\n<blockquote>\n<p>流是数据源到Java程序，Java程序到输出位置之间的管道。</p>\n</blockquote>\n<h2 id=\"IO流的分类\"><a href=\"#IO流的分类\" class=\"headerlink\" title=\"IO流的分类\"></a>IO流的分类</h2><p>&gt;</p>\n<ol>\n<li>根据数据处理类的不同分为：字符流和字节流。</li>\n<li>根据数据流向不同分为：输入流和输出流。</li>\n</ol>\n<ul>\n<li>输入输出是以Java程序为参照物的，相对于Java程序本身</li>\n<li>输入流：从数据源中读取数据到Java程序中，这个过程称之为输入。</li>\n<li>输出流：Java程序将数据写入到其他地方，这个过程称之为输出。</li>\n</ul>\n<ol>\n<li>节点流和处理流。</li>\n<li>节点流：普通的管道；</li>\n<li>处理流：功能性管道，对数据进一步加工。</li>\n</ol>\n<h2 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h2><h3 id=\"字节流中的核心类\"><a href=\"#字节流中的核心类\" class=\"headerlink\" title=\"字节流中的核心类\"></a>字节流中的核心类</h3><p><img src=\"http://i.imgur.com/zhxfDm7.png\" alt=\"\"></p>\n<h3 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h3><p>&gt;</p>\n<h4 id=\"int-read-byte-b-int-off-int-len\"><a href=\"#int-read-byte-b-int-off-int-len\" class=\"headerlink\" title=\"int read(byte [] b,int off,int len)\"></a>int read(byte [] b,int off,int len)</h4><p>byte[] b：byte类型数组；<br>int off：偏移量；<br>int len： 读取数据的量；<br>返回值为这次调用read方法读取数据的长度。</p>\n<h3 id=\"OutputStream\"><a href=\"#OutputStream\" class=\"headerlink\" title=\"OutputStream\"></a>OutputStream</h3><p>&gt;</p>\n<h4 id=\"void-write-byte-b-int-off-int-len\"><a href=\"#void-write-byte-b-int-off-int-len\" class=\"headerlink\" title=\"void write(byte [] b,int off,int len)\"></a>void write(byte [] b,int off,int len)</h4><p>byte[] b：byte类型数组；<br>int off：偏移量；<br>int len： 写入数据的量；</p>\n<h3 id=\"程序步骤\"><a href=\"#程序步骤\" class=\"headerlink\" title=\"程序步骤\"></a>程序步骤</h3><ol>\n<li>导入类 java.io.*；</li>\n<li>定义主函数；</li>\n<li>声明输入流的引用；</li>\n<li>声明输出流的引用；<pre><code class=\"java\">try{\n1.生成代表输入流的对象；\n2.生成代表输出流的对象；\n3. 生成一个byte字节数组；\n4.调用输入流的read方法读取数据；\n5.定义临时变量接受数据的量；\n6.调用输出流的write方法写入数据；\n}\ncatch(Exception e){\n Systen.out.println(e);\n}\n//finally进行结尾处理\nfinally{\n try{\n     fis.close();\n     fos.close();\n }\n catch(Exception e){\n     System.out.println(e);\n }\n}\n</code></pre>\n<h4 id=\"示例-1：\"><a href=\"#示例-1：\" class=\"headerlink\" title=\"示例 1：\"></a>示例 1：</h4><pre><code class=\"java\">import java.io.*;\npublic class Test{\n public static void main(String args[]){\n     //声明输入流引用\n     FileInputStream fis = null;\n     //声明输出流引用\n     FileOutputStream fos = null;\n     try{\n         //生成代表输入流的对象\n         fis = new FileInputStream(&quot;D:/java/8.8/from.txt&quot;);\n         //生成代表输入流的对象\n         fos = new FileOutputStream(&quot;D:/java/8.8/to.txt&quot;);\n         //生成一个字节型buffer数组\n         byte[] buffer = new byte[100];\n         //定义一个临时变量，用于接受调用输入流read方法读取数据的量\n         int temp = fis.read(buffer,0,b.length);\n         //调用输出流的write方法写入数据\n         fos.write(buffer,0,temp);\n     }\n     catch(Exception e){\n         System.out.println(e);\n     }\n }\n     //finally进行结尾处理\n     finally{\n         try{\n             fis.close();\n             fos.close();\n         }\n         catch(Exception e){\n             System.out.println(e);\n         }\n     }\n}\n</code></pre>\n</li>\n</ol>\n<h2 id=\"大文件的读写\"><a href=\"#大文件的读写\" class=\"headerlink\" title=\"大文件的读写\"></a>大文件的读写</h2><ol>\n<li>调节buffer数组的大小；</li>\n<li>对read，write方法采取while循环；</li>\n</ol>\n<h4 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h4><pre><code class=\"java\">while(true){\n    int temp = fis.read(buffer,0,buffer.length);\n    if(temp == -1){\n        break;\n    }\n    fos.write(buffer,0,temp);\n}\n</code></pre>\n<h2 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h2><ul>\n<li>字符流：是以对写文件时，以字符为基础</li>\n<li>字节输入流：Reader &lt;–FileReader<ul>\n<li>int read(char [] c, int off, int length )</li>\n</ul>\n</li>\n<li>字节输出流：Writer  &lt;–FileWriter<ul>\n<li>void writer(char [] c, int off, int length)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-3：\"><a href=\"#示例-3：\" class=\"headerlink\" title=\"示例 3：\"></a>示例 3：</h4><pre><code class=\"java\">import java.io.*;\npublic class TestChar{\n    public static void main(String args[]){\n        FileReader fr = null;\n        FileWriter fw = null;\n        try{\n            fr = new FileReader(&quot;d:/java/9.5/read.txt&quot;);\n            fw = new FileWriter(&quot;d:/java/9.5/write.txt&quot;);\n            char [] buffer = new char[1024];\n            while(true){\n                int temp = fr.read(buffer, 0, buffer.length);\n                if(temp == -1){\n                    break;\n                }\n                fw.write(buffer, 0, temp);\n            }\n        }\n        catch(Exception e){\n            System.out.println(e);\n        }\n        finally{\n            try{\n                fr.close();\n                fw.close();\n            }\n            catch(Exception e){\n                System.out.println(e);\n            }\n        }\n    }\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"流的概念和作用\"><a href=\"#流的概念和作用\" class=\"headerlink\" title=\"流的概念和作用\"></a>流的概念和作用</h2><p>&gt;</p>\n<blockquote>\n<p>流是数据源到Java程序，Java程序到输出位置之间的管道。</p>\n</blockquote>\n<h2 id=\"IO流的分类\"><a href=\"#IO流的分类\" class=\"headerlink\" title=\"IO流的分类\"></a>IO流的分类</h2><p>&gt;</p>\n<ol>\n<li>根据数据处理类的不同分为：字符流和字节流。</li>\n<li>根据数据流向不同分为：输入流和输出流。</li>\n</ol>\n<ul>\n<li>输入输出是以Java程序为参照物的，相对于Java程序本身</li>\n<li>输入流：从数据源中读取数据到Java程序中，这个过程称之为输入。</li>\n<li>输出流：Java程序将数据写入到其他地方，这个过程称之为输出。</li>\n</ul>\n<ol>\n<li>节点流和处理流。</li>\n<li>节点流：普通的管道；</li>\n<li>处理流：功能性管道，对数据进一步加工。</li>\n</ol>\n<h2 id=\"字节流\"><a href=\"#字节流\" class=\"headerlink\" title=\"字节流\"></a>字节流</h2><h3 id=\"字节流中的核心类\"><a href=\"#字节流中的核心类\" class=\"headerlink\" title=\"字节流中的核心类\"></a>字节流中的核心类</h3><p><img src=\"http://i.imgur.com/zhxfDm7.png\" alt=\"\"></p>\n<h3 id=\"InputStream\"><a href=\"#InputStream\" class=\"headerlink\" title=\"InputStream\"></a>InputStream</h3><p>&gt;</p>\n<h4 id=\"int-read-byte-b-int-off-int-len\"><a href=\"#int-read-byte-b-int-off-int-len\" class=\"headerlink\" title=\"int read(byte [] b,int off,int len)\"></a>int read(byte [] b,int off,int len)</h4><p>byte[] b：byte类型数组；<br>int off：偏移量；<br>int len： 读取数据的量；<br>返回值为这次调用read方法读取数据的长度。</p>\n<h3 id=\"OutputStream\"><a href=\"#OutputStream\" class=\"headerlink\" title=\"OutputStream\"></a>OutputStream</h3><p>&gt;</p>\n<h4 id=\"void-write-byte-b-int-off-int-len\"><a href=\"#void-write-byte-b-int-off-int-len\" class=\"headerlink\" title=\"void write(byte [] b,int off,int len)\"></a>void write(byte [] b,int off,int len)</h4><p>byte[] b：byte类型数组；<br>int off：偏移量；<br>int len： 写入数据的量；</p>\n<h3 id=\"程序步骤\"><a href=\"#程序步骤\" class=\"headerlink\" title=\"程序步骤\"></a>程序步骤</h3><ol>\n<li>导入类 java.io.*；</li>\n<li>定义主函数；</li>\n<li>声明输入流的引用；</li>\n<li>声明输出流的引用；<pre><code class=\"java\">try{\n1.生成代表输入流的对象；\n2.生成代表输出流的对象；\n3. 生成一个byte字节数组；\n4.调用输入流的read方法读取数据；\n5.定义临时变量接受数据的量；\n6.调用输出流的write方法写入数据；\n}\ncatch(Exception e){\n Systen.out.println(e);\n}\n//finally进行结尾处理\nfinally{\n try{\n     fis.close();\n     fos.close();\n }\n catch(Exception e){\n     System.out.println(e);\n }\n}\n</code></pre>\n<h4 id=\"示例-1：\"><a href=\"#示例-1：\" class=\"headerlink\" title=\"示例 1：\"></a>示例 1：</h4><pre><code class=\"java\">import java.io.*;\npublic class Test{\n public static void main(String args[]){\n     //声明输入流引用\n     FileInputStream fis = null;\n     //声明输出流引用\n     FileOutputStream fos = null;\n     try{\n         //生成代表输入流的对象\n         fis = new FileInputStream(&quot;D:/java/8.8/from.txt&quot;);\n         //生成代表输入流的对象\n         fos = new FileOutputStream(&quot;D:/java/8.8/to.txt&quot;);\n         //生成一个字节型buffer数组\n         byte[] buffer = new byte[100];\n         //定义一个临时变量，用于接受调用输入流read方法读取数据的量\n         int temp = fis.read(buffer,0,b.length);\n         //调用输出流的write方法写入数据\n         fos.write(buffer,0,temp);\n     }\n     catch(Exception e){\n         System.out.println(e);\n     }\n }\n     //finally进行结尾处理\n     finally{\n         try{\n             fis.close();\n             fos.close();\n         }\n         catch(Exception e){\n             System.out.println(e);\n         }\n     }\n}\n</code></pre>\n</li>\n</ol>\n<h2 id=\"大文件的读写\"><a href=\"#大文件的读写\" class=\"headerlink\" title=\"大文件的读写\"></a>大文件的读写</h2><ol>\n<li>调节buffer数组的大小；</li>\n<li>对read，write方法采取while循环；</li>\n</ol>\n<h4 id=\"示例-2：\"><a href=\"#示例-2：\" class=\"headerlink\" title=\"示例 2：\"></a>示例 2：</h4><pre><code class=\"java\">while(true){\n    int temp = fis.read(buffer,0,buffer.length);\n    if(temp == -1){\n        break;\n    }\n    fos.write(buffer,0,temp);\n}\n</code></pre>\n<h2 id=\"字符流\"><a href=\"#字符流\" class=\"headerlink\" title=\"字符流\"></a>字符流</h2><ul>\n<li>字符流：是以对写文件时，以字符为基础</li>\n<li>字节输入流：Reader &lt;–FileReader<ul>\n<li>int read(char [] c, int off, int length )</li>\n</ul>\n</li>\n<li>字节输出流：Writer  &lt;–FileWriter<ul>\n<li>void writer(char [] c, int off, int length)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"示例-3：\"><a href=\"#示例-3：\" class=\"headerlink\" title=\"示例 3：\"></a>示例 3：</h4><pre><code class=\"java\">import java.io.*;\npublic class TestChar{\n    public static void main(String args[]){\n        FileReader fr = null;\n        FileWriter fw = null;\n        try{\n            fr = new FileReader(&quot;d:/java/9.5/read.txt&quot;);\n            fw = new FileWriter(&quot;d:/java/9.5/write.txt&quot;);\n            char [] buffer = new char[1024];\n            while(true){\n                int temp = fr.read(buffer, 0, buffer.length);\n                if(temp == -1){\n                    break;\n                }\n                fw.write(buffer, 0, temp);\n            }\n        }\n        catch(Exception e){\n            System.out.println(e);\n        }\n        finally{\n            try{\n                fr.close();\n                fw.close();\n            }\n            catch(Exception e){\n                System.out.println(e);\n            }\n        }\n    }\n}\n</code></pre>\n"},{"title":"数组与字符串常用方法","abbrlink":"4b02d38a","data":"2017/9/16","_content":"## split() 将字符串分割成数组\n\nstr.split('分隔符', 返回数组最大的长度)\n\n根据分隔符(字符串或者正则表达式)将一个字符串分割成数组。\n\n```javascript\nconst str = 'wind rain fire';\nconst arr = str.split(' ');\nconsole.log(arr); // arr['wind', 'rain', 'fire']\n```\n\n## join() 数组连接成一个字符串\n\narr.join('分隔符')\n\n分隔符默认值为`,`\n将数组（或一个类数组对象）的所有元素使用分隔符连接成一个新字符串。\n\n```javascript\nconst arr = ['wind', 'rain', 'fire'];\nconst str = arr.join('+');\nconsole.log(str); // wind+rain+fire\n```\n\n## 字符串快速排序\n\n```javascript\nconst strSort = str => str.split('').sort().join('');\nstrSort(str);\n```\n## map() 创建新数组\n\narr.map(callback)\n\n创建一个新数组，新数组的每个元素都是 callback 函数的结果。\n\n```javascript\nconst arr = [1, 2, 3];\nconst newArr = arr.map(num => num * 2);\nconsole.log(newArr); // newArr[2, 4, 6]\n```\n\n## 数组取最大最小值\n\n```javascript\nMath.max.apply(null, arr);  // 取数组最大值\nMath.min.apply(null, arr);  // 取数组最小值\n```\nES6 扩展 rest 不定参数写法：\n\n```javascript\nMath.max(...arr);  // 取数组最大值\nMath.min(...arr);  // 取数组最小值\n```\n\n## filter() 数组中取通过测试的值\n\nfilter(fn)\n\n创建一个新数组, 其包含通过 fn 函数测试返回值为 true 的所有元素。\n\n```javascript\nlet [...arr] = [1, 2, 4, 7, 6];\n\nconst isOdd = num => num % 2;\n\nlet odd = arr.filter(isOdd); // odd is [1, 7]\n```\n\n## slice() 取一部分数组\n\nslice(start, end)\n\n* start, end 数组下标\n\n返回一个从 start 到 end（不包括 end）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改。\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd'];\nlet arr13 = arr.slice(1, 3);\nconsole.log(arr); // ['a', 'b', 'c', 'd']\nconsole.log(arr13); // ['b', 'c']\n```\n如果参数为负数，例如`start = -3, end = -1`，就表示倒数第三位到倒数第一位，不包括\n## reduce() 数组求和\n\n```javascript\nlet arr = [1, 3, 5];\nlet sumArr = arr.reduce((sum, value) => sum + value, 0);\n// sumArr is 9.\n```\nsum 上一次调用回调返回的值，或者是提供的初始值 0;\nnum 数组中正在处理的元素;\n0 可选项，其值用于第一次调用 callback 的第一个参数 sum。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用 reduce 时没有设置初始值将会报错。\n\n## repeat()\n\nstr.repeat(n)\n\n创建 n 个 str 的副本，将其连接在一起返回一个新的字符串。\n\n```javascript\n'ha'.repeat(3); // 'hahaha'\n'ha'.repeat(2); // 'haha'\n```\n## match() 字符串中正则取值\n\nstr.match(regx)\n\n方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，返回匹配值构成的数组。","source":"_posts/数组与字符串常用方法.md","raw":"---\ntitle: 数组与字符串常用方法\ntags: JavaScript\ncategories: JavaScript\nabbrlink: 4b02d38a\ndata: 2017/9/16\n---\n## split() 将字符串分割成数组\n\nstr.split('分隔符', 返回数组最大的长度)\n\n根据分隔符(字符串或者正则表达式)将一个字符串分割成数组。\n\n```javascript\nconst str = 'wind rain fire';\nconst arr = str.split(' ');\nconsole.log(arr); // arr['wind', 'rain', 'fire']\n```\n\n## join() 数组连接成一个字符串\n\narr.join('分隔符')\n\n分隔符默认值为`,`\n将数组（或一个类数组对象）的所有元素使用分隔符连接成一个新字符串。\n\n```javascript\nconst arr = ['wind', 'rain', 'fire'];\nconst str = arr.join('+');\nconsole.log(str); // wind+rain+fire\n```\n\n## 字符串快速排序\n\n```javascript\nconst strSort = str => str.split('').sort().join('');\nstrSort(str);\n```\n## map() 创建新数组\n\narr.map(callback)\n\n创建一个新数组，新数组的每个元素都是 callback 函数的结果。\n\n```javascript\nconst arr = [1, 2, 3];\nconst newArr = arr.map(num => num * 2);\nconsole.log(newArr); // newArr[2, 4, 6]\n```\n\n## 数组取最大最小值\n\n```javascript\nMath.max.apply(null, arr);  // 取数组最大值\nMath.min.apply(null, arr);  // 取数组最小值\n```\nES6 扩展 rest 不定参数写法：\n\n```javascript\nMath.max(...arr);  // 取数组最大值\nMath.min(...arr);  // 取数组最小值\n```\n\n## filter() 数组中取通过测试的值\n\nfilter(fn)\n\n创建一个新数组, 其包含通过 fn 函数测试返回值为 true 的所有元素。\n\n```javascript\nlet [...arr] = [1, 2, 4, 7, 6];\n\nconst isOdd = num => num % 2;\n\nlet odd = arr.filter(isOdd); // odd is [1, 7]\n```\n\n## slice() 取一部分数组\n\nslice(start, end)\n\n* start, end 数组下标\n\n返回一个从 start 到 end（不包括 end）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改。\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd'];\nlet arr13 = arr.slice(1, 3);\nconsole.log(arr); // ['a', 'b', 'c', 'd']\nconsole.log(arr13); // ['b', 'c']\n```\n如果参数为负数，例如`start = -3, end = -1`，就表示倒数第三位到倒数第一位，不包括\n## reduce() 数组求和\n\n```javascript\nlet arr = [1, 3, 5];\nlet sumArr = arr.reduce((sum, value) => sum + value, 0);\n// sumArr is 9.\n```\nsum 上一次调用回调返回的值，或者是提供的初始值 0;\nnum 数组中正在处理的元素;\n0 可选项，其值用于第一次调用 callback 的第一个参数 sum。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用 reduce 时没有设置初始值将会报错。\n\n## repeat()\n\nstr.repeat(n)\n\n创建 n 个 str 的副本，将其连接在一起返回一个新的字符串。\n\n```javascript\n'ha'.repeat(3); // 'hahaha'\n'ha'.repeat(2); // 'haha'\n```\n## match() 字符串中正则取值\n\nstr.match(regx)\n\n方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，返回匹配值构成的数组。","slug":"数组与字符串常用方法","published":1,"date":"2017-11-12T02:32:03.950Z","updated":"2017-11-12T02:32:03.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xmb004tdfbx8ltkj4g9","content":"<h2 id=\"split-将字符串分割成数组\"><a href=\"#split-将字符串分割成数组\" class=\"headerlink\" title=\"split() 将字符串分割成数组\"></a>split() 将字符串分割成数组</h2><p>str.split(‘分隔符’, 返回数组最大的长度)</p>\n<p>根据分隔符(字符串或者正则表达式)将一个字符串分割成数组。</p>\n<pre><code class=\"javascript\">const str = &#39;wind rain fire&#39;;\nconst arr = str.split(&#39; &#39;);\nconsole.log(arr); // arr[&#39;wind&#39;, &#39;rain&#39;, &#39;fire&#39;]\n</code></pre>\n<h2 id=\"join-数组连接成一个字符串\"><a href=\"#join-数组连接成一个字符串\" class=\"headerlink\" title=\"join() 数组连接成一个字符串\"></a>join() 数组连接成一个字符串</h2><p>arr.join(‘分隔符’)</p>\n<p>分隔符默认值为<code>,</code><br>将数组（或一个类数组对象）的所有元素使用分隔符连接成一个新字符串。</p>\n<pre><code class=\"javascript\">const arr = [&#39;wind&#39;, &#39;rain&#39;, &#39;fire&#39;];\nconst str = arr.join(&#39;+&#39;);\nconsole.log(str); // wind+rain+fire\n</code></pre>\n<h2 id=\"字符串快速排序\"><a href=\"#字符串快速排序\" class=\"headerlink\" title=\"字符串快速排序\"></a>字符串快速排序</h2><pre><code class=\"javascript\">const strSort = str =&gt; str.split(&#39;&#39;).sort().join(&#39;&#39;);\nstrSort(str);\n</code></pre>\n<h2 id=\"map-创建新数组\"><a href=\"#map-创建新数组\" class=\"headerlink\" title=\"map() 创建新数组\"></a>map() 创建新数组</h2><p>arr.map(callback)</p>\n<p>创建一个新数组，新数组的每个元素都是 callback 函数的结果。</p>\n<pre><code class=\"javascript\">const arr = [1, 2, 3];\nconst newArr = arr.map(num =&gt; num * 2);\nconsole.log(newArr); // newArr[2, 4, 6]\n</code></pre>\n<h2 id=\"数组取最大最小值\"><a href=\"#数组取最大最小值\" class=\"headerlink\" title=\"数组取最大最小值\"></a>数组取最大最小值</h2><pre><code class=\"javascript\">Math.max.apply(null, arr);  // 取数组最大值\nMath.min.apply(null, arr);  // 取数组最小值\n</code></pre>\n<p>ES6 扩展 rest 不定参数写法：</p>\n<pre><code class=\"javascript\">Math.max(...arr);  // 取数组最大值\nMath.min(...arr);  // 取数组最小值\n</code></pre>\n<h2 id=\"filter-数组中取通过测试的值\"><a href=\"#filter-数组中取通过测试的值\" class=\"headerlink\" title=\"filter() 数组中取通过测试的值\"></a>filter() 数组中取通过测试的值</h2><p>filter(fn)</p>\n<p>创建一个新数组, 其包含通过 fn 函数测试返回值为 true 的所有元素。</p>\n<pre><code class=\"javascript\">let [...arr] = [1, 2, 4, 7, 6];\n\nconst isOdd = num =&gt; num % 2;\n\nlet odd = arr.filter(isOdd); // odd is [1, 7]\n</code></pre>\n<h2 id=\"slice-取一部分数组\"><a href=\"#slice-取一部分数组\" class=\"headerlink\" title=\"slice() 取一部分数组\"></a>slice() 取一部分数组</h2><p>slice(start, end)</p>\n<ul>\n<li>start, end 数组下标</li>\n</ul>\n<p>返回一个从 start 到 end（不包括 end）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改。</p>\n<pre><code class=\"javascript\">let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];\nlet arr13 = arr.slice(1, 3);\nconsole.log(arr); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]\nconsole.log(arr13); // [&#39;b&#39;, &#39;c&#39;]\n</code></pre>\n<p>如果参数为负数，例如<code>start = -3, end = -1</code>，就表示倒数第三位到倒数第一位，不包括</p>\n<h2 id=\"reduce-数组求和\"><a href=\"#reduce-数组求和\" class=\"headerlink\" title=\"reduce() 数组求和\"></a>reduce() 数组求和</h2><pre><code class=\"javascript\">let arr = [1, 3, 5];\nlet sumArr = arr.reduce((sum, value) =&gt; sum + value, 0);\n// sumArr is 9.\n</code></pre>\n<p>sum 上一次调用回调返回的值，或者是提供的初始值 0;<br>num 数组中正在处理的元素;<br>0 可选项，其值用于第一次调用 callback 的第一个参数 sum。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用 reduce 时没有设置初始值将会报错。</p>\n<h2 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat()\"></a>repeat()</h2><p>str.repeat(n)</p>\n<p>创建 n 个 str 的副本，将其连接在一起返回一个新的字符串。</p>\n<pre><code class=\"javascript\">&#39;ha&#39;.repeat(3); // &#39;hahaha&#39;\n&#39;ha&#39;.repeat(2); // &#39;haha&#39;\n</code></pre>\n<h2 id=\"match-字符串中正则取值\"><a href=\"#match-字符串中正则取值\" class=\"headerlink\" title=\"match() 字符串中正则取值\"></a>match() 字符串中正则取值</h2><p>str.match(regx)</p>\n<p>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，返回匹配值构成的数组。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"split-将字符串分割成数组\"><a href=\"#split-将字符串分割成数组\" class=\"headerlink\" title=\"split() 将字符串分割成数组\"></a>split() 将字符串分割成数组</h2><p>str.split(‘分隔符’, 返回数组最大的长度)</p>\n<p>根据分隔符(字符串或者正则表达式)将一个字符串分割成数组。</p>\n<pre><code class=\"javascript\">const str = &#39;wind rain fire&#39;;\nconst arr = str.split(&#39; &#39;);\nconsole.log(arr); // arr[&#39;wind&#39;, &#39;rain&#39;, &#39;fire&#39;]\n</code></pre>\n<h2 id=\"join-数组连接成一个字符串\"><a href=\"#join-数组连接成一个字符串\" class=\"headerlink\" title=\"join() 数组连接成一个字符串\"></a>join() 数组连接成一个字符串</h2><p>arr.join(‘分隔符’)</p>\n<p>分隔符默认值为<code>,</code><br>将数组（或一个类数组对象）的所有元素使用分隔符连接成一个新字符串。</p>\n<pre><code class=\"javascript\">const arr = [&#39;wind&#39;, &#39;rain&#39;, &#39;fire&#39;];\nconst str = arr.join(&#39;+&#39;);\nconsole.log(str); // wind+rain+fire\n</code></pre>\n<h2 id=\"字符串快速排序\"><a href=\"#字符串快速排序\" class=\"headerlink\" title=\"字符串快速排序\"></a>字符串快速排序</h2><pre><code class=\"javascript\">const strSort = str =&gt; str.split(&#39;&#39;).sort().join(&#39;&#39;);\nstrSort(str);\n</code></pre>\n<h2 id=\"map-创建新数组\"><a href=\"#map-创建新数组\" class=\"headerlink\" title=\"map() 创建新数组\"></a>map() 创建新数组</h2><p>arr.map(callback)</p>\n<p>创建一个新数组，新数组的每个元素都是 callback 函数的结果。</p>\n<pre><code class=\"javascript\">const arr = [1, 2, 3];\nconst newArr = arr.map(num =&gt; num * 2);\nconsole.log(newArr); // newArr[2, 4, 6]\n</code></pre>\n<h2 id=\"数组取最大最小值\"><a href=\"#数组取最大最小值\" class=\"headerlink\" title=\"数组取最大最小值\"></a>数组取最大最小值</h2><pre><code class=\"javascript\">Math.max.apply(null, arr);  // 取数组最大值\nMath.min.apply(null, arr);  // 取数组最小值\n</code></pre>\n<p>ES6 扩展 rest 不定参数写法：</p>\n<pre><code class=\"javascript\">Math.max(...arr);  // 取数组最大值\nMath.min(...arr);  // 取数组最小值\n</code></pre>\n<h2 id=\"filter-数组中取通过测试的值\"><a href=\"#filter-数组中取通过测试的值\" class=\"headerlink\" title=\"filter() 数组中取通过测试的值\"></a>filter() 数组中取通过测试的值</h2><p>filter(fn)</p>\n<p>创建一个新数组, 其包含通过 fn 函数测试返回值为 true 的所有元素。</p>\n<pre><code class=\"javascript\">let [...arr] = [1, 2, 4, 7, 6];\n\nconst isOdd = num =&gt; num % 2;\n\nlet odd = arr.filter(isOdd); // odd is [1, 7]\n</code></pre>\n<h2 id=\"slice-取一部分数组\"><a href=\"#slice-取一部分数组\" class=\"headerlink\" title=\"slice() 取一部分数组\"></a>slice() 取一部分数组</h2><p>slice(start, end)</p>\n<ul>\n<li>start, end 数组下标</li>\n</ul>\n<p>返回一个从 start 到 end（不包括 end）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改。</p>\n<pre><code class=\"javascript\">let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];\nlet arr13 = arr.slice(1, 3);\nconsole.log(arr); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]\nconsole.log(arr13); // [&#39;b&#39;, &#39;c&#39;]\n</code></pre>\n<p>如果参数为负数，例如<code>start = -3, end = -1</code>，就表示倒数第三位到倒数第一位，不包括</p>\n<h2 id=\"reduce-数组求和\"><a href=\"#reduce-数组求和\" class=\"headerlink\" title=\"reduce() 数组求和\"></a>reduce() 数组求和</h2><pre><code class=\"javascript\">let arr = [1, 3, 5];\nlet sumArr = arr.reduce((sum, value) =&gt; sum + value, 0);\n// sumArr is 9.\n</code></pre>\n<p>sum 上一次调用回调返回的值，或者是提供的初始值 0;<br>num 数组中正在处理的元素;<br>0 可选项，其值用于第一次调用 callback 的第一个参数 sum。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用 reduce 时没有设置初始值将会报错。</p>\n<h2 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat()\"></a>repeat()</h2><p>str.repeat(n)</p>\n<p>创建 n 个 str 的副本，将其连接在一起返回一个新的字符串。</p>\n<pre><code class=\"javascript\">&#39;ha&#39;.repeat(3); // &#39;hahaha&#39;\n&#39;ha&#39;.repeat(2); // &#39;haha&#39;\n</code></pre>\n<h2 id=\"match-字符串中正则取值\"><a href=\"#match-字符串中正则取值\" class=\"headerlink\" title=\"match() 字符串中正则取值\"></a>match() 字符串中正则取值</h2><p>str.match(regx)</p>\n<p>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，返回匹配值构成的数组。</p>\n"},{"title":"盒子模型","abbrlink":"998dffd6","data":"2017/9/16","_content":"> 浏览器中的每个视图可以看成是一个一个嵌套的盒子.\n## box-size\n\n* 元素大小 = boder + padding + contentwidth\n* box-size: boder-size;（兼容性） 它会让系统计算元素大小时会将 boder padding 包括在内。不包含外边距(margin)。\n\n```css\n{\n -webkit-box-size: boder-size;\n -ms-box-size: boder-size;\n -moz-box-size: boder-size;\n}\n```\n\n## 浏览器前缀\n\n* -webkit\n* -ms\n* -moz\n\n## flex\n\n> 弹性布局\n\n* 用于 Chrome 29+、IE 11+ 和 Mozilla 28+。要支持 Safari，必须添加 -webkit- 前缀：\n\n```css\n{\n    display: -webkit-flex;\n    display: flex;\n}\n```\n\n","source":"_posts/盒子模型.md","raw":"---\ntitle: 盒子模型\ntags: CSS\ncategories: CSS\nabbrlink: 998dffd6\ndata: 2017/9/16\n---\n> 浏览器中的每个视图可以看成是一个一个嵌套的盒子.\n## box-size\n\n* 元素大小 = boder + padding + contentwidth\n* box-size: boder-size;（兼容性） 它会让系统计算元素大小时会将 boder padding 包括在内。不包含外边距(margin)。\n\n```css\n{\n -webkit-box-size: boder-size;\n -ms-box-size: boder-size;\n -moz-box-size: boder-size;\n}\n```\n\n## 浏览器前缀\n\n* -webkit\n* -ms\n* -moz\n\n## flex\n\n> 弹性布局\n\n* 用于 Chrome 29+、IE 11+ 和 Mozilla 28+。要支持 Safari，必须添加 -webkit- 前缀：\n\n```css\n{\n    display: -webkit-flex;\n    display: flex;\n}\n```\n\n","slug":"盒子模型","published":1,"date":"2017-11-12T02:32:55.411Z","updated":"2017-11-12T02:32:55.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xmf004wdfbxh8hcwax2","content":"<blockquote>\n<p>浏览器中的每个视图可以看成是一个一个嵌套的盒子.</p>\n<h2 id=\"box-size\"><a href=\"#box-size\" class=\"headerlink\" title=\"box-size\"></a>box-size</h2></blockquote>\n<ul>\n<li>元素大小 = boder + padding + contentwidth</li>\n<li>box-size: boder-size;（兼容性） 它会让系统计算元素大小时会将 boder padding 包括在内。不包含外边距(margin)。</li>\n</ul>\n<pre><code class=\"css\">{\n -webkit-box-size: boder-size;\n -ms-box-size: boder-size;\n -moz-box-size: boder-size;\n}\n</code></pre>\n<h2 id=\"浏览器前缀\"><a href=\"#浏览器前缀\" class=\"headerlink\" title=\"浏览器前缀\"></a>浏览器前缀</h2><ul>\n<li>-webkit</li>\n<li>-ms</li>\n<li>-moz</li>\n</ul>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><blockquote>\n<p>弹性布局</p>\n</blockquote>\n<ul>\n<li>用于 Chrome 29+、IE 11+ 和 Mozilla 28+。要支持 Safari，必须添加 -webkit- 前缀：</li>\n</ul>\n<pre><code class=\"css\">{\n    display: -webkit-flex;\n    display: flex;\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>浏览器中的每个视图可以看成是一个一个嵌套的盒子.</p>\n<h2 id=\"box-size\"><a href=\"#box-size\" class=\"headerlink\" title=\"box-size\"></a>box-size</h2></blockquote>\n<ul>\n<li>元素大小 = boder + padding + contentwidth</li>\n<li>box-size: boder-size;（兼容性） 它会让系统计算元素大小时会将 boder padding 包括在内。不包含外边距(margin)。</li>\n</ul>\n<pre><code class=\"css\">{\n -webkit-box-size: boder-size;\n -ms-box-size: boder-size;\n -moz-box-size: boder-size;\n}\n</code></pre>\n<h2 id=\"浏览器前缀\"><a href=\"#浏览器前缀\" class=\"headerlink\" title=\"浏览器前缀\"></a>浏览器前缀</h2><ul>\n<li>-webkit</li>\n<li>-ms</li>\n<li>-moz</li>\n</ul>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><blockquote>\n<p>弹性布局</p>\n</blockquote>\n<ul>\n<li>用于 Chrome 29+、IE 11+ 和 Mozilla 28+。要支持 Safari，必须添加 -webkit- 前缀：</li>\n</ul>\n<pre><code class=\"css\">{\n    display: -webkit-flex;\n    display: flex;\n}\n</code></pre>\n"},{"title":"类集框架","date":"2017-06-15T16:00:00.000Z","abbrlink":"85b5073b","_content":"\n* 类集框架是一组类和接口；\n\n* 位于java.until包当中；\n\n* 主要用于存储盒管理对象；\n\n* 主要分为三大类：集合(Set)、列表(List)和映射(Map)。\n\n  ## 类集框架的主体结构\n\n  * Collection为单列集合，Map为双列集合。\n\n  ## ![](http://i.imgur.com/wEVxtzg.png)\n\n\n## Collection接口中的方法\n\n| 方法                    | 功能                   |\n| --------------------- | -------------------- |\n| boolean add（Object o） | 向集合中加入一个对象。          |\n| void clear（）          | 删除集合当中的所有对象。         |\n| boolean  isEmpty（）    | 判断集合是否为空，如果为空返回true。 |\n| remove（Object o）      | 从集合中删除一个对象的引用。       |\n| int size（）            | 返回集合中元素的数目。          |\n\n## Iterator接口\n\n* 主要用于迭代访问（即遍历）整个Collection中的元素，因此Iterator对象也被称为迭代器。\n\n| 方法       | 作用                              |\n| -------- | ------------------------------- |\n| hasNet() | 判断当前迭代器中是否还有下一个元素，返回值为boolean值。 |\n| next()   | 返回当前迭代器下一个元素。                   |\n\n### 示例：\n\n```java\n\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Iterator;\npublic class TestIterator{\n\tpublic static void main(String args[]){\n\t\tSet<String> set = new HashSet<String>();\n\t\tset.add(\"a\");\n\t\tset.add(\"b\");\n\t\tset.add(\"c\");\n\t\tset.add(\"d\");\n\t\tset.add(\"e\");\n\t\t//调用Set对象的Iterator方法生成一个迭代器对象，该对象遍历整个Set\n\t\tIterator<String> it = set.iterator();\n      \t//判断Set集合中是否存在下一个元素\n\t\twhile(it.hasNext()){\n          \t//取出Set集合中的元素\n\t\t\tString s = it.next();\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}\n```\n\n## ListIterator接口\n\n* 可以按任一方向遍历列表、迭代期间修改列表，并获得迭代器在列表中的当前位置。\n\n| 方法                    | 功能                             |\n| --------------------- | ------------------------------ |\n| void add(Object o)    | 将指定的元素插入列表。                    |\n| boolean hasPrevious() | 如果以逆向遍历列表，列表迭代器有多个元素，则返回true。  |\n| Object previous()     | 返回列表中的前一个元素。                   |\n| void remove()         | 从列表中移除由next或previous返回的最后一个元素。 |\n\n### 示例：\n\n```java\nimport java.util.*;\npublic class Test{\n\tpublic static void main(String args[]) {\n\t\tArrayList<String> list = new ArrayList<String>();\n\t\tlist.add(\"Monday\");\n\t\tlist.add(\"Tuesday\");\n\t\tlist.add(\"Wednesday\");\n\t\tlist.add(\"Thursday\");\n\t\tSystem.out.println(list);\n\t\t//生成一个ListIterator对象\n\t\tListIterator it = list.listIterator(list.size());\n      \t//调用hasPrevious()方法判断是否存在元素\n\t\twhile(it.hasPrevious()){\n          \t//调用previous()方法返回元素\n\t\t\tObject obj = it.previous();\n\t\t\tSystem.out.println(obj);\n\t\t}\n\t}\n}\n```\n\n## 集合（Set）\n\n- 集合中的对象不按特定方式排序，并且没有重复对象。\n\n## HashSet集合\n\n* HashSet是Set接口的一个实现类，它所储存的元素时不可重复且无序的。根据对象的哈希值来确定元素在集合中的储存位置，因此具有良好的存取和查找性能。\n\n### 示例：\n\n```java\nimport java.util.Set;\nimport java.util.HashSet;\npublic class TestSet{\n\tpublic static void main(String args[]){\n\t\t//生成HashSet对象并向上转型为Set\n\t\tSet<String> set =new HashSet<String>();\n\t\t//定义一个boolean型变量b1接受 isEmpty（）方法返回值\n\t\tboolean b1 = set.isEmpty();\n\t\tSystem.out.println(b1);\n\t\tset.add(\"a\");\n\t\tset.add(\"b\");\n\t\tset.add(\"c\");\n\t\tset.add(\"d\");\n\t\tset.add(\"e\");\n\t\tset.add(\"f\");\n\n\t\tboolean b2 =set.isEmpty();\n\t\tSystem.out.println(b2);\n\n\t\t//调用size（）方法获取集合长度\n\t\tint i =set.size();\n\t\tSystem.out.println(\"初始状态set集合中元素的数目\" + i);\n\n\t\t//调用remove（）方法移除对象d\n\t\tset.remove(\"d\");\n\n\t\tint j = set.size();\n\t\tSystem.out.println(\"处理之后set集合中元素的数目\" + j);\n\t}\n}\n```\n\n## TreeSet集合\n\n* 它内部采用自平衡点排序二叉树来储存元素，这样的结构保证TreeSet集合没有重复的元素，并且可以对元素进行排序。\n\n### 二叉树\n\n* 二叉树是指每个节点最多有两个子节点的有序树，每个节点及其子节点组成的树称为子树，通常左侧的节点称为“左子树”，右侧的的子节点称为“右子树”。\n\n![](http://i.imgur.com/TmqrdF9.png)\n\n### 示例：\n\n````java\nimport java.util.*;\npublic class Test01{\n\tpublic static void main(String args[]){\n\t\t//创建TreeSet集合\n\t\tTreeSet<String> ts = new TreeSet<String>();\n\t\tts.add(\"10\");\n\t\tts.add(\"50\");\n\t\tts.add(\"20\");\n\t\tts.add(\"40\");\n\t\tts.add(\"30\");\n\t\t//获取Iterator对象\n\t\tIterator it = ts.iterator();\n\t\twhile(it.hasNext()){\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t}\n}\n````\n\n结果：\n![](http://i.imgur.com/Wl5KRxh.png)\n\n\n\n## 列表（List）\n\n- 集合中对象按照索引位置排序，即元素的存入和取出顺序一致，可以有重复对象。\n\n## ArrayList\n\n* ArrayList的底层是使用一个数组来保存元素，当增加或删除指定位置的元素时，会创建新的数组，效率较低，因此不适合做大量的增删操作。但是这种数组的结构允许程序通过索引的方式来访问元素，因此使用ArryList集合查找元素很便捷。\n\n### 示例：\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tArrayList<String> arrayList = new ArrayList<String>();\n\t\t//向ArrayList中存入数据\n\t\tarrayList.add(\"a\");\n\t\tarrayList.add(\"b\");\n\t\tarrayList.add(\"c\");\n\t\tarrayList.add(\"d\");\n\n\t\t//移除这个对象\n\t\tarrayList.remove(2);\n\n\t\t//从ArrayList中取数据\n\t\tfor(int i = 0; i < arrayList.size(); i++){\n\t\t\tString s = arrayList.get(i);\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}\n```\n\n## LinkedList\n\n* 内部维护了一个双向循环链表，链表中的每一个元素都使用引用的方式来记住它的前一个元素和后一个元素，插入一个新元素，只需修改元素之间的这种引用关系即可。\n\n### 示例：\n\n```java\nimport java.util.List;\nimport java.util.LinkedList;\npublic class Test01{\n\tpublic static void main(String args[]){\n\t\t//创建LinkedList集合\n\t\tLinkedList<String> link = new LinkedList<String>();\n\t\t\t//向集合中添加元素\n\t\t\tlink.add(\"One\");\n\t\t\tlink.add(\"Two\");\n\t\t\tlink.add(\"Three\");\n\t\t\tlink.add(\"Four\");\n\t\t\t//取出并打印该集合中的所有元素\n\t\t\tSystem.out.println(link.toString());\n\t\t\t//向指定位置插入元素\n\t\t\tlink.add(2,\"插个队\");\n\t\t\tSystem.out.println(link);\n\t\t\t//移除指定位置的元素\n\t\t\tlink.remove(2);\n\t\t\tSystem.out.println(link);\n\t}\n}\n```\n\n## 映射（Map）\n\n- 集合中的每一个元素包含一个键对象和一个值对象，键不可重复，值可以重复。\n\n| 键对象  |  值对象   |\n| :--: | :----: |\n| key1 | value1 |\n| key2 | value2 |\n| key3 | value3 |\n\n## Map接口中的方法\n\n| 方法                              | 作用                                  |\n| ------------------------------- | ----------------------------------- |\n| void clear()                    | 从此映射中移除所有映射关系（可选操作）。                |\n| boolean containsKey（Object Key） | 如果此映射包含指定键的映射关系，则返回 true。           |\n| boolean equals（Object o）        | 比较指定的对象与此映射是否相等。                    |\n| get（Object key）                 | 返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回null。 |\n| boolean isEmpty（）               | 如果此映射未包含键-值映射关系，则返回 true。           |\n| put（）                           | 将指定的值与此映射中的指定键关联。                   |\n| remove（Object key）              | 如果存在一个键的映射关系，则将其从此映射中移除。            |\n| int size（）                      | 返回此Map中的键值对数目。                      |\n\n## Map与HashMap\n\n### 示例：\n\n```java\nimport java.util.Map;\nimport java.util.HashMap;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//生成HashMap对象并向上转型为Map\n\t\tMap<String,String> map = new HashMap<String,String>();\n\t\t//向map中添加键值对\n\t\tmap.put(\"1\",\"One\");\n\t\tmap.put(\"2\",\"Two\");\n\t\tmap.put(\"3\",\"Three\");\n\t\t//调用get（Object key）方法，返回指定键所映射的值；\n\t\t//如果对于该键来说，此映射不包含任何映射关系，则返回 null。\n\t\tString s = map.get(\"2\");\n\t\tSystem.out.println(s);\n\t}\n}\n```\n\n\n\n","source":"_posts/类集框架.md","raw":"---\ntitle: 类集框架\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 85b5073b\n---\n\n* 类集框架是一组类和接口；\n\n* 位于java.until包当中；\n\n* 主要用于存储盒管理对象；\n\n* 主要分为三大类：集合(Set)、列表(List)和映射(Map)。\n\n  ## 类集框架的主体结构\n\n  * Collection为单列集合，Map为双列集合。\n\n  ## ![](http://i.imgur.com/wEVxtzg.png)\n\n\n## Collection接口中的方法\n\n| 方法                    | 功能                   |\n| --------------------- | -------------------- |\n| boolean add（Object o） | 向集合中加入一个对象。          |\n| void clear（）          | 删除集合当中的所有对象。         |\n| boolean  isEmpty（）    | 判断集合是否为空，如果为空返回true。 |\n| remove（Object o）      | 从集合中删除一个对象的引用。       |\n| int size（）            | 返回集合中元素的数目。          |\n\n## Iterator接口\n\n* 主要用于迭代访问（即遍历）整个Collection中的元素，因此Iterator对象也被称为迭代器。\n\n| 方法       | 作用                              |\n| -------- | ------------------------------- |\n| hasNet() | 判断当前迭代器中是否还有下一个元素，返回值为boolean值。 |\n| next()   | 返回当前迭代器下一个元素。                   |\n\n### 示例：\n\n```java\n\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Iterator;\npublic class TestIterator{\n\tpublic static void main(String args[]){\n\t\tSet<String> set = new HashSet<String>();\n\t\tset.add(\"a\");\n\t\tset.add(\"b\");\n\t\tset.add(\"c\");\n\t\tset.add(\"d\");\n\t\tset.add(\"e\");\n\t\t//调用Set对象的Iterator方法生成一个迭代器对象，该对象遍历整个Set\n\t\tIterator<String> it = set.iterator();\n      \t//判断Set集合中是否存在下一个元素\n\t\twhile(it.hasNext()){\n          \t//取出Set集合中的元素\n\t\t\tString s = it.next();\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}\n```\n\n## ListIterator接口\n\n* 可以按任一方向遍历列表、迭代期间修改列表，并获得迭代器在列表中的当前位置。\n\n| 方法                    | 功能                             |\n| --------------------- | ------------------------------ |\n| void add(Object o)    | 将指定的元素插入列表。                    |\n| boolean hasPrevious() | 如果以逆向遍历列表，列表迭代器有多个元素，则返回true。  |\n| Object previous()     | 返回列表中的前一个元素。                   |\n| void remove()         | 从列表中移除由next或previous返回的最后一个元素。 |\n\n### 示例：\n\n```java\nimport java.util.*;\npublic class Test{\n\tpublic static void main(String args[]) {\n\t\tArrayList<String> list = new ArrayList<String>();\n\t\tlist.add(\"Monday\");\n\t\tlist.add(\"Tuesday\");\n\t\tlist.add(\"Wednesday\");\n\t\tlist.add(\"Thursday\");\n\t\tSystem.out.println(list);\n\t\t//生成一个ListIterator对象\n\t\tListIterator it = list.listIterator(list.size());\n      \t//调用hasPrevious()方法判断是否存在元素\n\t\twhile(it.hasPrevious()){\n          \t//调用previous()方法返回元素\n\t\t\tObject obj = it.previous();\n\t\t\tSystem.out.println(obj);\n\t\t}\n\t}\n}\n```\n\n## 集合（Set）\n\n- 集合中的对象不按特定方式排序，并且没有重复对象。\n\n## HashSet集合\n\n* HashSet是Set接口的一个实现类，它所储存的元素时不可重复且无序的。根据对象的哈希值来确定元素在集合中的储存位置，因此具有良好的存取和查找性能。\n\n### 示例：\n\n```java\nimport java.util.Set;\nimport java.util.HashSet;\npublic class TestSet{\n\tpublic static void main(String args[]){\n\t\t//生成HashSet对象并向上转型为Set\n\t\tSet<String> set =new HashSet<String>();\n\t\t//定义一个boolean型变量b1接受 isEmpty（）方法返回值\n\t\tboolean b1 = set.isEmpty();\n\t\tSystem.out.println(b1);\n\t\tset.add(\"a\");\n\t\tset.add(\"b\");\n\t\tset.add(\"c\");\n\t\tset.add(\"d\");\n\t\tset.add(\"e\");\n\t\tset.add(\"f\");\n\n\t\tboolean b2 =set.isEmpty();\n\t\tSystem.out.println(b2);\n\n\t\t//调用size（）方法获取集合长度\n\t\tint i =set.size();\n\t\tSystem.out.println(\"初始状态set集合中元素的数目\" + i);\n\n\t\t//调用remove（）方法移除对象d\n\t\tset.remove(\"d\");\n\n\t\tint j = set.size();\n\t\tSystem.out.println(\"处理之后set集合中元素的数目\" + j);\n\t}\n}\n```\n\n## TreeSet集合\n\n* 它内部采用自平衡点排序二叉树来储存元素，这样的结构保证TreeSet集合没有重复的元素，并且可以对元素进行排序。\n\n### 二叉树\n\n* 二叉树是指每个节点最多有两个子节点的有序树，每个节点及其子节点组成的树称为子树，通常左侧的节点称为“左子树”，右侧的的子节点称为“右子树”。\n\n![](http://i.imgur.com/TmqrdF9.png)\n\n### 示例：\n\n````java\nimport java.util.*;\npublic class Test01{\n\tpublic static void main(String args[]){\n\t\t//创建TreeSet集合\n\t\tTreeSet<String> ts = new TreeSet<String>();\n\t\tts.add(\"10\");\n\t\tts.add(\"50\");\n\t\tts.add(\"20\");\n\t\tts.add(\"40\");\n\t\tts.add(\"30\");\n\t\t//获取Iterator对象\n\t\tIterator it = ts.iterator();\n\t\twhile(it.hasNext()){\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t}\n}\n````\n\n结果：\n![](http://i.imgur.com/Wl5KRxh.png)\n\n\n\n## 列表（List）\n\n- 集合中对象按照索引位置排序，即元素的存入和取出顺序一致，可以有重复对象。\n\n## ArrayList\n\n* ArrayList的底层是使用一个数组来保存元素，当增加或删除指定位置的元素时，会创建新的数组，效率较低，因此不适合做大量的增删操作。但是这种数组的结构允许程序通过索引的方式来访问元素，因此使用ArryList集合查找元素很便捷。\n\n### 示例：\n\n```java\nimport java.util.List;\nimport java.util.ArrayList;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\tArrayList<String> arrayList = new ArrayList<String>();\n\t\t//向ArrayList中存入数据\n\t\tarrayList.add(\"a\");\n\t\tarrayList.add(\"b\");\n\t\tarrayList.add(\"c\");\n\t\tarrayList.add(\"d\");\n\n\t\t//移除这个对象\n\t\tarrayList.remove(2);\n\n\t\t//从ArrayList中取数据\n\t\tfor(int i = 0; i < arrayList.size(); i++){\n\t\t\tString s = arrayList.get(i);\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}\n```\n\n## LinkedList\n\n* 内部维护了一个双向循环链表，链表中的每一个元素都使用引用的方式来记住它的前一个元素和后一个元素，插入一个新元素，只需修改元素之间的这种引用关系即可。\n\n### 示例：\n\n```java\nimport java.util.List;\nimport java.util.LinkedList;\npublic class Test01{\n\tpublic static void main(String args[]){\n\t\t//创建LinkedList集合\n\t\tLinkedList<String> link = new LinkedList<String>();\n\t\t\t//向集合中添加元素\n\t\t\tlink.add(\"One\");\n\t\t\tlink.add(\"Two\");\n\t\t\tlink.add(\"Three\");\n\t\t\tlink.add(\"Four\");\n\t\t\t//取出并打印该集合中的所有元素\n\t\t\tSystem.out.println(link.toString());\n\t\t\t//向指定位置插入元素\n\t\t\tlink.add(2,\"插个队\");\n\t\t\tSystem.out.println(link);\n\t\t\t//移除指定位置的元素\n\t\t\tlink.remove(2);\n\t\t\tSystem.out.println(link);\n\t}\n}\n```\n\n## 映射（Map）\n\n- 集合中的每一个元素包含一个键对象和一个值对象，键不可重复，值可以重复。\n\n| 键对象  |  值对象   |\n| :--: | :----: |\n| key1 | value1 |\n| key2 | value2 |\n| key3 | value3 |\n\n## Map接口中的方法\n\n| 方法                              | 作用                                  |\n| ------------------------------- | ----------------------------------- |\n| void clear()                    | 从此映射中移除所有映射关系（可选操作）。                |\n| boolean containsKey（Object Key） | 如果此映射包含指定键的映射关系，则返回 true。           |\n| boolean equals（Object o）        | 比较指定的对象与此映射是否相等。                    |\n| get（Object key）                 | 返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回null。 |\n| boolean isEmpty（）               | 如果此映射未包含键-值映射关系，则返回 true。           |\n| put（）                           | 将指定的值与此映射中的指定键关联。                   |\n| remove（Object key）              | 如果存在一个键的映射关系，则将其从此映射中移除。            |\n| int size（）                      | 返回此Map中的键值对数目。                      |\n\n## Map与HashMap\n\n### 示例：\n\n```java\nimport java.util.Map;\nimport java.util.HashMap;\npublic class Test{\n\tpublic static void main(String args[]){\n\t\t//生成HashMap对象并向上转型为Map\n\t\tMap<String,String> map = new HashMap<String,String>();\n\t\t//向map中添加键值对\n\t\tmap.put(\"1\",\"One\");\n\t\tmap.put(\"2\",\"Two\");\n\t\tmap.put(\"3\",\"Three\");\n\t\t//调用get（Object key）方法，返回指定键所映射的值；\n\t\t//如果对于该键来说，此映射不包含任何映射关系，则返回 null。\n\t\tString s = map.get(\"2\");\n\t\tSystem.out.println(s);\n\t}\n}\n```\n\n\n\n","slug":"类集框架","published":1,"updated":"2017-11-12T02:15:36.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xmh004zdfbxfuftac3j","content":"<ul>\n<li><p>类集框架是一组类和接口；</p>\n</li>\n<li><p>位于java.until包当中；</p>\n</li>\n<li><p>主要用于存储盒管理对象；</p>\n</li>\n<li><p>主要分为三大类：集合(Set)、列表(List)和映射(Map)。</p>\n<h2 id=\"类集框架的主体结构\"><a href=\"#类集框架的主体结构\" class=\"headerlink\" title=\"类集框架的主体结构\"></a>类集框架的主体结构</h2><ul>\n<li>Collection为单列集合，Map为双列集合。</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://i.imgur.com/wEVxtzg.png\" alt=\"\"></h2></li>\n</ul>\n<h2 id=\"Collection接口中的方法\"><a href=\"#Collection接口中的方法\" class=\"headerlink\" title=\"Collection接口中的方法\"></a>Collection接口中的方法</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean add（Object o）</td>\n<td>向集合中加入一个对象。</td>\n</tr>\n<tr>\n<td>void clear（）</td>\n<td>删除集合当中的所有对象。</td>\n</tr>\n<tr>\n<td>boolean  isEmpty（）</td>\n<td>判断集合是否为空，如果为空返回true。</td>\n</tr>\n<tr>\n<td>remove（Object o）</td>\n<td>从集合中删除一个对象的引用。</td>\n</tr>\n<tr>\n<td>int size（）</td>\n<td>返回集合中元素的数目。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Iterator接口\"><a href=\"#Iterator接口\" class=\"headerlink\" title=\"Iterator接口\"></a>Iterator接口</h2><ul>\n<li>主要用于迭代访问（即遍历）整个Collection中的元素，因此Iterator对象也被称为迭代器。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hasNet()</td>\n<td>判断当前迭代器中是否还有下一个元素，返回值为boolean值。</td>\n</tr>\n<tr>\n<td>next()</td>\n<td>返回当前迭代器下一个元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Iterator;\npublic class TestIterator{\n    public static void main(String args[]){\n        Set&lt;String&gt; set = new HashSet&lt;String&gt;();\n        set.add(&quot;a&quot;);\n        set.add(&quot;b&quot;);\n        set.add(&quot;c&quot;);\n        set.add(&quot;d&quot;);\n        set.add(&quot;e&quot;);\n        //调用Set对象的Iterator方法生成一个迭代器对象，该对象遍历整个Set\n        Iterator&lt;String&gt; it = set.iterator();\n          //判断Set集合中是否存在下一个元素\n        while(it.hasNext()){\n              //取出Set集合中的元素\n            String s = it.next();\n            System.out.println(s);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"ListIterator接口\"><a href=\"#ListIterator接口\" class=\"headerlink\" title=\"ListIterator接口\"></a>ListIterator接口</h2><ul>\n<li>可以按任一方向遍历列表、迭代期间修改列表，并获得迭代器在列表中的当前位置。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void add(Object o)</td>\n<td>将指定的元素插入列表。</td>\n</tr>\n<tr>\n<td>boolean hasPrevious()</td>\n<td>如果以逆向遍历列表，列表迭代器有多个元素，则返回true。</td>\n</tr>\n<tr>\n<td>Object previous()</td>\n<td>返回列表中的前一个元素。</td>\n</tr>\n<tr>\n<td>void remove()</td>\n<td>从列表中移除由next或previous返回的最后一个元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.*;\npublic class Test{\n    public static void main(String args[]) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\n        list.add(&quot;Monday&quot;);\n        list.add(&quot;Tuesday&quot;);\n        list.add(&quot;Wednesday&quot;);\n        list.add(&quot;Thursday&quot;);\n        System.out.println(list);\n        //生成一个ListIterator对象\n        ListIterator it = list.listIterator(list.size());\n          //调用hasPrevious()方法判断是否存在元素\n        while(it.hasPrevious()){\n              //调用previous()方法返回元素\n            Object obj = it.previous();\n            System.out.println(obj);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h2><ul>\n<li>集合中的对象不按特定方式排序，并且没有重复对象。</li>\n</ul>\n<h2 id=\"HashSet集合\"><a href=\"#HashSet集合\" class=\"headerlink\" title=\"HashSet集合\"></a>HashSet集合</h2><ul>\n<li>HashSet是Set接口的一个实现类，它所储存的元素时不可重复且无序的。根据对象的哈希值来确定元素在集合中的储存位置，因此具有良好的存取和查找性能。</li>\n</ul>\n<h3 id=\"示例：-2\"><a href=\"#示例：-2\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.Set;\nimport java.util.HashSet;\npublic class TestSet{\n    public static void main(String args[]){\n        //生成HashSet对象并向上转型为Set\n        Set&lt;String&gt; set =new HashSet&lt;String&gt;();\n        //定义一个boolean型变量b1接受 isEmpty（）方法返回值\n        boolean b1 = set.isEmpty();\n        System.out.println(b1);\n        set.add(&quot;a&quot;);\n        set.add(&quot;b&quot;);\n        set.add(&quot;c&quot;);\n        set.add(&quot;d&quot;);\n        set.add(&quot;e&quot;);\n        set.add(&quot;f&quot;);\n\n        boolean b2 =set.isEmpty();\n        System.out.println(b2);\n\n        //调用size（）方法获取集合长度\n        int i =set.size();\n        System.out.println(&quot;初始状态set集合中元素的数目&quot; + i);\n\n        //调用remove（）方法移除对象d\n        set.remove(&quot;d&quot;);\n\n        int j = set.size();\n        System.out.println(&quot;处理之后set集合中元素的数目&quot; + j);\n    }\n}\n</code></pre>\n<h2 id=\"TreeSet集合\"><a href=\"#TreeSet集合\" class=\"headerlink\" title=\"TreeSet集合\"></a>TreeSet集合</h2><ul>\n<li>它内部采用自平衡点排序二叉树来储存元素，这样的结构保证TreeSet集合没有重复的元素，并且可以对元素进行排序。</li>\n</ul>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><ul>\n<li>二叉树是指每个节点最多有两个子节点的有序树，每个节点及其子节点组成的树称为子树，通常左侧的节点称为“左子树”，右侧的的子节点称为“右子树”。</li>\n</ul>\n<p><img src=\"http://i.imgur.com/TmqrdF9.png\" alt=\"\"></p>\n<h3 id=\"示例：-3\"><a href=\"#示例：-3\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.*;\npublic class Test01{\n    public static void main(String args[]){\n        //创建TreeSet集合\n        TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;();\n        ts.add(&quot;10&quot;);\n        ts.add(&quot;50&quot;);\n        ts.add(&quot;20&quot;);\n        ts.add(&quot;40&quot;);\n        ts.add(&quot;30&quot;);\n        //获取Iterator对象\n        Iterator it = ts.iterator();\n        while(it.hasNext()){\n            System.out.println(it.next());\n        }\n    }\n}\n</code></pre>\n<p>结果：<br><img src=\"http://i.imgur.com/Wl5KRxh.png\" alt=\"\"></p>\n<h2 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h2><ul>\n<li>集合中对象按照索引位置排序，即元素的存入和取出顺序一致，可以有重复对象。</li>\n</ul>\n<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><ul>\n<li>ArrayList的底层是使用一个数组来保存元素，当增加或删除指定位置的元素时，会创建新的数组，效率较低，因此不适合做大量的增删操作。但是这种数组的结构允许程序通过索引的方式来访问元素，因此使用ArryList集合查找元素很便捷。</li>\n</ul>\n<h3 id=\"示例：-4\"><a href=\"#示例：-4\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.List;\nimport java.util.ArrayList;\npublic class Test{\n    public static void main(String args[]){\n        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();\n        //向ArrayList中存入数据\n        arrayList.add(&quot;a&quot;);\n        arrayList.add(&quot;b&quot;);\n        arrayList.add(&quot;c&quot;);\n        arrayList.add(&quot;d&quot;);\n\n        //移除这个对象\n        arrayList.remove(2);\n\n        //从ArrayList中取数据\n        for(int i = 0; i &lt; arrayList.size(); i++){\n            String s = arrayList.get(i);\n            System.out.println(s);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><ul>\n<li>内部维护了一个双向循环链表，链表中的每一个元素都使用引用的方式来记住它的前一个元素和后一个元素，插入一个新元素，只需修改元素之间的这种引用关系即可。</li>\n</ul>\n<h3 id=\"示例：-5\"><a href=\"#示例：-5\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.List;\nimport java.util.LinkedList;\npublic class Test01{\n    public static void main(String args[]){\n        //创建LinkedList集合\n        LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();\n            //向集合中添加元素\n            link.add(&quot;One&quot;);\n            link.add(&quot;Two&quot;);\n            link.add(&quot;Three&quot;);\n            link.add(&quot;Four&quot;);\n            //取出并打印该集合中的所有元素\n            System.out.println(link.toString());\n            //向指定位置插入元素\n            link.add(2,&quot;插个队&quot;);\n            System.out.println(link);\n            //移除指定位置的元素\n            link.remove(2);\n            System.out.println(link);\n    }\n}\n</code></pre>\n<h2 id=\"映射（Map）\"><a href=\"#映射（Map）\" class=\"headerlink\" title=\"映射（Map）\"></a>映射（Map）</h2><ul>\n<li>集合中的每一个元素包含一个键对象和一个值对象，键不可重复，值可以重复。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键对象</th>\n<th style=\"text-align:center\">值对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">key1</td>\n<td style=\"text-align:center\">value1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key2</td>\n<td style=\"text-align:center\">value2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key3</td>\n<td style=\"text-align:center\">value3</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Map接口中的方法\"><a href=\"#Map接口中的方法\" class=\"headerlink\" title=\"Map接口中的方法\"></a>Map接口中的方法</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void clear()</td>\n<td>从此映射中移除所有映射关系（可选操作）。</td>\n</tr>\n<tr>\n<td>boolean containsKey（Object Key）</td>\n<td>如果此映射包含指定键的映射关系，则返回 true。</td>\n</tr>\n<tr>\n<td>boolean equals（Object o）</td>\n<td>比较指定的对象与此映射是否相等。</td>\n</tr>\n<tr>\n<td>get（Object key）</td>\n<td>返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回null。</td>\n</tr>\n<tr>\n<td>boolean isEmpty（）</td>\n<td>如果此映射未包含键-值映射关系，则返回 true。</td>\n</tr>\n<tr>\n<td>put（）</td>\n<td>将指定的值与此映射中的指定键关联。</td>\n</tr>\n<tr>\n<td>remove（Object key）</td>\n<td>如果存在一个键的映射关系，则将其从此映射中移除。</td>\n</tr>\n<tr>\n<td>int size（）</td>\n<td>返回此Map中的键值对数目。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Map与HashMap\"><a href=\"#Map与HashMap\" class=\"headerlink\" title=\"Map与HashMap\"></a>Map与HashMap</h2><h3 id=\"示例：-6\"><a href=\"#示例：-6\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.Map;\nimport java.util.HashMap;\npublic class Test{\n    public static void main(String args[]){\n        //生成HashMap对象并向上转型为Map\n        Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();\n        //向map中添加键值对\n        map.put(&quot;1&quot;,&quot;One&quot;);\n        map.put(&quot;2&quot;,&quot;Two&quot;);\n        map.put(&quot;3&quot;,&quot;Three&quot;);\n        //调用get（Object key）方法，返回指定键所映射的值；\n        //如果对于该键来说，此映射不包含任何映射关系，则返回 null。\n        String s = map.get(&quot;2&quot;);\n        System.out.println(s);\n    }\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>类集框架是一组类和接口；</p>\n</li>\n<li><p>位于java.until包当中；</p>\n</li>\n<li><p>主要用于存储盒管理对象；</p>\n</li>\n<li><p>主要分为三大类：集合(Set)、列表(List)和映射(Map)。</p>\n<h2 id=\"类集框架的主体结构\"><a href=\"#类集框架的主体结构\" class=\"headerlink\" title=\"类集框架的主体结构\"></a>类集框架的主体结构</h2><ul>\n<li>Collection为单列集合，Map为双列集合。</li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"http://i.imgur.com/wEVxtzg.png\" alt=\"\"></h2></li>\n</ul>\n<h2 id=\"Collection接口中的方法\"><a href=\"#Collection接口中的方法\" class=\"headerlink\" title=\"Collection接口中的方法\"></a>Collection接口中的方法</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean add（Object o）</td>\n<td>向集合中加入一个对象。</td>\n</tr>\n<tr>\n<td>void clear（）</td>\n<td>删除集合当中的所有对象。</td>\n</tr>\n<tr>\n<td>boolean  isEmpty（）</td>\n<td>判断集合是否为空，如果为空返回true。</td>\n</tr>\n<tr>\n<td>remove（Object o）</td>\n<td>从集合中删除一个对象的引用。</td>\n</tr>\n<tr>\n<td>int size（）</td>\n<td>返回集合中元素的数目。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Iterator接口\"><a href=\"#Iterator接口\" class=\"headerlink\" title=\"Iterator接口\"></a>Iterator接口</h2><ul>\n<li>主要用于迭代访问（即遍历）整个Collection中的元素，因此Iterator对象也被称为迭代器。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hasNet()</td>\n<td>判断当前迭代器中是否还有下一个元素，返回值为boolean值。</td>\n</tr>\n<tr>\n<td>next()</td>\n<td>返回当前迭代器下一个元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Iterator;\npublic class TestIterator{\n    public static void main(String args[]){\n        Set&lt;String&gt; set = new HashSet&lt;String&gt;();\n        set.add(&quot;a&quot;);\n        set.add(&quot;b&quot;);\n        set.add(&quot;c&quot;);\n        set.add(&quot;d&quot;);\n        set.add(&quot;e&quot;);\n        //调用Set对象的Iterator方法生成一个迭代器对象，该对象遍历整个Set\n        Iterator&lt;String&gt; it = set.iterator();\n          //判断Set集合中是否存在下一个元素\n        while(it.hasNext()){\n              //取出Set集合中的元素\n            String s = it.next();\n            System.out.println(s);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"ListIterator接口\"><a href=\"#ListIterator接口\" class=\"headerlink\" title=\"ListIterator接口\"></a>ListIterator接口</h2><ul>\n<li>可以按任一方向遍历列表、迭代期间修改列表，并获得迭代器在列表中的当前位置。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void add(Object o)</td>\n<td>将指定的元素插入列表。</td>\n</tr>\n<tr>\n<td>boolean hasPrevious()</td>\n<td>如果以逆向遍历列表，列表迭代器有多个元素，则返回true。</td>\n</tr>\n<tr>\n<td>Object previous()</td>\n<td>返回列表中的前一个元素。</td>\n</tr>\n<tr>\n<td>void remove()</td>\n<td>从列表中移除由next或previous返回的最后一个元素。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.*;\npublic class Test{\n    public static void main(String args[]) {\n        ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\n        list.add(&quot;Monday&quot;);\n        list.add(&quot;Tuesday&quot;);\n        list.add(&quot;Wednesday&quot;);\n        list.add(&quot;Thursday&quot;);\n        System.out.println(list);\n        //生成一个ListIterator对象\n        ListIterator it = list.listIterator(list.size());\n          //调用hasPrevious()方法判断是否存在元素\n        while(it.hasPrevious()){\n              //调用previous()方法返回元素\n            Object obj = it.previous();\n            System.out.println(obj);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h2><ul>\n<li>集合中的对象不按特定方式排序，并且没有重复对象。</li>\n</ul>\n<h2 id=\"HashSet集合\"><a href=\"#HashSet集合\" class=\"headerlink\" title=\"HashSet集合\"></a>HashSet集合</h2><ul>\n<li>HashSet是Set接口的一个实现类，它所储存的元素时不可重复且无序的。根据对象的哈希值来确定元素在集合中的储存位置，因此具有良好的存取和查找性能。</li>\n</ul>\n<h3 id=\"示例：-2\"><a href=\"#示例：-2\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.Set;\nimport java.util.HashSet;\npublic class TestSet{\n    public static void main(String args[]){\n        //生成HashSet对象并向上转型为Set\n        Set&lt;String&gt; set =new HashSet&lt;String&gt;();\n        //定义一个boolean型变量b1接受 isEmpty（）方法返回值\n        boolean b1 = set.isEmpty();\n        System.out.println(b1);\n        set.add(&quot;a&quot;);\n        set.add(&quot;b&quot;);\n        set.add(&quot;c&quot;);\n        set.add(&quot;d&quot;);\n        set.add(&quot;e&quot;);\n        set.add(&quot;f&quot;);\n\n        boolean b2 =set.isEmpty();\n        System.out.println(b2);\n\n        //调用size（）方法获取集合长度\n        int i =set.size();\n        System.out.println(&quot;初始状态set集合中元素的数目&quot; + i);\n\n        //调用remove（）方法移除对象d\n        set.remove(&quot;d&quot;);\n\n        int j = set.size();\n        System.out.println(&quot;处理之后set集合中元素的数目&quot; + j);\n    }\n}\n</code></pre>\n<h2 id=\"TreeSet集合\"><a href=\"#TreeSet集合\" class=\"headerlink\" title=\"TreeSet集合\"></a>TreeSet集合</h2><ul>\n<li>它内部采用自平衡点排序二叉树来储存元素，这样的结构保证TreeSet集合没有重复的元素，并且可以对元素进行排序。</li>\n</ul>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><ul>\n<li>二叉树是指每个节点最多有两个子节点的有序树，每个节点及其子节点组成的树称为子树，通常左侧的节点称为“左子树”，右侧的的子节点称为“右子树”。</li>\n</ul>\n<p><img src=\"http://i.imgur.com/TmqrdF9.png\" alt=\"\"></p>\n<h3 id=\"示例：-3\"><a href=\"#示例：-3\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.*;\npublic class Test01{\n    public static void main(String args[]){\n        //创建TreeSet集合\n        TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;();\n        ts.add(&quot;10&quot;);\n        ts.add(&quot;50&quot;);\n        ts.add(&quot;20&quot;);\n        ts.add(&quot;40&quot;);\n        ts.add(&quot;30&quot;);\n        //获取Iterator对象\n        Iterator it = ts.iterator();\n        while(it.hasNext()){\n            System.out.println(it.next());\n        }\n    }\n}\n</code></pre>\n<p>结果：<br><img src=\"http://i.imgur.com/Wl5KRxh.png\" alt=\"\"></p>\n<h2 id=\"列表（List）\"><a href=\"#列表（List）\" class=\"headerlink\" title=\"列表（List）\"></a>列表（List）</h2><ul>\n<li>集合中对象按照索引位置排序，即元素的存入和取出顺序一致，可以有重复对象。</li>\n</ul>\n<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><ul>\n<li>ArrayList的底层是使用一个数组来保存元素，当增加或删除指定位置的元素时，会创建新的数组，效率较低，因此不适合做大量的增删操作。但是这种数组的结构允许程序通过索引的方式来访问元素，因此使用ArryList集合查找元素很便捷。</li>\n</ul>\n<h3 id=\"示例：-4\"><a href=\"#示例：-4\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.List;\nimport java.util.ArrayList;\npublic class Test{\n    public static void main(String args[]){\n        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();\n        //向ArrayList中存入数据\n        arrayList.add(&quot;a&quot;);\n        arrayList.add(&quot;b&quot;);\n        arrayList.add(&quot;c&quot;);\n        arrayList.add(&quot;d&quot;);\n\n        //移除这个对象\n        arrayList.remove(2);\n\n        //从ArrayList中取数据\n        for(int i = 0; i &lt; arrayList.size(); i++){\n            String s = arrayList.get(i);\n            System.out.println(s);\n        }\n    }\n}\n</code></pre>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><ul>\n<li>内部维护了一个双向循环链表，链表中的每一个元素都使用引用的方式来记住它的前一个元素和后一个元素，插入一个新元素，只需修改元素之间的这种引用关系即可。</li>\n</ul>\n<h3 id=\"示例：-5\"><a href=\"#示例：-5\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.List;\nimport java.util.LinkedList;\npublic class Test01{\n    public static void main(String args[]){\n        //创建LinkedList集合\n        LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();\n            //向集合中添加元素\n            link.add(&quot;One&quot;);\n            link.add(&quot;Two&quot;);\n            link.add(&quot;Three&quot;);\n            link.add(&quot;Four&quot;);\n            //取出并打印该集合中的所有元素\n            System.out.println(link.toString());\n            //向指定位置插入元素\n            link.add(2,&quot;插个队&quot;);\n            System.out.println(link);\n            //移除指定位置的元素\n            link.remove(2);\n            System.out.println(link);\n    }\n}\n</code></pre>\n<h2 id=\"映射（Map）\"><a href=\"#映射（Map）\" class=\"headerlink\" title=\"映射（Map）\"></a>映射（Map）</h2><ul>\n<li>集合中的每一个元素包含一个键对象和一个值对象，键不可重复，值可以重复。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">键对象</th>\n<th style=\"text-align:center\">值对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">key1</td>\n<td style=\"text-align:center\">value1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key2</td>\n<td style=\"text-align:center\">value2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key3</td>\n<td style=\"text-align:center\">value3</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Map接口中的方法\"><a href=\"#Map接口中的方法\" class=\"headerlink\" title=\"Map接口中的方法\"></a>Map接口中的方法</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>void clear()</td>\n<td>从此映射中移除所有映射关系（可选操作）。</td>\n</tr>\n<tr>\n<td>boolean containsKey（Object Key）</td>\n<td>如果此映射包含指定键的映射关系，则返回 true。</td>\n</tr>\n<tr>\n<td>boolean equals（Object o）</td>\n<td>比较指定的对象与此映射是否相等。</td>\n</tr>\n<tr>\n<td>get（Object key）</td>\n<td>返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回null。</td>\n</tr>\n<tr>\n<td>boolean isEmpty（）</td>\n<td>如果此映射未包含键-值映射关系，则返回 true。</td>\n</tr>\n<tr>\n<td>put（）</td>\n<td>将指定的值与此映射中的指定键关联。</td>\n</tr>\n<tr>\n<td>remove（Object key）</td>\n<td>如果存在一个键的映射关系，则将其从此映射中移除。</td>\n</tr>\n<tr>\n<td>int size（）</td>\n<td>返回此Map中的键值对数目。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Map与HashMap\"><a href=\"#Map与HashMap\" class=\"headerlink\" title=\"Map与HashMap\"></a>Map与HashMap</h2><h3 id=\"示例：-6\"><a href=\"#示例：-6\" class=\"headerlink\" title=\"示例：\"></a>示例：</h3><pre><code class=\"java\">import java.util.Map;\nimport java.util.HashMap;\npublic class Test{\n    public static void main(String args[]){\n        //生成HashMap对象并向上转型为Map\n        Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();\n        //向map中添加键值对\n        map.put(&quot;1&quot;,&quot;One&quot;);\n        map.put(&quot;2&quot;,&quot;Two&quot;);\n        map.put(&quot;3&quot;,&quot;Three&quot;);\n        //调用get（Object key）方法，返回指定键所映射的值；\n        //如果对于该键来说，此映射不包含任何映射关系，则返回 null。\n        String s = map.get(&quot;2&quot;);\n        System.out.println(s);\n    }\n}\n</code></pre>\n"},{"title":"编译原理","abbrlink":"118b8ca3","data":"2017/9/23","_content":"> 尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门**编译语言**。任何 JavaScript 代码片段在执行前都要进行编译（通常就在执行前）。但与传统的编译语言不同，它**不是提前编译**的，编译结果也**不能在分布式系统中进行移植**。\n\n## 编译三步骤\n\n**1.** 分词/词法分析（Tokenizing/Lexing）\n将字符串分解成编程语言所能识别的代码块，这些代码块被称为**词法单元（token）**。\n\n如果词法单元生成器在判断一个字符是一个独立的词法单元还是其他词法单元的一部分时（是否依赖于其他词法单元），调用的是**有状态**的解析规则，那么这个过程就被称为**词法分析**。\n\n**2.** 解析/语法分析（Parsing）\n将**词法单元流（数组）**转换成一个逐级嵌套结构的树“**抽象语法树”**（Abstract Syntax Tree，AST）。拥有一个顶级节点，以及连续的子节点。类似于 DOM树？\n\n**3.** 代码生成\n将抽象语法树转换为引擎可识别执行的代码。例如：var a = 2；\n第一步：创建一个叫做 a 的变量（分配内存，确定储存地址空间等）。\n第二步：运行时引擎会在作用域中查找该变量（LHS），找到之后将 2 这个值储存到 a 中。","source":"_posts/编译原理.md","raw":"---\ntitle: 编译原理\ntags: YouDon'tKnowJavaScript\nabbrlink: 118b8ca3\ndata: 2017/9/23\n---\n> 尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门**编译语言**。任何 JavaScript 代码片段在执行前都要进行编译（通常就在执行前）。但与传统的编译语言不同，它**不是提前编译**的，编译结果也**不能在分布式系统中进行移植**。\n\n## 编译三步骤\n\n**1.** 分词/词法分析（Tokenizing/Lexing）\n将字符串分解成编程语言所能识别的代码块，这些代码块被称为**词法单元（token）**。\n\n如果词法单元生成器在判断一个字符是一个独立的词法单元还是其他词法单元的一部分时（是否依赖于其他词法单元），调用的是**有状态**的解析规则，那么这个过程就被称为**词法分析**。\n\n**2.** 解析/语法分析（Parsing）\n将**词法单元流（数组）**转换成一个逐级嵌套结构的树“**抽象语法树”**（Abstract Syntax Tree，AST）。拥有一个顶级节点，以及连续的子节点。类似于 DOM树？\n\n**3.** 代码生成\n将抽象语法树转换为引擎可识别执行的代码。例如：var a = 2；\n第一步：创建一个叫做 a 的变量（分配内存，确定储存地址空间等）。\n第二步：运行时引擎会在作用域中查找该变量（LHS），找到之后将 2 这个值储存到 a 中。","slug":"编译原理","published":1,"date":"2017-11-12T02:11:15.164Z","updated":"2017-11-12T02:11:15.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xmk0053dfbx2bn5llw5","content":"<blockquote>\n<p>尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门<strong>编译语言</strong>。任何 JavaScript 代码片段在执行前都要进行编译（通常就在执行前）。但与传统的编译语言不同，它<strong>不是提前编译</strong>的，编译结果也<strong>不能在分布式系统中进行移植</strong>。</p>\n</blockquote>\n<h2 id=\"编译三步骤\"><a href=\"#编译三步骤\" class=\"headerlink\" title=\"编译三步骤\"></a>编译三步骤</h2><p><strong>1.</strong> 分词/词法分析（Tokenizing/Lexing）<br>将字符串分解成编程语言所能识别的代码块，这些代码块被称为<strong>词法单元（token）</strong>。</p>\n<p>如果词法单元生成器在判断一个字符是一个独立的词法单元还是其他词法单元的一部分时（是否依赖于其他词法单元），调用的是<strong>有状态</strong>的解析规则，那么这个过程就被称为<strong>词法分析</strong>。</p>\n<p><strong>2.</strong> 解析/语法分析（Parsing）<br>将<strong>词法单元流（数组）</strong>转换成一个逐级嵌套结构的树“<strong>抽象语法树”</strong>（Abstract Syntax Tree，AST）。拥有一个顶级节点，以及连续的子节点。类似于 DOM树？</p>\n<p><strong>3.</strong> 代码生成<br>将抽象语法树转换为引擎可识别执行的代码。例如：var a = 2；<br>第一步：创建一个叫做 a 的变量（分配内存，确定储存地址空间等）。<br>第二步：运行时引擎会在作用域中查找该变量（LHS），找到之后将 2 这个值储存到 a 中。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门<strong>编译语言</strong>。任何 JavaScript 代码片段在执行前都要进行编译（通常就在执行前）。但与传统的编译语言不同，它<strong>不是提前编译</strong>的，编译结果也<strong>不能在分布式系统中进行移植</strong>。</p>\n</blockquote>\n<h2 id=\"编译三步骤\"><a href=\"#编译三步骤\" class=\"headerlink\" title=\"编译三步骤\"></a>编译三步骤</h2><p><strong>1.</strong> 分词/词法分析（Tokenizing/Lexing）<br>将字符串分解成编程语言所能识别的代码块，这些代码块被称为<strong>词法单元（token）</strong>。</p>\n<p>如果词法单元生成器在判断一个字符是一个独立的词法单元还是其他词法单元的一部分时（是否依赖于其他词法单元），调用的是<strong>有状态</strong>的解析规则，那么这个过程就被称为<strong>词法分析</strong>。</p>\n<p><strong>2.</strong> 解析/语法分析（Parsing）<br>将<strong>词法单元流（数组）</strong>转换成一个逐级嵌套结构的树“<strong>抽象语法树”</strong>（Abstract Syntax Tree，AST）。拥有一个顶级节点，以及连续的子节点。类似于 DOM树？</p>\n<p><strong>3.</strong> 代码生成<br>将抽象语法树转换为引擎可识别执行的代码。例如：var a = 2；<br>第一步：创建一个叫做 a 的变量（分配内存，确定储存地址空间等）。<br>第二步：运行时引擎会在作用域中查找该变量（LHS），找到之后将 2 这个值储存到 a 中。</p>\n"},{"title":"获取键盘输入","date":"2017-06-15T16:00:00.000Z","abbrlink":"828295ba","_content":"\n```java\n/**\nJava获取键盘输入值\n*/\npublic static void main(String args[]){\n  Scanner sc = new Scanner(Systen.in);\n  String s = sc.nextLine(); //接受字符和字符串类型的输入\n  int age = sc.nextInt();\n  float salary = sc.nextFloat();\n}\n```\n\n#### 简单运行、退出方法\n\n```java\nimport java.util.Scanner;\npublic class Test {\n\tpublic static void main(String args[]) {\n\t\tint t = 1;\nitcast :\n\t\twhile(t > 0) {\n\t\t\tSystem.out.println(\"1.运行：\\n\" + \"2.退出：\");\n\t\t\tScanner sc1 = new Scanner(System.in);\n\t\t\tint i = sc1.nextInt();\n\t\t\tswitch(i) {\n\t\t\tcase 1:\n\t\t\t\t//这里输入具体的计算程序\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tbreak itcast;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"输入有误，请重新输入\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n","source":"_posts/获取键盘输入的方法.md","raw":"---\ntitle: 获取键盘输入\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 828295ba\n\n---\n\n```java\n/**\nJava获取键盘输入值\n*/\npublic static void main(String args[]){\n  Scanner sc = new Scanner(Systen.in);\n  String s = sc.nextLine(); //接受字符和字符串类型的输入\n  int age = sc.nextInt();\n  float salary = sc.nextFloat();\n}\n```\n\n#### 简单运行、退出方法\n\n```java\nimport java.util.Scanner;\npublic class Test {\n\tpublic static void main(String args[]) {\n\t\tint t = 1;\nitcast :\n\t\twhile(t > 0) {\n\t\t\tSystem.out.println(\"1.运行：\\n\" + \"2.退出：\");\n\t\t\tScanner sc1 = new Scanner(System.in);\n\t\t\tint i = sc1.nextInt();\n\t\t\tswitch(i) {\n\t\t\tcase 1:\n\t\t\t\t//这里输入具体的计算程序\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tbreak itcast;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"输入有误，请重新输入\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n","slug":"获取键盘输入的方法","published":1,"updated":"2017-11-12T02:15:13.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xmn0056dfbxxautdtiy","content":"<pre><code class=\"java\">/**\nJava获取键盘输入值\n*/\npublic static void main(String args[]){\n  Scanner sc = new Scanner(Systen.in);\n  String s = sc.nextLine(); //接受字符和字符串类型的输入\n  int age = sc.nextInt();\n  float salary = sc.nextFloat();\n}\n</code></pre>\n<h4 id=\"简单运行、退出方法\"><a href=\"#简单运行、退出方法\" class=\"headerlink\" title=\"简单运行、退出方法\"></a>简单运行、退出方法</h4><pre><code class=\"java\">import java.util.Scanner;\npublic class Test {\n    public static void main(String args[]) {\n        int t = 1;\nitcast :\n        while(t &gt; 0) {\n            System.out.println(&quot;1.运行：\\n&quot; + &quot;2.退出：&quot;);\n            Scanner sc1 = new Scanner(System.in);\n            int i = sc1.nextInt();\n            switch(i) {\n            case 1:\n                //这里输入具体的计算程序\n                break;\n            case 2:\n                break itcast;\n            default:\n                System.out.println(&quot;输入有误，请重新输入&quot;);\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code class=\"java\">/**\nJava获取键盘输入值\n*/\npublic static void main(String args[]){\n  Scanner sc = new Scanner(Systen.in);\n  String s = sc.nextLine(); //接受字符和字符串类型的输入\n  int age = sc.nextInt();\n  float salary = sc.nextFloat();\n}\n</code></pre>\n<h4 id=\"简单运行、退出方法\"><a href=\"#简单运行、退出方法\" class=\"headerlink\" title=\"简单运行、退出方法\"></a>简单运行、退出方法</h4><pre><code class=\"java\">import java.util.Scanner;\npublic class Test {\n    public static void main(String args[]) {\n        int t = 1;\nitcast :\n        while(t &gt; 0) {\n            System.out.println(&quot;1.运行：\\n&quot; + &quot;2.退出：&quot;);\n            Scanner sc1 = new Scanner(System.in);\n            int i = sc1.nextInt();\n            switch(i) {\n            case 1:\n                //这里输入具体的计算程序\n                break;\n            case 2:\n                break itcast;\n            default:\n                System.out.println(&quot;输入有误，请重新输入&quot;);\n                break;\n            }\n        }\n    }\n}\n</code></pre>\n"},{"title":"结构语句","date":"2017-06-15T16:00:00.000Z","abbrlink":"1c7ee7be","_content":"\n## 选择结构语句\n\n### if条件语句\n\n> 当判断条件1结果为true时，执行语句1，为false时，执行语句2。当判断条件1,2都不满足true时，执行语句3。\n\n例如：\n```java\nif (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n```\n\n### 三元运算 ###\n> 一种类似于if-else语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。\n> 当判断条件成立时结果为表达式1的值，否则表达式2的值。\n```java\n判断条件 ? 表达式 1 : 表达式 2\n```\n\n例如：求取两个数x，y中较大的值。\n```java\n//if-else实现方法\nint x, y, max;\nif(x>y){\n\tmax = x;\n}\nelse{\n\tmax = y;\n}\n\n//三元运算实现\nint x, y, max;\nmax = x > y ? x : y;\n\n```\n\n### switch语句\n\n> 在switch语句中使用switch关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，\n> 当表达式的值和某个目标值匹配时，会执行对应case下的语句。\n\n例如：\n```java\nswitch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n```\n\n## 循环结构语句\n\n### while循环语句\n\n> 循环条件判断为true时，执行语句循环执行，直到循环条件为false。\n\n例如：\n```java\nwhile(循环条件){\n\t执行语句\n}\n```\n\n### do...while循环语句\n\n> 循环体会无条件执行一次，然后根据循环条件决定是否继续执行。\n\n例如：\n```java\ndo{\n  执行语句\n}\nwhile(循环条件);\n```\n\n### for循环语句\n\n> 一般用在循环次数已知的情况下，循环条件判断为true执行顺序①→②→④→③\n\n例如：\n```java\nfor(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n```\n\n```java\n/**\n * Created by Roojay on 2017/4/7.\n * 利用嵌套循环打印一个正三角形。\n */\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i <= 5; i++){\n            for(k = 0; k < 5 - i; k++){\n                System.out.print(\" \");\n            }\n            for(j = 1; j <= i; j++){\n                System.out.print(\"* \");\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n```\n\n### 跳转语句\n\n#### break语句\n\n> 当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构。\n> 当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。\n> 当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，\n> 需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。\n\n#### continue语句\n\n> continue语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。\n> 也可以使用标记结束外循环。","source":"_posts/结构语句.md","raw":"---\ntitle: 结构语句\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 1c7ee7be\n---\n\n## 选择结构语句\n\n### if条件语句\n\n> 当判断条件1结果为true时，执行语句1，为false时，执行语句2。当判断条件1,2都不满足true时，执行语句3。\n\n例如：\n```java\nif (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n```\n\n### 三元运算 ###\n> 一种类似于if-else语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。\n> 当判断条件成立时结果为表达式1的值，否则表达式2的值。\n```java\n判断条件 ? 表达式 1 : 表达式 2\n```\n\n例如：求取两个数x，y中较大的值。\n```java\n//if-else实现方法\nint x, y, max;\nif(x>y){\n\tmax = x;\n}\nelse{\n\tmax = y;\n}\n\n//三元运算实现\nint x, y, max;\nmax = x > y ? x : y;\n\n```\n\n### switch语句\n\n> 在switch语句中使用switch关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，\n> 当表达式的值和某个目标值匹配时，会执行对应case下的语句。\n\n例如：\n```java\nswitch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n```\n\n## 循环结构语句\n\n### while循环语句\n\n> 循环条件判断为true时，执行语句循环执行，直到循环条件为false。\n\n例如：\n```java\nwhile(循环条件){\n\t执行语句\n}\n```\n\n### do...while循环语句\n\n> 循环体会无条件执行一次，然后根据循环条件决定是否继续执行。\n\n例如：\n```java\ndo{\n  执行语句\n}\nwhile(循环条件);\n```\n\n### for循环语句\n\n> 一般用在循环次数已知的情况下，循环条件判断为true执行顺序①→②→④→③\n\n例如：\n```java\nfor(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n```\n\n```java\n/**\n * Created by Roojay on 2017/4/7.\n * 利用嵌套循环打印一个正三角形。\n */\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i <= 5; i++){\n            for(k = 0; k < 5 - i; k++){\n                System.out.print(\" \");\n            }\n            for(j = 1; j <= i; j++){\n                System.out.print(\"* \");\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n```\n\n### 跳转语句\n\n#### break语句\n\n> 当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构。\n> 当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。\n> 当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，\n> 需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。\n\n#### continue语句\n\n> continue语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。\n> 也可以使用标记结束外循环。","slug":"结构语句","published":1,"updated":"2017-11-12T02:34:26.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xmu005adfbx8c2s0fve","content":"<h2 id=\"选择结构语句\"><a href=\"#选择结构语句\" class=\"headerlink\" title=\"选择结构语句\"></a>选择结构语句</h2><h3 id=\"if条件语句\"><a href=\"#if条件语句\" class=\"headerlink\" title=\"if条件语句\"></a>if条件语句</h3><blockquote>\n<p>当判断条件1结果为true时，执行语句1，为false时，执行语句2。当判断条件1,2都不满足true时，执行语句3。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">if (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n</code></pre>\n<h3 id=\"三元运算\"><a href=\"#三元运算\" class=\"headerlink\" title=\"三元运算\"></a>三元运算</h3><blockquote>\n<p>一种类似于if-else语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。<br>当判断条件成立时结果为表达式1的值，否则表达式2的值。</p>\n<pre><code class=\"java\">判断条件 ? 表达式 1 : 表达式 2\n</code></pre>\n</blockquote>\n<p>例如：求取两个数x，y中较大的值。</p>\n<pre><code class=\"java\">//if-else实现方法\nint x, y, max;\nif(x&gt;y){\n    max = x;\n}\nelse{\n    max = y;\n}\n\n//三元运算实现\nint x, y, max;\nmax = x &gt; y ? x : y;\n</code></pre>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><blockquote>\n<p>在switch语句中使用switch关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，<br>当表达式的值和某个目标值匹配时，会执行对应case下的语句。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">switch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n</code></pre>\n<h2 id=\"循环结构语句\"><a href=\"#循环结构语句\" class=\"headerlink\" title=\"循环结构语句\"></a>循环结构语句</h2><h3 id=\"while循环语句\"><a href=\"#while循环语句\" class=\"headerlink\" title=\"while循环语句\"></a>while循环语句</h3><blockquote>\n<p>循环条件判断为true时，执行语句循环执行，直到循环条件为false。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">while(循环条件){\n    执行语句\n}\n</code></pre>\n<h3 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h3><blockquote>\n<p>循环体会无条件执行一次，然后根据循环条件决定是否继续执行。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">do{\n  执行语句\n}\nwhile(循环条件);\n</code></pre>\n<h3 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h3><blockquote>\n<p>一般用在循环次数已知的情况下，循环条件判断为true执行顺序①→②→④→③</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">for(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n</code></pre>\n<pre><code class=\"java\">/**\n * Created by Roojay on 2017/4/7.\n * 利用嵌套循环打印一个正三角形。\n */\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i &lt;= 5; i++){\n            for(k = 0; k &lt; 5 - i; k++){\n                System.out.print(&quot; &quot;);\n            }\n            for(j = 1; j &lt;= i; j++){\n                System.out.print(&quot;* &quot;);\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n</code></pre>\n<h3 id=\"跳转语句\"><a href=\"#跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h3><h4 id=\"break语句\"><a href=\"#break语句\" class=\"headerlink\" title=\"break语句\"></a>break语句</h4><blockquote>\n<p>当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构。<br>当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。<br>当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，<br>需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。</p>\n</blockquote>\n<h4 id=\"continue语句\"><a href=\"#continue语句\" class=\"headerlink\" title=\"continue语句\"></a>continue语句</h4><blockquote>\n<p>continue语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。<br>也可以使用标记结束外循环。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"选择结构语句\"><a href=\"#选择结构语句\" class=\"headerlink\" title=\"选择结构语句\"></a>选择结构语句</h2><h3 id=\"if条件语句\"><a href=\"#if条件语句\" class=\"headerlink\" title=\"if条件语句\"></a>if条件语句</h3><blockquote>\n<p>当判断条件1结果为true时，执行语句1，为false时，执行语句2。当判断条件1,2都不满足true时，执行语句3。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">if (判断条件1){\n  执行语句1\n}\nelse if(判断条件2){\n  执行语句2\n}\nelse{\n  执行语句3\n}\n</code></pre>\n<h3 id=\"三元运算\"><a href=\"#三元运算\" class=\"headerlink\" title=\"三元运算\"></a>三元运算</h3><blockquote>\n<p>一种类似于if-else语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。<br>当判断条件成立时结果为表达式1的值，否则表达式2的值。</p>\n<pre><code class=\"java\">判断条件 ? 表达式 1 : 表达式 2\n</code></pre>\n</blockquote>\n<p>例如：求取两个数x，y中较大的值。</p>\n<pre><code class=\"java\">//if-else实现方法\nint x, y, max;\nif(x&gt;y){\n    max = x;\n}\nelse{\n    max = y;\n}\n\n//三元运算实现\nint x, y, max;\nmax = x &gt; y ? x : y;\n</code></pre>\n<h3 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h3><blockquote>\n<p>在switch语句中使用switch关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，<br>当表达式的值和某个目标值匹配时，会执行对应case下的语句。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">switch(表达式){\n  case 1:\n    执行语句1;\n       break; //break终止case并跳出switch循环\n  case 2:\n    执行语句2;\n     break;\n  case 3:\n    执行语句3；\n      break;\n  default: //default处理和前面的case都不匹配的值\n    执行语句4;\n      break;\n}\n</code></pre>\n<h2 id=\"循环结构语句\"><a href=\"#循环结构语句\" class=\"headerlink\" title=\"循环结构语句\"></a>循环结构语句</h2><h3 id=\"while循环语句\"><a href=\"#while循环语句\" class=\"headerlink\" title=\"while循环语句\"></a>while循环语句</h3><blockquote>\n<p>循环条件判断为true时，执行语句循环执行，直到循环条件为false。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">while(循环条件){\n    执行语句\n}\n</code></pre>\n<h3 id=\"do…while循环语句\"><a href=\"#do…while循环语句\" class=\"headerlink\" title=\"do…while循环语句\"></a>do…while循环语句</h3><blockquote>\n<p>循环体会无条件执行一次，然后根据循环条件决定是否继续执行。</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">do{\n  执行语句\n}\nwhile(循环条件);\n</code></pre>\n<h3 id=\"for循环语句\"><a href=\"#for循环语句\" class=\"headerlink\" title=\"for循环语句\"></a>for循环语句</h3><blockquote>\n<p>一般用在循环次数已知的情况下，循环条件判断为true执行顺序①→②→④→③</p>\n</blockquote>\n<p>例如：</p>\n<pre><code class=\"java\">for(初始化表达式①;循环条件②;操作表达式③){\n  执行语句④\n}\n</code></pre>\n<pre><code class=\"java\">/**\n * Created by Roojay on 2017/4/7.\n * 利用嵌套循环打印一个正三角形。\n */\npublic class Test1 {\n    public static void main(String args[]){\n        int i, j, k;\n        for(i = 1; i &lt;= 5; i++){\n            for(k = 0; k &lt; 5 - i; k++){\n                System.out.print(&quot; &quot;);\n            }\n            for(j = 1; j &lt;= i; j++){\n                System.out.print(&quot;* &quot;);\n            }\n\n            System.out.println();\n        }\n\n    }\n}\n</code></pre>\n<h3 id=\"跳转语句\"><a href=\"#跳转语句\" class=\"headerlink\" title=\"跳转语句\"></a>跳转语句</h3><h4 id=\"break语句\"><a href=\"#break语句\" class=\"headerlink\" title=\"break语句\"></a>break语句</h4><blockquote>\n<p>当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构。<br>当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。<br>当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，<br>需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。</p>\n</blockquote>\n<h4 id=\"continue语句\"><a href=\"#continue语句\" class=\"headerlink\" title=\"continue语句\"></a>continue语句</h4><blockquote>\n<p>continue语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。<br>也可以使用标记结束外循环。</p>\n</blockquote>\n"},{"title":"进制快速转换","abbrlink":"8b41c91c","data":"2017/9/16","_content":"## 十进制转其他进制\n\n```javascript\nconst i = 10;\ni.toString(2);  // 2 进制 1010\ni.toString(8);  // 8 进制 12\ni.toString(16);  // 16 进制 a\ni.toString(32);  // 32 进制 a\n\n```\n\n## 其他进制转十进制\n\n```javascript\nparsetInt(x, 2); // 2 进制转 10进制\nparsetInt(x, 8); // 8 进制转 10 进制\nparsetInt(x, 16); // 16 进制转 10 进制\n\n```\n\n## 非十进制转十进制\n\n先转化为10进制， 然后再利用toString(参数)， 转化成不同的进制。\n\n```javascript\nparsetInt(x, 2).toString(8); // 2 进制转 8进制\n```","source":"_posts/进制快速转换.md","raw":"---\ntitle: 进制快速转换\ntags: JavaScript\ncategories: JavaScript\nabbrlink: 8b41c91c\ndata: 2017/9/16\n---\n## 十进制转其他进制\n\n```javascript\nconst i = 10;\ni.toString(2);  // 2 进制 1010\ni.toString(8);  // 8 进制 12\ni.toString(16);  // 16 进制 a\ni.toString(32);  // 32 进制 a\n\n```\n\n## 其他进制转十进制\n\n```javascript\nparsetInt(x, 2); // 2 进制转 10进制\nparsetInt(x, 8); // 8 进制转 10 进制\nparsetInt(x, 16); // 16 进制转 10 进制\n\n```\n\n## 非十进制转十进制\n\n先转化为10进制， 然后再利用toString(参数)， 转化成不同的进制。\n\n```javascript\nparsetInt(x, 2).toString(8); // 2 进制转 8进制\n```","slug":"进制快速转换","published":1,"date":"2017-11-12T02:32:34.937Z","updated":"2017-11-12T02:32:34.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xmw005ddfbxy6ciex21","content":"<h2 id=\"十进制转其他进制\"><a href=\"#十进制转其他进制\" class=\"headerlink\" title=\"十进制转其他进制\"></a>十进制转其他进制</h2><pre><code class=\"javascript\">const i = 10;\ni.toString(2);  // 2 进制 1010\ni.toString(8);  // 8 进制 12\ni.toString(16);  // 16 进制 a\ni.toString(32);  // 32 进制 a\n</code></pre>\n<h2 id=\"其他进制转十进制\"><a href=\"#其他进制转十进制\" class=\"headerlink\" title=\"其他进制转十进制\"></a>其他进制转十进制</h2><pre><code class=\"javascript\">parsetInt(x, 2); // 2 进制转 10进制\nparsetInt(x, 8); // 8 进制转 10 进制\nparsetInt(x, 16); // 16 进制转 10 进制\n</code></pre>\n<h2 id=\"非十进制转十进制\"><a href=\"#非十进制转十进制\" class=\"headerlink\" title=\"非十进制转十进制\"></a>非十进制转十进制</h2><p>先转化为10进制， 然后再利用toString(参数)， 转化成不同的进制。</p>\n<pre><code class=\"javascript\">parsetInt(x, 2).toString(8); // 2 进制转 8进制\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"十进制转其他进制\"><a href=\"#十进制转其他进制\" class=\"headerlink\" title=\"十进制转其他进制\"></a>十进制转其他进制</h2><pre><code class=\"javascript\">const i = 10;\ni.toString(2);  // 2 进制 1010\ni.toString(8);  // 8 进制 12\ni.toString(16);  // 16 进制 a\ni.toString(32);  // 32 进制 a\n</code></pre>\n<h2 id=\"其他进制转十进制\"><a href=\"#其他进制转十进制\" class=\"headerlink\" title=\"其他进制转十进制\"></a>其他进制转十进制</h2><pre><code class=\"javascript\">parsetInt(x, 2); // 2 进制转 10进制\nparsetInt(x, 8); // 8 进制转 10 进制\nparsetInt(x, 16); // 16 进制转 10 进制\n</code></pre>\n<h2 id=\"非十进制转十进制\"><a href=\"#非十进制转十进制\" class=\"headerlink\" title=\"非十进制转十进制\"></a>非十进制转十进制</h2><p>先转化为10进制， 然后再利用toString(参数)， 转化成不同的进制。</p>\n<pre><code class=\"javascript\">parsetInt(x, 2).toString(8); // 2 进制转 8进制\n</code></pre>\n"},{"title":"css基础","abbrlink":"eda1a9a9","data":"2017/9/16","_content":"\n## CSS 导入\n\n> 在 HTML 中引入 CSS 的方法主要有四种，它们分别是行内式、内嵌式、链接式和导入式。\n\n1. 行内式\n* 在标记的 style 属性中设定 CSS 样式。\n\n```html\n     <p style=color:white; background-color:blue;>\n     Tihs is a test text.\n     </p>\n```\n\n2. 内嵌式\n\n* 将 CSS 样式集中写在网页的`<head></head>`中的`<style></style>`标签对中。\n\n* 缺点是对于一个包含很多网页的网站，在每个网页中使用嵌入式，进行修改样式时非常麻烦。单一网页可以考虑使用嵌入式。\n\n```html\n     <head>\n       <style type=\"text/css\">\n       p {\n         color:red;\n       }\n       </style>\n     </head>\n```\n\n3. 导入式\n\n* 使用 CSS 的规则将外部CSS文件将一个独立的`.css`文件引入 HTML 文件中，`<style>`标记写在`<head>`标记中。\n\n```html\n   <style type=\"text/css\">\n   \t@import\"mystyle.css'\n   </style>\n```\n\n4. 链接式\n\n* 最常用的的一种方式。\n\n```html\n   <head>\n     <link rel=\"stylesheet\" href=\"src/test.css\" type=\"text/css\">\n   </head>\n```\n## margin\n\n> margin 属性为给定元素设置所有四个（上下左右）方向的外边距属性。四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。指定的外边距允许为负数。\n\n| 语法                          | 值       | 例子                    | 含义                              |\n| ----------------------------- | -------- | ----------------------- | --------------------------------- |\n| margin: style                 | 单值语法 | margin: 1em;            | 指定四周外边距都为1em             |\n| margin: vertical horizontal   | 二值语法 | margin: 5% auto;        | 上下为5%，左右为auto              |\n| margin: top horizontal bottom | 三值语法 | margin: 1em auto 2em;   | 上为1em，左右为auto，下为2em      |\n| margin: top right bottom left | 四值语法 | margin: 2px 1em 0 auto; | 上为2px，右为1em，下为0，左为auto |\n\n## 选择符\n\n> 选择符用于定位我们想要样式化的网页 HTML 元素,可以选择一个或多个需要添加样式的元素。\n\n| 选择符      | 选择内容                                   | 示例      |\n| ----------- | ------------------------------------------ | --------- |\n| 元素 选择符 | 标签内所有元素                             | p         |\n| ID 选择符   | 指定ID的元素                               | #my-id    |\n| Clss 选择符 | 指定Class的元素                            | .my-class |\n| 属性 选择符 | 拥有指定属性的元素                         | img[src]  |\n| 伪类 选择符 | 指定的元素，但是需要在特殊的状态，比如悬停 | a:hover   |\n\n### 简单选择器（Simple selectors）\n\n> 通过`元素类型`、`class`或 `id` 匹配一个或多个元素。\n\n### 属性选择器（Attribute selectors）\n\n> 通过`属性/属性值`匹配一个或多个元素。\n\n* [attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。\n* [attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。\n* [attr~=val]：该选择器仅选择 attr 属性的值（以空格间隔出多个值）中有包含 val 值的所有元素，比如位于被空格分隔的多个类（class）中的一个类。\n* [attr|=val] : 选择attr属性的值以val（包括val）或val-开头的元素。\n* [attr^=val] : 选择attr属性的值以val开头（包括val）的元素。\n* [attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。\n* [attr*=val] : 选择attr属性的值中包含字符串val的元素。\n\n### 伪类（Pseudo-classes）\n\n> 一个 CSS  伪类（pseudo-class） 是一个以冒号(:)作为前缀的关键字，当元素需要在特定状态下的设置表现样式时，往元素的选择器后面加上对应的伪类（pseudo-class）。\n> 例如：页面上有一个链接， 有四种状态：\n\n1. 未点击状态显示蓝色：\n\n```css\na:link { color: blue; }\n```\n\n2. 已点击状态显示紫色：\n\n```css\na:visited { color: purple; }\n```\n\n3. 鼠标悬停状态显示红色：\n\n```css\na:hover { color: red;  }\n```\n\n4. 鼠标点击状态显示绿色：\n\n```css\na:active { color: green; }\n\n```\n\n多个状态同时设置，按照以上先后顺序排列。\n\n### 伪元素（Pseudo-elements）\n\n> 以冒号(::)作为前缀的关键字，添加到选择器后面选择某个元素的某个部分。例如每个段落的第一个字，或者某个元素之前生成的内容。\n\n* `::after`在已选中元素尾部创建最后一个子元素，通常会配合 content 属性来为该元素添加装饰内容。\n\n```css\n/*在链接后面加上一个箭头←*/\na::after { content: \"←\";}\n```\n\n* `::before` 在已选中元素头部创建第一个子元素。\n\n```css\n/*在链接前面加上一个箭头→*/\na::after { content: \"→\";}\n```\n\n* `::first-letter`会选中一整块文字第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格） 。\n\n```css\n/* 使每段开头的第一个字母变红变大 */\np::first-letter {  /* 使用:first来兼容IE8- */\n  color: red;\n  font-size: 130%;\n}\n```\n\n* `::first-line`将样式只应用于一个元素的首行。首行文本的数量取决于元素的宽，document 的宽和文本的字号。\n* `::first-line` 伪元素**只作用于块容器中**,所以`::first-line`伪元素只能在一个display值为block, inline-block, table-cell 或者 table-caption中有用.。在其他的类型中`::first-line`是不起作用的。\n* `::selection`应用于文档中被用户选中高亮的部分（比如使用鼠标或其他选择设备选中的部分）,ecko 引擎需要加前缀（-moz）。\n\n```css\n/* 将被选中的任何文本渲染为金黄色和红色背景 */\n::-moz-selection {\n  color: gold;\n  background: red;\n}\n::selection {\n  color: gold;\n  background: red;\n}\n```\n\n### 组合器（Combinators）\n\n> 以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，只选择 divs 的直系子节点的段落，或者直接跟在 headings 后面的段落。\n\n| 组合器 | 选择值                                                                                                  |\n| ------ | ------------------------------------------------------------------------------------------------------- |\n| A,B    | 匹配同时满足A和B的任意元素                                                                              |\n| A B    | 匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）                           |\n| A > B  | 匹配任意元素，满足条件：B是A的直接子节点                                                                |\n| A + B  | 匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）                    |\n| A ~ B  | 匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A） |\n\n### 多用选择器（Multiple selectors）\n\n> 以逗号分隔开的多个选择器放在一个 CSS 规则下面， 以将一组声明应用于由这些选择器选择的所有元素。\n\n## 盒模型\n\n> 网页上的所有的元素都包含在一个个盒子中。在 CSS 里面设置它们的尺寸，颜色，位置等等。\n\n* 内边距（padding）： 围绕着内容的空间（比如围绕段落的空间）\n* 边框（border）：  紧接着内边距的实体线段\n* 外边距(margin) ：  围绕元素外部的空间\n\n ![box](src/box-model.png)\n\n* width：  属于一个元素的宽\n* background-color： 元素内容和内边距之后的颜色\n* color： 元素内容的颜色（通常是文本）\n* text-shadow： 为元素内的文本设置阴影\n* display：  设置元素的显示模式\n* position：fixed  位置保持不动\n\n## 单位长度\n\n### px em\n\n* px ：像素 (px) 是一种绝对单位（ absolute units）， 因为无论其他相关的设置怎么变化，像素指定的值是不会变化的。\n* em ：相对长度单位，相对于当前文本内的字体尺寸。\n\n### px 与em转换\n\n任意浏览器的默认字体高度为 16px（16像素），所有未经调整的浏览器都符合: 1em=16px，那么10px=0.625em。<br>\n为了简化font-size的换算，可以在 css 中的 body 选择器中声明 `font-size: 62.5%`，这时`10px=1em`。\n\n## 阴影\n\n> box-shadow 属性向元素添加一个或多个阴影。\n\n```css\nbox-shadow: h-shadow v-shadow blur spread color inset;\n```\n\n| 值       | 含义                                   |\n| -------- | -------------------------------------- |\n| h-shadow | 必需。水平阴影。允许负值。             |\n| v-shadow | 必需。垂直阴影。允许负值。             |\n| blur     | 可选。模糊距离。                       |\n| spread   | 可选。阴影尺寸。                       |\n| color    | 可选。阴影颜色。                       |\n| inset    | 可选。将外部阴影(outset)改为内部阴影。 |\n\n## 布局\n\n> 一个好的布局，能将网页内容更完美的展示出来。\n\n### display 元素显示\n\n> CSS 中最重要的控制布局的属性，用来设置一个元素应该如何显示，每一个元素都有一个默认的`display`值。\n> 对于大多数元素它们的默认值通常是`block`或`inline`。\n\n* block：块级元素。块级元素通常会占用容器的全部宽度，在其开始和结束位置都是换行符。常见的块级元素有：`h1`、`div`、`p`和`form`等，HTML5 中的新元素：`header`、`footer`和`section`等。\n* inline：行内元素。行内元素只需要必要的宽度，不会强制换行打乱已有元素布局。常见的行内元素有：`span`和`a`。\n* none：隐藏某个元素，且隐藏的元素不会占据任何空间。一些特殊元素的默认 display 值是它，例如 `script`。 `display:none` 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。\n\n### visibility 元素可见性\n\nvisibility 属性有两种用法：\n\n1. 值为`hidden`时隐藏元素，并将其所占空间用空白填充。\n2. 值为`collapse`时隐藏表格的一行或一列，用于快速从表格中删除一行或一列。\n\n* **`display:none`和`visibility:hidden`的区别：**\n  * `display:none`隐藏某个元素时，隐藏的元素不会占据任何空间。\n  * `visibility:hidden`可以隐藏元素，但是隐藏的元素仍然占用原来大小的空间。\n\n## Google 原色\n\n* 蓝色 #4285f3\n* 红色 #ea4335\n* 绿色 #34a853\n* 黄色 #fbbc05\n* 黑色 #1c262f\n\ngoogle蓝 #2196f3\n按钮红 #f50057\ngoogle绿 #0f9d58","source":"_posts/css基础.md","raw":"---\ntitle: css基础\ntags: CSS\ncategories: CSS\nabbrlink: eda1a9a9\ndata: 2017/9/16\n---\n\n## CSS 导入\n\n> 在 HTML 中引入 CSS 的方法主要有四种，它们分别是行内式、内嵌式、链接式和导入式。\n\n1. 行内式\n* 在标记的 style 属性中设定 CSS 样式。\n\n```html\n     <p style=color:white; background-color:blue;>\n     Tihs is a test text.\n     </p>\n```\n\n2. 内嵌式\n\n* 将 CSS 样式集中写在网页的`<head></head>`中的`<style></style>`标签对中。\n\n* 缺点是对于一个包含很多网页的网站，在每个网页中使用嵌入式，进行修改样式时非常麻烦。单一网页可以考虑使用嵌入式。\n\n```html\n     <head>\n       <style type=\"text/css\">\n       p {\n         color:red;\n       }\n       </style>\n     </head>\n```\n\n3. 导入式\n\n* 使用 CSS 的规则将外部CSS文件将一个独立的`.css`文件引入 HTML 文件中，`<style>`标记写在`<head>`标记中。\n\n```html\n   <style type=\"text/css\">\n   \t@import\"mystyle.css'\n   </style>\n```\n\n4. 链接式\n\n* 最常用的的一种方式。\n\n```html\n   <head>\n     <link rel=\"stylesheet\" href=\"src/test.css\" type=\"text/css\">\n   </head>\n```\n## margin\n\n> margin 属性为给定元素设置所有四个（上下左右）方向的外边距属性。四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。指定的外边距允许为负数。\n\n| 语法                          | 值       | 例子                    | 含义                              |\n| ----------------------------- | -------- | ----------------------- | --------------------------------- |\n| margin: style                 | 单值语法 | margin: 1em;            | 指定四周外边距都为1em             |\n| margin: vertical horizontal   | 二值语法 | margin: 5% auto;        | 上下为5%，左右为auto              |\n| margin: top horizontal bottom | 三值语法 | margin: 1em auto 2em;   | 上为1em，左右为auto，下为2em      |\n| margin: top right bottom left | 四值语法 | margin: 2px 1em 0 auto; | 上为2px，右为1em，下为0，左为auto |\n\n## 选择符\n\n> 选择符用于定位我们想要样式化的网页 HTML 元素,可以选择一个或多个需要添加样式的元素。\n\n| 选择符      | 选择内容                                   | 示例      |\n| ----------- | ------------------------------------------ | --------- |\n| 元素 选择符 | 标签内所有元素                             | p         |\n| ID 选择符   | 指定ID的元素                               | #my-id    |\n| Clss 选择符 | 指定Class的元素                            | .my-class |\n| 属性 选择符 | 拥有指定属性的元素                         | img[src]  |\n| 伪类 选择符 | 指定的元素，但是需要在特殊的状态，比如悬停 | a:hover   |\n\n### 简单选择器（Simple selectors）\n\n> 通过`元素类型`、`class`或 `id` 匹配一个或多个元素。\n\n### 属性选择器（Attribute selectors）\n\n> 通过`属性/属性值`匹配一个或多个元素。\n\n* [attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。\n* [attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。\n* [attr~=val]：该选择器仅选择 attr 属性的值（以空格间隔出多个值）中有包含 val 值的所有元素，比如位于被空格分隔的多个类（class）中的一个类。\n* [attr|=val] : 选择attr属性的值以val（包括val）或val-开头的元素。\n* [attr^=val] : 选择attr属性的值以val开头（包括val）的元素。\n* [attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。\n* [attr*=val] : 选择attr属性的值中包含字符串val的元素。\n\n### 伪类（Pseudo-classes）\n\n> 一个 CSS  伪类（pseudo-class） 是一个以冒号(:)作为前缀的关键字，当元素需要在特定状态下的设置表现样式时，往元素的选择器后面加上对应的伪类（pseudo-class）。\n> 例如：页面上有一个链接， 有四种状态：\n\n1. 未点击状态显示蓝色：\n\n```css\na:link { color: blue; }\n```\n\n2. 已点击状态显示紫色：\n\n```css\na:visited { color: purple; }\n```\n\n3. 鼠标悬停状态显示红色：\n\n```css\na:hover { color: red;  }\n```\n\n4. 鼠标点击状态显示绿色：\n\n```css\na:active { color: green; }\n\n```\n\n多个状态同时设置，按照以上先后顺序排列。\n\n### 伪元素（Pseudo-elements）\n\n> 以冒号(::)作为前缀的关键字，添加到选择器后面选择某个元素的某个部分。例如每个段落的第一个字，或者某个元素之前生成的内容。\n\n* `::after`在已选中元素尾部创建最后一个子元素，通常会配合 content 属性来为该元素添加装饰内容。\n\n```css\n/*在链接后面加上一个箭头←*/\na::after { content: \"←\";}\n```\n\n* `::before` 在已选中元素头部创建第一个子元素。\n\n```css\n/*在链接前面加上一个箭头→*/\na::after { content: \"→\";}\n```\n\n* `::first-letter`会选中一整块文字第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格） 。\n\n```css\n/* 使每段开头的第一个字母变红变大 */\np::first-letter {  /* 使用:first来兼容IE8- */\n  color: red;\n  font-size: 130%;\n}\n```\n\n* `::first-line`将样式只应用于一个元素的首行。首行文本的数量取决于元素的宽，document 的宽和文本的字号。\n* `::first-line` 伪元素**只作用于块容器中**,所以`::first-line`伪元素只能在一个display值为block, inline-block, table-cell 或者 table-caption中有用.。在其他的类型中`::first-line`是不起作用的。\n* `::selection`应用于文档中被用户选中高亮的部分（比如使用鼠标或其他选择设备选中的部分）,ecko 引擎需要加前缀（-moz）。\n\n```css\n/* 将被选中的任何文本渲染为金黄色和红色背景 */\n::-moz-selection {\n  color: gold;\n  background: red;\n}\n::selection {\n  color: gold;\n  background: red;\n}\n```\n\n### 组合器（Combinators）\n\n> 以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，只选择 divs 的直系子节点的段落，或者直接跟在 headings 后面的段落。\n\n| 组合器 | 选择值                                                                                                  |\n| ------ | ------------------------------------------------------------------------------------------------------- |\n| A,B    | 匹配同时满足A和B的任意元素                                                                              |\n| A B    | 匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）                           |\n| A > B  | 匹配任意元素，满足条件：B是A的直接子节点                                                                |\n| A + B  | 匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）                    |\n| A ~ B  | 匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A） |\n\n### 多用选择器（Multiple selectors）\n\n> 以逗号分隔开的多个选择器放在一个 CSS 规则下面， 以将一组声明应用于由这些选择器选择的所有元素。\n\n## 盒模型\n\n> 网页上的所有的元素都包含在一个个盒子中。在 CSS 里面设置它们的尺寸，颜色，位置等等。\n\n* 内边距（padding）： 围绕着内容的空间（比如围绕段落的空间）\n* 边框（border）：  紧接着内边距的实体线段\n* 外边距(margin) ：  围绕元素外部的空间\n\n ![box](src/box-model.png)\n\n* width：  属于一个元素的宽\n* background-color： 元素内容和内边距之后的颜色\n* color： 元素内容的颜色（通常是文本）\n* text-shadow： 为元素内的文本设置阴影\n* display：  设置元素的显示模式\n* position：fixed  位置保持不动\n\n## 单位长度\n\n### px em\n\n* px ：像素 (px) 是一种绝对单位（ absolute units）， 因为无论其他相关的设置怎么变化，像素指定的值是不会变化的。\n* em ：相对长度单位，相对于当前文本内的字体尺寸。\n\n### px 与em转换\n\n任意浏览器的默认字体高度为 16px（16像素），所有未经调整的浏览器都符合: 1em=16px，那么10px=0.625em。<br>\n为了简化font-size的换算，可以在 css 中的 body 选择器中声明 `font-size: 62.5%`，这时`10px=1em`。\n\n## 阴影\n\n> box-shadow 属性向元素添加一个或多个阴影。\n\n```css\nbox-shadow: h-shadow v-shadow blur spread color inset;\n```\n\n| 值       | 含义                                   |\n| -------- | -------------------------------------- |\n| h-shadow | 必需。水平阴影。允许负值。             |\n| v-shadow | 必需。垂直阴影。允许负值。             |\n| blur     | 可选。模糊距离。                       |\n| spread   | 可选。阴影尺寸。                       |\n| color    | 可选。阴影颜色。                       |\n| inset    | 可选。将外部阴影(outset)改为内部阴影。 |\n\n## 布局\n\n> 一个好的布局，能将网页内容更完美的展示出来。\n\n### display 元素显示\n\n> CSS 中最重要的控制布局的属性，用来设置一个元素应该如何显示，每一个元素都有一个默认的`display`值。\n> 对于大多数元素它们的默认值通常是`block`或`inline`。\n\n* block：块级元素。块级元素通常会占用容器的全部宽度，在其开始和结束位置都是换行符。常见的块级元素有：`h1`、`div`、`p`和`form`等，HTML5 中的新元素：`header`、`footer`和`section`等。\n* inline：行内元素。行内元素只需要必要的宽度，不会强制换行打乱已有元素布局。常见的行内元素有：`span`和`a`。\n* none：隐藏某个元素，且隐藏的元素不会占据任何空间。一些特殊元素的默认 display 值是它，例如 `script`。 `display:none` 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。\n\n### visibility 元素可见性\n\nvisibility 属性有两种用法：\n\n1. 值为`hidden`时隐藏元素，并将其所占空间用空白填充。\n2. 值为`collapse`时隐藏表格的一行或一列，用于快速从表格中删除一行或一列。\n\n* **`display:none`和`visibility:hidden`的区别：**\n  * `display:none`隐藏某个元素时，隐藏的元素不会占据任何空间。\n  * `visibility:hidden`可以隐藏元素，但是隐藏的元素仍然占用原来大小的空间。\n\n## Google 原色\n\n* 蓝色 #4285f3\n* 红色 #ea4335\n* 绿色 #34a853\n* 黄色 #fbbc05\n* 黑色 #1c262f\n\ngoogle蓝 #2196f3\n按钮红 #f50057\ngoogle绿 #0f9d58","slug":"css基础","published":1,"date":"2017-11-12T02:38:02.489Z","updated":"2017-11-12T02:38:02.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xn0005hdfbxjtj1pf7q","content":"<h2 id=\"CSS-导入\"><a href=\"#CSS-导入\" class=\"headerlink\" title=\"CSS 导入\"></a>CSS 导入</h2><blockquote>\n<p>在 HTML 中引入 CSS 的方法主要有四种，它们分别是行内式、内嵌式、链接式和导入式。</p>\n</blockquote>\n<ol>\n<li>行内式</li>\n</ol>\n<ul>\n<li>在标记的 style 属性中设定 CSS 样式。</li>\n</ul>\n<pre><code class=\"html\">     &lt;p style=color:white; background-color:blue;&gt;\n     Tihs is a test text.\n     &lt;/p&gt;\n</code></pre>\n<ol>\n<li>内嵌式</li>\n</ol>\n<ul>\n<li><p>将 CSS 样式集中写在网页的<code>&lt;head&gt;&lt;/head&gt;</code>中的<code>&lt;style&gt;&lt;/style&gt;</code>标签对中。</p>\n</li>\n<li><p>缺点是对于一个包含很多网页的网站，在每个网页中使用嵌入式，进行修改样式时非常麻烦。单一网页可以考虑使用嵌入式。</p>\n</li>\n</ul>\n<pre><code class=\"html\">     &lt;head&gt;\n       &lt;style type=&quot;text/css&quot;&gt;\n       p {\n         color:red;\n       }\n       &lt;/style&gt;\n     &lt;/head&gt;\n</code></pre>\n<ol>\n<li>导入式</li>\n</ol>\n<ul>\n<li>使用 CSS 的规则将外部CSS文件将一个独立的<code>.css</code>文件引入 HTML 文件中，<code>&lt;style&gt;</code>标记写在<code>&lt;head&gt;</code>标记中。</li>\n</ul>\n<pre><code class=\"html\">   &lt;style type=&quot;text/css&quot;&gt;\n       @import&quot;mystyle.css&#39;\n   &lt;/style&gt;\n</code></pre>\n<ol>\n<li>链接式</li>\n</ol>\n<ul>\n<li>最常用的的一种方式。</li>\n</ul>\n<pre><code class=\"html\">   &lt;head&gt;\n     &lt;link rel=&quot;stylesheet&quot; href=&quot;src/test.css&quot; type=&quot;text/css&quot;&gt;\n   &lt;/head&gt;\n</code></pre>\n<h2 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h2><blockquote>\n<p>margin 属性为给定元素设置所有四个（上下左右）方向的外边距属性。四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。指定的外边距允许为负数。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>值</th>\n<th>例子</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>margin: style</td>\n<td>单值语法</td>\n<td>margin: 1em;</td>\n<td>指定四周外边距都为1em</td>\n</tr>\n<tr>\n<td>margin: vertical horizontal</td>\n<td>二值语法</td>\n<td>margin: 5% auto;</td>\n<td>上下为5%，左右为auto</td>\n</tr>\n<tr>\n<td>margin: top horizontal bottom</td>\n<td>三值语法</td>\n<td>margin: 1em auto 2em;</td>\n<td>上为1em，左右为auto，下为2em</td>\n</tr>\n<tr>\n<td>margin: top right bottom left</td>\n<td>四值语法</td>\n<td>margin: 2px 1em 0 auto;</td>\n<td>上为2px，右为1em，下为0，左为auto</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"选择符\"><a href=\"#选择符\" class=\"headerlink\" title=\"选择符\"></a>选择符</h2><blockquote>\n<p>选择符用于定位我们想要样式化的网页 HTML 元素,可以选择一个或多个需要添加样式的元素。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>选择内容</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>元素 选择符</td>\n<td>标签内所有元素</td>\n<td>p</td>\n</tr>\n<tr>\n<td>ID 选择符</td>\n<td>指定ID的元素</td>\n<td>#my-id</td>\n</tr>\n<tr>\n<td>Clss 选择符</td>\n<td>指定Class的元素</td>\n<td>.my-class</td>\n</tr>\n<tr>\n<td>属性 选择符</td>\n<td>拥有指定属性的元素</td>\n<td>img[src]</td>\n</tr>\n<tr>\n<td>伪类 选择符</td>\n<td>指定的元素，但是需要在特殊的状态，比如悬停</td>\n<td>a:hover</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"简单选择器（Simple-selectors）\"><a href=\"#简单选择器（Simple-selectors）\" class=\"headerlink\" title=\"简单选择器（Simple selectors）\"></a>简单选择器（Simple selectors）</h3><blockquote>\n<p>通过<code>元素类型</code>、<code>class</code>或 <code>id</code> 匹配一个或多个元素。</p>\n</blockquote>\n<h3 id=\"属性选择器（Attribute-selectors）\"><a href=\"#属性选择器（Attribute-selectors）\" class=\"headerlink\" title=\"属性选择器（Attribute selectors）\"></a>属性选择器（Attribute selectors）</h3><blockquote>\n<p>通过<code>属性/属性值</code>匹配一个或多个元素。</p>\n</blockquote>\n<ul>\n<li>[attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。</li>\n<li>[attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。</li>\n<li>[attr~=val]：该选择器仅选择 attr 属性的值（以空格间隔出多个值）中有包含 val 值的所有元素，比如位于被空格分隔的多个类（class）中的一个类。</li>\n<li>[attr|=val] : 选择attr属性的值以val（包括val）或val-开头的元素。</li>\n<li>[attr^=val] : 选择attr属性的值以val开头（包括val）的元素。</li>\n<li>[attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。</li>\n<li>[attr*=val] : 选择attr属性的值中包含字符串val的元素。</li>\n</ul>\n<h3 id=\"伪类（Pseudo-classes）\"><a href=\"#伪类（Pseudo-classes）\" class=\"headerlink\" title=\"伪类（Pseudo-classes）\"></a>伪类（Pseudo-classes）</h3><blockquote>\n<p>一个 CSS  伪类（pseudo-class） 是一个以冒号(:)作为前缀的关键字，当元素需要在特定状态下的设置表现样式时，往元素的选择器后面加上对应的伪类（pseudo-class）。<br>例如：页面上有一个链接， 有四种状态：</p>\n</blockquote>\n<ol>\n<li>未点击状态显示蓝色：</li>\n</ol>\n<pre><code class=\"css\">a:link { color: blue; }\n</code></pre>\n<ol>\n<li>已点击状态显示紫色：</li>\n</ol>\n<pre><code class=\"css\">a:visited { color: purple; }\n</code></pre>\n<ol>\n<li>鼠标悬停状态显示红色：</li>\n</ol>\n<pre><code class=\"css\">a:hover { color: red;  }\n</code></pre>\n<ol>\n<li>鼠标点击状态显示绿色：</li>\n</ol>\n<pre><code class=\"css\">a:active { color: green; }\n</code></pre>\n<p>多个状态同时设置，按照以上先后顺序排列。</p>\n<h3 id=\"伪元素（Pseudo-elements）\"><a href=\"#伪元素（Pseudo-elements）\" class=\"headerlink\" title=\"伪元素（Pseudo-elements）\"></a>伪元素（Pseudo-elements）</h3><blockquote>\n<p>以冒号(::)作为前缀的关键字，添加到选择器后面选择某个元素的某个部分。例如每个段落的第一个字，或者某个元素之前生成的内容。</p>\n</blockquote>\n<ul>\n<li><code>::after</code>在已选中元素尾部创建最后一个子元素，通常会配合 content 属性来为该元素添加装饰内容。</li>\n</ul>\n<pre><code class=\"css\">/*在链接后面加上一个箭头←*/\na::after { content: &quot;←&quot;;}\n</code></pre>\n<ul>\n<li><code>::before</code> 在已选中元素头部创建第一个子元素。</li>\n</ul>\n<pre><code class=\"css\">/*在链接前面加上一个箭头→*/\na::after { content: &quot;→&quot;;}\n</code></pre>\n<ul>\n<li><code>::first-letter</code>会选中一整块文字第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格） 。</li>\n</ul>\n<pre><code class=\"css\">/* 使每段开头的第一个字母变红变大 */\np::first-letter {  /* 使用:first来兼容IE8- */\n  color: red;\n  font-size: 130%;\n}\n</code></pre>\n<ul>\n<li><code>::first-line</code>将样式只应用于一个元素的首行。首行文本的数量取决于元素的宽，document 的宽和文本的字号。</li>\n<li><code>::first-line</code> 伪元素<strong>只作用于块容器中</strong>,所以<code>::first-line</code>伪元素只能在一个display值为block, inline-block, table-cell 或者 table-caption中有用.。在其他的类型中<code>::first-line</code>是不起作用的。</li>\n<li><code>::selection</code>应用于文档中被用户选中高亮的部分（比如使用鼠标或其他选择设备选中的部分）,ecko 引擎需要加前缀（-moz）。</li>\n</ul>\n<pre><code class=\"css\">/* 将被选中的任何文本渲染为金黄色和红色背景 */\n::-moz-selection {\n  color: gold;\n  background: red;\n}\n::selection {\n  color: gold;\n  background: red;\n}\n</code></pre>\n<h3 id=\"组合器（Combinators）\"><a href=\"#组合器（Combinators）\" class=\"headerlink\" title=\"组合器（Combinators）\"></a>组合器（Combinators）</h3><blockquote>\n<p>以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，只选择 divs 的直系子节点的段落，或者直接跟在 headings 后面的段落。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>组合器</th>\n<th>选择值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A,B</td>\n<td>匹配同时满足A和B的任意元素</td>\n</tr>\n<tr>\n<td>A B</td>\n<td>匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）</td>\n</tr>\n<tr>\n<td>A &gt; B</td>\n<td>匹配任意元素，满足条件：B是A的直接子节点</td>\n</tr>\n<tr>\n<td>A + B</td>\n<td>匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）</td>\n</tr>\n<tr>\n<td>A ~ B</td>\n<td>匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"多用选择器（Multiple-selectors）\"><a href=\"#多用选择器（Multiple-selectors）\" class=\"headerlink\" title=\"多用选择器（Multiple selectors）\"></a>多用选择器（Multiple selectors）</h3><blockquote>\n<p>以逗号分隔开的多个选择器放在一个 CSS 规则下面， 以将一组声明应用于由这些选择器选择的所有元素。</p>\n</blockquote>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><blockquote>\n<p>网页上的所有的元素都包含在一个个盒子中。在 CSS 里面设置它们的尺寸，颜色，位置等等。</p>\n</blockquote>\n<ul>\n<li>内边距（padding）： 围绕着内容的空间（比如围绕段落的空间）</li>\n<li>边框（border）：  紧接着内边距的实体线段</li>\n<li><p>外边距(margin) ：  围绕元素外部的空间</p>\n<p><img src=\"src/box-model.png\" alt=\"box\"></p>\n</li>\n<li><p>width：  属于一个元素的宽</p>\n</li>\n<li>background-color： 元素内容和内边距之后的颜色</li>\n<li>color： 元素内容的颜色（通常是文本）</li>\n<li>text-shadow： 为元素内的文本设置阴影</li>\n<li>display：  设置元素的显示模式</li>\n<li>position：fixed  位置保持不动</li>\n</ul>\n<h2 id=\"单位长度\"><a href=\"#单位长度\" class=\"headerlink\" title=\"单位长度\"></a>单位长度</h2><h3 id=\"px-em\"><a href=\"#px-em\" class=\"headerlink\" title=\"px em\"></a>px em</h3><ul>\n<li>px ：像素 (px) 是一种绝对单位（ absolute units）， 因为无论其他相关的设置怎么变化，像素指定的值是不会变化的。</li>\n<li>em ：相对长度单位，相对于当前文本内的字体尺寸。</li>\n</ul>\n<h3 id=\"px-与em转换\"><a href=\"#px-与em转换\" class=\"headerlink\" title=\"px 与em转换\"></a>px 与em转换</h3><p>任意浏览器的默认字体高度为 16px（16像素），所有未经调整的浏览器都符合: 1em=16px，那么10px=0.625em。<br><br>为了简化font-size的换算，可以在 css 中的 body 选择器中声明 <code>font-size: 62.5%</code>，这时<code>10px=1em</code>。</p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><blockquote>\n<p>box-shadow 属性向元素添加一个或多个阴影。</p>\n</blockquote>\n<pre><code class=\"css\">box-shadow: h-shadow v-shadow blur spread color inset;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h-shadow</td>\n<td>必需。水平阴影。允许负值。</td>\n</tr>\n<tr>\n<td>v-shadow</td>\n<td>必需。垂直阴影。允许负值。</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>可选。模糊距离。</td>\n</tr>\n<tr>\n<td>spread</td>\n<td>可选。阴影尺寸。</td>\n</tr>\n<tr>\n<td>color</td>\n<td>可选。阴影颜色。</td>\n</tr>\n<tr>\n<td>inset</td>\n<td>可选。将外部阴影(outset)改为内部阴影。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><blockquote>\n<p>一个好的布局，能将网页内容更完美的展示出来。</p>\n</blockquote>\n<h3 id=\"display-元素显示\"><a href=\"#display-元素显示\" class=\"headerlink\" title=\"display 元素显示\"></a>display 元素显示</h3><blockquote>\n<p>CSS 中最重要的控制布局的属性，用来设置一个元素应该如何显示，每一个元素都有一个默认的<code>display</code>值。<br>对于大多数元素它们的默认值通常是<code>block</code>或<code>inline</code>。</p>\n</blockquote>\n<ul>\n<li>block：块级元素。块级元素通常会占用容器的全部宽度，在其开始和结束位置都是换行符。常见的块级元素有：<code>h1</code>、<code>div</code>、<code>p</code>和<code>form</code>等，HTML5 中的新元素：<code>header</code>、<code>footer</code>和<code>section</code>等。</li>\n<li>inline：行内元素。行内元素只需要必要的宽度，不会强制换行打乱已有元素布局。常见的行内元素有：<code>span</code>和<code>a</code>。</li>\n<li>none：隐藏某个元素，且隐藏的元素不会占据任何空间。一些特殊元素的默认 display 值是它，例如 <code>script</code>。 <code>display:none</code> 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。</li>\n</ul>\n<h3 id=\"visibility-元素可见性\"><a href=\"#visibility-元素可见性\" class=\"headerlink\" title=\"visibility 元素可见性\"></a>visibility 元素可见性</h3><p>visibility 属性有两种用法：</p>\n<ol>\n<li>值为<code>hidden</code>时隐藏元素，并将其所占空间用空白填充。</li>\n<li>值为<code>collapse</code>时隐藏表格的一行或一列，用于快速从表格中删除一行或一列。</li>\n</ol>\n<ul>\n<li><strong><code>display:none</code>和<code>visibility:hidden</code>的区别：</strong><ul>\n<li><code>display:none</code>隐藏某个元素时，隐藏的元素不会占据任何空间。</li>\n<li><code>visibility:hidden</code>可以隐藏元素，但是隐藏的元素仍然占用原来大小的空间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Google-原色\"><a href=\"#Google-原色\" class=\"headerlink\" title=\"Google 原色\"></a>Google 原色</h2><ul>\n<li>蓝色 #4285f3</li>\n<li>红色 #ea4335</li>\n<li>绿色 #34a853</li>\n<li>黄色 #fbbc05</li>\n<li>黑色 #1c262f</li>\n</ul>\n<p>google蓝 #2196f3<br>按钮红 #f50057<br>google绿 #0f9d58</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS-导入\"><a href=\"#CSS-导入\" class=\"headerlink\" title=\"CSS 导入\"></a>CSS 导入</h2><blockquote>\n<p>在 HTML 中引入 CSS 的方法主要有四种，它们分别是行内式、内嵌式、链接式和导入式。</p>\n</blockquote>\n<ol>\n<li>行内式</li>\n</ol>\n<ul>\n<li>在标记的 style 属性中设定 CSS 样式。</li>\n</ul>\n<pre><code class=\"html\">     &lt;p style=color:white; background-color:blue;&gt;\n     Tihs is a test text.\n     &lt;/p&gt;\n</code></pre>\n<ol>\n<li>内嵌式</li>\n</ol>\n<ul>\n<li><p>将 CSS 样式集中写在网页的<code>&lt;head&gt;&lt;/head&gt;</code>中的<code>&lt;style&gt;&lt;/style&gt;</code>标签对中。</p>\n</li>\n<li><p>缺点是对于一个包含很多网页的网站，在每个网页中使用嵌入式，进行修改样式时非常麻烦。单一网页可以考虑使用嵌入式。</p>\n</li>\n</ul>\n<pre><code class=\"html\">     &lt;head&gt;\n       &lt;style type=&quot;text/css&quot;&gt;\n       p {\n         color:red;\n       }\n       &lt;/style&gt;\n     &lt;/head&gt;\n</code></pre>\n<ol>\n<li>导入式</li>\n</ol>\n<ul>\n<li>使用 CSS 的规则将外部CSS文件将一个独立的<code>.css</code>文件引入 HTML 文件中，<code>&lt;style&gt;</code>标记写在<code>&lt;head&gt;</code>标记中。</li>\n</ul>\n<pre><code class=\"html\">   &lt;style type=&quot;text/css&quot;&gt;\n       @import&quot;mystyle.css&#39;\n   &lt;/style&gt;\n</code></pre>\n<ol>\n<li>链接式</li>\n</ol>\n<ul>\n<li>最常用的的一种方式。</li>\n</ul>\n<pre><code class=\"html\">   &lt;head&gt;\n     &lt;link rel=&quot;stylesheet&quot; href=&quot;src/test.css&quot; type=&quot;text/css&quot;&gt;\n   &lt;/head&gt;\n</code></pre>\n<h2 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h2><blockquote>\n<p>margin 属性为给定元素设置所有四个（上下左右）方向的外边距属性。四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。指定的外边距允许为负数。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>值</th>\n<th>例子</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>margin: style</td>\n<td>单值语法</td>\n<td>margin: 1em;</td>\n<td>指定四周外边距都为1em</td>\n</tr>\n<tr>\n<td>margin: vertical horizontal</td>\n<td>二值语法</td>\n<td>margin: 5% auto;</td>\n<td>上下为5%，左右为auto</td>\n</tr>\n<tr>\n<td>margin: top horizontal bottom</td>\n<td>三值语法</td>\n<td>margin: 1em auto 2em;</td>\n<td>上为1em，左右为auto，下为2em</td>\n</tr>\n<tr>\n<td>margin: top right bottom left</td>\n<td>四值语法</td>\n<td>margin: 2px 1em 0 auto;</td>\n<td>上为2px，右为1em，下为0，左为auto</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"选择符\"><a href=\"#选择符\" class=\"headerlink\" title=\"选择符\"></a>选择符</h2><blockquote>\n<p>选择符用于定位我们想要样式化的网页 HTML 元素,可以选择一个或多个需要添加样式的元素。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选择符</th>\n<th>选择内容</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>元素 选择符</td>\n<td>标签内所有元素</td>\n<td>p</td>\n</tr>\n<tr>\n<td>ID 选择符</td>\n<td>指定ID的元素</td>\n<td>#my-id</td>\n</tr>\n<tr>\n<td>Clss 选择符</td>\n<td>指定Class的元素</td>\n<td>.my-class</td>\n</tr>\n<tr>\n<td>属性 选择符</td>\n<td>拥有指定属性的元素</td>\n<td>img[src]</td>\n</tr>\n<tr>\n<td>伪类 选择符</td>\n<td>指定的元素，但是需要在特殊的状态，比如悬停</td>\n<td>a:hover</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"简单选择器（Simple-selectors）\"><a href=\"#简单选择器（Simple-selectors）\" class=\"headerlink\" title=\"简单选择器（Simple selectors）\"></a>简单选择器（Simple selectors）</h3><blockquote>\n<p>通过<code>元素类型</code>、<code>class</code>或 <code>id</code> 匹配一个或多个元素。</p>\n</blockquote>\n<h3 id=\"属性选择器（Attribute-selectors）\"><a href=\"#属性选择器（Attribute-selectors）\" class=\"headerlink\" title=\"属性选择器（Attribute selectors）\"></a>属性选择器（Attribute selectors）</h3><blockquote>\n<p>通过<code>属性/属性值</code>匹配一个或多个元素。</p>\n</blockquote>\n<ul>\n<li>[attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。</li>\n<li>[attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。</li>\n<li>[attr~=val]：该选择器仅选择 attr 属性的值（以空格间隔出多个值）中有包含 val 值的所有元素，比如位于被空格分隔的多个类（class）中的一个类。</li>\n<li>[attr|=val] : 选择attr属性的值以val（包括val）或val-开头的元素。</li>\n<li>[attr^=val] : 选择attr属性的值以val开头（包括val）的元素。</li>\n<li>[attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。</li>\n<li>[attr*=val] : 选择attr属性的值中包含字符串val的元素。</li>\n</ul>\n<h3 id=\"伪类（Pseudo-classes）\"><a href=\"#伪类（Pseudo-classes）\" class=\"headerlink\" title=\"伪类（Pseudo-classes）\"></a>伪类（Pseudo-classes）</h3><blockquote>\n<p>一个 CSS  伪类（pseudo-class） 是一个以冒号(:)作为前缀的关键字，当元素需要在特定状态下的设置表现样式时，往元素的选择器后面加上对应的伪类（pseudo-class）。<br>例如：页面上有一个链接， 有四种状态：</p>\n</blockquote>\n<ol>\n<li>未点击状态显示蓝色：</li>\n</ol>\n<pre><code class=\"css\">a:link { color: blue; }\n</code></pre>\n<ol>\n<li>已点击状态显示紫色：</li>\n</ol>\n<pre><code class=\"css\">a:visited { color: purple; }\n</code></pre>\n<ol>\n<li>鼠标悬停状态显示红色：</li>\n</ol>\n<pre><code class=\"css\">a:hover { color: red;  }\n</code></pre>\n<ol>\n<li>鼠标点击状态显示绿色：</li>\n</ol>\n<pre><code class=\"css\">a:active { color: green; }\n</code></pre>\n<p>多个状态同时设置，按照以上先后顺序排列。</p>\n<h3 id=\"伪元素（Pseudo-elements）\"><a href=\"#伪元素（Pseudo-elements）\" class=\"headerlink\" title=\"伪元素（Pseudo-elements）\"></a>伪元素（Pseudo-elements）</h3><blockquote>\n<p>以冒号(::)作为前缀的关键字，添加到选择器后面选择某个元素的某个部分。例如每个段落的第一个字，或者某个元素之前生成的内容。</p>\n</blockquote>\n<ul>\n<li><code>::after</code>在已选中元素尾部创建最后一个子元素，通常会配合 content 属性来为该元素添加装饰内容。</li>\n</ul>\n<pre><code class=\"css\">/*在链接后面加上一个箭头←*/\na::after { content: &quot;←&quot;;}\n</code></pre>\n<ul>\n<li><code>::before</code> 在已选中元素头部创建第一个子元素。</li>\n</ul>\n<pre><code class=\"css\">/*在链接前面加上一个箭头→*/\na::after { content: &quot;→&quot;;}\n</code></pre>\n<ul>\n<li><code>::first-letter</code>会选中一整块文字第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格） 。</li>\n</ul>\n<pre><code class=\"css\">/* 使每段开头的第一个字母变红变大 */\np::first-letter {  /* 使用:first来兼容IE8- */\n  color: red;\n  font-size: 130%;\n}\n</code></pre>\n<ul>\n<li><code>::first-line</code>将样式只应用于一个元素的首行。首行文本的数量取决于元素的宽，document 的宽和文本的字号。</li>\n<li><code>::first-line</code> 伪元素<strong>只作用于块容器中</strong>,所以<code>::first-line</code>伪元素只能在一个display值为block, inline-block, table-cell 或者 table-caption中有用.。在其他的类型中<code>::first-line</code>是不起作用的。</li>\n<li><code>::selection</code>应用于文档中被用户选中高亮的部分（比如使用鼠标或其他选择设备选中的部分）,ecko 引擎需要加前缀（-moz）。</li>\n</ul>\n<pre><code class=\"css\">/* 将被选中的任何文本渲染为金黄色和红色背景 */\n::-moz-selection {\n  color: gold;\n  background: red;\n}\n::selection {\n  color: gold;\n  background: red;\n}\n</code></pre>\n<h3 id=\"组合器（Combinators）\"><a href=\"#组合器（Combinators）\" class=\"headerlink\" title=\"组合器（Combinators）\"></a>组合器（Combinators）</h3><blockquote>\n<p>以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，只选择 divs 的直系子节点的段落，或者直接跟在 headings 后面的段落。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>组合器</th>\n<th>选择值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A,B</td>\n<td>匹配同时满足A和B的任意元素</td>\n</tr>\n<tr>\n<td>A B</td>\n<td>匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）</td>\n</tr>\n<tr>\n<td>A &gt; B</td>\n<td>匹配任意元素，满足条件：B是A的直接子节点</td>\n</tr>\n<tr>\n<td>A + B</td>\n<td>匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）</td>\n</tr>\n<tr>\n<td>A ~ B</td>\n<td>匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"多用选择器（Multiple-selectors）\"><a href=\"#多用选择器（Multiple-selectors）\" class=\"headerlink\" title=\"多用选择器（Multiple selectors）\"></a>多用选择器（Multiple selectors）</h3><blockquote>\n<p>以逗号分隔开的多个选择器放在一个 CSS 规则下面， 以将一组声明应用于由这些选择器选择的所有元素。</p>\n</blockquote>\n<h2 id=\"盒模型\"><a href=\"#盒模型\" class=\"headerlink\" title=\"盒模型\"></a>盒模型</h2><blockquote>\n<p>网页上的所有的元素都包含在一个个盒子中。在 CSS 里面设置它们的尺寸，颜色，位置等等。</p>\n</blockquote>\n<ul>\n<li>内边距（padding）： 围绕着内容的空间（比如围绕段落的空间）</li>\n<li>边框（border）：  紧接着内边距的实体线段</li>\n<li><p>外边距(margin) ：  围绕元素外部的空间</p>\n<p><img src=\"src/box-model.png\" alt=\"box\"></p>\n</li>\n<li><p>width：  属于一个元素的宽</p>\n</li>\n<li>background-color： 元素内容和内边距之后的颜色</li>\n<li>color： 元素内容的颜色（通常是文本）</li>\n<li>text-shadow： 为元素内的文本设置阴影</li>\n<li>display：  设置元素的显示模式</li>\n<li>position：fixed  位置保持不动</li>\n</ul>\n<h2 id=\"单位长度\"><a href=\"#单位长度\" class=\"headerlink\" title=\"单位长度\"></a>单位长度</h2><h3 id=\"px-em\"><a href=\"#px-em\" class=\"headerlink\" title=\"px em\"></a>px em</h3><ul>\n<li>px ：像素 (px) 是一种绝对单位（ absolute units）， 因为无论其他相关的设置怎么变化，像素指定的值是不会变化的。</li>\n<li>em ：相对长度单位，相对于当前文本内的字体尺寸。</li>\n</ul>\n<h3 id=\"px-与em转换\"><a href=\"#px-与em转换\" class=\"headerlink\" title=\"px 与em转换\"></a>px 与em转换</h3><p>任意浏览器的默认字体高度为 16px（16像素），所有未经调整的浏览器都符合: 1em=16px，那么10px=0.625em。<br><br>为了简化font-size的换算，可以在 css 中的 body 选择器中声明 <code>font-size: 62.5%</code>，这时<code>10px=1em</code>。</p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><blockquote>\n<p>box-shadow 属性向元素添加一个或多个阴影。</p>\n</blockquote>\n<pre><code class=\"css\">box-shadow: h-shadow v-shadow blur spread color inset;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h-shadow</td>\n<td>必需。水平阴影。允许负值。</td>\n</tr>\n<tr>\n<td>v-shadow</td>\n<td>必需。垂直阴影。允许负值。</td>\n</tr>\n<tr>\n<td>blur</td>\n<td>可选。模糊距离。</td>\n</tr>\n<tr>\n<td>spread</td>\n<td>可选。阴影尺寸。</td>\n</tr>\n<tr>\n<td>color</td>\n<td>可选。阴影颜色。</td>\n</tr>\n<tr>\n<td>inset</td>\n<td>可选。将外部阴影(outset)改为内部阴影。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><blockquote>\n<p>一个好的布局，能将网页内容更完美的展示出来。</p>\n</blockquote>\n<h3 id=\"display-元素显示\"><a href=\"#display-元素显示\" class=\"headerlink\" title=\"display 元素显示\"></a>display 元素显示</h3><blockquote>\n<p>CSS 中最重要的控制布局的属性，用来设置一个元素应该如何显示，每一个元素都有一个默认的<code>display</code>值。<br>对于大多数元素它们的默认值通常是<code>block</code>或<code>inline</code>。</p>\n</blockquote>\n<ul>\n<li>block：块级元素。块级元素通常会占用容器的全部宽度，在其开始和结束位置都是换行符。常见的块级元素有：<code>h1</code>、<code>div</code>、<code>p</code>和<code>form</code>等，HTML5 中的新元素：<code>header</code>、<code>footer</code>和<code>section</code>等。</li>\n<li>inline：行内元素。行内元素只需要必要的宽度，不会强制换行打乱已有元素布局。常见的行内元素有：<code>span</code>和<code>a</code>。</li>\n<li>none：隐藏某个元素，且隐藏的元素不会占据任何空间。一些特殊元素的默认 display 值是它，例如 <code>script</code>。 <code>display:none</code> 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。</li>\n</ul>\n<h3 id=\"visibility-元素可见性\"><a href=\"#visibility-元素可见性\" class=\"headerlink\" title=\"visibility 元素可见性\"></a>visibility 元素可见性</h3><p>visibility 属性有两种用法：</p>\n<ol>\n<li>值为<code>hidden</code>时隐藏元素，并将其所占空间用空白填充。</li>\n<li>值为<code>collapse</code>时隐藏表格的一行或一列，用于快速从表格中删除一行或一列。</li>\n</ol>\n<ul>\n<li><strong><code>display:none</code>和<code>visibility:hidden</code>的区别：</strong><ul>\n<li><code>display:none</code>隐藏某个元素时，隐藏的元素不会占据任何空间。</li>\n<li><code>visibility:hidden</code>可以隐藏元素，但是隐藏的元素仍然占用原来大小的空间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Google-原色\"><a href=\"#Google-原色\" class=\"headerlink\" title=\"Google 原色\"></a>Google 原色</h2><ul>\n<li>蓝色 #4285f3</li>\n<li>红色 #ea4335</li>\n<li>绿色 #34a853</li>\n<li>黄色 #fbbc05</li>\n<li>黑色 #1c262f</li>\n</ul>\n<p>google蓝 #2196f3<br>按钮红 #f50057<br>google绿 #0f9d58</p>\n"},{"title":"进制转换","date":"2017-06-15T16:00:00.000Z","abbrlink":"7dc91154","_content":"\n### 十进制转换二进制\n> 将一个十进制数转换为二进制，就是将这个数不断取余的过程，将这个数除以 2，得到了商和余数，然后将商不断除以 2，直到商为 0，然后将余数倒过来排列，所得到的数就是转换的二进制结果。\n###  二进制转八进制\n>将二进制数自右向左每三位分成一段，然后将每三位数转换为一位八进制数。\n\n 例如：111000101 = 111 000 101 = 0 7 0 5\n 八进制以 0 开头。\n\n### 二进制转十六进制\n> 将二进制数自右向左每四位分成一段，然后将每四位转换为一位十六进制数。\n\n例如：111010100110=1110 1010 0110=0x E A 6\n 十六进制以 0x 或者 0X 开头。\n\n","source":"_posts/进制转换.md","raw":"---\ntitle: 进制转换\ndate: 2017/6/16\ntags: Java\ncategories: Java\nabbrlink: 7dc91154\n---\n\n### 十进制转换二进制\n> 将一个十进制数转换为二进制，就是将这个数不断取余的过程，将这个数除以 2，得到了商和余数，然后将商不断除以 2，直到商为 0，然后将余数倒过来排列，所得到的数就是转换的二进制结果。\n###  二进制转八进制\n>将二进制数自右向左每三位分成一段，然后将每三位数转换为一位八进制数。\n\n 例如：111000101 = 111 000 101 = 0 7 0 5\n 八进制以 0 开头。\n\n### 二进制转十六进制\n> 将二进制数自右向左每四位分成一段，然后将每四位转换为一位十六进制数。\n\n例如：111010100110=1110 1010 0110=0x E A 6\n 十六进制以 0x 或者 0X 开头。\n\n","slug":"进制转换","published":1,"updated":"2017-11-12T02:14:25.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xn3005kdfbx6r5nu8tq","content":"<h3 id=\"十进制转换二进制\"><a href=\"#十进制转换二进制\" class=\"headerlink\" title=\"十进制转换二进制\"></a>十进制转换二进制</h3><blockquote>\n<p>将一个十进制数转换为二进制，就是将这个数不断取余的过程，将这个数除以 2，得到了商和余数，然后将商不断除以 2，直到商为 0，然后将余数倒过来排列，所得到的数就是转换的二进制结果。</p>\n<h3 id=\"二进制转八进制\"><a href=\"#二进制转八进制\" class=\"headerlink\" title=\"二进制转八进制\"></a>二进制转八进制</h3><p>将二进制数自右向左每三位分成一段，然后将每三位数转换为一位八进制数。</p>\n</blockquote>\n<p> 例如：111000101 = 111 000 101 = 0 7 0 5<br> 八进制以 0 开头。</p>\n<h3 id=\"二进制转十六进制\"><a href=\"#二进制转十六进制\" class=\"headerlink\" title=\"二进制转十六进制\"></a>二进制转十六进制</h3><blockquote>\n<p>将二进制数自右向左每四位分成一段，然后将每四位转换为一位十六进制数。</p>\n</blockquote>\n<p>例如：111010100110=1110 1010 0110=0x E A 6<br> 十六进制以 0x 或者 0X 开头。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"十进制转换二进制\"><a href=\"#十进制转换二进制\" class=\"headerlink\" title=\"十进制转换二进制\"></a>十进制转换二进制</h3><blockquote>\n<p>将一个十进制数转换为二进制，就是将这个数不断取余的过程，将这个数除以 2，得到了商和余数，然后将商不断除以 2，直到商为 0，然后将余数倒过来排列，所得到的数就是转换的二进制结果。</p>\n<h3 id=\"二进制转八进制\"><a href=\"#二进制转八进制\" class=\"headerlink\" title=\"二进制转八进制\"></a>二进制转八进制</h3><p>将二进制数自右向左每三位分成一段，然后将每三位数转换为一位八进制数。</p>\n</blockquote>\n<p> 例如：111000101 = 111 000 101 = 0 7 0 5<br> 八进制以 0 开头。</p>\n<h3 id=\"二进制转十六进制\"><a href=\"#二进制转十六进制\" class=\"headerlink\" title=\"二进制转十六进制\"></a>二进制转十六进制</h3><blockquote>\n<p>将二进制数自右向左每四位分成一段，然后将每四位转换为一位十六进制数。</p>\n</blockquote>\n<p>例如：111010100110=1110 1010 0110=0x E A 6<br> 十六进制以 0x 或者 0X 开头。</p>\n"},{"title":"Android View&Layout","abbrlink":"29c8a334","date":"2017-06-16T06:24:12.000Z","_content":"## View 视图\n\n### TextView\n\n-   字体大小属性：**android:textSize=\"36sp\"**\n\n- 或者采用另一种字体大小定义方式：\n\n    **android:textAppearance=\"?android:textAppearanceLarge\"**\n\n    As of API 19 (KitKat):\n\n    - *?android:textAppearanceSmall* is currently 14sp\n    - *?android:textAppearanceMedium* is currently 18sp\n    - *?android:textAppearanceLarge* is currently 22sp\n\n- 文字颜色属性：**android:textColor**\n\n- 文本变成大写：**android:textAllCaps=\"true\"**\n\n- 字体属性：**android:textStyle=\"bold\"**  bold:粗体；italic:斜体；bolditalic:粗斜体。\n\n- 属性：**android:fontFamily=\"sans-serif-light\"** 字体设置。\n\n- 属性值 wrap_conent:自适应大小。\n\n- **gravity**中文意思是”重心“，就是表示view横向和纵向的停靠位置\n\n    - **android:gravity：**是对view控件本身来说的，是用来设置view本身的内容应该显示在view的什么位置，默认值是左侧。也可以用来设置布局中的控件位置\n    - **android:layout_gravity：**是相对于包含该元素的父元素来说的，设置该元素在父元素的什么位置；\n    - 比如TextView: android:layout_gravity表示TextView在界面上的位置，android:gravity表示TextView文本在TextView的什么位置，默认值是左侧.\n\n    ​\n    ```xml\n    <TextView\n              android:text=\"Hello Android!\"\n              android:background=\"@android:color/darker_gray\"\n              android:layout_width=\"150dp\"\n              android:layout_height=\"75dp\" />\n\n    <!-- 注释内容 -->\n    ```\n\n### ImageView\n\n- 属性: android:scaleType=\"center\":不改变图片大小居中显示。\n- 属性: android:scaleType=\"centerCrop\":自适应屏幕居中显示。\n\n\n  ```xml\n\n  <ImageView\n               android:src=\"@drawable/cake\"\n               android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:scaleType=\"center\"  />\n  ```\n\n### Button\n\n- XML 布局文件中的 <Button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。\n- android:onClick=\"buttonname\"\n\n\n## Layout 布局\n### LinearLayout线性布局\n\n-   View水平or垂直方向排列。\n  - 属性：android:orientation=\"vertical\" 决定布局以垂直(列)显示。\n  - 属性：android:orientation=\"horizontal\"决定布局以水平(行)显示。\n\n    ```xml\n    <LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\">\n    <TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"1\"/>\n    <TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"2\"/>\n    <TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"3\"/>\n    </LinearLayout>\n    ```\n\n     ![](http://i.imgur.com/dkCwMv0.png)\n\n### Layout Weight\n\n- layout_weight:视图权重。\n  - vertical(垂直)时设置layout_height为0，设置layout_weight为1.\n  - horizontal(水平)时设置layout_width为0，设置layout_weight为1.\n\n### RelativeLayout相对布局\n\n#### 相对于父视图边缘位置对齐\n\n-   上边缘对齐：android:layout_alignParentTop=\"true\"\n  - 下边缘对齐：android:layout_alignParentBottom=\"true\"\n  - 左边缘对齐：android:layout_alignParentLeft=\"true\"\n  - 右边缘对齐：android:layout_alignParentRight=\"true\"\n  - 垂直方向居中：android:layout_centerVertical=\"true\"\n  - 水平方向居中：android:layout_centerHorizontal=\"true\"\n  - 屏幕居中：android:layout_centerInParent=\"true\"\n\n    ```xml\n    <RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_alignParentLeft=\"true\"\n    android:text=\"1\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_centerHorizontal=\"true\"\n    android:text=\"2\"/>\n      <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_alignParentRight=\"true\"\n    android:text=\"3\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_centerVertical=\"true\"\n    android:layout_alignParentLeft=\"true\"\n    android:text=\"4\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_centerInParent=\"true\"\n    android:text=\"Center\"/>\n      <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_centerVertical=\"true\"\n    android:layout_alignParentRight=\"true\"\n    android:text=\"5\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentLeft=\"true\"\n    android:text=\"6\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_centerHorizontal=\"true\"\n    android:text=\"7\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentRight=\"true\"\n    android:text=\"8\"/>\n    </RelativeLayout>\n    ```\n\n    ​\n\n    ![](http://i.imgur.com/2e9IPMB.png)\n\n\n\n\n\n\n#### 相对于其它视图定位\n\n- android:id=\"@+id/viewname_text_view\"\n- 符号“@”表示Android应用中的资源。\n- 位于center上边：android:layout_above=\"@id/center\"\n- 位于center下边：android:layout_below=\"@id/center\"\n- 位于center左边：android:layout_toLeftOf=\"@id/center\"\n- 位于center右边：android:layout_toRightOf=\"@id/center\"\n\n ```xml\n <RelativeLayout\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\">\n <TextView\n android:id=\"@+id/center\"\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_centerInParent=\"true\"\n android:text=\"Center\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_toLeftOf=\"@id/center\"\n android:layout_alignBottom=\"@id/center\"\n android:text=\"2\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_toRightOf=\"@id/center\"\n android:layout_alignBottom=\"@id/center\"\n android:text=\"3\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_above=\"@id/center\"\n android:layout_alignLeft=\"@id/center\"\n android:text=\"1\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_below=\"@id/center\"\n android:layout_alignLeft=\"@id/center\"\n android:text=\"4\"/>\n </RelativeLayout>\n ```\n\n ![](http://i.imgur.com/wyQuZei.png)\n\n### 内边剧和外边距\n\n#### 内边距(padding)\n\n- android:padding=\"8dp\"\n\n  OR\n\n  - android:paddingLeft=\"8dp\"\n  - android:paddingRight=\"8dp\"\n  - android:paddingTop=\"8dp\"\n  - android:paddingBottom=\"8dp\"\n  - 默认值为0\n\n#### 外边距(magin)\n\n- android:layout_margin=\"8dp\"\n\n  OR\n\n  - android:layout_marginLeft=\"8dp\"\n\n  - android:layout_marginRight=\"8dp\"\n\n  - android:layout_marginTop=\"8dp\"\n\n  - android:layout_marginBottom=\"8dp\"\n  - 默认值为0\n\n![](http://i.imgur.com/sjGdzlh.png)\n\n### 创建视图\n\n1. 选择Views ；\n2. 摆放Views；\n3. 设计Views样式。","source":"_posts/Android-View-Layout.md","raw":"---\ntitle: Android View&Layout\ntags: Android\ncategories: Android\nabbrlink: 29c8a334\ndate: 2017-06-16 14:24:12\n---\n## View 视图\n\n### TextView\n\n-   字体大小属性：**android:textSize=\"36sp\"**\n\n- 或者采用另一种字体大小定义方式：\n\n    **android:textAppearance=\"?android:textAppearanceLarge\"**\n\n    As of API 19 (KitKat):\n\n    - *?android:textAppearanceSmall* is currently 14sp\n    - *?android:textAppearanceMedium* is currently 18sp\n    - *?android:textAppearanceLarge* is currently 22sp\n\n- 文字颜色属性：**android:textColor**\n\n- 文本变成大写：**android:textAllCaps=\"true\"**\n\n- 字体属性：**android:textStyle=\"bold\"**  bold:粗体；italic:斜体；bolditalic:粗斜体。\n\n- 属性：**android:fontFamily=\"sans-serif-light\"** 字体设置。\n\n- 属性值 wrap_conent:自适应大小。\n\n- **gravity**中文意思是”重心“，就是表示view横向和纵向的停靠位置\n\n    - **android:gravity：**是对view控件本身来说的，是用来设置view本身的内容应该显示在view的什么位置，默认值是左侧。也可以用来设置布局中的控件位置\n    - **android:layout_gravity：**是相对于包含该元素的父元素来说的，设置该元素在父元素的什么位置；\n    - 比如TextView: android:layout_gravity表示TextView在界面上的位置，android:gravity表示TextView文本在TextView的什么位置，默认值是左侧.\n\n    ​\n    ```xml\n    <TextView\n              android:text=\"Hello Android!\"\n              android:background=\"@android:color/darker_gray\"\n              android:layout_width=\"150dp\"\n              android:layout_height=\"75dp\" />\n\n    <!-- 注释内容 -->\n    ```\n\n### ImageView\n\n- 属性: android:scaleType=\"center\":不改变图片大小居中显示。\n- 属性: android:scaleType=\"centerCrop\":自适应屏幕居中显示。\n\n\n  ```xml\n\n  <ImageView\n               android:src=\"@drawable/cake\"\n               android:layout_width=\"wrap_content\"\n               android:layout_height=\"wrap_content\"\n               android:scaleType=\"center\"  />\n  ```\n\n### Button\n\n- XML 布局文件中的 <Button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。\n- android:onClick=\"buttonname\"\n\n\n## Layout 布局\n### LinearLayout线性布局\n\n-   View水平or垂直方向排列。\n  - 属性：android:orientation=\"vertical\" 决定布局以垂直(列)显示。\n  - 属性：android:orientation=\"horizontal\"决定布局以水平(行)显示。\n\n    ```xml\n    <LinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\">\n    <TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"1\"/>\n    <TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"2\"/>\n    <TextView\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"3\"/>\n    </LinearLayout>\n    ```\n\n     ![](http://i.imgur.com/dkCwMv0.png)\n\n### Layout Weight\n\n- layout_weight:视图权重。\n  - vertical(垂直)时设置layout_height为0，设置layout_weight为1.\n  - horizontal(水平)时设置layout_width为0，设置layout_weight为1.\n\n### RelativeLayout相对布局\n\n#### 相对于父视图边缘位置对齐\n\n-   上边缘对齐：android:layout_alignParentTop=\"true\"\n  - 下边缘对齐：android:layout_alignParentBottom=\"true\"\n  - 左边缘对齐：android:layout_alignParentLeft=\"true\"\n  - 右边缘对齐：android:layout_alignParentRight=\"true\"\n  - 垂直方向居中：android:layout_centerVertical=\"true\"\n  - 水平方向居中：android:layout_centerHorizontal=\"true\"\n  - 屏幕居中：android:layout_centerInParent=\"true\"\n\n    ```xml\n    <RelativeLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_alignParentLeft=\"true\"\n    android:text=\"1\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_centerHorizontal=\"true\"\n    android:text=\"2\"/>\n      <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_alignParentRight=\"true\"\n    android:text=\"3\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_centerVertical=\"true\"\n    android:layout_alignParentLeft=\"true\"\n    android:text=\"4\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_centerInParent=\"true\"\n    android:text=\"Center\"/>\n      <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_centerVertical=\"true\"\n    android:layout_alignParentRight=\"true\"\n    android:text=\"5\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentLeft=\"true\"\n    android:text=\"6\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_centerHorizontal=\"true\"\n    android:text=\"7\"/>\n    <TextView\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:layout_alignParentRight=\"true\"\n    android:text=\"8\"/>\n    </RelativeLayout>\n    ```\n\n    ​\n\n    ![](http://i.imgur.com/2e9IPMB.png)\n\n\n\n\n\n\n#### 相对于其它视图定位\n\n- android:id=\"@+id/viewname_text_view\"\n- 符号“@”表示Android应用中的资源。\n- 位于center上边：android:layout_above=\"@id/center\"\n- 位于center下边：android:layout_below=\"@id/center\"\n- 位于center左边：android:layout_toLeftOf=\"@id/center\"\n- 位于center右边：android:layout_toRightOf=\"@id/center\"\n\n ```xml\n <RelativeLayout\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\">\n <TextView\n android:id=\"@+id/center\"\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_centerInParent=\"true\"\n android:text=\"Center\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_toLeftOf=\"@id/center\"\n android:layout_alignBottom=\"@id/center\"\n android:text=\"2\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_toRightOf=\"@id/center\"\n android:layout_alignBottom=\"@id/center\"\n android:text=\"3\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_above=\"@id/center\"\n android:layout_alignLeft=\"@id/center\"\n android:text=\"1\"/>\n <TextView\n android:layout_width=\"wrap_content\"\n android:layout_height=\"wrap_content\"\n android:layout_below=\"@id/center\"\n android:layout_alignLeft=\"@id/center\"\n android:text=\"4\"/>\n </RelativeLayout>\n ```\n\n ![](http://i.imgur.com/wyQuZei.png)\n\n### 内边剧和外边距\n\n#### 内边距(padding)\n\n- android:padding=\"8dp\"\n\n  OR\n\n  - android:paddingLeft=\"8dp\"\n  - android:paddingRight=\"8dp\"\n  - android:paddingTop=\"8dp\"\n  - android:paddingBottom=\"8dp\"\n  - 默认值为0\n\n#### 外边距(magin)\n\n- android:layout_margin=\"8dp\"\n\n  OR\n\n  - android:layout_marginLeft=\"8dp\"\n\n  - android:layout_marginRight=\"8dp\"\n\n  - android:layout_marginTop=\"8dp\"\n\n  - android:layout_marginBottom=\"8dp\"\n  - 默认值为0\n\n![](http://i.imgur.com/sjGdzlh.png)\n\n### 创建视图\n\n1. 选择Views ；\n2. 摆放Views；\n3. 设计Views样式。","slug":"Android-View-Layout","published":1,"updated":"2017-11-12T02:18:16.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xn6005odfbxg6df7f0v","content":"<h2 id=\"View-视图\"><a href=\"#View-视图\" class=\"headerlink\" title=\"View 视图\"></a>View 视图</h2><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><ul>\n<li><p>字体大小属性：<strong>android:textSize=”36sp”</strong></p>\n</li>\n<li><p>或者采用另一种字体大小定义方式：</p>\n<p>  <strong>android:textAppearance=”?android:textAppearanceLarge”</strong></p>\n<p>  As of API 19 (KitKat):</p>\n<ul>\n<li><em>?android:textAppearanceSmall</em> is currently 14sp</li>\n<li><em>?android:textAppearanceMedium</em> is currently 18sp</li>\n<li><em>?android:textAppearanceLarge</em> is currently 22sp</li>\n</ul>\n</li>\n<li><p>文字颜色属性：<strong>android:textColor</strong></p>\n</li>\n<li><p>文本变成大写：<strong>android:textAllCaps=”true”</strong></p>\n</li>\n<li><p>字体属性：<strong>android:textStyle=”bold”</strong>  bold:粗体；italic:斜体；bolditalic:粗斜体。</p>\n</li>\n<li><p>属性：<strong>android:fontFamily=”sans-serif-light”</strong> 字体设置。</p>\n</li>\n<li><p>属性值 wrap_conent:自适应大小。</p>\n</li>\n<li><p><strong>gravity</strong>中文意思是”重心“，就是表示view横向和纵向的停靠位置</p>\n<ul>\n<li><strong>android:gravity：</strong>是对view控件本身来说的，是用来设置view本身的内容应该显示在view的什么位置，默认值是左侧。也可以用来设置布局中的控件位置</li>\n<li><strong>android:layout_gravity：</strong>是相对于包含该元素的父元素来说的，设置该元素在父元素的什么位置；</li>\n<li><p>比如TextView: android:layout_gravity表示TextView在界面上的位置，android:gravity表示TextView文本在TextView的什么位置，默认值是左侧.</p>\n<p>​</p>\n<pre><code class=\"xml\">&lt;TextView\n        android:text=&quot;Hello Android!&quot;\n        android:background=&quot;@android:color/darker_gray&quot;\n        android:layout_width=&quot;150dp&quot;\n        android:layout_height=&quot;75dp&quot; /&gt;\n\n&lt;!-- 注释内容 --&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><ul>\n<li>属性: android:scaleType=”center”:不改变图片大小居中显示。</li>\n<li>属性: android:scaleType=”centerCrop”:自适应屏幕居中显示。</li>\n</ul>\n<pre><code class=\"xml\">\n  &lt;ImageView\n               android:src=&quot;@drawable/cake&quot;\n               android:layout_width=&quot;wrap_content&quot;\n               android:layout_height=&quot;wrap_content&quot;\n               android:scaleType=&quot;center&quot;  /&gt;\n</code></pre>\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><ul>\n<li>XML 布局文件中的 <button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。</button></li>\n<li>android:onClick=”buttonname”</li>\n</ul>\n<h2 id=\"Layout-布局\"><a href=\"#Layout-布局\" class=\"headerlink\" title=\"Layout 布局\"></a>Layout 布局</h2><h3 id=\"LinearLayout线性布局\"><a href=\"#LinearLayout线性布局\" class=\"headerlink\" title=\"LinearLayout线性布局\"></a>LinearLayout线性布局</h3><ul>\n<li><p>View水平or垂直方向排列。</p>\n<ul>\n<li>属性：android:orientation=”vertical” 决定布局以垂直(列)显示。</li>\n<li>属性：android:orientation=”horizontal”决定布局以水平(行)显示。</li>\n</ul>\n<pre><code class=\"xml\">&lt;LinearLayout\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:orientation=&quot;vertical&quot;&gt;\n&lt;TextView\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:text=&quot;1&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:text=&quot;2&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:text=&quot;3&quot;/&gt;\n&lt;/LinearLayout&gt;\n</code></pre>\n<p> <img src=\"http://i.imgur.com/dkCwMv0.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"Layout-Weight\"><a href=\"#Layout-Weight\" class=\"headerlink\" title=\"Layout Weight\"></a>Layout Weight</h3><ul>\n<li>layout_weight:视图权重。<ul>\n<li>vertical(垂直)时设置layout_height为0，设置layout_weight为1.</li>\n<li>horizontal(水平)时设置layout_width为0，设置layout_weight为1.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RelativeLayout相对布局\"><a href=\"#RelativeLayout相对布局\" class=\"headerlink\" title=\"RelativeLayout相对布局\"></a>RelativeLayout相对布局</h3><h4 id=\"相对于父视图边缘位置对齐\"><a href=\"#相对于父视图边缘位置对齐\" class=\"headerlink\" title=\"相对于父视图边缘位置对齐\"></a>相对于父视图边缘位置对齐</h4><ul>\n<li><p>上边缘对齐：android:layout_alignParentTop=”true”</p>\n<ul>\n<li>下边缘对齐：android:layout_alignParentBottom=”true”</li>\n<li>左边缘对齐：android:layout_alignParentLeft=”true”</li>\n<li>右边缘对齐：android:layout_alignParentRight=”true”</li>\n<li>垂直方向居中：android:layout_centerVertical=”true”</li>\n<li>水平方向居中：android:layout_centerHorizontal=”true”</li>\n<li>屏幕居中：android:layout_centerInParent=”true”</li>\n</ul>\n<pre><code class=\"xml\">&lt;RelativeLayout\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentTop=&quot;true&quot;\nandroid:layout_alignParentLeft=&quot;true&quot;\nandroid:text=&quot;1&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentTop=&quot;true&quot;\nandroid:layout_centerHorizontal=&quot;true&quot;\nandroid:text=&quot;2&quot;/&gt;\n  &lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentTop=&quot;true&quot;\nandroid:layout_alignParentRight=&quot;true&quot;\nandroid:text=&quot;3&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerVertical=&quot;true&quot;\nandroid:layout_alignParentLeft=&quot;true&quot;\nandroid:text=&quot;4&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerInParent=&quot;true&quot;\nandroid:text=&quot;Center&quot;/&gt;\n  &lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerVertical=&quot;true&quot;\nandroid:layout_alignParentRight=&quot;true&quot;\nandroid:text=&quot;5&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentBottom=&quot;true&quot;\nandroid:layout_alignParentLeft=&quot;true&quot;\nandroid:text=&quot;6&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentBottom=&quot;true&quot;\nandroid:layout_centerHorizontal=&quot;true&quot;\nandroid:text=&quot;7&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentBottom=&quot;true&quot;\nandroid:layout_alignParentRight=&quot;true&quot;\nandroid:text=&quot;8&quot;/&gt;\n&lt;/RelativeLayout&gt;\n</code></pre>\n<p>​</p>\n<p><img src=\"http://i.imgur.com/2e9IPMB.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"相对于其它视图定位\"><a href=\"#相对于其它视图定位\" class=\"headerlink\" title=\"相对于其它视图定位\"></a>相对于其它视图定位</h4><ul>\n<li>android:id=”@+id/viewname_text_view”</li>\n<li>符号“@”表示Android应用中的资源。</li>\n<li>位于center上边：android:layout_above=”@id/center”</li>\n<li>位于center下边：android:layout_below=”@id/center”</li>\n<li>位于center左边：android:layout_toLeftOf=”@id/center”</li>\n<li><p>位于center右边：android:layout_toRightOf=”@id/center”</p>\n<pre><code class=\"xml\">&lt;RelativeLayout\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n&lt;TextView\nandroid:id=&quot;@+id/center&quot;\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerInParent=&quot;true&quot;\nandroid:text=&quot;Center&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_toLeftOf=&quot;@id/center&quot;\nandroid:layout_alignBottom=&quot;@id/center&quot;\nandroid:text=&quot;2&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_toRightOf=&quot;@id/center&quot;\nandroid:layout_alignBottom=&quot;@id/center&quot;\nandroid:text=&quot;3&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_above=&quot;@id/center&quot;\nandroid:layout_alignLeft=&quot;@id/center&quot;\nandroid:text=&quot;1&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_below=&quot;@id/center&quot;\nandroid:layout_alignLeft=&quot;@id/center&quot;\nandroid:text=&quot;4&quot;/&gt;\n&lt;/RelativeLayout&gt;\n</code></pre>\n<p><img src=\"http://i.imgur.com/wyQuZei.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"内边剧和外边距\"><a href=\"#内边剧和外边距\" class=\"headerlink\" title=\"内边剧和外边距\"></a>内边剧和外边距</h3><h4 id=\"内边距-padding\"><a href=\"#内边距-padding\" class=\"headerlink\" title=\"内边距(padding)\"></a>内边距(padding)</h4><ul>\n<li><p>android:padding=”8dp”</p>\n<p>OR</p>\n<ul>\n<li>android:paddingLeft=”8dp”</li>\n<li>android:paddingRight=”8dp”</li>\n<li>android:paddingTop=”8dp”</li>\n<li>android:paddingBottom=”8dp”</li>\n<li>默认值为0</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"外边距-magin\"><a href=\"#外边距-magin\" class=\"headerlink\" title=\"外边距(magin)\"></a>外边距(magin)</h4><ul>\n<li><p>android:layout_margin=”8dp”</p>\n<p>OR</p>\n<ul>\n<li><p>android:layout_marginLeft=”8dp”</p>\n</li>\n<li><p>android:layout_marginRight=”8dp”</p>\n</li>\n<li><p>android:layout_marginTop=”8dp”</p>\n</li>\n<li><p>android:layout_marginBottom=”8dp”</p>\n</li>\n<li>默认值为0</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://i.imgur.com/sjGdzlh.png\" alt=\"\"></p>\n<h3 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h3><ol>\n<li>选择Views ；</li>\n<li>摆放Views；</li>\n<li>设计Views样式。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"View-视图\"><a href=\"#View-视图\" class=\"headerlink\" title=\"View 视图\"></a>View 视图</h2><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><ul>\n<li><p>字体大小属性：<strong>android:textSize=”36sp”</strong></p>\n</li>\n<li><p>或者采用另一种字体大小定义方式：</p>\n<p>  <strong>android:textAppearance=”?android:textAppearanceLarge”</strong></p>\n<p>  As of API 19 (KitKat):</p>\n<ul>\n<li><em>?android:textAppearanceSmall</em> is currently 14sp</li>\n<li><em>?android:textAppearanceMedium</em> is currently 18sp</li>\n<li><em>?android:textAppearanceLarge</em> is currently 22sp</li>\n</ul>\n</li>\n<li><p>文字颜色属性：<strong>android:textColor</strong></p>\n</li>\n<li><p>文本变成大写：<strong>android:textAllCaps=”true”</strong></p>\n</li>\n<li><p>字体属性：<strong>android:textStyle=”bold”</strong>  bold:粗体；italic:斜体；bolditalic:粗斜体。</p>\n</li>\n<li><p>属性：<strong>android:fontFamily=”sans-serif-light”</strong> 字体设置。</p>\n</li>\n<li><p>属性值 wrap_conent:自适应大小。</p>\n</li>\n<li><p><strong>gravity</strong>中文意思是”重心“，就是表示view横向和纵向的停靠位置</p>\n<ul>\n<li><strong>android:gravity：</strong>是对view控件本身来说的，是用来设置view本身的内容应该显示在view的什么位置，默认值是左侧。也可以用来设置布局中的控件位置</li>\n<li><strong>android:layout_gravity：</strong>是相对于包含该元素的父元素来说的，设置该元素在父元素的什么位置；</li>\n<li><p>比如TextView: android:layout_gravity表示TextView在界面上的位置，android:gravity表示TextView文本在TextView的什么位置，默认值是左侧.</p>\n<p>​</p>\n<pre><code class=\"xml\">&lt;TextView\n        android:text=&quot;Hello Android!&quot;\n        android:background=&quot;@android:color/darker_gray&quot;\n        android:layout_width=&quot;150dp&quot;\n        android:layout_height=&quot;75dp&quot; /&gt;\n\n&lt;!-- 注释内容 --&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><ul>\n<li>属性: android:scaleType=”center”:不改变图片大小居中显示。</li>\n<li>属性: android:scaleType=”centerCrop”:自适应屏幕居中显示。</li>\n</ul>\n<pre><code class=\"xml\">\n  &lt;ImageView\n               android:src=&quot;@drawable/cake&quot;\n               android:layout_width=&quot;wrap_content&quot;\n               android:layout_height=&quot;wrap_content&quot;\n               android:scaleType=&quot;center&quot;  /&gt;\n</code></pre>\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><ul>\n<li>XML 布局文件中的 <button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。</button></li>\n<li>android:onClick=”buttonname”</li>\n</ul>\n<h2 id=\"Layout-布局\"><a href=\"#Layout-布局\" class=\"headerlink\" title=\"Layout 布局\"></a>Layout 布局</h2><h3 id=\"LinearLayout线性布局\"><a href=\"#LinearLayout线性布局\" class=\"headerlink\" title=\"LinearLayout线性布局\"></a>LinearLayout线性布局</h3><ul>\n<li><p>View水平or垂直方向排列。</p>\n<ul>\n<li>属性：android:orientation=”vertical” 决定布局以垂直(列)显示。</li>\n<li>属性：android:orientation=”horizontal”决定布局以水平(行)显示。</li>\n</ul>\n<pre><code class=\"xml\">&lt;LinearLayout\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:orientation=&quot;vertical&quot;&gt;\n&lt;TextView\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:text=&quot;1&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:text=&quot;2&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:text=&quot;3&quot;/&gt;\n&lt;/LinearLayout&gt;\n</code></pre>\n<p> <img src=\"http://i.imgur.com/dkCwMv0.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"Layout-Weight\"><a href=\"#Layout-Weight\" class=\"headerlink\" title=\"Layout Weight\"></a>Layout Weight</h3><ul>\n<li>layout_weight:视图权重。<ul>\n<li>vertical(垂直)时设置layout_height为0，设置layout_weight为1.</li>\n<li>horizontal(水平)时设置layout_width为0，设置layout_weight为1.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RelativeLayout相对布局\"><a href=\"#RelativeLayout相对布局\" class=\"headerlink\" title=\"RelativeLayout相对布局\"></a>RelativeLayout相对布局</h3><h4 id=\"相对于父视图边缘位置对齐\"><a href=\"#相对于父视图边缘位置对齐\" class=\"headerlink\" title=\"相对于父视图边缘位置对齐\"></a>相对于父视图边缘位置对齐</h4><ul>\n<li><p>上边缘对齐：android:layout_alignParentTop=”true”</p>\n<ul>\n<li>下边缘对齐：android:layout_alignParentBottom=”true”</li>\n<li>左边缘对齐：android:layout_alignParentLeft=”true”</li>\n<li>右边缘对齐：android:layout_alignParentRight=”true”</li>\n<li>垂直方向居中：android:layout_centerVertical=”true”</li>\n<li>水平方向居中：android:layout_centerHorizontal=”true”</li>\n<li>屏幕居中：android:layout_centerInParent=”true”</li>\n</ul>\n<pre><code class=\"xml\">&lt;RelativeLayout\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentTop=&quot;true&quot;\nandroid:layout_alignParentLeft=&quot;true&quot;\nandroid:text=&quot;1&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentTop=&quot;true&quot;\nandroid:layout_centerHorizontal=&quot;true&quot;\nandroid:text=&quot;2&quot;/&gt;\n  &lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentTop=&quot;true&quot;\nandroid:layout_alignParentRight=&quot;true&quot;\nandroid:text=&quot;3&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerVertical=&quot;true&quot;\nandroid:layout_alignParentLeft=&quot;true&quot;\nandroid:text=&quot;4&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerInParent=&quot;true&quot;\nandroid:text=&quot;Center&quot;/&gt;\n  &lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerVertical=&quot;true&quot;\nandroid:layout_alignParentRight=&quot;true&quot;\nandroid:text=&quot;5&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentBottom=&quot;true&quot;\nandroid:layout_alignParentLeft=&quot;true&quot;\nandroid:text=&quot;6&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentBottom=&quot;true&quot;\nandroid:layout_centerHorizontal=&quot;true&quot;\nandroid:text=&quot;7&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_alignParentBottom=&quot;true&quot;\nandroid:layout_alignParentRight=&quot;true&quot;\nandroid:text=&quot;8&quot;/&gt;\n&lt;/RelativeLayout&gt;\n</code></pre>\n<p>​</p>\n<p><img src=\"http://i.imgur.com/2e9IPMB.png\" alt=\"\"></p>\n</li>\n</ul>\n<h4 id=\"相对于其它视图定位\"><a href=\"#相对于其它视图定位\" class=\"headerlink\" title=\"相对于其它视图定位\"></a>相对于其它视图定位</h4><ul>\n<li>android:id=”@+id/viewname_text_view”</li>\n<li>符号“@”表示Android应用中的资源。</li>\n<li>位于center上边：android:layout_above=”@id/center”</li>\n<li>位于center下边：android:layout_below=”@id/center”</li>\n<li>位于center左边：android:layout_toLeftOf=”@id/center”</li>\n<li><p>位于center右边：android:layout_toRightOf=”@id/center”</p>\n<pre><code class=\"xml\">&lt;RelativeLayout\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n&lt;TextView\nandroid:id=&quot;@+id/center&quot;\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_centerInParent=&quot;true&quot;\nandroid:text=&quot;Center&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_toLeftOf=&quot;@id/center&quot;\nandroid:layout_alignBottom=&quot;@id/center&quot;\nandroid:text=&quot;2&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_toRightOf=&quot;@id/center&quot;\nandroid:layout_alignBottom=&quot;@id/center&quot;\nandroid:text=&quot;3&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_above=&quot;@id/center&quot;\nandroid:layout_alignLeft=&quot;@id/center&quot;\nandroid:text=&quot;1&quot;/&gt;\n&lt;TextView\nandroid:layout_width=&quot;wrap_content&quot;\nandroid:layout_height=&quot;wrap_content&quot;\nandroid:layout_below=&quot;@id/center&quot;\nandroid:layout_alignLeft=&quot;@id/center&quot;\nandroid:text=&quot;4&quot;/&gt;\n&lt;/RelativeLayout&gt;\n</code></pre>\n<p><img src=\"http://i.imgur.com/wyQuZei.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"内边剧和外边距\"><a href=\"#内边剧和外边距\" class=\"headerlink\" title=\"内边剧和外边距\"></a>内边剧和外边距</h3><h4 id=\"内边距-padding\"><a href=\"#内边距-padding\" class=\"headerlink\" title=\"内边距(padding)\"></a>内边距(padding)</h4><ul>\n<li><p>android:padding=”8dp”</p>\n<p>OR</p>\n<ul>\n<li>android:paddingLeft=”8dp”</li>\n<li>android:paddingRight=”8dp”</li>\n<li>android:paddingTop=”8dp”</li>\n<li>android:paddingBottom=”8dp”</li>\n<li>默认值为0</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"外边距-magin\"><a href=\"#外边距-magin\" class=\"headerlink\" title=\"外边距(magin)\"></a>外边距(magin)</h4><ul>\n<li><p>android:layout_margin=”8dp”</p>\n<p>OR</p>\n<ul>\n<li><p>android:layout_marginLeft=”8dp”</p>\n</li>\n<li><p>android:layout_marginRight=”8dp”</p>\n</li>\n<li><p>android:layout_marginTop=”8dp”</p>\n</li>\n<li><p>android:layout_marginBottom=”8dp”</p>\n</li>\n<li>默认值为0</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://i.imgur.com/sjGdzlh.png\" alt=\"\"></p>\n<h3 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h3><ol>\n<li>选择Views ；</li>\n<li>摆放Views；</li>\n<li>设计Views样式。</li>\n</ol>\n"},{"title":"欧几里得算法","mathjax":true,"abbrlink":"b511dfae","date":"2017-11-21T12:52:13.000Z","_content":"\n在 codewars 遇到一道题, 题目大概意思是: 有 Bob, Charles 两个慢跑者, 二者从同一起点出发, 以相同的速度慢跑, 但是所跑的的圈数和圈的大小不同(如下图). 问两人从起点出发后, 最少要各自跑多少圈才能再次相遇?\n\n1. The length of Bob's lap (larger than 0).\n2. The length of Charles' lap (larger than 0).\n3. The first number is the number of laps that Bob has to run.\n3. The second number is the number of laps that Charles has to run.\n**Examples:**\n```javascript\nnbrOfLaps(5, 3); // returns [3, 5]\nnbrOfLaps(4, 6); // returns [3, 2]\n```\n![](http://ou37yhdfy.bkt.clouddn.com/201711212058_357.png)\n\n思路: 这是一个求取最大公约数的问题, 二者各跑的圈数除以最大公约数, 即得到二人至少要跑的圈数.\n\n> 欧几里德算法又称辗转相除法，用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：\n**定理：** gcd(a,b) = gcd(b,a mod b)\n**证明：**\na 可以表示成 a = kb + r，则 r = a mod b.\n假设 d 是 a,b 的一个公约数，则有 d|a, d|b，而 r = a - kb，因此 d|r.\n因此 d 是(b,a mod b)的公约数\n假设 d 是(b,a mod b)的公约数，则\nd|b , d |r ，但是 a = kb +r\n因此 d 也是(a,b)的公约数\n因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等.\n\n\n代码如下:\n\n```javascript\nconst gcd = function (a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\nconst nbrOfLaps = (x, y) => [y, x].map(item => item / gcd(x, y));\n```","source":"_posts/欧几里得算法.md","raw":"---\ntitle: 欧几里得算法\nmathjax: true\nabbrlink: b511dfae\ntags: 算法\ncategories: 算法\ndate: 2017-11-21 20:52:13\n---\n\n在 codewars 遇到一道题, 题目大概意思是: 有 Bob, Charles 两个慢跑者, 二者从同一起点出发, 以相同的速度慢跑, 但是所跑的的圈数和圈的大小不同(如下图). 问两人从起点出发后, 最少要各自跑多少圈才能再次相遇?\n\n1. The length of Bob's lap (larger than 0).\n2. The length of Charles' lap (larger than 0).\n3. The first number is the number of laps that Bob has to run.\n3. The second number is the number of laps that Charles has to run.\n**Examples:**\n```javascript\nnbrOfLaps(5, 3); // returns [3, 5]\nnbrOfLaps(4, 6); // returns [3, 2]\n```\n![](http://ou37yhdfy.bkt.clouddn.com/201711212058_357.png)\n\n思路: 这是一个求取最大公约数的问题, 二者各跑的圈数除以最大公约数, 即得到二人至少要跑的圈数.\n\n> 欧几里德算法又称辗转相除法，用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：\n**定理：** gcd(a,b) = gcd(b,a mod b)\n**证明：**\na 可以表示成 a = kb + r，则 r = a mod b.\n假设 d 是 a,b 的一个公约数，则有 d|a, d|b，而 r = a - kb，因此 d|r.\n因此 d 是(b,a mod b)的公约数\n假设 d 是(b,a mod b)的公约数，则\nd|b , d |r ，但是 a = kb +r\n因此 d 也是(a,b)的公约数\n因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等.\n\n\n代码如下:\n\n```javascript\nconst gcd = function (a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\nconst nbrOfLaps = (x, y) => [y, x].map(item => item / gcd(x, y));\n```","slug":"欧几里得算法","published":1,"updated":"2017-11-30T11:19:14.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjao02xof006mdfbxlt84f0qd","content":"<p>在 codewars 遇到一道题, 题目大概意思是: 有 Bob, Charles 两个慢跑者, 二者从同一起点出发, 以相同的速度慢跑, 但是所跑的的圈数和圈的大小不同(如下图). 问两人从起点出发后, 最少要各自跑多少圈才能再次相遇?</p>\n<ol>\n<li>The length of Bob’s lap (larger than 0).</li>\n<li>The length of Charles’ lap (larger than 0).</li>\n<li>The first number is the number of laps that Bob has to run.</li>\n<li>The second number is the number of laps that Charles has to run.<br><strong>Examples:</strong><pre><code class=\"javascript\">nbrOfLaps(5, 3); // returns [3, 5]\nnbrOfLaps(4, 6); // returns [3, 2]\n</code></pre>\n<img src=\"http://ou37yhdfy.bkt.clouddn.com/201711212058_357.png\" alt=\"\"></li>\n</ol>\n<p>思路: 这是一个求取最大公约数的问题, 二者各跑的圈数除以最大公约数, 即得到二人至少要跑的圈数.</p>\n<blockquote>\n<p>欧几里德算法又称辗转相除法，用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：<br><strong>定理：</strong> gcd(a,b) = gcd(b,a mod b)<br><strong>证明：</strong><br>a 可以表示成 a = kb + r，则 r = a mod b.<br>假设 d 是 a,b 的一个公约数，则有 d|a, d|b，而 r = a - kb，因此 d|r.<br>因此 d 是(b,a mod b)的公约数<br>假设 d 是(b,a mod b)的公约数，则<br>d|b , d |r ，但是 a = kb +r<br>因此 d 也是(a,b)的公约数<br>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等.</p>\n</blockquote>\n<p>代码如下:</p>\n<pre><code class=\"javascript\">const gcd = function (a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\nconst nbrOfLaps = (x, y) =&gt; [y, x].map(item =&gt; item / gcd(x, y));\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>在 codewars 遇到一道题, 题目大概意思是: 有 Bob, Charles 两个慢跑者, 二者从同一起点出发, 以相同的速度慢跑, 但是所跑的的圈数和圈的大小不同(如下图). 问两人从起点出发后, 最少要各自跑多少圈才能再次相遇?</p>\n<ol>\n<li>The length of Bob’s lap (larger than 0).</li>\n<li>The length of Charles’ lap (larger than 0).</li>\n<li>The first number is the number of laps that Bob has to run.</li>\n<li>The second number is the number of laps that Charles has to run.<br><strong>Examples:</strong><pre><code class=\"javascript\">nbrOfLaps(5, 3); // returns [3, 5]\nnbrOfLaps(4, 6); // returns [3, 2]\n</code></pre>\n<img src=\"http://ou37yhdfy.bkt.clouddn.com/201711212058_357.png\" alt=\"\"></li>\n</ol>\n<p>思路: 这是一个求取最大公约数的问题, 二者各跑的圈数除以最大公约数, 即得到二人至少要跑的圈数.</p>\n<blockquote>\n<p>欧几里德算法又称辗转相除法，用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：<br><strong>定理：</strong> gcd(a,b) = gcd(b,a mod b)<br><strong>证明：</strong><br>a 可以表示成 a = kb + r，则 r = a mod b.<br>假设 d 是 a,b 的一个公约数，则有 d|a, d|b，而 r = a - kb，因此 d|r.<br>因此 d 是(b,a mod b)的公约数<br>假设 d 是(b,a mod b)的公约数，则<br>d|b , d |r ，但是 a = kb +r<br>因此 d 也是(a,b)的公约数<br>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等.</p>\n</blockquote>\n<p>代码如下:</p>\n<pre><code class=\"javascript\">const gcd = function (a, b) {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\nconst nbrOfLaps = (x, y) =&gt; [y, x].map(item =&gt; item / gcd(x, y));\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjao02xhz0007dfbxryxmi9xf","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xi7000fdfbx8qujrtnf"},{"post_id":"cjao02xhl0000dfbxyqrysapz","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xid000jdfbxgrkd3751"},{"post_id":"cjao02xhs0002dfbx5xiqa7s3","category_id":"cjao02xi10009dfbx7shn787j","_id":"cjao02xig000ndfbxhs7uq705"},{"post_id":"cjao02xi10008dfbxawhi0xhp","category_id":"cjao02xi10009dfbx7shn787j","_id":"cjao02xik000sdfbxgxvyst97"},{"post_id":"cjao02xi3000cdfbxa2xceq9y","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xio000zdfbxp6r2ipfw"},{"post_id":"cjao02xi6000edfbxelhbaqr1","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xis0014dfbxel167yau"},{"post_id":"cjao02xin000xdfbx4eu8ev62","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xiv0019dfbxa23j7t87"},{"post_id":"cjao02xip0010dfbxgfza11ej","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xiw001cdfbxf74hf969"},{"post_id":"cjao02xib000idfbxd7j3mm33","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xiy001hdfbxsub9choo"},{"post_id":"cjao02xie000ldfbx3cvmu2vd","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xj0001ldfbxex2vxh6s"},{"post_id":"cjao02xix001fdfbxrb7ha9gi","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xj4001qdfbx388zxn4y"},{"post_id":"cjao02xih000pdfbxiyiz83bb","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xj7001udfbx4ct576fq"},{"post_id":"cjao02xj0001mdfbx5uk5ptbi","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xjc001ydfbxw5xyuk1k"},{"post_id":"cjao02xii000rdfbxu0w67lft","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xjh0022dfbx06bma5ip"},{"post_id":"cjao02xj3001pdfbxewrtc7cw","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xjm0026dfbxjp9xzvwt"},{"post_id":"cjao02xj5001tdfbxmw7beio9","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xjp0029dfbxttjf056q"},{"post_id":"cjao02xil000vdfbxium7avyz","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xjs002edfbxcdfcvm2t"},{"post_id":"cjao02xir0013dfbx83l2ddsa","category_id":"cjao02xjd0020dfbxzocm01tt","_id":"cjao02xjx002hdfbxv5uz5mvx"},{"post_id":"cjao02xjn0028dfbxj3r2wfqw","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xk2002ldfbxizroe8hm"},{"post_id":"cjao02xiv001bdfbxpxxm39lx","category_id":"cjao02xjp002adfbxocei4vbn","_id":"cjao02xk5002odfbx8cig2zi6"},{"post_id":"cjao02xjt002gdfbxj4o13dpr","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xka002sdfbx1soix7fk"},{"post_id":"cjao02xiz001idfbxdh7key16","category_id":"cjao02xjy002idfbx4uzunmtd","_id":"cjao02xkc002vdfbxhjkqtxkb"},{"post_id":"cjao02xk3002ndfbxw2rv4vnu","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xkk0030dfbxxn9uun4b"},{"post_id":"cjao02xjb001xdfbx6x0b4adq","category_id":"cjao02xk5002pdfbxrql898oj","_id":"cjao02xkm0034dfbxmgdoy890"},{"post_id":"cjao02xka002udfbxxanr4prj","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xkq0038dfbxtrgafyyu"},{"post_id":"cjao02xke002ydfbx6cnngb13","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xks003bdfbxbyclsj41"},{"post_id":"cjao02xkk0032dfbxz5tnvpg3","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xkz003gdfbxg7xrxqh8"},{"post_id":"cjao02xje0021dfbxmf756w6l","category_id":"cjao02xkd002xdfbxnmssslay","_id":"cjao02xl1003jdfbxew4dc81z"},{"post_id":"cjao02xkn0035dfbxbrsmw5k6","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xl3003ndfbxvcfwg9nn"},{"post_id":"cjao02xkq0039dfbxivw09vqr","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xl6003rdfbxxzvgz7hg"},{"post_id":"cjao02xjl0025dfbxyyhgvcdr","category_id":"cjao02xkd002xdfbxnmssslay","_id":"cjao02xl9003udfbx9wa1xwbm"},{"post_id":"cjao02xks003cdfbxthi3xulj","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xlc003ydfbxbpztc0k7"},{"post_id":"cjao02xjr002ddfbxofl9yspi","category_id":"cjao02xjy002idfbx4uzunmtd","_id":"cjao02xlg0041dfbxfm2eqcdt"},{"post_id":"cjao02xl1003kdfbxv482lp02","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xlk0045dfbxigzbfcep"},{"post_id":"cjao02xl7003sdfbx2doupgyu","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xlo0048dfbxgv80hzjh"},{"post_id":"cjao02xkz003hdfbx8ohn5g7f","category_id":"cjao02xl2003mdfbxvqbv77g8","_id":"cjao02xls004cdfbxgmqj0cjd"},{"post_id":"cjao02xl9003vdfbx8ggur965","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xlv004gdfbx8yg4myd1"},{"post_id":"cjao02xle0040dfbx6fzlljgl","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xly004kdfbxcf3m9dow"},{"post_id":"cjao02xl3003pdfbxtsqlko0e","category_id":"cjao02xlb003wdfbxs4arqn9s","_id":"cjao02xm0004ndfbxvduk2n1c"},{"post_id":"cjao02xlh0042dfbx8rmgdqkk","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xma004rdfbxj6mdjxff"},{"post_id":"cjao02xlk0046dfbx3o74mjet","category_id":"cjao02xk5002pdfbxrql898oj","_id":"cjao02xme004vdfbxnt6e19t7"},{"post_id":"cjao02xlt004ddfbx34c8l0ye","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xmh004ydfbxccgu394w"},{"post_id":"cjao02xlv004hdfbx16wkxe97","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xmk0052dfbxcf0zhmcf"},{"post_id":"cjao02xlp0049dfbxvvo6mqt0","category_id":"cjao02xlv004edfbx8o66j38f","_id":"cjao02xmn0055dfbxetkz08tq"},{"post_id":"cjao02xm1004odfbx2m8bphpl","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xmt0059dfbx9fobr0f3"},{"post_id":"cjao02xmb004tdfbx8ltkj4g9","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xmw005cdfbx46fr2dco"},{"post_id":"cjao02xmf004wdfbxh8hcwax2","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xmz005gdfbxtwips3cw"},{"post_id":"cjao02xly004ldfbx72m2wlom","category_id":"cjao02xm8004pdfbxhj15vcmc","_id":"cjao02xn2005jdfbx9mqrqh98"},{"post_id":"cjao02xmh004zdfbxfuftac3j","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xn6005ndfbxctwwcwlc"},{"post_id":"cjao02xmn0056dfbxxautdtiy","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xn8005qdfbxf0ab83dd"},{"post_id":"cjao02xmu005adfbx8c2s0fve","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xna005tdfbxw11d6dyj"},{"post_id":"cjao02xmw005ddfbxy6ciex21","category_id":"cjao02xif000mdfbxe325v4jh","_id":"cjao02xnb005vdfbxfhfvswzy"},{"post_id":"cjao02xn0005hdfbxjtj1pf7q","category_id":"cjao02xhv0004dfbxv599ac8f","_id":"cjao02xnc005ydfbx460ymgnv"},{"post_id":"cjao02xn3005kdfbx6r5nu8tq","category_id":"cjao02xio000ydfbxtjuobqe2","_id":"cjao02xnc0060dfbxfhutrkr0"},{"post_id":"cjao02xn6005odfbxg6df7f0v","category_id":"cjao02xi10009dfbx7shn787j","_id":"cjao02xnd0062dfbx2p5ikjr8"},{"post_id":"cjao02xof006mdfbxlt84f0qd","category_id":"cjao02xoi006pdfbxq3tnxp83","_id":"cjao02xok006rdfbxoncf5c1g"}],"PostTag":[{"post_id":"cjao02xhz0007dfbxryxmi9xf","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xi3000bdfbxydxf77vl"},{"post_id":"cjao02xhl0000dfbxyqrysapz","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xi5000ddfbxt0xeamfw"},{"post_id":"cjao02xhs0002dfbx5xiqa7s3","tag_id":"cjao02xi2000adfbxz46jm54o","_id":"cjao02xid000kdfbxj7rxd5yv"},{"post_id":"cjao02xhx0006dfbxotcq3shm","tag_id":"cjao02xi7000hdfbx5rxluy65","_id":"cjao02xii000qdfbxlxmoecik"},{"post_id":"cjao02xi10008dfbxawhi0xhp","tag_id":"cjao02xig000odfbx9vao51q8","_id":"cjao02xin000wdfbx3ra3k8ol"},{"post_id":"cjao02xin000xdfbx4eu8ev62","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xiq0012dfbxzmxe8g7r"},{"post_id":"cjao02xi3000cdfbxa2xceq9y","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xis0015dfbxhsmbusyh"},{"post_id":"cjao02xip0010dfbxgfza11ej","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xiv001adfbxd54prgb5"},{"post_id":"cjao02xi6000edfbxelhbaqr1","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xiw001ddfbxvvyrf5su"},{"post_id":"cjao02xib000idfbxd7j3mm33","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xiz001jdfbxs5e1ef4j"},{"post_id":"cjao02xix001fdfbxrb7ha9gi","tag_id":"cjao02xi2000adfbxz46jm54o","_id":"cjao02xj2001ndfbxt0hbr2sm"},{"post_id":"cjao02xie000ldfbx3cvmu2vd","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xj4001rdfbx49es5fak"},{"post_id":"cjao02xj0001mdfbx5uk5ptbi","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xj7001vdfbx8c53ehup"},{"post_id":"cjao02xj3001pdfbxewrtc7cw","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xjc001zdfbxnj43vw2i"},{"post_id":"cjao02xih000pdfbxiyiz83bb","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xji0023dfbxpfw7hrwy"},{"post_id":"cjao02xj5001tdfbxmw7beio9","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xjn0027dfbxcuszyw2h"},{"post_id":"cjao02xii000rdfbxu0w67lft","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xjq002bdfbxb911euuf"},{"post_id":"cjao02xil000vdfbxium7avyz","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xjs002fdfbxbrlqjfys"},{"post_id":"cjao02xjt002gdfbxj4o13dpr","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xk3002mdfbxqvyav4ts"},{"post_id":"cjao02xir0013dfbx83l2ddsa","tag_id":"cjao02xjq002cdfbx5i1mrowm","_id":"cjao02xka002tdfbxe7wxqx9i"},{"post_id":"cjao02xir0013dfbx83l2ddsa","tag_id":"cjao02xjz002jdfbxq3dyxknz","_id":"cjao02xkd002wdfbx3tfe3uuj"},{"post_id":"cjao02xk3002ndfbxw2rv4vnu","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xkk0031dfbxlrcslrry"},{"post_id":"cjao02xis0017dfbxh2iqejm4","tag_id":"cjao02xk7002qdfbx8t2ou8tu","_id":"cjao02xkm0033dfbxzyqzjft4"},{"post_id":"cjao02xiv001bdfbxpxxm39lx","tag_id":"cjao02xkh002zdfbxq8ekivcj","_id":"cjao02xkr003adfbxxp72c54n"},{"post_id":"cjao02xkn0035dfbxbrsmw5k6","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xkw003edfbxvqqqusew"},{"post_id":"cjao02xkq0039dfbxivw09vqr","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xl0003idfbxg5k485ss"},{"post_id":"cjao02xiz001idfbxdh7key16","tag_id":"cjao02xkp0037dfbx5zi2dttg","_id":"cjao02xl2003ldfbxwxqlgvd2"},{"post_id":"cjao02xjb001xdfbx6x0b4adq","tag_id":"cjao02xky003fdfbx8v7i8r6r","_id":"cjao02xl6003qdfbx3t6369ss"},{"post_id":"cjao02xl1003kdfbxv482lp02","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xl8003tdfbxh03x93g9"},{"post_id":"cjao02xje0021dfbxmf756w6l","tag_id":"cjao02xl3003odfbx8qi7abov","_id":"cjao02xlc003zdfbxp83iqbhs"},{"post_id":"cjao02xle0040dfbx6fzlljgl","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xlk0044dfbx9g3buu32"},{"post_id":"cjao02xjl0025dfbxyyhgvcdr","tag_id":"cjao02xl3003odfbx8qi7abov","_id":"cjao02xlo0047dfbxze8y53zz"},{"post_id":"cjao02xlh0042dfbx8rmgdqkk","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xls004bdfbx0f0uuzbb"},{"post_id":"cjao02xjn0028dfbxj3r2wfqw","tag_id":"cjao02xlj0043dfbxtc0yppnr","_id":"cjao02xlv004fdfbxbw1d33dq"},{"post_id":"cjao02xlt004ddfbx34c8l0ye","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xly004jdfbxzf4g1g2n"},{"post_id":"cjao02xjr002ddfbxofl9yspi","tag_id":"cjao02xlq004adfbxwhmrw4mw","_id":"cjao02xm0004mdfbxq2rxqwme"},{"post_id":"cjao02xlv004hdfbx16wkxe97","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xm9004qdfbxtwp31gem"},{"post_id":"cjao02xm1004odfbx2m8bphpl","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xme004udfbxi61337wx"},{"post_id":"cjao02xmb004tdfbx8ltkj4g9","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xmh004xdfbxas1830wz"},{"post_id":"cjao02xmf004wdfbxh8hcwax2","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xmk0051dfbxzmvgcl8n"},{"post_id":"cjao02xk0002kdfbxhjn9824v","tag_id":"cjao02xlx004idfbxx1gdx58z","_id":"cjao02xmm0054dfbxi0qnv0nt"},{"post_id":"cjao02xk0002kdfbxhjn9824v","tag_id":"cjao02xma004sdfbxirjgxwm0","_id":"cjao02xmt0058dfbxul9pklca"},{"post_id":"cjao02xmh004zdfbxfuftac3j","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xmw005bdfbx9yu4494g"},{"post_id":"cjao02xk8002rdfbxrvvuw4i4","tag_id":"cjao02xmj0050dfbxpp0jpgeq","_id":"cjao02xmz005fdfbxa9rasu50"},{"post_id":"cjao02xmn0056dfbxxautdtiy","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xn2005idfbxbctiihao"},{"post_id":"cjao02xmu005adfbx8c2s0fve","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xn6005mdfbxhz3ux6se"},{"post_id":"cjao02xka002udfbxxanr4prj","tag_id":"cjao02xms0057dfbxrjafqo63","_id":"cjao02xn8005pdfbxcjf53ucn"},{"post_id":"cjao02xmw005ddfbxy6ciex21","tag_id":"cjao02xil000udfbxo984tb9u","_id":"cjao02xn9005sdfbxns7b835f"},{"post_id":"cjao02xn0005hdfbxjtj1pf7q","tag_id":"cjao02xhx0005dfbxznepp8lh","_id":"cjao02xnb005udfbxp1uvdu3c"},{"post_id":"cjao02xke002ydfbx6cnngb13","tag_id":"cjao02xms0057dfbxrjafqo63","_id":"cjao02xnb005xdfbxrczuz50u"},{"post_id":"cjao02xn3005kdfbx6r5nu8tq","tag_id":"cjao02xiu0018dfbxofds5pb6","_id":"cjao02xnc005zdfbxwbife4e1"},{"post_id":"cjao02xn6005odfbxg6df7f0v","tag_id":"cjao02xi2000adfbxz46jm54o","_id":"cjao02xnc0061dfbxx1sgnvlx"},{"post_id":"cjao02xkk0032dfbxz5tnvpg3","tag_id":"cjao02xms0057dfbxrjafqo63","_id":"cjao02xnd0064dfbx9gut7cvx"},{"post_id":"cjao02xks003cdfbxthi3xulj","tag_id":"cjao02xms0057dfbxrjafqo63","_id":"cjao02xne0065dfbxngtux67y"},{"post_id":"cjao02xkz003hdfbx8ohn5g7f","tag_id":"cjao02xnb005wdfbxmmfxkeik","_id":"cjao02xne0067dfbx7gtep3d1"},{"post_id":"cjao02xl3003pdfbxtsqlko0e","tag_id":"cjao02xnd0063dfbxg3emhicw","_id":"cjao02xng0069dfbxpef1jfa1"},{"post_id":"cjao02xl3003pdfbxtsqlko0e","tag_id":"cjao02xne0066dfbxfek5xcds","_id":"cjao02xng006adfbxchq2wy2b"},{"post_id":"cjao02xl7003sdfbx2doupgyu","tag_id":"cjao02xms0057dfbxrjafqo63","_id":"cjao02xnh006cdfbxjfy8jvxn"},{"post_id":"cjao02xl9003vdfbx8ggur965","tag_id":"cjao02xms0057dfbxrjafqo63","_id":"cjao02xni006edfbxrvd0fkht"},{"post_id":"cjao02xlk0046dfbx3o74mjet","tag_id":"cjao02xni006ddfbxif4blim3","_id":"cjao02xnj006gdfbxrlbwsxga"},{"post_id":"cjao02xlp0049dfbxvvo6mqt0","tag_id":"cjao02xnj006fdfbxcxrigj83","_id":"cjao02xnk006idfbx7bbx5c2b"},{"post_id":"cjao02xly004ldfbx72m2wlom","tag_id":"cjao02xnj006hdfbxcs100c85","_id":"cjao02xnm006kdfbx4zisu84d"},{"post_id":"cjao02xmk0053dfbx2bn5llw5","tag_id":"cjao02xms0057dfbxrjafqo63","_id":"cjao02xnn006ldfbxgx828eh5"},{"post_id":"cjao02xof006mdfbxlt84f0qd","tag_id":"cjao02xnj006hdfbxcs100c85","_id":"cjao02xoi006qdfbx9a91uzfb"}],"Tag":[{"name":"CSS","_id":"cjao02xhx0005dfbxznepp8lh"},{"name":"Android","_id":"cjao02xi2000adfbxz46jm54o"},{"name":"Test","_id":"cjao02xi7000hdfbx5rxluy65"},{"name":"Gradle","_id":"cjao02xig000odfbx9vao51q8"},{"name":"JavaScript","_id":"cjao02xil000udfbxo984tb9u"},{"name":"Java","_id":"cjao02xiu0018dfbxofds5pb6"},{"name":"VSCode","_id":"cjao02xjq002cdfbx5i1mrowm"},{"name":"ESLint","_id":"cjao02xjz002jdfbxq3dyxknz"},{"name":"test","_id":"cjao02xk7002qdfbx8t2ou8tu"},{"name":"Yarn","_id":"cjao02xkh002zdfbxq8ekivcj"},{"name":"MySql","_id":"cjao02xkp0037dfbx5zi2dttg"},{"name":"Git","_id":"cjao02xky003fdfbx8v7i8r6r"},{"name":"HTML","_id":"cjao02xl3003odfbx8qi7abov"},{"name":"jQuery","_id":"cjao02xlj0043dfbxtc0yppnr"},{"name":"MongoDB","_id":"cjao02xlq004adfbxwhmrw4mw"},{"name":"Vue","_id":"cjao02xlx004idfbxx1gdx58z"},{"name":"Firebase","_id":"cjao02xma004sdfbxirjgxwm0"},{"name":"Webpack","_id":"cjao02xmj0050dfbxpp0jpgeq"},{"name":"YouDon'tKnowJavaScript","_id":"cjao02xms0057dfbxrjafqo63"},{"name":"Web","_id":"cjao02xnb005wdfbxmmfxkeik"},{"name":"tabs","_id":"cjao02xnd0063dfbxg3emhicw"},{"name":"vue","_id":"cjao02xne0066dfbxfek5xcds"},{"name":"SSH","_id":"cjao02xni006ddfbxif4blim3"},{"name":"RegEx","_id":"cjao02xnj006fdfbxcxrigj83"},{"name":"算法","_id":"cjao02xnj006hdfbxcs100c85"}]}}