<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2018年9月南京前端面试题个人总结</title>
      <link href="/pages/906ca162/"/>
      <url>/pages/906ca162/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本周花了三天时间去了七家公司面试，其中有正在组建团队的创业公司，也有像苏宁这样成熟的大公司。面试结束之后，记录一下个人面试所遇到的一些问题。</p></blockquote><h2 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h2><ol><li>行内元素与块级元素分别有哪些？有什么区别？</li><li>HTML 5 新增的标签有哪些？</li><li>事件代理的原理是什么？为什么要使用事件代理？</li><li>有没有什么事件是不会冒泡的？</li><li>两个并列的元素渲染顺序是什么样的？</li><li>如何理解 HTML 语义化？</li><li>了解过浏览器的渲染机制吗？</li><li>如何加快页面的加载速度？</li></ol><h2 id="CSS-部分"><a href="#CSS-部分" class="headerlink" title="CSS 部分"></a>CSS 部分</h2><ol><li>如何实现元素水平和垂直居中？</li><li>如何实现左侧元素宽度固定，右侧元素宽度自适应的布局？</li><li>z-index 生效的范围？</li><li>rem 和 em 分别是什么？有什么区别？</li><li>CSS 有哪些选择器？选择器的权重与优先级规则什么样的？</li><li>介绍一下 flex 布局？</li><li>什么情况下会遇到元素高度塌陷？如何处理？</li><li>网站如何适配不同屏幕大小？</li><li>有了解 CSS3 里面的新增动画吗？</li><li>如何看待 SCSS 这种 CSS 预处理器？</li></ol><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><ol><li><p>谈谈你对原型的理解？</p></li><li><p>JS 如何实现继承？如何实现多继承？</p></li><li><p>闭包是什么？它的使用场景是什么？</p></li><li><p>什么是深拷贝与浅拷贝？如何实现？</p></li><li><p>如何判断一个变量是数组类型？</p></li><li><p>谈谈你对同步和异步的理解？</p></li><li><p>简述下变量提升与函数提升？如何避免？</p></li><li><p>熟悉 ES6 语法吗？ES6 带来了哪些改变？</p></li><li><p>你经常使用的数组方法有哪些？为什么要使用它们呢？</p></li><li><p>简述一下 Promise 的概念？它的实现原理是什么？</p></li><li><p>async/await 的作用是什么？它的实现原理是什么？</p></li><li><p>有了解过 Generator 函数吗？简单介绍一下。</p></li><li><p>了解 Iterator 吗？它的作用是什么？</p></li><li><p>import 和 require 引入有什么区别？</p></li><li><p>了解函数式编程这个概念吗？它有哪些特性？</p></li><li><p>如何理解高阶函数？</p></li><li><p>ES7 新增了哪些语法？</p></li><li><p>如何理解 JS 单线程？</p></li><li><p>编程题：以下 a.js 文件导出 name1、name，在 b.js 中输出 name1、name2 的值</p><pre><code class="javascript">// a.jsexport const name1 = &#39;name1&#39;;export default {  name2: &#39;name2&#39;}// b.jsimport name, { name1 } from &#39;a.js&#39;;console.log(`name1: ${name1}`);console.log(`name2: ${name.name2}`);</code></pre></li></ol><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ol><li>常用的请求方法有哪些？分别在什么情况下使用？</li><li>使用过 HEAD 方法吗？它的适用场景是什么？</li><li>简述一下常用 HTTP 状态码及其对应状态？</li><li>HTTP 的请求构成有哪些？</li><li>TCP 几次握手？做了些什么？</li><li>谈谈你对 RESTful 架构的理解？</li><li>如何处理浏览器跨域问题？</li><li>平时使用什么方式发起 http 请求？它的原理是什么？</li><li>有了解过 Fetch 吗？</li><li>session 和 cookie 的区别是什么？它们各自的适用场景是什么？</li></ol><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><ol><li>说说你对 node 的理解？</li><li>node 的适用场景有哪些？</li><li>什么是事件循环？</li><li>Express 和 Koa 有什么异同吗？</li><li>简述一下 Koa 的原理？</li><li>如何理解 koa 的中间件？</li><li>Koa 是如何实现异步的？</li><li>co 库的原理实现是什么？</li></ol><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ol><li>你为什么会选择使用 Vue，谈谈你对 Vue 的理解？</li><li>Vue 和 AngularJS 之间有什么异同？</li><li>阅读过 Vue 源码吗？Vue 的双向绑定原理是什么？</li><li>Vue 的生命周期？对应的钩子函数有哪些？</li><li>在钩子函数中常做的操作有哪些？</li><li>计算属性和侦听器有什么区别？常用来做些什么？</li><li>使用过计算属性里面的 getter 和 setter 吗？</li><li>常用的指令有哪些？使用过自定义指令吗？</li><li>v-if 和 v-show 有什么区别？它们之间的优先级是什么样的？</li><li>v-model 指令是如何实现的？</li><li>列表组件中的 key 属性的作用是什么？</li><li>组件过渡动画有了解吗？</li><li>使用过缓存组件吗？keep-alive 的适用场景是什么？</li><li>父子组件与非父子组件间如何进行数据通信？</li><li>为什么要进行状态管理？如何进行状态管理？</li><li>为什么要使用 Vuex ，而不是将数据挂载到 window 对象上？</li><li>Vuex 里面的几个重要属性分别是什么？它们的作用是什么？</li><li>Vuex 的工作流程是什么样的？</li><li>Vuex 里面的同步与异步操作该如何进行？</li><li>有遇到过 Vuex 里面的数据与计算属性冲突的问题吗？该如何解决？</li><li>常用的路由方式有哪几种？</li><li>Vue-Router 如何进行参数传递以及参数接收？</li><li>路由的常用钩子函数有哪些？一般用来做些什么？</li><li>如何实现页面权限控制？</li><li>如何实现按钮级别颗粒细度的权限控制？</li><li>如何实现路由按需加载？</li><li>开发时如何解决跨域问题？</li><li>如何更改打包输出文件的路径？</li><li>有了解过 Vue3.0 吗？它更新了哪些新特性？</li></ol><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><ol><li>有自己手写写过 webpack 的配置文件吗？</li><li>webpack 的配置文件有哪几个重要属性？</li><li>webpack 的 Loader 和插件的区别是什么？</li><li>git 常用的命令有哪些？</li><li><code>git checkout</code> 命令的作用是什么？</li><li>rebase 跟 merge 的区别是什么？有了解过 gitflow 工作流吗？</li></ol><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ol><li>谈一谈你之前所做的项目？</li><li>有做过移动端开发吗？</li><li>开发中有遇到令你印象深刻的问题吗？</li><li>开发时遇到 BUG 时你是如何进行处理的？</li><li>能展示一下你的 Github 吗？</li><li>平时在哪些地方学习前端技术？常去的技术社区有哪些？</li><li>有写过技术文章吗？</li><li>发布过 npm package 吗？</li><li>写过 Vue 插件吗？</li><li>如何与其他同事进行沟通交流？</li><li>你希望公司给你提供什么？</li><li>你对自身有什么个人规划吗？</li><li>你有什么想问我(面试官)的？</li></ol>]]></content>
      
      
      <categories>
          
          <category> FE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 配置 ESLint + Airbnb + Vue</title>
      <link href="/pages/3bcc390e/"/>
      <url>/pages/3bcc390e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018-09-08 更新，调整为 <code>eslint-config-airbnb-base</code> 正确配置。</p></blockquote><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><p>Win 10 v1709<br>Nodejs v8.11.3<br>VScode v1.26.1</p><h2 id="VSCode-安装-ESLint-扩展"><a href="#VSCode-安装-ESLint-扩展" class="headerlink" title="VSCode 安装 ESLint 扩展"></a>VSCode 安装 ESLint 扩展</h2><p>打开 VSCode 搜索 ESLint 扩展安装</p><h2 id="NPM-安装-ESLint"><a href="#NPM-安装-ESLint" class="headerlink" title="NPM 安装 ESLint"></a>NPM 安装 ESLint</h2><ol><li><p>全局安装（推荐）:</p><p><code>npm install eslint -g</code></p></li><li><p>项目根目录本地安装：</p><p><code>npm install eslint --save-dev</code></p></li></ol><h2 id="1-自定义配置规则"><a href="#1-自定义配置规则" class="headerlink" title="1. 自定义配置规则"></a>1. 自定义配置规则</h2><ol><li><p>全局配置<br>在当前用户根目录下执行 <code>eslint --init</code>,根据个人爱好选择生成配置文件 <code>.eslintrc.json</code><br>例如：<code>windows\user\username</code></p></li><li><p>项目根目录配置：<br>在当前用户根目录下执行 <code>eslint --init</code>，根据个人爱好选择生成配置文件</p></li></ol><p>ps：具体配置参考：<a href="http://eslint.cn/docs/user-guide/configuring" target="_blank" rel="noopener">http://eslint.cn/docs/user-guide/configuring</a></p><h2 id="2-使用-eslint-config-airbnb-base-标准规则"><a href="#2-使用-eslint-config-airbnb-base-标准规则" class="headerlink" title="2. 使用 eslint-config-airbnb-base 标准规则"></a>2. 使用 eslint-config-airbnb-base 标准规则</h2><ol><li><p>查看 Airbnb 标准依赖插件版本：</p><p><code>npm info &quot;eslint-config-airbnb-base@latest&quot; peerDependencies</code></p></li></ol><p>例如：本次的 plugins 的版本要求:</p><pre><code>{    eslint: &#39;^4.19.1 || ^5.3.0&#39;,  eslint-plugin-import&#39;: &#39;^2.14.0&#39; }</code></pre><ol start="2"><li><p>安装对应版本的插件:</p><p><code>npm install eslint-config-airbnb-base eslint@^#.#.# eslint-plugin-import@^#.#.# -g</code></p></li><li><p>安装  babel-eslint 插件：<br> <code>npm i -g babel-eslint</code></p></li><li><p>更改配置文件 <code>.eslintrc.json</code> 如下：</p></li></ol><pre><code class="json">{    // 要启用的环境    &quot;env&quot;: {        &quot;browser&quot;: true,        &quot;es6&quot;: true,        &quot;node&quot;: true    },    // 启用 airbnb 规则    &quot;extends&quot;: &quot;airbnb-base&quot;,    // 使用语言及版本    &quot;parserOptions&quot;: {        &quot;parser&quot;: &quot;babel-eslint&quot;,        &quot;ecmaVersion&quot;: 2017,        &quot;sourceType&quot;: &quot;module&quot;    },    // 个人自定义规则    &quot;rules&quot;: {        &quot;no-console&quot;:&quot;off&quot;,        &quot;no-plusplus&quot;:&quot;off&quot;    }}</code></pre><h2 id="ESLint-支持-Html-以及-Vue-单文件组件"><a href="#ESLint-支持-Html-以及-Vue-单文件组件" class="headerlink" title="ESLint 支持 Html 以及 Vue 单文件组件"></a>ESLint 支持 Html 以及 Vue 单文件组件</h2><ol><li>安装 eslint-plugin-html 和 eslint-plugin-vue 插件</li></ol><p><code>npm i -g eslint-plugin-html eslint-plugin-vue</code></p><ol start="2"><li>在 VSCode 设置设置中添加如下配置：<pre><code class="json">  // ESLint 配置 &quot;eslint.enable&quot;: true, // 保存时是否自动修复 &quot;eslint.autoFixOnSave&quot;: false, // nodejs 路径， windows 路径使用双 \\ 进行转义 &quot;eslint.nodePath&quot;: &quot;C:\\Dev\\nodejs&quot;, &quot;eslint.options&quot;: {     // 配置文件的地址     &quot;configFile&quot;: &quot;C:\\Users\\roojay\\.eslintrc.json&quot;, }, &quot;eslint.validate&quot;: [     &quot;javascript&quot;,     &quot;javascriptreact&quot;,     // 启用 html 和 vue 中 ESLint 验证和自动修复     {         &quot;language&quot;: &quot;html&quot;,         &quot;autoFix&quot;: true     },     {         &quot;language&quot;: &quot;vue&quot;,         &quot;autoFix&quot;: true     }</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> ESLint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给 WIN 10 增加伪 sudo 命令</title>
      <link href="/pages/c19490dd/"/>
      <url>/pages/c19490dd/</url>
      
        <content type="html"><![CDATA[<ol><li><p>管理员权限打开 PowerShell</p></li><li><p>更改 PowerShell 默认脚本执行策略.</p><ol><li>输入<code>get-executionpolicy</code> 查看当前脚本执行策略, 当前默认为为 <code>Restricted</code> 即不允许执行任何脚本。</li><li>输入 <code>get-help set-executionpolicy</code>, 获取执行策略</li><li>输入<code>set-executionpolicy remotesigned</code> 更改执行策略为 <code>remotesigned</code></li></ol></li><li><p>输入下面脚本命令执行:</p><pre><code class="bash">$script_path=&quot;$HOME\Documents\Scripts&quot;; if (!(test-path $script_path)) {New-Item -ItemType directory $script_path} if (!(test-path $profile)) { new-item -path $profile -itemtype file -force }&quot;. $script_path\sudo.ps1&quot; | Out-File $profile -append; &quot;function sudo(){if (`$args.Length -eq 1){start-process `$args[0] -verb `&quot;runAs`&quot;} if (`$args.Length -gt 1){start-process `$args[0] -ArgumentList `$args[1..`$args.Length] -verb `&quot;runAs`&quot;}}&quot; | Out-File $script_path\sudo.ps1; powershell</code></pre></li><li><p>搜索 UAC 即更改用户账户控制设置, 设置为从不通知.</p></li></ol><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><pre><code class="bash">sudo powershellsudo cmd</code></pre><p>参考链接: <a href="https://superuser.com/questions/42537/is-there-any-sudo-command-for-windows" target="_blank" rel="noopener">Is there any ‘sudo’ command for Windows?</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧几里得算法</title>
      <link href="/pages/b511dfae/"/>
      <url>/pages/b511dfae/</url>
      
        <content type="html"><![CDATA[<p>在 codewars 遇到一道题, 题目大概意思是: 有 Bob, Charles 两个慢跑者, 二者从同一起点出发, 以相同的速度慢跑, 但是所跑的的圈数和圈的大小不同(如下图). 问两人从起点出发后, 最少要各自跑多少圈才能再次相遇?</p><ol><li>The length of Bob’s lap (larger than 0).</li><li>The length of Charles’ lap (larger than 0).</li><li>The first number is the number of laps that Bob has to run.</li><li>The second number is the number of laps that Charles has to run.</li></ol><p><strong>Examples:</strong></p><pre><code class="javascript">nbrOfLaps(5, 3); // returns [3, 5]nbrOfLaps(4, 6); // returns [3, 2]</code></pre><p><img src="http://ou37yhdfy.bkt.clouddn.com/201711212058_357.png" alt=""></p><p>思路: 这是一个求取最大公约数的问题, 二者各跑的圈数除以最大公约数, 即得到二人至少要跑的圈数.</p><blockquote><p>欧几里德算法又称辗转相除法，用于计算两个整数 a,b 的最大公约数。其计算原理依赖于下面的定理：<br><strong>定理：</strong> gcd(a,b) = gcd(b,a mod b)<br><strong>证明：</strong><br>a 可以表示成 a = kb + r，则 r = a mod b.<br>假设 d 是 a,b 的一个公约数，则有 d|a, d|b，而 r = a - kb，因此 d|r.<br>因此 d 是(b,a mod b)的公约数<br>假设 d 是(b,a mod b)的公约数，则<br>d|b , d |r ，但是 a = kb +r<br>因此 d 也是(a,b)的公约数<br>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等.</p></blockquote><p>代码如下:</p><pre><code class="javascript">const gcd = function (a, b) {  if (b === 0) return a;  return gcd(b, a % b);};const nbrOfLaps = (x, y) =&gt; [y, x].map(item =&gt; item / gcd(x, y));</code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动手实现一个简单的 vue tabs</title>
      <link href="/pages/44515447/"/>
      <url>/pages/44515447/</url>
      
        <content type="html"><![CDATA[<h2 id="动手写一个简单的-vue-tabs-切换页"><a href="#动手写一个简单的-vue-tabs-切换页" class="headerlink" title="动手写一个简单的 vue tabs 切换页"></a>动手写一个简单的 vue tabs 切换页</h2><p>使用第三方的框架的组件进行布局时, 发现出来的效果和自己想要的总是差一点, 所以自己动手写了一个 tabs 选项卡.</p><p>整个选项卡分为两个部分: 上半部分的标题和下半部分的内容. 要求是: 当点击到某个选项时, 选项下的光标随之切换, 下半部分的内容更新.</p><p>HTML 部分: 将这个 tabs 分为 title 和 views 两个部分, title 部分使用 v-for 循环将一个存着标题的数组渲染到页面中去, views 部分根据当前选择选项的 index 显示对应的内容.</p><pre><code class="html">&lt;template&gt;  &lt;div id=&quot;tabs&quot;&gt;    &lt;div class=&quot;titles&quot;&gt;      &lt;ul&gt;        &lt;li v-for=&quot;(goods,index) in goods&quot;          :key=&quot;goods.index&quot;          @click=&quot;toggle(index)&quot;&gt;          &lt;span :class=&quot;{selected:select==index}&quot;&gt;{{goods.text}}&lt;/span&gt;        &lt;/li&gt;      &lt;/ul&gt;    &lt;/div&gt;    &lt;div class=&quot;views&quot;&gt;      {{views[select].text}}    &lt;/div&gt;    &lt;component :is=&quot;currentView&quot;&gt;1&lt;/component&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre><p>JavaScript 部分: 一个 title 数组和一个内容数组 views, 一个select 标识符, 用来确定被选中选项的 index 值, 还包括一个 toggle 方法用来响应鼠标点击更改 select 的值.</p><pre><code class="javascript">&lt;script&gt;  export default {    data() {      return {        select: 0,        goods: [          {text: &#39;下单&#39;},          {text: &#39;挂单&#39;},          {text: &#39;外卖&#39;},          {text: &#39;团购&#39;}],        views: [          {text: &#39;下单页面&#39;},          {text: &#39;挂单页面&#39;},          {text: &#39;外卖页面&#39;},          {text: &#39;团购页面&#39;}]        };    },    methods: {      toggle(index) {        this.select = index;      }    }  };</code></pre><p>CSS 部分: 这个主要问题是鼠标点击切换标题时, 下面的光标随之移到, 最开始使用 border-bottom 来作为光标, 但发现样式不好控制. 最后使用伪元素, 解决下光标问题. 为标题加一个 span 标签, 给其绑定一个动态的的 class selected, 当前选择元素的 select 和 当前的 index 相等时, 为其添上一个 selected 类.</p><pre><code class="css">&lt;style lang=&quot;scss&quot;&gt;  #tabs {    display: flex;    // 让整个页面绝对居中    position: absolute;    top: 0;    right: 0;    bottom: 0;    left: 0;    width: 30%;    height: 100%;    margin: auto;    padding: 0;    padding: 0 1em;    font-size: 16px;    background-color: #fff;    flex-direction: column;    .titles {      ul {        display: flex;        list-style: none;        width: 100%;        margin: 0 0 1em 0;        padding: 0;        border-bottom: 2px solid rgba(0, 0, 0, .18);        flex-direction: row;        justify-content: space-between;        li {          display: inline;          margin: 1em 0;          &amp;:hover {            cursor: pointer;          }          span {            position: relative;            padding: 1em 0;            // 下划线            &amp;::after {              display: block;              content: &quot;&quot;;              position: absolute;              top: 3.125em; // 文字高度 加上文字上下 padding 值加上父元素 border-bottom 的宽度              left: 0;              width: 2em; // 下划线初始两个字宽度              height: 3px;              background-color: #409eff;              transition: transform .3s ease-in-out; // 设置缓入缓出效果              transform: scale(0, 1); // 将 x 轴缩放为 0              transform-origin: 50%; // transform-origin 属性允许改变被转换元素的位置            }          }        }        // 选中时样式        .selected {          color: #409eff;          &amp;::after {            transform: scale(1, 1); // 选中时恢复          }        }      }    }  }&lt;/style&gt;</code></pre><p>效果演示图: <img src="http://ou37yhdfy.bkt.clouddn.com/201711201243_855.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tabs </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue + firebase 模拟实现地址选择四级联动</title>
      <link href="/pages/90b768b0/"/>
      <url>/pages/90b768b0/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-firebase-模拟实现地址选择四级联动"><a href="#vue-firebase-模拟实现地址选择四级联动" class="headerlink" title="vue + firebase 模拟实现地址选择四级联动"></a>vue + firebase 模拟实现地址选择四级联动</h2><p>使用 vue + firebase 完成一个简单的地址选择器, 使用 webpack 打包生成.</p><p>将地址数据导入到 firebase 实时数据库中, 在应用中通过 firebase + vuefire 获得数据, 再使用 vue 将数据渲染到页面上.</p><ul><li><p>安装 firebase 和 vuefire:<br><code>npm i -S firebase vuefire</code></p></li><li><p>在入口文件中注册使用 vuefire 和 firebase:</p><pre><code class="JavaScript">// main.jsimport VueFire from &#39;vuefire&#39;;import Firebase from &#39;firebase&#39;;</code></pre></li></ul><p>Vue.use(VueFire);</p><pre><code>在 vue 组件中注册使用 firebase```javascriptimport Firebase from &#39;firebase&#39;;const config = {    apiKey: &#39;AIzaSyBSHeqABc_pmcXwBgP4GhIvO3DH9eJtZlo&#39;,    authDomain: &#39;roojay123.firebaseapp.com&#39;,    databaseURL: &#39;https://roojay123.firebaseio.com&#39;,    projectId: &#39;roojay123&#39;,    storageBucket: &#39;roojay123.appspot.com&#39;,    messagingSenderId: &#39;691637156012&#39;};// 注册 appFirebase.initializeApp(config);// 获取数据库引用const db = Firebase.database();</code></pre><p>通过 <code>.ref(&#39;/&#39;)</code> 取得位于根目录下的地址数据数组:</p><pre><code class="JavaScript">firebase: {        data: db.ref(&#39;/&#39;)    },</code></pre><p>使用 vue <code>v-for</code> 指令, 将数组数据渲染到页面列表中.</p><p>为列表绑定一个 click 方法, 用于获取点击元素的 index, 在根据这个 index 的值渲染后面其他列表的数据.</p><p><img src="https://i.loli.net/2017/11/18/5a0f0ff5c6cdb.gif" alt="gif"></p><p>查看:</p><p><code>$ npm i</code></p><p><code>$ npm run dev</code></p><p><a href="https://github.com/roojay520/vue-firebase" target="_blank" rel="noopener">Github Demo 地址</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Firebase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 基础使用</title>
      <link href="/pages/b4ba32f9/"/>
      <url>/pages/b4ba32f9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p></blockquote><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h4 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h4><p>Node.js 遵循 CommonJS 规范, 模块通过 <code>exports</code> 或者 <code>module.exports</code> 导出需要暴露的接口, 使用 <code>require</code> 方法同步加载所要依赖的其它模块.</p><pre><code class="javascript">// bar.js 导出文件exports.addSum = (a, b) =&gt; a + b;// 或者module.exports = function(a, b){    return a + b;}// foo.js 引入文件const addSum = require(&#39;bar&#39;);// 或者 const addSum = require(&#39;./bar.js&#39;);const result = addSum(2, 5); // 7</code></pre><h4 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h4><p>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西(require 是运行时加载模块)。ES6 通过过 <code>export</code> 命令显式指定输出的代码，再通过 <code>import</code> 命令输入。</p><pre><code class="javascript">// bar.jsconst sumAdd = (x, y) =&gt; x + y;const sumMinus = (a, b) =&gt; a - b;// 导出两个方法export {sumAdd, sumMinus};// foo.js// 只加载 sumAdd 方法import {sumAdd} from &#39;./bar&#39;;sumAdd(2, 3); // 5sumMinus(3, 2); // 报错// 加载两个方法import {sumAdd,sumMinus } from &#39;./bar&#39;;sumAdd(2, 3); // 5sumMinus(3, 2); // 1// 加载所有模块import &#39;./bar&#39;;sumAdd(2, 3); // 5sumMinus(3, 2); // 1</code></pre><p><code>export default</code> 用于导出匿名函数.<br><code>import()</code> 类似于 Node 的 <code>require</code>方法，区别主要是前者是异步加载，后者是同步加载.<br><code>import()</code>返回一个 Promise 对象.</p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><blockquote><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p></blockquote><p><img src="https://ooo.0o0.ooo/2017/11/14/5a0ab0cbd7554.png" alt="webpack"></p><h4 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h4><p>Webpack 本身只能处理原生的 JavaScript 模块，但是 loader 转换器可以将各种类型的资源转换成 JavaScript 模块。任何资源都可以成为 Webpack 可以处理的模块。</p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p> plugin 和 loader 的区别是, loader 是在 import 时根据不同的文件名, 匹配不同的 loader对这个文件做处理,而 plugin 关注的不是文件的格式, 而是在编译的各个阶段, 会触发不同的事件,让你可以干预每个编译阶段.</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><pre><code class="bash"># 初始化一个项目,生成 package.json 文件$ npm init</code></pre><p>更改 package.json 文件:</p><pre><code class="json">{  &quot;name&quot;: &quot;webpack&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;Webpack setting.&quot;,  &quot;scripts&quot;: {    &quot;dev&quot;: &quot;set type=dev&amp;webpack&amp;webpack-dev-server --open&quot;,    &quot;build&quot;: &quot;set type=build&amp;webpack&quot;  },  &quot;keywords&quot;: [    &quot;webpack&quot;  ],  &quot;author&quot;: &quot;roojay &lt;roojay520@gmail.com&gt;&quot;,  &quot;repository&quot;: {    &quot;type&quot;: &quot;git&quot;,    &quot;url&quot;: &quot;https://github.com/roojay520/webpack.git&quot;  },  &quot;license&quot;: &quot;MIT&quot;,  &quot;devDependencies&quot;: {    &quot;autoprefixer&quot;: &quot;^7.1.6&quot;,    &quot;babel-core&quot;: &quot;^6.26.0&quot;,    &quot;babel-loader&quot;: &quot;^7.1.2&quot;,    &quot;babel-preset-env&quot;: &quot;^1.6.1&quot;,    &quot;copy-webpack-plugin&quot;: &quot;^4.2.0&quot;,    &quot;css-loader&quot;: &quot;^0.28.7&quot;,    &quot;extract-text-webpack-plugin&quot;: &quot;^3.0.2&quot;,    &quot;file-loader&quot;: &quot;^1.1.5&quot;,    &quot;glob&quot;: &quot;^7.1.2&quot;,    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,    &quot;html-withimg-loader&quot;: &quot;^0.1.16&quot;,    &quot;node-sass&quot;: &quot;^4.5.3&quot;,    &quot;postcss-loader&quot;: &quot;^2.0.8&quot;,    &quot;purify-css&quot;: &quot;^1.2.5&quot;,    &quot;purifycss-webpack&quot;: &quot;^0.7.0&quot;,    &quot;sass-loader&quot;: &quot;^6.0.6&quot;,    &quot;style-loader&quot;: &quot;^0.19.0&quot;,    &quot;uglifyjs-webpack-plugin&quot;: &quot;^1.0.1&quot;,    &quot;url-loader&quot;: &quot;^0.6.2&quot;,    &quot;webpack&quot;: &quot;^3.8.1&quot;,    &quot;webpack-dev-server&quot;: &quot;^2.9.3&quot;  },  &quot;dependencies&quot;: {    &quot;normalize.css&quot;: &quot;^7.0.0&quot;  }}</code></pre><p>设置 webpack.config 文件</p><pre><code class="js">// 路径支持const path = require(&#39;path&#39;);// node glob 对象const glob = require(&#39;glob&#39;);// 引 入webpack 内部文件const webpack = require(&#39;webpack&#39;);// css 分离导出插件const ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;);// js 压缩const UglifyPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);// html 插入const HtmlPlugin = require(&#39;html-webpack-plugin&#39;);// 去掉未使用的 CSS,减少 CSS 冗余const PurifyCss = require(&#39;purifycss-webpack&#39;);// 无需编译打包的静态资源转移const CopyWebpackPlugin = require(&#39;copy-webpack-plugin&#39;);// 公共路径配置let publicPath;process.env.type === &#39;build&#39; ? (publicPath = &#39;http://cdn.roojay.com/&#39;) : (publicPath = &#39;http://127.0.0.1:4399/&#39;);module.exports = {    // 开发调试设置    devtool: &#39;eval-source-map&#39;,    // 入口文件    entry: {        // js 入口文件        app: `${__dirname}/src/main.js`        // 第三方库抽离        // jquery: &#39;jquery&#39;,        // vue: &#39;vue&#39;    },    // 出口文件    output: {        // 打包文件路径        path: `${__dirname}/dist/`,        filename: &#39;js/[name].[hash:6].js&#39;,        publicPath: website.publicPath    },    // 模块    module: {        // 编译规则        rules: [             // 配置 babel            {                test: /\.js$/,                use: {                    loader: &#39;babel-loader&#39;,                // 匹配正则表达式排除                exclude: /node_modules/            },            // 配置sass编译规则            {                // 匹配处理文件的扩展名的正则表达式                test: /\.(css|scss)$/,                // 使用模块的名称                use: ExtractTextPlugin.extract({                    fallback: &#39;style-loader&#39;,                    use: [{                        loader: &#39;css-loader&#39;,                        options: {                            minimize: true,                            sourceMap: true,                            modules: true,                            importLoaders: 1                        }                    },                        // 前缀自动插入                    {                        loader: &#39;postcss-loader&#39;                    },                        // scss 转换                    {                        loader: &#39;sass-loader&#39;                    }                    ]                })            },            // 图片字体处理            {                test: /\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\?.+)?$/,                use: {                    loader: &#39;url-loader&#39;,                    options: {                        // 将小于 10KB 的图片转换为成 Base64 的格式，写入JS。                        limit: 10240,                        outputPath: &#39;images/&#39;                    }                }            },            // html 文件中引入 &lt;img&gt; 标签            {                test: /\.(htm|html)$/i,                loader: &#39;html-withimg-loader&#39;            }        ]    },    // 插件配置    plugins: [        // 开头文件插入        new webpack.BannerPlugin(&#39;Created by @Roojay.&#39;)        // 打包生成 html        new HtmlPlugin({            // 开启 html 压缩            minify: {                // 去掉属性双引号                removeAttributeQuotes: true            },            // 避免缓存JS            hash: true,            // html 打包模板文件路径            template: &#39;./src/index.html&#39;        }),        // css 打包分离        new ExtractTextPlugin(&#39;./css/[name].[hash:6].css&#39;),        // 去掉未使用的 css        // 如果存在使用 js 更改元素类名实现 css 样式,不要启用这个插件 启用 css-loader 里面的压缩        // new PurifyCss({        //     // 配置解析规则的路径(绝对路径)        //     paths: glob.sync(path.join(__dirname, &#39;src/*.html&#39;)),        //     // css 空格压缩        //     minimize: true        // }),        // js压缩        new UglifyPlugin({            uglifyOptions: {                ie8: false,                output: {                    // 去掉注释                    comments: false,                    // 压缩掉空格                    beautify: false                },                mangle: {                    keep_fnames: true                },                compress: {                    drop_console: true                }            }        }),        // 无需编译的静态资源转移        new CopyWebpackPlugin([{            from: `${__dirname}/src/docs`,            to: &#39;./docs&#39;        }]),        // 启用热加载        new webpack.HotModuleReplacementPlugin(),        // 第三方类库引入        // new webpack.ProvidePlugin({        // $: &quot;jquery&quot;,        // Vue: &quot;vue&quot;        // }),        // 第三方库打包抽离        // new webpack.optimize.CommonsChunkPlugin({        //     // 入口引入时的名字        //     name: [&#39;vue&#39;, &#39;jquery&#39;],        //     // 打包文件的路径        //     filename: &#39;static/js/[name].min.js&#39;,        //     // 最小打包模块        //     minChunks: 3        // }),    ],    // watch 配置    watchOptions: {        // 检测文件修改时间,单位(毫秒)        poll: 1000,        // 防止误操作重复打包,半秒内重复保存,不执行打包操作        aggregeateTimeout: 500,        ignore: /node_modules/    },    // 配置开发时用的服务器    devServer: {        contentBase: path.resolve(__dirname, &#39;dist&#39;),        host: &#39;127.0.0.1&#39;,        // 服务端压缩开启        compress: true,        port: 4399,        historyApiFallback: true    }};</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery基础</title>
      <link href="/pages/889563/"/>
      <url>/pages/889563/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CDN 方式引入 jQuery</p></blockquote><script src="https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"></script><h2 id="选择器操作-DOM-节点"><a href="#选择器操作-DOM-节点" class="headerlink" title="选择器操作 DOM 节点"></a>选择器操作 DOM 节点</h2><ul><li>$(“选择器”); 可以通过选择器选择 DOM 节点</li><li>jQuery(“h1”); 等同于 $(“h1”); 返回 h1</li><li>$(“h1”).text(); 返回 h1 里面的 text</li><li>$(“h1”).text(“Hello World!”) 更改覆盖 h1 的内容</li></ul><p><strong>注意DOM 加载完成之后 jQuery 开始运行，否则 jQuery 操作会被覆盖，不会生效。</strong></p><pre><code class="javascript">// 文档加载完成后执行替换方法jQuery(document).ready(function(){    $(&quot;h1&quot;).text(&quot;Hello World!);});// 或者使用以下方法$(document).ready(function(){    $(&quot;h1&quot;).text(&quot;Hello World!);});</code></pre><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><pre><code class="javascript">.class li:first; // 选择列表里面的第一个元素.class li:last; // 选择列表里面的最后一个元素.class li:odd; // 选择列表里面的奇数位元素.class li:even; // 选择列表里面的偶数位元素</code></pre><h2 id="遍历寻找操作-DOM-节点"><a href="#遍历寻找操作-DOM-节点" class="headerlink" title="遍历寻找操作 DOM 节点"></a>遍历寻找操作 DOM 节点</h2><blockquote><p>速度快于选择器操作</p></blockquote><pre><code class="javascript">$(&quot;.class&quot;).find(&quot;li&quot;);</code></pre><h3 id="遍历伪类选择"><a href="#遍历伪类选择" class="headerlink" title="遍历伪类选择"></a>遍历伪类选择</h3><pre><code class="javascript">$(&quot;.class&quot;).first(); // 选择列表第一个元素$(&quot;.class&quot;).last(); // 选择列表最后一个元素$(&quot;.class&quot;).odd(); // 选择列表奇数位元素$(&quot;.class&quot;).even(); // 选择列表偶数位元素</code></pre><h3 id="上下遍历"><a href="#上下遍历" class="headerlink" title="上下遍历"></a>上下遍历</h3><pre><code class="javascript">$(&quot;.class&quot;).parent(&quot;li&quot;); // 向上一层遍历，得到直系父元素$(&quot;.class&quot;).children(&quot;li&quot;); // 向下遍历，得到直系子元素</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS转换字符串单词首字母大写</title>
      <link href="/pages/e11bdebd/"/>
      <url>/pages/e11bdebd/</url>
      
        <content type="html"><![CDATA[<p>代码如下:</p><pre><code class="javascript">const string = &#39;to young, too simple.&#39;;const toUp = str =&gt; str.split(&#39; &#39;).map(item =&gt; item.charAt(0).toLocaleUpperCase() + item.slice(1)).join(&#39; &#39;);toUp(string);</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量作用域</title>
      <link href="/pages/7395d6fb/"/>
      <url>/pages/7395d6fb/</url>
      
        <content type="html"><![CDATA[<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li>JavaScript 的函数可以嵌套，内部函数可以访问外部函数定义的变量，反之则不行。</li><li><code>var</code>和<code>let</code>创建的变量区别在于:<ol><li><code>var</code>声明的变量作用域为最近的函数块，<code>let</code>声明的变量作用域为最近的闭合块，往往小于函数块。</li><li><code>var</code>声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出<code>undefined</code>。</li><li><code>let</code>声明不受变量提升的约束，这意味着<code>let</code>声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。<code>let</code>声明的变量不能在实际声明之前使用，否则会抛出<code>ReferenceError</code>异常。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YouDon&#39;tKnowJavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量提升</title>
      <link href="/pages/3080460d/"/>
      <url>/pages/3080460d/</url>
      
        <content type="html"><![CDATA[<h2 id="变量与函数提升"><a href="#变量与函数提升" class="headerlink" title="变量与函数提升"></a>变量与函数提升</h2><p><strong>包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</strong></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>例如一个 var = 2；声明，在 javascript 引擎中它实际上被分为 2 个部分， 定义声明var a；和赋值声明 a = 2；第一个定义声明在编译阶段进行，第二个赋值声明要等到执行阶段才会进行。</p><p><strong>例1：</strong></p><pre><code class="javascript">a = 2;var a;console.log(a); // 2</code></pre><p>上面的例子等同于：</p><pre><code class="javascript">var a;a = 2;console.log(a); // 2</code></pre><p><strong>例2：</strong></p><pre><code class="javascript">console.log(a); //undefinedvar a = 2;</code></pre><p>上面的例子等同于：</p><pre><code class="javascript">var a;console.log(a); //undefineda = 2;</code></pre><h4 id="let-与-var区别"><a href="#let-与-var区别" class="headerlink" title="let 与 var区别"></a>let 与 var区别</h4><ol><li><code>var</code>声明的变量作用域为最近的函数块，<code>let</code>声明的变量作用域为最近的闭合块，往往小于函数块。</li><li><code>var</code>声明的变量会被提升到作用域的头部，但是赋值不会被提升，在实际声明前使用会抛出<code>undefined</code>。</li><li><code>let</code>声明不受变量提升的约束，这意味着<code>let</code>声明不会被提升到当前执行上下文的顶部。在块中的变量初始化之前，引用它将会导致 ReferenceError（而使用 var 声明变量则恰恰相反，该变量的值是 undefined ）。这个变量处于从块开始到 let 初始化处理的”暂存死区“之中。<code>let</code>声明的变量不能在实际声明之前使用，否则会抛出<code>ReferenceError</code>异常。<h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3></li></ol><p><strong>函数声明和变量声明都会被提升,但是函数表达式却不会被提升。</strong></p><pre><code class="javascript">foo(); // 1var foo;function foo() {    console.log(1);}foo = function() {    console.log(2);};</code></pre><p>上面的 foo() 函数执行会输出 1，而不是 2 。<br>上面的代码等同于：</p><pre><code class="javascript">function foo() {    console.log(1);}foo(); // 1foo = function() {    console.log(2);};</code></pre><p><strong>函数会首先被提升，然后才是变量。</strong></p><p>尽管 var foo 在 function foo(){..} 函数之前，但是 function foo(){..} 函数会被优先提升到了函数顶部， var foo 作为重复的声明会被忽略，但是如果后面再次使用函数声明会覆盖前面的声明。</p><p>一个普通块内部的变量声明通常会被提升到所在作用域的顶部，例如：</p><pre><code class="javascript">var tmp = new Date();function foo() {    console.log(tmp);    if (false) {        var tmp = &quot;hello world&quot;;    }}f(); // undefined</code></pre><p>if 块作用域内部的 tmp 变量被提升到了 foo() 函数作用域的顶部，而赋值操作留在了 if 块作用域内部。上面的代码等同于：</p><pre><code class="javascript">var tmp = new Date();function foo() {    var tmp;    console.log(tmp);    if (false) {        tmp = &quot;hello world&quot;;    }}foo(); // undefined</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YouDon&#39;tKnowJavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="/pages/118b8ca3/"/>
      <url>/pages/118b8ca3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>尽管通常将 JavaScript 归类为“动态”或“解释执行”语言，但事实上它是一门<strong>编译语言</strong>。任何 JavaScript 代码片段在执行前都要进行编译（通常就在执行前）。但与传统的编译语言不同，它<strong>不是提前编译</strong>的，编译结果也<strong>不能在分布式系统中进行移植</strong>。</p></blockquote><h2 id="编译三步骤"><a href="#编译三步骤" class="headerlink" title="编译三步骤"></a>编译三步骤</h2><p><strong>1.</strong> 分词/词法分析（Tokenizing/Lexing）<br>将字符串分解成编程语言所能识别的代码块，这些代码块被称为<strong>词法单元（token）</strong>。</p><p>如果词法单元生成器在判断一个字符是一个独立的词法单元还是其他词法单元的一部分时（是否依赖于其他词法单元），调用的是<strong>有状态</strong>的解析规则，那么这个过程就被称为<strong>词法分析</strong>。</p><p><strong>2.</strong> 解析/语法分析（Parsing）<br>将<strong>词法单元流（数组）</strong>转换成一个逐级嵌套结构的树“<strong>抽象语法树”</strong>（Abstract Syntax Tree，AST）。拥有一个顶级节点，以及连续的子节点。类似于 DOM树？</p><p><strong>3.</strong> 代码生成<br>将抽象语法树转换为引擎可识别执行的代码。例如：var a = 2；<br>第一步：创建一个叫做 a 的变量（分配内存，确定储存地址空间等）。<br>第二步：运行时引擎会在作用域中查找该变量（LHS），找到之后将 2 这个值储存到 a 中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> YouDon&#39;tKnowJavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB安装</title>
      <link href="/pages/c5d54bc1/"/>
      <url>/pages/c5d54bc1/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>安装使用:</p><ol><li>官网下载 MongoDB: <a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center#community</a></li><li>选择 Custom 安装</li><li>创建数据目录，<strong>数据目录应该放在根目录下</strong>(如: C:\ )。<br>data<br>├── db<br>│   ├── mongo.config<br>└── log<br> └── MongoDB.log</li><li>启动服务：<code>mongod --dbpath c:\data\db</code>， 由于windows power shell 限制，使用 <code>.\mongod --dbpath c:\data\db</code>命令。</li><li>将 MongoDB 设为 windows 服务开机自启动：<br><code>mongod.exe --bind_ip yourIPadress --logpath &quot;C:\data\dbConf\mongodb.log&quot; --logappend --dbpath &quot;C:\data\db&quot; --port yourPortNumber --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install</code><ul><li>–bind_ip    绑定服务 IP，若绑定 127.0.0.1，则只能本机访问，不指定默认本地所有IP。</li><li>–logpath    指定 MongoDB 日志文件，注意是指定文件不是目录。</li><li>–logappend    使用追加的方式写日志。</li><li>–dbpath    指定数据库路径</li><li>–port    指定服务端口号，默认端口27017</li><li>–serviceName    指定服务名称</li><li>–serviceDisplayName    指定服务名称，有多个mongodb服务时执行。</li><li>–install    指定作为一个Windows服务安装。</li></ul></li></ol><h2 id="Robo-3T"><a href="#Robo-3T" class="headerlink" title="Robo 3T"></a>Robo 3T</h2><p>一个 Mongo 可视化工具，更便捷的操作 MongoDB 。</p><ol><li>下载安装：<a href="https://robomongo.org/download" target="_blank" rel="noopener">https://robomongo.org/download</a></li><li>windows 开启端口，控制面板 → 系统和安全 → Windows 防火墙 → 高级设置 → 入站规则 → 新建规则 → 端口 → 27017</li><li>打开 Robo 3T → create  → 设置 name 为 localhost → 端口为 27017  → save → connect</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html列表</title>
      <link href="/pages/a465a2c5/"/>
      <url>/pages/a465a2c5/</url>
      
        <content type="html"><![CDATA[<h2 id="html-列表"><a href="#html-列表" class="headerlink" title="html 列表"></a>html 列表</h2><h3 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h3><p>使用标签: <code>ul</code> <code>li</code><br><strong>常用属性:</strong><br><code>disc</code>(实心圆)<br><code>circle</code>(空心圆)<br><code>square</code>(正方形)</p><h3 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h3><p>使用标签: <code>ol</code> <code>li</code><br>*<em>常用属性: *</em><br><code>A</code>(大写字母ABC编号)<br><code>a</code>(小写字母abc编号)<br><code>I</code>(大写罗马数字编号)<br><code>i</code>(小写罗马数字编号)<br><code>start</code>(规定编号从何值开始)</p><h3 id="3-列表嵌套"><a href="#3-列表嵌套" class="headerlink" title="3. 列表嵌套"></a>3. 列表嵌套</h3><p>列表之间可以互相嵌套</p><h3 id="4-自定义列表"><a href="#4-自定义列表" class="headerlink" title="4. 自定义列表"></a>4. 自定义列表</h3><p>没有编号，只有列表格式。<br>使用标签: <code>dl</code>(自定义列表) <code>dt</code>(列表项) <code>dd</code>(列表描述)</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css和响应式</title>
      <link href="/pages/343902f6/"/>
      <url>/pages/343902f6/</url>
      
        <content type="html"><![CDATA[<h1 id="css框架"><a href="#css框架" class="headerlink" title="css框架"></a>css框架</h1><h2 id="Bootstrap-框架"><a href="#Bootstrap-框架" class="headerlink" title="Bootstrap 框架"></a>Bootstrap 框架</h2><blockquote><p>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。<br><a href="http://www.runoob.com/bootstrap/bootstrap-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/bootstrap/bootstrap-tutorial.html</a></p></blockquote><ul><li>在 html head 开头引入下面代码：</li></ul><pre><code class="html">&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;!--  兼容古老的 IE --&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;!-- 响应式适应 ，width 属性控制设备的宽度显示， initial-scale=1确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放，user-scalable=no 可以禁用其缩放（zooming）功能--&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, user-scalable=no&quot;&gt;    &lt;!-- CSS 样式重置 --&gt;    &lt;link href=&quot;https://cdn.bootcss.com/normalize/7.0.0/normalize.min.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;!-- 引入 Bootstrap css 压缩文件--&gt;    &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;!-- 引入自己 css 的文件 --&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;../style/task_1.css&quot;&gt;    &lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;</code></pre><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><blockquote><p>根据不同像素屏幕，展示不同大小页面。</p></blockquote><p><code>!important</code> 为开发者提供了一个增加样式权重的方法。!important是对整条样式的声明，包括这个样式的属性和属性值。</p><p><strong>### 媒体查询</strong></p><pre><code class="css">@media only screen and (max-width: 300px) {    p {        background-color: red;    }}</code></pre><ul><li>only 兼容旧式浏览器。</li><li>screen 表示这个媒体查询适用于所有屏幕。</li><li>and 后面跟条件。</li><li><strong>一般个@media样式要放在css样式表的最下面，不然会被相同样式覆盖。</strong></li></ul><h3 id="CSS-样式重置"><a href="#CSS-样式重置" class="headerlink" title="CSS 样式重置"></a>CSS 样式重置</h3><ul><li>不同的浏览器在对于CSS没有定义的一些样式属性是不一样的</li><li>比如没有在自己的CSS里面规定超链接有没有下划线的时候，有些浏览器有，有些浏览器没有。</li><li>再比如有一些浏览器规定的超链接默认颜色是蓝色，有一些又是黑色。</li><li>而这个CSS的功能就是对几乎所有的默认样式进行重置，让所有的浏览器上对于未定义的样式浏览效果达到一致。</li></ul><p><strong>使用方法：</strong></p><pre><code class="html">&lt;!-- 在自己的样式表前面引入以下 Normalize.css 360cdn 链接地址--&gt;&lt;link href=&quot;https://lib.baomitu.com/normalize/7.0.0/normalize.min.css&quot; rel=&quot;stylesheet&quot;&gt;</code></pre><h3 id="网格设计"><a href="#网格设计" class="headerlink" title="网格设计"></a>网格设计</h3><ul><li>大部分网页采用 12 columns 设计，可以很好的划分为2，3，4等份。</li></ul><h2 id="文章字体"><a href="#文章字体" class="headerlink" title="文章字体"></a>文章字体</h2><ul><li>segmentfault<pre><code class="css">font-family: -apple-system,&quot;Helvetica Neue&quot;,Helvetica,Arial,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;WenQuanYi Micro Hei&quot;,&quot;Microsoft Yahei&quot;,sans-serif;</code></pre></li></ul><p>font-size: 14px;</p><pre><code>* 知乎```cssfont-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,Noto Sans CJK SC,WenQuanYi Micro Hei,Arial,sans-serif;font-size: 15px;</code></pre><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>导航栏 #243d4c</p><p>背景 #eee<br>#f5f5f5<br>#f8f8f8<br>#ffffff</p><p>按钮 #02b3e4<br>#148bb1<br>#2D78BA</p><p>边框阴影</p><pre><code class="css">.ss::before, .clss::before {    bottom: 0;    box-shadow: 0 -1px 0 #e0e0e0, 0 0 2px rgba(0,0,0,.12), 0 2px 4px rgba(0,0,0,.24);    content: &#39;&#39;;    display: block;    left: 0;    pointer-events: none;    position: absolute;    right: 0;    top: 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css布局</title>
      <link href="/pages/5a252ba9/"/>
      <url>/pages/5a252ba9/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-基础布局"><a href="#CSS-基础布局" class="headerlink" title="CSS 基础布局"></a>CSS 基础布局</h1><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>简单的 Micro clearfix 方法清除浮动，原文链接:<a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="noopener">http://nicolasgallagher.com/micro-clearfix-hack/</a></p><pre><code class="scss">@mixin clearfix {    &amp;::before, &amp;::after{        content: &quot; &quot;;        display: flex;    }    &amp;::after {        clear: both;    }}</code></pre><h2 id="三栏式布局"><a href="#三栏式布局" class="headerlink" title="三栏式布局"></a>三栏式布局</h2><blockquote><p>两边侧栏固定宽度，中间栏宽度自适应，并且中间栏要在放在文档流前面以优先渲染。<br>其父元素的高度始终是由三栏中高度最高的元素确定。</p></blockquote><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><blockquote><p>来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。<a href="https://alistapart.com/article/holygrail" target="_blank" rel="noopener">原文链接</a></p></blockquote><pre><code class="html">&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;box mid&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box left&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;box right&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><ol><li>设置<code>box-mid</code> <code>box-left</code> <code>box-right</code> 三者向左浮动。</li><li>设置<code>box-mid</code>宽度为 100%。</li><li>设置负边距，<code>box-left</code>设置负左边距为 100%，<code>box-right</code>设置负左边距为负的自身宽度。</li><li>设置<code>container</code>的<code>padding</code>值，给<code>box-left</code>和<code>box-right</code>留出空间。</li><li>设置<code>left</code>和<code>right</code>为相对定位(position: relative).</li><li>设置<code>box-left</code>的<code>left</code>值为负的<code>box-left</code>宽度，<code>box-right</code>的<code>right</code>值为负的<code>right</code>宽度。</li></ol><p>Q:当面板的<code>mid</code>部分比两边的子面板宽度小的时候，布局会乱掉。<br>A:为<code>body</code>设置一个最小宽度。<code>body{min-width:700px;}</code></p><h3 id="淘宝双飞翼布局"><a href="#淘宝双飞翼布局" class="headerlink" title="淘宝双飞翼布局"></a>淘宝双飞翼布局</h3><blockquote><p>淘宝双飞翼布局是一个经典的三栏式布局，</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局</title>
      <link href="/pages/ab688311/"/>
      <url>/pages/ab688311/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex-布局"><a href="#Flex-布局" class="headerlink" title="Flex 布局"></a>Flex 布局</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes" target="_blank" rel="noopener">MDN</a></p><ul><li>Flex 是 Flexible Box 的缩写，意为“弹性布局”，为盒模型提供灵活的布局方式。</li><li>盒子中的子元素可以在各个方向上进行布局，并且能以弹性尺寸来适应显示空间。</li><li>弹性容器的每个子元素都称为弹性项目。弹性容器直接包含的文本将被包覆成匿名弹性单元。</li><li>元素的显示顺序可以与它们在源代码中的顺序无关。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>flex 布局包括一个水平 main axis 和一个垂直 cross axis</li></ul><p><img src="https://mdn.mozillademos.org/files/12998/flexbox.png" alt=""></p><ul><li>通过设置 display 的值启用 flex</li><li>设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</li></ul><pre><code class="css">    .box-flex{        display： -ms-flex；        display: -webkit-flex;        display: flex;    }    .box-inline-flex{        display: -ms-inline-flex;        display: -webkit-inline-flex;        display: inline-flex;    }</code></pre><h2 id="flex-属性"><a href="#flex-属性" class="headerlink" title="flex 属性"></a>flex 属性</h2><ul><li>flex-direction：确立主轴。</li><li>justify-content：定义了在当前行上，弹性项目沿主轴如何排布。</li><li>align-items：定义了在当前行上，弹性项目沿侧轴默认如何排布。</li><li>align-self：定义了单个弹性项目在侧轴上应当如何对齐，这个定义会覆盖由 align-items 所确立的默认值。</li></ul><h3 id="flex-direction（主轴方向）"><a href="#flex-direction（主轴方向）" class="headerlink" title="flex-direction（主轴方向）"></a>flex-direction（主轴方向）</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png" alt=""></p><blockquote><p>flex-direction 决定主轴方向（项目排列方向），包括四个值。</p></blockquote><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h3 id="flex-wrap（换行控制）"><a href="#flex-wrap（换行控制）" class="headerlink" title="flex-wrap（换行控制）"></a>flex-wrap（换行控制）</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png" alt=""></p><blockquote><p>控制一条轴上放不下子项目该如何换行。</p></blockquote><ul><li>nowrap（默认值）：不换行</li><li>wrap：换行，第一行在上。</li><li>wrap-reverse：换行，第一行在下。</li></ul><h3 id="justify-content（主轴排列方式）"><a href="#justify-content（主轴排列方式）" class="headerlink" title="justify-content（主轴排列方式）"></a>justify-content（主轴排列方式）</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png" alt=""></p><ul><li>flex-start：从行首起始位置开始排列。</li><li>flex-end：从行尾位置开始排列。</li><li>center：居中排列。</li><li>space-between：均匀排列每个元素<br>首个元素放置于起点，末尾元素放置于终点。</li><li>space-around：均匀排列每个元素<br>每个元素周围分配相同的空间。</li></ul><h3 id="align-items-侧轴排列方式"><a href="#align-items-侧轴排列方式" class="headerlink" title="align-items(侧轴排列方式)"></a>align-items(侧轴排列方式)</h3><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png" alt=""></p><ul><li>flex-start：元素向侧轴起点对齐。</li><li>flex-end：元素向侧轴终点对齐。</li><li>center：元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="align-conten（多轴线对齐方式）"><a href="#align-conten（多轴线对齐方式）" class="headerlink" title="align-conten（多轴线对齐方式）"></a>align-conten（多轴线对齐方式）</h3><blockquote><p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p></blockquote><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png" alt=""></p><ul><li>flex-start：所有行从垂直轴起点开始填充。第一行的垂直轴起点边和容器的垂直轴起点边对齐。接下来的每一行紧跟前一行。</li><li>flex-end：所有行从垂直轴末尾开始填充。最后一行的垂直轴终点和容器的垂直轴终点对齐。同时所有后续行与前一个对齐。</li><li>center：所有行朝向容器的中心填充。每行互相紧挨，相对于容器居中对齐。容器的垂直轴起点边和第一行的距离相等于容器的垂直轴终点边和最后一行的距离。</li><li>space-between：所有行在容器中平均分布。相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的边对齐。</li><li>space-around：所有行在容器中平均分布，相邻两行间距相等。容器的垂直轴起点边和终点边分别与第一行和最后一行的距离是相邻两行间距的一半。</li><li>stretch：拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行。</li></ul><h2 id="子项目属性"><a href="#子项目属性" class="headerlink" title="子项目属性"></a>子项目属性</h2><ul><li>order：定义项目的排列顺序。数值越小，排列越靠前，默认为 0。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png" alt=""></li><li>flex-grow：定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png" alt=""></li><li>flex-shrink：定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。属性为 0，项目不缩小，负值对该属性无效。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg" alt=""></li><li>flex-basis：定义项目在主轴所占据的基本空间，默认值 auto，即项目本来的大小。</li><li>flex：是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</li><li>align-self：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript DOM</title>
      <link href="/pages/218ff168/"/>
      <url>/pages/218ff168/</url>
      
        <content type="html"><![CDATA[<h2 id="消息窗口"><a href="#消息窗口" class="headerlink" title="消息窗口"></a>消息窗口</h2><ul><li><p>document.write(字符串或者变量或者 Html 标签); 直接在向 html 的输出流中写内容，直接在网页中输出容。</p></li><li><p>alert(字符串或变量); 弹出一个包含确定的消息对话框。<br><img src="https://i.loli.net/2017/10/26/59f1ff9e6f473.png" alt="js-alert"></p></li><li><p>confirm(stri); 弹出一个包含确定和取消的消息对话框。</p><ul><li>str 消息框显示的文本。</li><li>返回值为 Boolean 类型，通过返回值判断用户点击了什么按钮，确定为 true ，取消为 false。<br><img src="https://i.loli.net/2017/10/26/59f1ffb53699b.png" alt="js-confirm"></li></ul></li><li><p>prompt(str1, str2) 弹出包含一个确定按钮、取消按钮与一个文本输入框的消息对话框。</p><ul><li>str1 消息框显示文本，不可修改。</li><li>str2 文本框中的内容，可修改。</li><li>返回值：点击确定，文本框内容作为函数返回值。点击取消，返回 null。</li></ul></li><li><p>open() 方法可以查找一个已经存在或者新建的浏览器窗口。</p><ul><li>window.open() 打开一个新窗口。<br>```javascript<br>window.open([URL], [窗口名称], [窗口参数设置])<br>/* URL(可选参数):网页网址或路径，如果它的值是空字符串，那么窗口就不显示任何文档。</li><li>窗口名称(可选参数)：被打开窗口的名称。只能由字母，数字或下划线构成。</li><li>_balnk:新窗口打开； _self:当前窗口打开； _top：框架网页中在上部窗口中显示目标网页；</li><li>相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。</li><li>/<br>```</li><li>窗口参数 ：<table><thead><tr><th>参数</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>top</td><td>Number</td><td>窗口顶部离开屏幕顶部像素</td></tr><tr><td>left</td><td>Number</td><td>窗口顶部离开屏幕顶部像素</td></tr><tr><td>width</td><td>Number</td><td>窗口宽度</td></tr><tr><td>height</td><td>Number</td><td>窗口高度</td></tr><tr><td>menubar</td><td>yes，no</td><td>窗口菜单</td></tr><tr><td>toolbar</td><td>yes，no</td><td>窗口工具栏</td></tr><tr><td>scrollbars</td><td>yes，no</td><td>窗口滚动条</td></tr><tr><td>status</td><td>yes，no</td><td>窗口状态栏</td></tr></tbody></table></li></ul></li><li><p>close() 关闭窗口</p></li></ul><pre><code class="javascript">    window.close(); // 关闭本窗口    [对象窗口].close() // 关闭对象窗口</code></pre><h2 id="JS-HTML-DOM"><a href="#JS-HTML-DOM" class="headerlink" title="JS HTML DOM"></a>JS HTML DOM</h2><blockquote><p>浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：</p></blockquote><ul><li>浏览器从服务器取到HTML网页以后， 会展示成页面让你看， 但是他的内部其实会把HTML组织成一个树给JS,这个树可以称为DOM。 例如这个页面：</li></ul><pre><code class="html">&lt;html&gt; &lt;head&gt;   &lt;title&gt;Sample Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt;   &lt;p&gt;hello world!&lt;/p&gt; &lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.loli.net/2017/10/26/59f1ffc7e1cb1.png" alt="full-html-tree"></p><p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML:</p><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h3 id="通过-JavaScript-操作作-HTML-元素"><a href="#通过-JavaScript-操作作-HTML-元素" class="headerlink" title="通过 JavaScript 操作作 HTML 元素"></a>通过 JavaScript 操作作 HTML 元素</h3><blockquote><p>JS可以定位到DOM树中任意一个节点， 然后对这个节点进行操作， 例如隐藏节点、显示节点、改变颜色、获得文本的值， 改变文本的值，添加一个响应点击事件的函数等。</p></blockquote><ol><li>查找 HTML 元素</li></ol><ul><li>通过 id 找到 HTML 元素：`var x = document.getElementById(“ID”);</li><li>通过标签名找到 HTML 元素：<code>var x = document.getElementById(&quot;ID&quot;);var y = x.getElementsByTagName(&quot;p&quot;);</code></li><li>通过类名找到 HTML 元素</li><li>stringObject.match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。</li></ul><ol start="2"><li>改变元素内容</li></ol><ul><li>document.getElementById(“ID”).innerHTML=”Hello”; // 改变内容</li><li>isNaN(x); // x 是否为数字</li><li>document.write(“写入内容”), // 向文档输出写内容</li></ul><ol start="3"><li>改变元素样式</li></ol><ul><li>document.getElementById(“ID”).style.color=”#ff0000”;   // 改变样式</li><li>document.getElementById(“ID”).style.visibility=”hidden”; // 隐藏元素</li><li>document.getElementById(“ID”).style.visibility=”visible” // 显示元素</li></ul><h2 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h2><h3 id="HTML-常见事件"><a href="#HTML-常见事件" class="headerlink" title="HTML 常见事件"></a>HTML 常见事件</h3><ul><li>当用户点击鼠标时</li><li>当网页已加载时</li><li>当图像已加载时</li><li>当鼠标移动到元素上时</li><li>当输入字段被改变时</li><li>当提交 HTML 表单时</li><li>当用户触发按键时</li></ul><table><thead><tr><th>事件</th><th>含义</th></tr></thead><tbody><tr><td>onclick</td><td>元素被点击时，调用绑定函数</td></tr><tr><td>onload 和 onunload</td><td>在用户进入或离开页面时被触发，用于检测访问者的浏览器类型和浏览器版本，处理 cookie</td></tr><tr><td>onmouseover 和 onmouseout</td><td>将鼠标移至 HTML 元素上方或移出元素时触发</td></tr><tr><td>onchange</td><td>当域内的内容被改变时，执行绑定函数。例如：向输入框内输入小写，完成后自动转换为大写</td></tr><tr><td>onmousedown 和 onmouseup</td><td>按下和释放鼠标，触发事件</td></tr><tr><td>onfocus 和 onblur</td><td>获得焦点或者失去焦点时，触发事件。例如：向文本框输入时，改变其背景颜色</td></tr></tbody></table><h3 id="绑定方式"><a href="#绑定方式" class="headerlink" title="绑定方式"></a>绑定方式</h3><ol><li>js 中绑定<pre><code class="javascript">//  必须是一个函数的引用或函数名，而不是函数调用// 例如：foo(); 在这里将无效document.getElementById(&quot;ID&quot;).onclick = foo;</code></pre></li><li>html 中绑定<pre><code class="html">onclick=&quot;foo()&quot;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包管理器 Yarn</title>
      <link href="/pages/522f484/"/>
      <url>/pages/522f484/</url>
      
        <content type="html"><![CDATA[<h1 id="包管理器-Yarn"><a href="#包管理器-Yarn" class="headerlink" title="包管理器 Yarn"></a>包管理器 Yarn</h1><blockquote><p>Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具。</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>yarn和 yarn install ，这两个命令的效果是一样的，等同于npm install，使用这个命令会在该目录生成一个yarn.lock的文件。</li><li>yarn add koa，安装koa模块并更新package.json和yarn.lock文件，等同于npm install koa –save。也可以使用yarn global add koa，等同于npm install koa -g，将模块直接安装到全局环境变量里，方便使用。</li><li>yarn list，根据当前项目的package.json查看模块的依赖及版本。</li><li>yarn info koa，查看koa模块的详细信息，类似于npm view koa。</li><li>yarn init，初始化项目package.json文件，等同于npm init。</li><li>yarn run，运行package.json中的script。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arguments和rest</title>
      <link href="/pages/e5332c52/"/>
      <url>/pages/e5332c52/</url>
      
        <content type="html"><![CDATA[<h2 id="arguments-参数"><a href="#arguments-参数" class="headerlink" title="arguments 参数"></a>arguments 参数</h2><blockquote><p>只在函数内部起作用，指向当前函数调用者传入的所有参数。</p></blockquote><pre><code class="javascript">var bar = (x) =&gt; {    console.log(x); // a    for(let i = 0; i &lt; arguments.length; i++){        console.log(arguments[i]); // 根据参数索引打印参数    }};bar(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);</code></pre><ul><li>利用<code>arguments</code>可以获得调用者传入的所有参数。</li><li><code>arguments</code>常用于判断传入参数个数。</li></ul><h2 id="rest-不定参数"><a href="#rest-不定参数" class="headerlink" title="rest 不定参数"></a>rest 不定参数</h2><blockquote><p>JS 允许函数接收任意个参数，当参数个数不确定的情况下可以使用不定参数。</p></blockquote><pre><code class="javascript">&quot;use strict&quot;; // 严格模式// 接受任意个参数返回它们的和function sum(...rest) { // 不定参数写在参数最后，前面使用 ... 标识  let result = 0;  for (let i of rest) { // rest 是一个数组实例      result += i;  }  console.log(result);}sum(1, 2, 3, 4); // 传入参数</code></pre><p>不定参数写在参数最后，传入参数先绑定已有的参数，多余的参数以数组形式存入不定参数。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>button常用设置</title>
      <link href="/pages/91b6115c/"/>
      <url>/pages/91b6115c/</url>
      
        <content type="html"><![CDATA[<h2 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h2><p>cursor：定网页浏览时用户鼠标指针的样式。</p><p>cursor：pointer； 设定鼠标的形状为一只伸出食指的手，这也是绝大多数浏览器里面鼠标停留在网页链接上方时候的样式。<br>default 箭头。<br>crosshair 十字<br>progress 沙漏</p><h2 id="按钮颜色"><a href="#按钮颜色" class="headerlink" title="按钮颜色"></a>按钮颜色</h2><p>平时的状态：</p><pre><code class="css">.btn {    // 未按下时的背景颜色    background: ##02b3e4;    // 边框圆角    border-radius: 4px;    // 去掉边框    border: none    // 边缘阴影    box-shadow: 12px 15px 20px rgba(0, 0, 0, 0.1);    // 字体颜色    color: ##fff;    // 显示方式    display: inline-block;    // 字体    font-family: &#39;Open Sans&#39;, sans-serif;    font-size: 12px;    font-weight: 600;    // 字间距    letter-spacing: 0.165em;    // 超出隐藏    overflow: hidden;    // 设置渐变效果    transition: 0.2s box-shadow ease-in-out, 0.2s background-color ease-in-out, 0.2s border-color ease-in-out;}// 鼠标放上去时的颜色.btn:hover:not(:disabled) { background: ##148bb1;}</code></pre><h2 id="字体抗锯齿-webkit-font-smoothing有"><a href="#字体抗锯齿-webkit-font-smoothing有" class="headerlink" title="字体抗锯齿 -webkit-font-smoothing有"></a>字体抗锯齿 -webkit-font-smoothing有</h2><blockquote><p>CSS3中用于webkit引擎(如chrome)中设置字体的抗锯齿或者说光滑度的属性。</p></blockquote><ul><li>none —— 对低像素的文本比较好</li><li>subpixel-antialiased ——默认值</li><li>antialiased ——抗锯齿很好</li></ul><h2 id="文本溢出-text-overflow"><a href="#文本溢出-text-overflow" class="headerlink" title="文本溢出 text-overflow"></a>文本溢出 text-overflow</h2><blockquote><p>text-overflow 属性规定当文本溢出包含元素时发生的事情。</p></blockquote><ul><li>clip    修剪文本。<ul><li>ellipsis显示省略符号来代表被修剪的文本。</li><li>string使用给定的字符串来代表被修剪的文本。</li></ul></li></ul><h2 id="文本转换-text-transform"><a href="#文本转换-text-transform" class="headerlink" title="文本转换 text-transform"></a>文本转换 text-transform</h2><blockquote><p>转换不同元素中的文本。</p></blockquote><ul><li>none    默认。定义带有小写字母和大写字母的标准的文本。<ul><li>capitalize文本中的每个单词以大写字母开头。</li><li>uppercase定义仅有大写字母。</li><li>lowercase定义无大写字母，仅有小写字母。</li><li>inherit规定应该从父元素继承 text-transform 属性的值。</li></ul></li></ul><h2 id="元素变形过渡效果-transition"><a href="#元素变形过渡效果-transition" class="headerlink" title="元素变形过渡效果 transition"></a>元素变形过渡效果 transition</h2><blockquote><p>设置元素渐变过渡，transition: property duration timing-function delay;需要加浏览器前缀。设置多个元素效果时用逗号隔开。<br><a href="http://www.w3school.com.cn/cssref/pr_transition.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_transition.asp</a></p></blockquote><ul><li>transition-property    规定设置过渡效果的 CSS 属性的名称。<ul><li>transition-duration规定完成过渡效果需要多少秒或毫秒。</li><li>transition-timing-function规定速度效果的速度曲线。（<a href="http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）" target="_blank" rel="noopener">http://www.w3school.com.cn/tiy/t.asp?f=css3_transition-timing-function2）</a></li><li>transition-delay定义过渡效果何时开始，过渡之前需要等待的实践。</li></ul></li></ul><p><strong>速度曲线设置</strong></p><ul><li>linear    规定以相同速度开始至结束的过渡效果。<ul><li>ease规定慢速开始，然后变快，然后慢速结束的过渡效果。</li><li>ease-in规定以慢速开始的过渡效果。</li><li>ease-out规定以慢速结束的过渡效果。</li><li>ease-in-out规定以慢速开始和结束的过渡效果。</li></ul></li></ul><h2 id="段落文本换行-white-space"><a href="#段落文本换行-white-space" class="headerlink" title="段落文本换行 white-space"></a>段落文本换行 white-space</h2><blockquote><p>white-space 属性设置如何处理元素内的空白。<br><a href="http://www.w3school.com.cn/cssref/pr_text_white-space.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/cssref/pr_text_white-space.asp</a></p></blockquote><ul><li>normal    默认。空白会被浏览器忽略。<ul><li>pre空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。</li><li>nowrap文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</li><li>pre-wrap保留空白符序列，但是正常地进行换行。</li><li>pre-line合并空白符序列，但是保留换行符。</li><li>inherit规定应该从父元素继承 white-space 属性的值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css基础</title>
      <link href="/pages/eda1a9a9/"/>
      <url>/pages/eda1a9a9/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-导入"><a href="#CSS-导入" class="headerlink" title="CSS 导入"></a>CSS 导入</h2><blockquote><p>在 HTML 中引入 CSS 的方法主要有四种，它们分别是行内式、内嵌式、链接式和导入式。</p></blockquote><ol><li>行内式</li></ol><ul><li>在标记的 style 属性中设定 CSS 样式。</li></ul><pre><code class="html">     &lt;p style=color:white; background-color:blue;&gt;     Tihs is a test text.     &lt;/p&gt;</code></pre><ol start="2"><li>内嵌式</li></ol><ul><li><p>将 CSS 样式集中写在网页的<code>&lt;head&gt;&lt;/head&gt;</code>中的<code>&lt;style&gt;&lt;/style&gt;</code>标签对中。</p></li><li><p>缺点是对于一个包含很多网页的网站，在每个网页中使用嵌入式，进行修改样式时非常麻烦。单一网页可以考虑使用嵌入式。</p></li></ul><pre><code class="html">     &lt;head&gt;       &lt;style type=&quot;text/css&quot;&gt;       p {         color:red;       }       &lt;/style&gt;     &lt;/head&gt;</code></pre><ol start="3"><li>导入式</li></ol><ul><li>使用 CSS 的规则将外部CSS文件将一个独立的<code>.css</code>文件引入 HTML 文件中，<code>&lt;style&gt;</code> 标记写在 <code>&lt;head&gt;</code>标记中。</li></ul><pre><code class="html">   &lt;style type=&quot;text/css&quot;&gt;       @import &quot;mystyle.css&quot;   &lt;/style&gt;</code></pre><ol start="4"><li>链接式</li></ol><ul><li>最常用的的一种方式。</li></ul><pre><code class="html">   &lt;head&gt;     &lt;link rel=&quot;stylesheet&quot; href=&quot;src/test.css&quot; type=&quot;text/css&quot;&gt;   &lt;/head&gt;</code></pre><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><blockquote><p>margin 属性为给定元素设置所有四个（上下左右）方向的外边距属性。四个外边距属性设置分别是： margin-top， margin-right， margin-bottom 和 margin-left 。指定的外边距允许为负数。</p></blockquote><table><thead><tr><th>语法</th><th>值</th><th>例子</th><th>含义</th></tr></thead><tbody><tr><td>margin: style</td><td>单值语法</td><td>margin: 1em;</td><td>指定四周外边距都为1em</td></tr><tr><td>margin: vertical horizontal</td><td>二值语法</td><td>margin: 5% auto;</td><td>上下为5%，左右为auto</td></tr><tr><td>margin: top horizontal bottom</td><td>三值语法</td><td>margin: 1em auto 2em;</td><td>上为1em，左右为auto，下为2em</td></tr><tr><td>margin: top right bottom left</td><td>四值语法</td><td>margin: 2px 1em 0 auto;</td><td>上为2px，右为1em，下为0，左为auto</td></tr></tbody></table><h2 id="选择符"><a href="#选择符" class="headerlink" title="选择符"></a>选择符</h2><blockquote><p>选择符用于定位我们想要样式化的网页 HTML 元素,可以选择一个或多个需要添加样式的元素。</p></blockquote><table><thead><tr><th>选择符</th><th>选择内容</th><th>示例</th></tr></thead><tbody><tr><td>元素 选择符</td><td>标签内所有元素</td><td>p</td></tr><tr><td>ID 选择符</td><td>指定ID的元素</td><td>#my-id</td></tr><tr><td>Clss 选择符</td><td>指定Class的元素</td><td>.my-class</td></tr><tr><td>属性 选择符</td><td>拥有指定属性的元素</td><td>img[src]</td></tr><tr><td>伪类 选择符</td><td>指定的元素，但是需要在特殊的状态，比如悬停</td><td>a:hover</td></tr></tbody></table><h3 id="简单选择器（Simple-selectors）"><a href="#简单选择器（Simple-selectors）" class="headerlink" title="简单选择器（Simple selectors）"></a>简单选择器（Simple selectors）</h3><blockquote><p>通过<code>元素类型</code>、<code>class</code>或 <code>id</code> 匹配一个或多个元素。</p></blockquote><h3 id="属性选择器（Attribute-selectors）"><a href="#属性选择器（Attribute-selectors）" class="headerlink" title="属性选择器（Attribute selectors）"></a>属性选择器（Attribute selectors）</h3><blockquote><p>通过<code>属性/属性值</code>匹配一个或多个元素。</p></blockquote><ul><li>[attr]：该选择器选择包含 attr 属性的所有元素，不论 attr 的值为何。</li><li>[attr=val]：该选择器仅选择 attr 属性被赋值为 val 的所有元素。</li><li>[attr~=val]：该选择器仅选择 attr 属性的值（以空格间隔出多个值）中有包含 val 值的所有元素，比如位于被空格分隔的多个类（class）中的一个类。</li><li>[attr|=val] : 选择attr属性的值以val（包括val）或val-开头的元素。</li><li>[attr^=val] : 选择attr属性的值以val开头（包括val）的元素。</li><li>[attr$=val] : 选择attr属性的值以val结尾（包括val）的元素。</li><li>[attr*=val] : 选择attr属性的值中包含字符串val的元素。</li></ul><h3 id="伪类（Pseudo-classes）"><a href="#伪类（Pseudo-classes）" class="headerlink" title="伪类（Pseudo-classes）"></a>伪类（Pseudo-classes）</h3><blockquote><p>一个 CSS  伪类（pseudo-class） 是一个以冒号(:)作为前缀的关键字，当元素需要在特定状态下的设置表现样式时，往元素的选择器后面加上对应的伪类（pseudo-class）。<br>例如：页面上有一个链接， 有四种状态：</p></blockquote><ol><li>未点击状态显示蓝色：</li></ol><pre><code class="css">a:link { color: blue; }</code></pre><ol start="2"><li>已点击状态显示紫色：</li></ol><pre><code class="css">a:visited { color: purple; }</code></pre><ol start="3"><li>鼠标悬停状态显示红色：</li></ol><pre><code class="css">a:hover { color: red;  }</code></pre><ol start="4"><li>鼠标点击状态显示绿色：</li></ol><pre><code class="css">a:active { color: green; }</code></pre><p>多个状态同时设置，按照以上先后顺序排列。</p><h3 id="伪元素（Pseudo-elements）"><a href="#伪元素（Pseudo-elements）" class="headerlink" title="伪元素（Pseudo-elements）"></a>伪元素（Pseudo-elements）</h3><blockquote><p>以冒号(::)作为前缀的关键字，添加到选择器后面选择某个元素的某个部分。例如每个段落的第一个字，或者某个元素之前生成的内容。</p></blockquote><ul><li><code>::after</code>在已选中元素尾部创建最后一个子元素，通常会配合 content 属性来为该元素添加装饰内容。</li></ul><pre><code class="css">/*在链接后面加上一个箭头←*/a::after { content: &quot;←&quot;;}</code></pre><ul><li><code>::before</code> 在已选中元素头部创建第一个子元素。</li></ul><pre><code class="css">/*在链接前面加上一个箭头→*/a::after { content: &quot;→&quot;;}</code></pre><ul><li><code>::first-letter</code>会选中一整块文字第一行的第一个字母，并且文字所处的行之前没有其他内容（如图片和内联的表格） 。</li></ul><pre><code class="css">/* 使每段开头的第一个字母变红变大 */p::first-letter {  /* 使用:first来兼容IE8- */  color: red;  font-size: 130%;}</code></pre><ul><li><code>::first-line</code>将样式只应用于一个元素的首行。首行文本的数量取决于元素的宽，document 的宽和文本的字号。</li><li><code>::first-line</code> 伪元素<strong>只作用于块容器中</strong>,所以<code>::first-line</code>伪元素只能在一个display值为block, inline-block, table-cell 或者 table-caption中有用.。在其他的类型中<code>::first-line</code>是不起作用的。</li><li><code>::selection</code>应用于文档中被用户选中高亮的部分（比如使用鼠标或其他选择设备选中的部分）,ecko 引擎需要加前缀（-moz）。</li></ul><pre><code class="css">/* 将被选中的任何文本渲染为金黄色和红色背景 */::-moz-selection {  color: gold;  background: red;}::selection {  color: gold;  background: red;}</code></pre><h3 id="组合器（Combinators）"><a href="#组合器（Combinators）" class="headerlink" title="组合器（Combinators）"></a>组合器（Combinators）</h3><blockquote><p>以有效的方式组合两个或更多的选择器用于非常特定的选择的方法。例如，只选择 divs 的直系子节点的段落，或者直接跟在 headings 后面的段落。</p></blockquote><table><thead><tr><th>组合器</th><th>选择值</th></tr></thead><tbody><tr><td>A,B</td><td>匹配同时满足A和B的任意元素</td></tr><tr><td>A B</td><td>匹配任意元素，满足条件：B是A的后代结点（B是A的子节点，或者A的子节点的子节点）</td></tr><tr><td>A &gt; B</td><td>匹配任意元素，满足条件：B是A的直接子节点</td></tr><tr><td>A + B</td><td>匹配任意元素，满足条件：B是A的下一个兄弟节点（AB有相同的父结点，并且B紧跟在A的后面）</td></tr><tr><td>A ~ B</td><td>匹配任意元素，满足条件：B是A之后的兄弟节点中的任意一个（AB有相同的父节点，B在A之后，但不一定是紧挨着A）</td></tr></tbody></table><h3 id="多用选择器（Multiple-selectors）"><a href="#多用选择器（Multiple-selectors）" class="headerlink" title="多用选择器（Multiple selectors）"></a>多用选择器（Multiple selectors）</h3><blockquote><p>以逗号分隔开的多个选择器放在一个 CSS 规则下面， 以将一组声明应用于由这些选择器选择的所有元素。</p></blockquote><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><blockquote><p>网页上的所有的元素都包含在一个个盒子中。在 CSS 里面设置它们的尺寸，颜色，位置等等。</p></blockquote><ul><li><p>内边距（padding）： 围绕着内容的空间（比如围绕段落的空间）</p></li><li><p>边框（border）：  紧接着内边距的实体线段</p></li><li><p>外边距(margin) ：  围绕元素外部的空间</p><p><img src="src/box-model.png" alt="box"></p></li><li><p>width：  属于一个元素的宽</p></li><li><p>background-color： 元素内容和内边距之后的颜色</p></li><li><p>color： 元素内容的颜色（通常是文本）</p></li><li><p>text-shadow： 为元素内的文本设置阴影</p></li><li><p>display：  设置元素的显示模式</p></li><li><p>position：fixed  位置保持不动</p></li></ul><h2 id="单位长度"><a href="#单位长度" class="headerlink" title="单位长度"></a>单位长度</h2><h3 id="px-em"><a href="#px-em" class="headerlink" title="px em"></a>px em</h3><ul><li>px ：像素 (px) 是一种绝对单位（ absolute units）， 因为无论其他相关的设置怎么变化，像素指定的值是不会变化的。</li><li>em ：相对长度单位，相对于当前文本内的字体尺寸。</li></ul><h3 id="px-与em转换"><a href="#px-与em转换" class="headerlink" title="px 与em转换"></a>px 与em转换</h3><p>任意浏览器的默认字体高度为 16px（16像素），所有未经调整的浏览器都符合: 1em=16px，那么10px=0.625em。<br><br>为了简化font-size的换算，可以在 css 中的 body 选择器中声明 <code>font-size: 62.5%</code>，这时<code>10px=1em</code>。</p><h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><blockquote><p>box-shadow 属性向元素添加一个或多个阴影。</p></blockquote><pre><code class="css">box-shadow: h-shadow v-shadow blur spread color inset;</code></pre><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影。允许负值。</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影。允许负值。</td></tr><tr><td>blur</td><td>可选。模糊距离。</td></tr><tr><td>spread</td><td>可选。阴影尺寸。</td></tr><tr><td>color</td><td>可选。阴影颜色。</td></tr><tr><td>inset</td><td>可选。将外部阴影(outset)改为内部阴影。</td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><blockquote><p>一个好的布局，能将网页内容更完美的展示出来。</p></blockquote><h3 id="display-元素显示"><a href="#display-元素显示" class="headerlink" title="display 元素显示"></a>display 元素显示</h3><blockquote><p>CSS 中最重要的控制布局的属性，用来设置一个元素应该如何显示，每一个元素都有一个默认的<code>display</code>值。<br>对于大多数元素它们的默认值通常是<code>block</code>或<code>inline</code>。</p></blockquote><ul><li>block：块级元素。块级元素通常会占用容器的全部宽度，在其开始和结束位置都是换行符。常见的块级元素有：<code>h1</code>、<code>div</code>、<code>p</code>和<code>form</code>等，HTML5 中的新元素：<code>header</code>、<code>footer</code>和<code>section</code>等。</li><li>inline：行内元素。行内元素只需要必要的宽度，不会强制换行打乱已有元素布局。常见的行内元素有：<code>span</code>和<code>a</code>。</li><li>none：隐藏某个元素，且隐藏的元素不会占据任何空间。一些特殊元素的默认 display 值是它，例如 <code>script</code>。 <code>display:none</code> 通常被 JavaScript 用来在不删除元素的情况下隐藏或显示元素。</li></ul><h3 id="visibility-元素可见性"><a href="#visibility-元素可见性" class="headerlink" title="visibility 元素可见性"></a>visibility 元素可见性</h3><p>visibility 属性有两种用法：</p><ol><li>值为<code>hidden</code>时隐藏元素，并将其所占空间用空白填充。</li><li>值为<code>collapse</code>时隐藏表格的一行或一列，用于快速从表格中删除一行或一列。</li></ol><ul><li><strong><code>display:none</code>和<code>visibility:hidden</code>的区别：</strong><ul><li><code>display:none</code>隐藏某个元素时，隐藏的元素不会占据任何空间。</li><li><code>visibility:hidden</code>可以隐藏元素，但是隐藏的元素仍然占用原来大小的空间。</li></ul></li></ul><h2 id="Google-原色"><a href="#Google-原色" class="headerlink" title="Google 原色"></a>Google 原色</h2><ul><li>蓝色 #4285f3</li><li>红色 #ea4335</li><li>绿色 #34a853</li><li>黄色 #fbbc05</li><li>黑色 #1c262f</li></ul><p>google蓝 #2196f3<br>按钮红 #f50057<br>google绿 #0f9d58</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for-in和for-of</title>
      <link href="/pages/f5b5d35a/"/>
      <url>/pages/f5b5d35a/</url>
      
        <content type="html"><![CDATA[<h2 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h2><blockquote><p><code>for-in</code>循环遍历的是对象的属性名称,可以将一个对象的属性循环遍历出来。</p></blockquote><pre><code class="javascript">var obj = {    name: &#39;XiaoMing&#39;,    age: 22,    sex: &#39;man&#39;};for(let key in obj){    console.log(key); // &#39;name&#39; &#39;age&#39; &#39;sex&#39;}</code></pre><p>数组也是对象，<code>for-in</code>可以直接循环遍历出<code>Array</code>的索引，索引类型为 String 而不是 Number。</p><pre><code class="javascript">var array = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];for(let i in array){    console.log(i); // 索引&#39;0&#39; &#39;1&#39; &#39;2&#39;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基础</title>
      <link href="/pages/9891ebc8/"/>
      <url>/pages/9891ebc8/</url>
      
        <content type="html"><![CDATA[<h2 id="git-基础命令"><a href="#git-基础命令" class="headerlink" title="git 基础命令"></a>git 基础命令</h2><h3 id="git-全局配置"><a href="#git-全局配置" class="headerlink" title="git 全局配置"></a>git 全局配置</h3><pre><code>git config —global user.name &quot;roojay&quot;git config —global user.email &quot;roojay520@gmail.com&quot;</code></pre><h3 id="创建文件夹-test"><a href="#创建文件夹-test" class="headerlink" title="创建文件夹 test"></a>创建文件夹 test</h3><pre><code>mkdir test</code></pre><h3 id="切换到-test-文件夹"><a href="#切换到-test-文件夹" class="headerlink" title="切换到 test 文件夹"></a>切换到 test 文件夹</h3><pre><code>cd test</code></pre><h3 id="新建-readme-md-文件"><a href="#新建-readme-md-文件" class="headerlink" title="新建 readme.md 文件"></a>新建 readme.md 文件</h3><pre><code>touch readme.md</code></pre><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><pre><code>git init</code></pre><h3 id="查看仓库信息"><a href="#查看仓库信息" class="headerlink" title="查看仓库信息"></a>查看仓库信息</h3><pre><code>git status</code></pre><h3 id="添加-readme-md-到缓存区"><a href="#添加-readme-md-到缓存区" class="headerlink" title="添加 readme.md 到缓存区"></a>添加 readme.md 到缓存区</h3><pre><code>git add readme.md</code></pre><h3 id="将-readme-md-移除缓存区"><a href="#将-readme-md-移除缓存区" class="headerlink" title="将 readme.md 移除缓存区"></a>将 readme.md 移除缓存区</h3><pre><code>git rm --cached readme.md</code></pre><h3 id="删除-readme-md-文件"><a href="#删除-readme-md-文件" class="headerlink" title="删除 readme.md 文件"></a>删除 readme.md 文件</h3><pre><code>rm readme.md</code></pre><h3 id="删除文件-test-文件夹"><a href="#删除文件-test-文件夹" class="headerlink" title="删除文件 test 文件夹"></a>删除文件 test 文件夹</h3><pre><code> rm -r test</code></pre><h3 id="提交文件到本地仓库"><a href="#提交文件到本地仓库" class="headerlink" title="提交文件到本地仓库"></a>提交文件到本地仓库</h3><pre><code>git commit -m &#39;first commit&#39; //m 后面的 &#39;fisrst commit&#39; 表示提交信息</code></pre><h3 id="查看操作日志"><a href="#查看操作日志" class="headerlink" title="查看操作日志"></a>查看操作日志</h3><pre><code>git log</code></pre><h2 id="branch-操作"><a href="#branch-操作" class="headerlink" title="branch 操作"></a>branch 操作</h2><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><pre><code>git branch</code></pre><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><pre><code>git branch -r</code></pre><h3 id="创建新分支-test"><a href="#创建新分支-test" class="headerlink" title="创建新分支 test"></a>创建新分支 test</h3><pre><code>git branch test</code></pre><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><pre><code>git checkout test</code></pre><h3 id="快速创建加切换"><a href="#快速创建加切换" class="headerlink" title="快速创建加切换"></a>快速创建加切换</h3><pre><code>git checkout -b test</code></pre><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><pre><code>git branch -d//强制删除本地分支git branch -D test</code></pre><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><pre><code>git push origin:testA</code></pre><h3 id="远程分支迁至本地"><a href="#远程分支迁至本地" class="headerlink" title="远程分支迁至本地"></a>远程分支迁至本地</h3><pre><code>git checkout testA origin/testA</code></pre><h3 id="版本标签"><a href="#版本标签" class="headerlink" title="版本标签"></a>版本标签</h3><pre><code>git tag //查看版本记录git tag v1.0.0 //创建版本 v1.0.0 标签git checkout v1.0.0 //切换到v1.0.0 版本状态</code></pre><h2 id="提交代码到-GitHub"><a href="#提交代码到-GitHub" class="headerlink" title="提交代码到 GitHub"></a>提交代码到 GitHub</h2><h3 id="1-生成-SSH"><a href="#1-生成-SSH" class="headerlink" title="1.生成 SSH"></a>1.生成 SSH</h3><pre><code>ssh-keygen -t rsa</code></pre><blockquote><p>执行完以上命令后，在 C:/Users/Username/.ssh 文件下生成两个文件 id_rsa（密钥） 和 id_rsa.pub（公钥）</p></blockquote><h3 id="2-GitHub-添加-SSH-key"><a href="#2-GitHub-添加-SSH-key" class="headerlink" title="2.GitHub 添加 SSH key"></a>2.GitHub 添加 SSH key</h3><blockquote><p> 将 id_rsa.pub 的内容添加到 GitHub： Setting→SSH keys and GPG keys→New SSH key<br> 输入 <code>ssh -T git@github.com</code>测试是否添加成功</p></blockquote><h3 id="3-Push-推送"><a href="#3-Push-推送" class="headerlink" title="3. Push 推送"></a>3. Push 推送</h3><pre><code>//将本地代码推到远程 master 分支git push origin master</code></pre><h3 id="4-Pull-拉取"><a href="#4-Pull-拉取" class="headerlink" title="4. Pull 拉取"></a>4. Pull 拉取</h3><pre><code>//将远程 master 分支的代码拉取到本地git pull origin master</code></pre><h3 id="5-提交代码"><a href="#5-提交代码" class="headerlink" title="5. 提交代码"></a>5. 提交代码</h3><pre><code>//clone 自己的项目git clone git@github.com:roojay520/test.git//修改 test 项目代码//commit 文件git add change.mdgit commit -m &#39;change file&#39;//推送到 GitHubgit push origin master</code></pre><h3 id="6-关联本地已有项目"><a href="#6-关联本地已有项目" class="headerlink" title="6. 关联本地已有项目"></a>6. 关联本地已有项目</h3><blockquote><p>假如我们需要把本地已有的 test1 项目的所有代码提交到 GitHub 上的 test 项目。</p></blockquote><pre><code>//将本地 test1 项目与远程 test 项目关联git remote add origin git@github.com:roojay520/test.git//其中 orgin 是远程仓库的名字//查看当前项目的远程仓库git remote -v//向远程仓库提交代码git push origin master</code></pre><h2 id="git-进阶"><a href="#git-进阶" class="headerlink" title="git 进阶"></a>git 进阶</h2><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><ul><li><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p></li><li><p>使用<code>git reflog</code>用来查看命令历史，或者使用<code>git log</code>查看提交 log，找到提交的 <code>commit id</code>。</p></li><li><p>使用<code>git reset</code>命令进行版本回退。</p></li></ul><pre><code>//这个 HEAD 可以是具体的 commit idgit reset --hard HEAD^</code></pre><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><h3 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h3><blockquote><p>全局设置用户名和用户邮箱<br>user.name 用户名； user.email 用户邮箱</p></blockquote><pre><code>git config --global user.name &quot;roojay&quot;git config --global user.email &quot;roojay520@gmail.com&quot;</code></pre><blockquote><p>如果单独的某一个项目想要用特定的邮箱，切换到你的项目，以码把 –global 参数去除，执行一遍。</p></blockquote><pre><code>git config user.name &quot;roojay&quot;git config user.email &quot;roojay520@gmail.com&quot;</code></pre><h3 id="快捷配置-alias"><a href="#快捷配置-alias" class="headerlink" title="快捷配置 alias"></a>快捷配置 alias</h3><blockquote><p>为命令设置别名</p></blockquote><pre><code>//切换 ckgit config --global alias.ck checkout #别名//提交 cmgit config --global alias.cm commit//查看信息 stgit config --global alias.st status//分支 brgit config --global alias.br branch</code></pre><blockquote><p>组合命令</p></blockquote><pre><code>//推送 psmgit config --global alias.psm &#39;push origin master&#39;//拉取 plmgit config --global alias.plm &#39;pull origin master&#39;</code></pre><pre><code>//个性日志输出 lggit config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative&quot;//设置个性日志输出git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date=relative</code></pre><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><blockquote><p>rebase 跟 merge 的区别可以理解成有两个书架，需要把两个书架的书整理到一起去，第一种做法是 merge ，直接腾出一块地方把另一个书架的书全部放进去，这种做法你可以知道哪些书是来自另一个书架的；第二种做法就是 rebase ，他会把两个书架的书先进行比较，按照购书的时间来给他重新排序，然后重新放置好，这样做的好处就是合并之后的书架看起来很有逻辑，但是你很难清晰的知道哪些书来自哪个书架的。</p></blockquote><h3 id="merge-暴力合并"><a href="#merge-暴力合并" class="headerlink" title="merge 暴力合并"></a>merge 暴力合并</h3><blockquote><p>在 testA 分支开发完了一个功能，合并到主分支 master 上去</p></blockquote><pre><code>git checkout mastergit merge testA</code></pre><h3 id="rebase-比较合并"><a href="#rebase-比较合并" class="headerlink" title="rebase 比较合并"></a>rebase 比较合并</h3><pre><code>git checkout mastergit rebase testA</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础</title>
      <link href="/pages/1a147173/"/>
      <url>/pages/1a147173/</url>
      
        <content type="html"><![CDATA[<h2 id="完整-HTML-树"><a href="#完整-HTML-树" class="headerlink" title="完整 HTML 树"></a>完整 HTML 树</h2><p><img src="https://i.loli.net/2017/10/26/59f1ff406e5f5.png" alt="DOM"></p><ul><li>相关的 CSS 文件（针对样式）：</li></ul><pre><code class="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</code></pre><ul><li>相关的 JavaScript 文件（更改渲染和行为的多用途脚本）：</li></ul><pre><code class="html">&lt;script src=&quot;myjavascripts.js&quot;&gt;&lt;/script&gt;</code></pre><ul><li>粗体斜体</li></ul><pre><code class="html">&lt;!-- 推荐使用&lt;strong&gt;进行加粗  --&gt; &lt;strong&gt;粗体&lt;/strong&gt;&lt;!-- 推荐使用&lt;em&gt;进行斜体显示  --&gt;&lt;em&gt;斜体&lt;/em&gt;</code></pre><ul><li><code>&lt;sup&gt;</code> 标签定义上标文本。</li><li><code>&lt;sub&gt;</code> 标签定义下标文本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS基础基础</title>
      <link href="/pages/d4c7d8e9/"/>
      <url>/pages/d4c7d8e9/</url>
      
        <content type="html"><![CDATA[<h2 id="JS简介"><a href="#JS简介" class="headerlink" title="JS简介"></a>JS简介</h2><ul><li>Netscape公司的Brendan Eich设计JS，只能运行在浏览器中。</li><li>Ryan Dahl于2009年设计node.js，JS可以在服务端运行。</li><li>JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而传统编程语言，会在执行前对所有代码进行编译。</li><li><em>proto</em> 实现继承关系。</li><li>对象名.prototype在原型对象层次优化子对象对公共方法的调用。</li><li>语法糖使javascript贴近java语法。</li></ul><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h4><ul><li>str.length; 查看一个字符串的长度。</li><li>str.charAt(index); 获取单个字符。</li><li>str.split(“a”); 指定从 a 处分割字符串为字符串数组。</li><li>str.slice(开始索引， 结束索引); 获取一个字符串中的一部分内容，字符串切片。</li><li>str[]; 通过索引获取单个字符。</li><li>str.indexOf(‘所选字符’); 获取字符串中单个或者多个字符索引，如果找不到成员，返回 -1</li><li>str.toLowerCase(); 将字符串转化为小写返回。</li><li>str.toUpperCase(); 将字符串转化为大写返回。<pre><code class="javascript">// 字符串操作var str = &#39;东风无力百花残&#39;;// 获取字符串长度 avar a = str.length;// 获取字符 &#39;花&#39; 的索引var b = str.indexOf(&#39;花&#39;);// 通过索引获取字符 &#39;百花&#39;var c = str.slice(b - 1, b + 1);console.log(&quot;字符串长度：&quot; + a + &quot;\n花的索引：&quot; + b + &quot;\n获取花字符：&quot; + c);</code></pre></li></ul><pre><code class="javascript">/* 将一个大小混写的人名，姓全部转换为大写，名除首字母外全部转换为小写。*/// 定义一个 name 字符串var name = &quot;ALbERt EINstEin&quot;;function nameChanger(name) {  // 定义 finaNmae 复制 name 内容 let finaName = name;  // 以空格为参考，分割字符串为字符串数组  // names = [&quot;ALbERt&quot;, &quot;EINstEin&quot;]  let names = name.split(&quot; &quot;);  // slice(0， 1) 选择首字母转换为大写，slice(1) 选择后面的字符转换为小写  names[0] = names[0].slice(0, 1).toUpperCase() + names[0].slice(1).toLowerCase();  // 设置第二个数组元素全部为大写  names[1] = names[1].toUpperCase();  // 将数组中的所有元素转换为一个字符串  // 设定空格为分隔符  finaName = names.join(&quot; &quot;);  console.log(finaName);}nameChanger(name);</code></pre><h4 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h4><ul><li>splice(index, num, item1,…..,itemN); 用于插入、删除或替换数组的元素。<ul><li>index （必须） 删除/添加元素的开始下标。</li><li>num （必须） 删除元素的数量。</li><li>item （可选） 要添加的新元素。</li></ul></li><li>pop(); 删除数组末尾的元素。</li><li>push(“item”); 添加元素到数组末尾。</li><li>shift(); 删除数组头部元素。</li><li>unshift(“item”); 添加元素到数组头部。</li></ul><h4 id="数字-Number-所有数字以-64-位浮点数储存"><a href="#数字-Number-所有数字以-64-位浮点数储存" class="headerlink" title="数字(Number) 所有数字以 64 位浮点数储存."></a>数字(Number) 所有数字以 64 位浮点数储存.</h4><ul><li>JavaScript 使用数字表示形式的 8 字节 IEEE 754 浮点标准来表示数字。  这意味着您可以编写最大为 1.79769x10308 和最小为 5x10-324 的数字。</li><li>以零开头且后面的数字都小于 8， 会被识别为八进制数。</li><li>0x 或 0X开头为十六进制数。</li><li>八进制或者十六进制数字不能有小数部分。</li><li>JavaScript 区分正零和负零。</li></ul><h4 id="布尔-Boolean"><a href="#布尔-Boolean" class="headerlink" title="布尔(Boolean)"></a>布尔(Boolean)</h4><ul><li>可将任何表达式用作比较表达式。计算结果为 0、null、undefined 或空字符串的任何表达式被解释为 false。</li></ul><h4 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象(Object)"></a>对象(Object)</h4><ul><li>确定对象属性是否存在，可使用 in 运算符：<pre><code class="javascript">// 定义一个 people 对象var people = {name: &#39;xiaoming&#39;,age: 12,};// 判断 people 对象中是否存在 name 属性if(&#39;name&#39; in people) {console.log(&#39;true&#39;);}else {console.log(&#39;flase&#39;);}// 输出 true</code></pre></li></ul><h4 id="日期-Date"><a href="#日期-Date" class="headerlink" title="日期(Date)"></a>日期(Date)</h4><h4 id="方法-function"><a href="#方法-function" class="headerlink" title="方法(function)"></a>方法(function)</h4><ul><li>indexOf(‘目标’, 开始位置 ); 获取数组成员索引，开始位置可省略不写。若成员不存在返回值为 -1。</li><li>splice(index, num); 删除指定索引 index 位置的数组成员，num 指删除数量。返回值为删除的数组。</li></ul><h4 id="空（Null）"><a href="#空（Null）" class="headerlink" title="空（Null）"></a>空（Null）</h4><ul><li>表示什么都没有，将变量赋值 null 可以清除变量的内容（不删除变量）。<pre><code class="javascript">var num = null; // 值为空 nulltypeof num; //返回值为 object</code></pre></li></ul><h4 id="未定义（Undefined）"><a href="#未定义（Undefined）" class="headerlink" title="未定义（Undefined）"></a>未定义（Undefined）</h4><ul><li>变量的值未定义。可以将变量与 undefined 进行比较确定变量是否存在。</li><li>也可以通过将变量的类型与字符串“undefined”进行比较确定其类型是否为 undefined。<pre><code class="javascript">var num;typeof num; // 返回值为 undefined</code></pre></li><li><em>null 和 undefined 的值相等，类型不同。null 值的行为与数字 0 类似，而 undefined 的行为与特定值 NaN（非数字）类似。*</em></li></ul><p>JavaScript 拥有动态类型，相同的变量可用作不同的类型：</p><pre><code class="javascript">var x;               // 此时 x 为 undefinedvar x = 5;           // 此时 x 为数字var x = &#39;hello&#39;;      // 此时 x 为字符串</code></pre><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><ul><li>JavaScript 是一个弱类型的语言，其变量类型由其值的类型决定。</li><li>字符串、数字和布尔值的强制转换规则：<ul><li>如果添加一个数字和字符串，则该数字会强制转换为字符串。</li><li>如果添加一个布尔值和字符串，则该布尔值会强制转换为字符串。</li><li>如果添加一个数字和布尔值，则该布尔值会强制转换为数字。</li></ul></li></ul><h5 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat"></a>parseFloat</h5><p>将字符串转换为浮点数。<br><code>parseFloat(numString);</code> numString 参数是一个包含浮点数的字符串。函数返回一个等于 numString 中包含的数字的数值。如果 numString 的前缀无法解析为浮点数，则返回 NaN（非数字）。</p><h5 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h5><p>将字符串转为整数。<br><code>parseInt(numString, radix);</code>numString 参数是要转换为数字的字符串。radix(2~36) 为需要转成整数的进制。若没有指定基数：以”0x”或者”0X”开头, 则是 16 进制；0 开头为 8 进制或者 10 进制，具体由环境决定；其它默认是 10 进制。 函数将其第一个参数转换为字符串然后再解析它，解析成功返回一个进制指定的整数，反之返回 NaN。</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>操作符优先级;<br>| 运算符                             | 说明                                                   |<br>| ———————————- | —————————————————— |<br>| .[ ] ( )                           | 字段访问、数组索引、函数调用和表达式分组               |<br>| ++ – - ~ ! delete new typeof void | 一元运算符、返回数据类型、对象创建、未定义的值         |<br>| * / %                              | 相乘，相除，取模                                       |<br>| + - +                              | 相加、相减、字符串串联                                 |<br>| &lt;&lt; &gt;&gt; &gt;&gt;&gt;                          | 移位                                                   |<br>| &lt; &lt;= &gt; &gt;= instanceof               | 小于、小于或等于、大于、大于或等于、是否为特定类的实例 |<br>| == != === !==                      | 相等、不相等、全等，不全等                             |<br>| &amp;&amp;                                 | 逻辑“与”                                             |<br>| <code>||</code>                               | 逻辑“或”                                             |<br>| ?:                                 | 三元条件运算                                           |<br>| = OP=                              | 赋值、赋值运算（如 += 和 &amp;=）                          |<br>| ,                                  | 多个计算                                               |</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>==  <strong>只比较两边的值，与类型无关。</strong>当值相等时返回 true，<br>===  <strong>同时比较两边的类型和值</strong>，只有当类型和值都相等时返回 true。</p><p>!=  <strong>只比较两边的类型，与值无关</strong>，类型相同返回 true，类型不同返回 false<br>!== <strong>只要值或者类型有一个不相等</strong>，返回 ture</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li>两个整数交换数值<br><code>a ^= b;b ^= a;a ^= b;</code><pre><code class="javascript">// 位操作快速交换两个整数的值var a = 10;var b = 12;a ^= b;b ^= a;a ^= b;console.log(&#39;a is:&#39; + a + &#39;\nb is:&#39; + b); // a is:12 b is:10</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote><p>函数也称为’全局方法’。</p></blockquote><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4></li><li>错误1：使用箭头函数定义对象的方法</li><li>错误2：在原型上使用箭头函数<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4></li><li>箭头函数适合于无复杂逻辑或者无副作用的纯函数场景下，例如用在map、reduce、filter的回调函数定义中；</li><li>不要在最外层定义箭头函数，因为在函数内部操作this会很容易污染全局作用域。最起码在箭头函数外部包一层普通函数，将this控制在可见的范围内；</li><li>如开头所述，箭头函数最吸引人的地方是简洁。在有多层函数嵌套的情况下，箭头函数的简洁性并没有很大的提升，反而影响了函数的作用范围的识别度，这种情况不建议使用箭头函数。<h4 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h4></li></ul><ol><li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li><li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</li><li>不可以使用yield命令，因此箭头函数不能用作Generator函数。<h3 id="in-运算符"><a href="#in-运算符" class="headerlink" title="in 运算符"></a>in 运算符</h3>判断某个属性是否属于这个对象。<br><code>&#39;name&#39; in obj</code></li></ol><ul><li>‘name’ 属性值</li><li>obj 对象</li></ul><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>返回值为布尔类型，判断一个对象是否为特定类的一个实例。<br><code>result = obj instanceof class</code></p><ul><li>result 返回值</li><li>obj 对象</li><li>class 特定类</li></ul><h3 id="其它运算符"><a href="#其它运算符" class="headerlink" title="其它运算符"></a>其它运算符</h3><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h4><ul><li>可以使用 typeof 操作符来检测变量的数据类型。<code>typeof 66  // 返回值为 number</code>。</li><li>在JavaScript中，数组是一种特殊的对象类型。 typeof [1,2,3,4] 返回 object。</li></ul><h3 id="单双引号"><a href="#单双引号" class="headerlink" title="单双引号"></a>单双引号</h3><ul><li>同一种引号不能嵌套,最外层一般使用单引号，避免和 HTML 里面的冲突：</li></ul><pre><code class="javascript">//会报错误&quot;&quot;name&quot; + 18&quot;//正确的方式&#39;&quot;name&quot; + 18&#39;</code></pre><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><blockquote><p>允许嵌入表达式的字符串。使用反引号（``）代替单引号或者双引号，中间包含特定语法（${表达式}）,表达式是任意 JavaScript 表达式（如变量或函数）。</p></blockquote><pre><code class="javascript">  `hello ${表达式}`;   `sun ${a + b}`</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</li><li>声明新变量时，可以使用关键词 “new” 来声明其类型。<code>var x = new String;</code></li><li>使用 let 和 var 关键字声明变量，let的作用域是块，而var的作用域是函数。</li><li>如果把值直接赋给尚未声明的变量，该变量将被自动作为全局变量声明。</li><li>let 可以声明作用域被限制在块级中的变量、语句或者表达式。var声明的变量是全局或者整个函数块的。</li><li>let声明的变量只在其声明的块或子块中可用，这一点，与var相似。二者之间最主要的区别在于 var 声明的变量的作用域是整个封闭函数。</li><li>在 HTML 中, 全局变量都是 window 对象: 所有数据变量都属于 window 对象。</li></ul><pre><code class="javascript">function varTest() {  var x = 1;  if (true) {    var x = 2;  // 同样的变量    console.log(x);  // 显示2  }  console.log(x);  // 显示2}function letTest() {  let x = 1;  if (true) {    let x = 2;  // 不同的变量    console.log(x);  // 显示2  }  console.log(x);  // 显示1</code></pre><ul><li>在程序或者函数的顶层，let并不会像var一样在全局对象上创造一个属性.</li></ul><pre><code class="javascript">var x = &#39;global&#39;;let y = &#39;global&#39;;console.log(this.x); // &quot;global&quot;console.log(this.y); // undefined</code></pre><h2 id="JS-面向对象"><a href="#JS-面向对象" class="headerlink" title="JS 面向对象"></a>JS 面向对象</h2><ul><li>javascript是基于原型的面向对象的语言，没有类的概念。</li></ul><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li>JS中不用 class 创建对象</li><li>对象：属性加方法构成</li></ul><pre><code class="javascript">  //创建一个 people 对象，拥有 name 属性和 speak 方法  var people = {      country: &quot;CN&quot;;      from: funcation(){          console.log(&quot;From&quot; + this.conuntry)      }  }；  people.from();  //由于对象并不和类关联， 我们可以随意地给这个对象增加属性  people.speak = &quot;Chinese&quot;;  console.log(people.speak);</code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>继承就是让两个对象建立关联，</li><li>在 Javascript 中每个对象都有一个特殊的属性叫做<strong>proto</strong>， 你可以用这个属性去关联另外一个对象(原型)。</li></ul><pre><code class="javascript">    //定义一个american对象    var american = {      country: &quot;US&quot;;      _proto_: people;//指向people对象    }；    //定义一个chinese对象    var chinese = {      country: &quot;CN&quot;;      _proto_:people;//指向people对象    };    american.from();    chinese.from();</code></pre><ul><li>american, chinese 的原型都是 people，当 from() 方法被调用时，先在自身的方法列表中寻找，找不到时再去原型中去寻找，如果原型中找不到，就去原型的原型中寻找，直到 Object 那里，如果还找不到，那就是方法未定义。这些对象通过_proto_建立了一个原型链。</li></ul><h3 id="构造函数-原型"><a href="#构造函数-原型" class="headerlink" title="构造函数 原型"></a>构造函数 原型</h3><ul><li>将原型对象放入 Object.prototype 中，每次 new 新对象时，js会自动建立原型链。</li></ul><pre><code class="javascript">  function Student(name){    this.name = name;  }  Student.prototype = {    say: function(){      console.log(&quot;My name is&quot; + this.name);    }  }  //创建新对象，js自动构建原型链继承 say 方法  var xiaoming = new Student(&quot;xiaoming&quot;);  var laowang = new Student(&quot;laowang&quot;);  xiaoming.say();  laowang.say();</code></pre><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><pre><code class="javascript">  class Student{    constructor(name){      this.name = name;    }    say(){      console.log(&quot;My name is&quot; + this.name);    }  }  var xiaoming = new Student(&quot;xiaoming&quot;);  xiaoming.say();</code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>  ​</p><h2 id="AJAX-异步调用"><a href="#AJAX-异步调用" class="headerlink" title="AJAX 异步调用"></a>AJAX 异步调用</h2><ul><li>异步的 JavaScript 和 XML</li><li>AJAX 是一种用于创建快速动态网页的技术。</li><li>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li><li>传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</li><li>例如服务器返回下面的 XML 数据：</li></ul><pre><code class="xml">&lt;book&gt;    &lt;isbn&gt;978-7-229-03093-3&lt;/isbn&gt;    &lt;name&gt;三体&lt;/name&gt;    &lt;author&gt;刘慈欣&lt;/author&gt;   &lt;introduction&gt;中国最牛的科幻书&lt;/introduction&gt;   &lt;price&gt;38.00&lt;/price&gt;&lt;/book&gt;</code></pre><ul><li>上面的数据中，标签占去了大部分，数据比较臃肿。</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li>JavaScript 对象表示法（JavaScript Object Notation）。</li><li>JSON 是存储和交换文本信息的语法。类似 XML。</li><li>JSON 比 XML 更小、更快，更易解析。</li><li>JSON.parse(); 解析一个JSON字符串，可选地转换生成的值及其属性，并返回值。</li><li>JSON.stringify(); 返回与指定值相对应的一个JSON字符串，可选地仅包含某些属性或以用户定义的方式替换属性值。</li></ul><pre><code class="javascript">//这种结构完全可以表达上面的xml 内容var book = {&quot;isbn&quot;: &quot;978-7-229-03093-3&quot;,&quot;name&quot;: &quot;三体&quot;, &quot;author&quot;: &quot;刘慈欣&quot;,&quot;introduction&quot;: &quot;中国最牛的科幻书&quot;,&quot;price&quot;: &quot;38.00&quot; }//JS语法还支持数组，可以表达多个对象var books = [ {&quot;isbn&quot;: &quot;978-7-229-03093-3&quot;,&quot;name&quot;: &quot;三体&quot;,&quot;author&quot;: &quot;刘慈欣&quot;,&quot;introduction&quot;: &quot;中国最牛的科幻书&quot;,&quot;price&quot;: &quot;38.00&quot; }, {&quot;isbn&quot;: &quot;978-7-229-03094-1&quot;,&quot;name&quot;: &quot;我是一个线程&quot;,&quot;author&quot;: &quot;刘欣&quot;,&quot;introduction&quot;: &quot;一个线程的自述&quot;,&quot;price&quot;: &quot;0.0&quot; }</code></pre><ul><li>books[0].name –&gt;返回“三体”</li><li>books[1].author –&gt;返回“刘欣”</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js术语中英对照表</title>
      <link href="/pages/6ad0123c/"/>
      <url>/pages/6ad0123c/</url>
      
        <content type="html"><![CDATA[<h2 id="编译相关"><a href="#编译相关" class="headerlink" title="编译相关"></a>编译相关</h2><ul><li>compile 编译</li><li>tokenizing 分词</li><li>lexing 词法分析</li><li>toekn 词法单元</li><li>parsing 解析/语法分析</li><li>Abstract Syntax Tree(AST) 抽象语法树</li><li>raw code 代码生成</li><li>LHS(Left-hand Side) 赋值操作左侧，进行赋值操作</li><li>RHS(Right-hand Side) 赋值操作非左侧，进行取值操作</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul><li>ReferenceError 引用错误</li><li>TypeError 类型错误</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Immediately Invoked Function Expression(IIFE) 立即执行函数表达式<br>Temporal dead zone(TDZ) 暂时性死区<br>Execution context 执行上下文</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域以及 LHS 和 RHS 查询</title>
      <link href="/pages/b917f198/"/>
      <url>/pages/b917f198/</url>
      
        <content type="html"><![CDATA[<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><strong>1.</strong> 作用域是一套规则，负责收集并维护由所有声明的标识符（变量）组成的一系列查询，用于确定在何处以及如何查找变量（标识符），并实施一套非常严格的规则，用于确定当前执行的代码对这些标识符的访问权限。作用域就是函数或者变量能被访问到的范围。</p><p><strong>2.</strong> 作用域有两种工作模型：</p><ul><li>词法作用域(JavaScript)：词法作用域就是定义在词法阶段的作用域。</li><li>动态作用域(Bash脚本)</li></ul><p><strong>3.</strong> 全局变量会自动成为全局对象（比如浏览器中的 window 对象）的属性，因此可以不直接通过全局对象的词法名称，而是间接地通过对全局对象属性的引用来对其进行访问。例如：<code>window.a</code></p><p>这样可以访问到被局部同名变量所遮蔽的全局变量。</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p><strong>执行上下文在运行时确定，词法作用域在定义时确定。</strong></p><h3 id="欺骗作用域"><a href="#欺骗作用域" class="headerlink" title="欺骗作用域"></a>欺骗作用域</h3><p>无论函数在哪里被调用，也无论它如何被调用，它的词法作用域都只由函数<strong>被声明时所处的位置</strong>决定。</p><p>JavaScript 中有两个机制可以“欺骗”词法作用域：eval(..) 和 with。前者可以对一段包含一个或多个声明的“代码”字符串进行演算，并借此来修改已经存在的词法作用域（在<br>运行时）。后者本质上是通过将一个对象的引用当作作用域来处理，将对象的属性当作作<br>用域中的标识符来处理，从而创建了一个新的词法作用域（同样是在运行时）。</p><h4 id="eval-函数欺骗"><a href="#eval-函数欺骗" class="headerlink" title="eval()函数欺骗"></a>eval()函数欺骗</h4><p>JavaScript 中的 eval() 函数可以接受一个字符串为参数，并将传入的字符串视为好像在书写时就存在于程序中这个位置的 JavaScript 代码进行执行。例如：</p><pre><code class="javascript">var a = 66;function bar(str, b) {    eval(str);    console.log(a, b); // 55 10}bar(&#39;var a = 55;&#39;, 10);</code></pre><p>使用 eval() 函数可以将代码以动态形式插入一个指定位置，如果 eval() 中所执行的代码包含一个或多个声明（函数或者变量），就会对词法作用域的环境进行修改，达到欺诈伪装的效果。</p><p>在严格模式下，eval() 函数拥有这自己的词法作用域，其中的声明将无法修改作用域。</p><p>这个函数的副作用是引擎无法在编译时对作用域查找进行优化，会导致代码运行变慢，不建议使用。</p><h2 id="LHS-和-RHS查询"><a href="#LHS-和-RHS查询" class="headerlink" title="LHS 和 RHS查询"></a>LHS 和 RHS查询</h2><h3 id="LHS-查询"><a href="#LHS-查询" class="headerlink" title="LHS 查询"></a>LHS 查询</h3><p><strong>对变量进行赋值操作，那么就会使用 LHS 查询。</strong></p><p>当引擎执行 LHS 查询时，如果在顶层（全局作用域）中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量，并将其返还给引擎。</p><p>严格模式禁止自动或隐式地创建全局变量。 LHS 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 RHS 查询失败时类似的 ReferenceError 异常。</p><h3 id="RHS-查询"><a href="#RHS-查询" class="headerlink" title="RHS 查询"></a>RHS 查询</h3><p><strong>查找获取某个变量的值，就会使用 RHS 查询。</strong></p><p>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError 异常。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YouDon&#39;tKnowJavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域闭包</title>
      <link href="/pages/78f2b66e/"/>
      <url>/pages/78f2b66e/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>wiki 上对闭包的定义：<br>闭包（英语：Closure），又称词法闭包（Lexical Closure）或函数闭包（function closures），<strong>是引用了自由变量的函数。</strong>这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。所以，有另一种说法认为<strong>闭包是由函数和与其相关的引用环境组合而成的实体。</strong></p><p><strong>自由变量的定义</strong>：在 fn() 作用域中使用的变量 x，却没有在 fn() 作用域中声明（即在其他作用域中声明的），对于 foo() 作用域来说，x 就是一个自由变量。</p><p>当函数<strong>可以记住并访问所在的词法作用域</strong>时，就产生了<strong>闭包</strong>，即使函数是在自己定义的词法作用域以外的地方执行。</p><p>闭包使得函数在<strong>定义时的词法作用域以外</strong>的地方被调用时，函数<strong>可以继续访问定义时的词法作用域</strong>。</p><p>在 JavaScript 中有垃圾回收器用来释放不再使用的内存空间，通过使用闭包可以阻止这件事情的发生，使得这个函数的内部作用域一直存活。</p><p>在函数 foo() 内部定义了函数 func()， func() 引用了其父函数作用域的变量，对这个内部作用域的引用就叫作闭包。</p><pre><code class="javascript">function foo() {    let a = 0;    return function func() {        console.log(a);        a++;    };}const bar = foo();const baz = foo();bar(); // 0bar(); // 1 闭包保存上次计算的值bar(); // 2baz(); // 0 新生成函数</code></pre><p>将 foo() 内部定义的func() 函数作为一个参数，传递给在全局作用域下定义的 bar() 函数，从而达到访问 func() 词法作用域的目的。</p><p>无论通过何种手段<strong>将内部函数传递到所在的词法作用域以外</strong>，它都会<strong>持有对原始定义作用域的引用</strong>，无论在何处<strong>执行这个函数都会使用闭包</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YouDon&#39;tKnowJavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局命名空间和模块</title>
      <link href="/pages/f9a582e/"/>
      <url>/pages/f9a582e/</url>
      
        <content type="html"><![CDATA[<h2 id="全局命名空间"><a href="#全局命名空间" class="headerlink" title="全局命名空间"></a>全局命名空间</h2><p>库通常会在全局作用域中声明一个名字独特的变量，通常是一个对象。这个对象被用作库的命名空间，所有需要暴露给外界的功能都会成为这个对象（命名空间）的属性，而不是将自己的标识符暴漏在顶级的词法作用域中。</p><p>例如：</p><pre><code class="javascript">var mylibrary = {    name: &#39;haha&#39;,    eat: (name) =&gt; {        console.log(`${name} is eating`);    }};</code></pre><h2 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h2><p>通过依赖管理器的机制将库的标识符显式地导入到另外一个特定的作用域中。</p><p>用作用域的规则，强制所有标识符都不能注入到共享作用域中，而是保持在私有、无冲突的作用域中，这样可以有效规避掉所有的意外冲突。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YouDon&#39;tKnowJavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数作用域及块作用域</title>
      <link href="/pages/70cbbc9f/"/>
      <url>/pages/70cbbc9f/</url>
      
        <content type="html"><![CDATA[<h2 id="最小特权原则"><a href="#最小特权原则" class="headerlink" title="最小特权原则"></a>最小特权原则</h2><p>最小特权原则也叫最小授权或最小暴露原则。这个原则是指在软件设计中，应该最小限度地暴露必要内容，而将其他内容都“隐藏”起来，比如某个模块或对象的 API 设计。</p><h3 id="函数封装"><a href="#函数封装" class="headerlink" title="函数封装"></a>函数封装</h3><p>将函数和变量包裹在一个外部包装函数的作用域中，使用这个作用域将这些具体的细节隐藏起来，实现函数的封装。</p><ol><li>可以避免同名标识符之间的冲突，避免全局变量污染。</li><li>将具体内容私有化，防止外部以非预期的方式使用内部私有的内容。</li></ol><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>函数作用域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用（事实上在嵌套的作用域中也可以使用）。</p><p><strong>函数声明:</strong></p><pre><code class="javascript">function foo() {    for (let i = 0; i &lt; 10; i++) {        console.log(i);    }}foo();</code></pre><p><strong>立即执行函数表达式：</strong></p><pre><code class="javascript">(function foo() {    for (let i = 0; i &lt; 10; i++) {        console.log(i);    }})();</code></pre><p>区分函数声明和表达式最简单的方法是看 function 关键字出现在声明中的位置（不仅仅是一行代码，而是整个声明中的位置）。<strong>如果 function 是声明中的第一个词，那么就是一个函数声明，否则就是一个函数表达式。</strong></p><p>函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。</p><ol><li>函数声明中，foo 被绑定在所在的作用域中，可以在外部通过 foo() 来调用它。</li><li>函数表达式中，foo 被绑定在函数表达式自身的函数中，外部不能访问调用，只能在其(function foo(){…}) 中的<code>...</code>位置被访问。</li></ol><h3 id="匿名函数表达式"><a href="#匿名函数表达式" class="headerlink" title="匿名函数表达式"></a>匿名函数表达式</h3><p>函数表达式可以匿名，而函数声明则不可以省略函数名。</p><h3 id="立即执行函数表达式（IIFE）"><a href="#立即执行函数表达式（IIFE）" class="headerlink" title="立即执行函数表达式（IIFE）"></a>立即执行函数表达式（IIFE）</h3><p>立即执行函数表达式（Immediately Invoked Function Expression），将函数包含在一对（）中，成为一个函数表达式，在末尾加上另一对（）可以立即执行这个函数。<br>第一个（）将函数变成表达式，第二个（） 执行了这个函数。</p><h4 id="IIFE-的两种写法"><a href="#IIFE-的两种写法" class="headerlink" title="IIFE 的两种写法"></a>IIFE 的两种写法</h4><ol><li>立即执行函数表达式：</li></ol><pre><code class="javascript">(function foo() {    for (let i = 0; i &lt; 10; i++) {        console.log(i);    }})();</code></pre><ol start="2"><li>另一种改进形式写法将调用的（）移到了用来包装的（）里面。</li></ol><pre><code class="javascript">(function foo() {    for (let i = 0; i &lt; 10; i++) {        console.log(i);    }}());</code></pre><p>两种写法功能上一样，凭个人喜好。</p><h4 id="IIFE-表达式的用法"><a href="#IIFE-表达式的用法" class="headerlink" title="IIFE 表达式的用法"></a>IIFE 表达式的用法</h4><ol><li>匿名函数表达式</li></ol><pre><code class="javascript">(() =&gt; {    const a = 6;    console.log(a); // a})();</code></pre><ol start="2"><li>将它当作<strong>函数调用</strong>，并传递参数进去</li></ol><pre><code class="javascript">const name = &#39;haha&#39;;(function IIFE(name) {    console.log(name); // haha})(name);</code></pre><ol start="3"><li>倒置代码的运行顺序，将需要运行的函数放在第二位， IIFE 执行之后，放在第二位的函数被当作参数传递进去。</li></ol><pre><code class="javascript">const objA = {    name: &#39;haha&#39;,};(function IIFE(foo) {    foo(objA);}((obj) =&gt; {    const name = &#39;3&#39;;    console.log(name); // 3    console.log(obj.name); // haha}));</code></pre><p>第二部分为一个匿名函数，被当作一个参数 foo 传入到 IIFE 函数的第一部分。最后匿名函数调用执行，将一个全局对象 objA 传入当作 obj 的参数值。</p><h2 id="块作用域"><a href="#块作用域" class="headerlink" title="块作用域"></a>块作用域</h2><p>块作用域是一个用来对之前的最小授权原则进行扩展的工具，将代码从在函数中隐藏信息扩展为在块中隐藏信息。</p><p>块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指 { .. } 内部）。</p><p>只想在 for 循环内部的上下文中使用 i，所以在 for 循环的头部使用 var 声明一个变量 i，但实际上 i 会被绑定在外部作用域（函数或全局）中，在全局范围内都有效。</p><pre><code class="javascript">var arr = [];for (var i = 0; i &lt; 10; i++) {  arr[i] = function() {    console.log(i);  };}arr[6](); // 10</code></pre><p>console.log(i) 内部的 i 指向全局的的 i，最后循环完毕后在执行 arr<a href="">6</a>，这时全局的 i 的值为 10.</p><p>ES3 规范中规定 try/catch 的 catch 分句会创建一个块作用域，其中声明的变量仅在 catch 内部有效。</p><h3 id="Let-变量"><a href="#Let-变量" class="headerlink" title="Let 变量"></a>Let 变量</h3><p>let 关键字可以将变量绑定到所在的任意作用域中（通常是 {  ..  } 内部）。换句话说，let 为其声明的变量隐式地了所在的块作用域。</p><pre><code class="javascript">var arr = [];for (let i = 0; i &lt; 10; i++) {  arr[i] = function () {    console.log(i);  };}arr[6](); // 6</code></pre><p>由 let 声明的 i，每次循环都在循环的内部重新生成了一次变量，</p><pre><code class="javascript">var arr = [];for (let i = 0; i &lt; 10; i++) {    let _i = i;  arr[i] = function () {    console.log(_i);  };}arr[6](); // 6</code></pre><p>for 循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><p>let 声明的变量只在它所在的代码块有效。</p><pre><code class="javascript">{    var a = 6;    let b = 9;}console.log(a); // 6console.log(b); // b is not defined</code></pre><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>在代码块内，使用 let 命令声明变量，在声明之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）.</p><pre><code class="javascript">if (true) {  // TDZ开始  tmp = &#39;abc&#39;; // ReferenceError  console.log(tmp); // ReferenceError  let tmp; // TDZ结束  console.log(tmp); // undefined  tmp = 123;  console.log(tmp); // 123}</code></pre><p>ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><pre><code class="javascript">var tmp = 6;if(true) {  tmp = 3; // ReferenceError  let tmp;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YouDon&#39;tKnowJavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习资源</title>
      <link href="/pages/422fbc06/"/>
      <url>/pages/422fbc06/</url>
      
        <content type="html"><![CDATA[<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ul><li><p>前端导航：<a href="http://webjike.com/web.html" target="_blank" rel="noopener">http://webjike.com/web.html</a></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2></li><li><p>HTML MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML</a></p></li><li><p>HTML5 MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5</a></p></li><li><p>HTML语义化</p></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li>CSS MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS</a><ul><li>CSS 布局：<a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">http://zh.learnlayout.com/</a></li></ul></li><li>CSS3 MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS3</a></li><li>scss 中文网：<a href="https://www.sass.hk/" target="_blank" rel="noopener">https://www.sass.hk/</a><br>  *Sass (3.4.21) 中文文档：<a href="http://www.css88.com/doc/sass/#features" target="_blank" rel="noopener">http://www.css88.com/doc/sass/#features</a></li><li>stylus 中文文档：<a href="http://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="noopener">http://www.zhangxinxu.com/jq/stylus/</a></li></ul><h2 id="JavaScipt"><a href="#JavaScipt" class="headerlink" title="JavaScipt"></a>JavaScipt</h2><ul><li>JavaScript MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></li><li>DOM操作（jQuery、React）</li></ul><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ul><li>Bootstrap 中文网：<a href="http://www.bootcss.com/" target="_blank" rel="noopener">http://www.bootcss.com/</a></li><li>Vue.js</li><li>React</li><li>Angular 4</li></ul><h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><ul><li><p>免费高清图：<a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></p></li><li><p>网页背景抓取：<a href="http://stylifyme.com/" target="_blank" rel="noopener">http://stylifyme.com/</a></p></li><li><p>Material中文：<a href="https://www.mdui.org/design/#" target="_blank" rel="noopener">https://www.mdui.org/design/#</a></p></li><li><p>Material：<a href="https://www.materialui.co/" target="_blank" rel="noopener">https://www.materialui.co/</a></p></li><li><p>Flatui：<a href="https://flatuicolors.com/" target="_blank" rel="noopener">https://flatuicolors.com/</a></p></li><li><p>Uplabs：<a href="https://www.uplabs.com/web" target="_blank" rel="noopener">https://www.uplabs.com/web</a></p></li><li><p>花瓣：<a href="http://huaban.com/boards/3511269/" target="_blank" rel="noopener">http://huaban.com/boards/3511269/</a></p></li><li><p>颜色进制转换：<a href="http://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">http://www.sioe.cn/yingyong/yanse-rgb-16/</a></p></li><li><p>CSS 动画</p></li><li><p>JavaScript 动画</p></li><li><p>字体</p><ul><li>汉字标准格式：<a href="https://css.hanzi.co/manual" target="_blank" rel="noopener">https://css.hanzi.co/manual</a></li><li>Google Fonts：<a href="https://fonts.google.com/" target="_blank" rel="noopener">https://fonts.google.com/</a></li><li>Google Fonts 中文版：<a href="http://www.googlefonts.cn/" target="_blank" rel="noopener">http://www.googlefonts.cn/</a></li><li>360 Google 字体库：<a href="https://cdn.baomitu.com/index/fonts" target="_blank" rel="noopener">https://cdn.baomitu.com/index/fonts</a></li></ul></li><li><p>ICON</p><ul><li>在线标签：<a href="https://shields.io/" target="_blank" rel="noopener">https://shields.io/</a></li><li>Awesome 在线 ：<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">http://fontawesome.io/icons/</a></li><li>Easyicon 下载：<a href="http://www.easyicon.net/" target="_blank" rel="noopener">http://www.easyicon.net/</a></li><li>Icon 爱看搜索：<a href="http://www.iconpng.com/" target="_blank" rel="noopener">http://www.iconpng.com/</a></li><li>Favico 在线制作：<a href="http://www.faviconico.org/favicon" target="_blank" rel="noopener">http://www.faviconico.org/favicon</a></li><li>Material ：<a href="https://material.io/icons/" target="_blank" rel="noopener">https://material.io/icons/</a></li><li>阿里巴巴 ：<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></li><li>Sample： <a href="https://simpleicons.org/" target="_blank" rel="noopener">https://simpleicons.org/</a></li><li>Flaticon：<a href="https://www.flaticon.com/" target="_blank" rel="noopener">https://www.flaticon.com/</a></li></ul></li><li><p>PS 切图</p></li><li><p>响应式设计</p></li><li><p>Flexbox 布局</p><ul><li>阮一峰：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool</a></li></ul></li><li><p>网格布局</p></li></ul><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul><li>node.js 中文网：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a></li><li>node.js 中文社区：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org/</a><ul><li>一起学Node.js：<a href="https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb" target="_blank" rel="noopener">https://cnodejs.org/topic/581b0c4ebb9452c9052e7acb</a></li><li>七天学会NodeJS：<a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">http://nqdeng.github.io/7-days-nodejs/</a></li></ul></li></ul><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><ul><li>中文网：<a href="https://www.tslang.cn/" target="_blank" rel="noopener">https://www.tslang.cn/</a></li><li>TypeScript Handbook(中文版)：<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/" target="_blank" rel="noopener">https://zhongsp.gitbooks.io/typescript-handbook/content/</a></li></ul><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><ul><li>ECMAScript 5<ul><li>W3C 规范镜像版: <a href="http://yanhaijing.com/es5/#null" target="_blank" rel="noopener">http://yanhaijing.com/es5/#null</a></li><li>自学手稿版： <a href="http://es5.weijieblog.com/" target="_blank" rel="noopener">http://es5.weijieblog.com/</a></li></ul></li><li>ECMAScript 6 阮一峰：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li>三十分钟入门：<a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">https://deerchao.net/tutorials/regex/regex.htm</a></li></ul><h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><ul><li>gulp 中文网：<a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/</a></li><li>NPM 淘宝镜像:<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></li><li>AppVeyor 自动部署：<a href="https://ci.appveyor.com/" target="_blank" rel="noopener">https://ci.appveyor.com/</a></li></ul><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><ul><li>收藏夹：<a href="http://u-hey.com/20/126" target="_blank" rel="noopener">http://u-hey.com/20/126</a></li></ul><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><ul><li>腾讯ISUX前端智图：<a href="http://zhitu.isux.us/" target="_blank" rel="noopener">http://zhitu.isux.us/</a></li></ul><h2 id="在线编程"><a href="#在线编程" class="headerlink" title="在线编程"></a>在线编程</h2><p>CODEPEN：<a href="https://codepen.io/" target="_blank" rel="noopener">https://codepen.io/</a><br>JSFiddle：<a href="https://jsfiddle.net/" target="_blank" rel="noopener">https://jsfiddle.net/</a></p><h2 id="MarkDown-语法"><a href="#MarkDown-语法" class="headerlink" title="MarkDown 语法"></a>MarkDown 语法</h2><ul><li>MarkDown 中文：<a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="noopener">http://wowubuntu.com/markdown/index.html</a></li></ul><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>Highlightjs：<a href="https://highlightjs.org/static/demo/" target="_blank" rel="noopener">https://highlightjs.org/static/demo/</a></p><h2 id="CDN-静态资源库"><a href="#CDN-静态资源库" class="headerlink" title="CDN 静态资源库"></a>CDN 静态资源库</h2><ul><li>360 前端静态资源库：<a href="https://cdn.baomitu.com/" target="_blank" rel="noopener">https://cdn.baomitu.com/</a></li><li>Staticfile CDN：<a href="https://www.staticfile.org/" target="_blank" rel="noopener">https://www.staticfile.org/</a></li><li>又拍云：<a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">http://www.bootcdn.cn/</a></li></ul><h1 id="前端团队"><a href="#前端团队" class="headerlink" title="前端团队"></a>前端团队</h1><ul><li>阿里巴巴国际UED:<a href="http://www.aliued.com/" target="_blank" rel="noopener">http://www.aliued.com/</a></li><li>淘宝前端团队（FED）:<a href="http://taobaofed.org/" target="_blank" rel="noopener">http://taobaofed.org/</a></li><li>腾讯Alloy Team：<a href="http://www.alloyteam.com/" target="_blank" rel="noopener">http://www.alloyteam.com/</a></li><li>腾讯ISUX：<a href="https://isux.tencent.com/" target="_blank" rel="noopener">https://isux.tencent.com/</a></li><li>百度FEX：<a href="http://fex.baidu.com/" target="_blank" rel="noopener">http://fex.baidu.com/</a></li><li>京东Aotu：<a href="https://aotu.io/" target="_blank" rel="noopener">https://aotu.io/</a></li><li>360 奇舞：<a href="https://75team.com/" target="_blank" rel="noopener">https://75team.com/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>淘宝双飞翼布局</title>
      <link href="/pages/ff1e4b17/"/>
      <url>/pages/ff1e4b17/</url>
      
        <content type="html"><![CDATA[<h2 id="淘宝双飞翼布局"><a href="#淘宝双飞翼布局" class="headerlink" title="淘宝双飞翼布局"></a>淘宝双飞翼布局</h2><blockquote><p>淘宝双飞翼布局和圣杯布局在前半部分的思路都差不多，只是在解决中间栏内容被挡住时所采用的方法不同。双飞翼布局在 main 下多一个增加 div，不使用相对定位，只用浮动和负边距，解决三栏液态式布局。</p></blockquote><h3 id="DOM-结构"><a href="#DOM-结构" class="headerlink" title="DOM 结构"></a>DOM 结构</h3><p>在 DOM 中按照主列、子列、附加列的顺序排列，保证主列优先加载。</p><pre><code class="html">&lt;div class=&quot;header&quot;&gt;        &lt;strong&gt;三栏布局之双飞翼布局&lt;/strong&gt;    &lt;/div&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;col main&quot;&gt;             &lt;div class=&quot;main-wrap&quot;&gt;我是一个宽度自适应的主列。&lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;col sub&quot;&gt;我是一个子列。&lt;/div&gt;        &lt;div class=&quot;col extra&quot;&gt;我是一个附加列。&lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</code></pre><p>以上 DOM 结构中，在 main 中添加了一个子 div，用来解决中间列内容被遮挡问题。</p><h3 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h3><p>去掉相对定位的使用，去掉了父容器的 padding，使用中间栏新增 div 的 margin 解决遮挡问题。</p><pre><code class="css">        body {            padding: 0;            margin: 0;            min-width: 440px;        }        .header,        .footer {            background-color: ##1c262f;            color: white;            text-align: center;            font-size: 1.5em;        }        .container {            width: 100%;            min-height: 200px;        }        .col {            float: left;            color: white;            text-align: justify; /* 文字两端对齐 */            min-height:120px;        }        .main{            width: 100%;        }        .sub {            background-color: ##ea4335;            width: 120px;            margin-left: -100%;        }        .extra {            background-color: ##34a853;            width: 200px;            margin-left: -200px;        }        .main-wrap {            margin-left: 120px;            margin-right: 200px;            background-color: ##4285f3;        }        .footr {            clear: both;        }</code></pre><p>为 body 加上一个最小宽度(2 * sub width + extra width),避免网页放大时中间栏被挤到消失。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多个SSH管理</title>
      <link href="/pages/8ee164b8/"/>
      <url>/pages/8ee164b8/</url>
      
        <content type="html"><![CDATA[<h2 id="多个-SSH-key-管理"><a href="#多个-SSH-key-管理" class="headerlink" title="多个 SSH key 管理"></a>多个 SSH key 管理</h2><ul><li>在创建ssh key的时候，将新的密钥进行重新命名，比如id_rsa_coding，使用下面的命令：<br><code>ssh-keygen -t rsa -C &quot;roojay520@gmail.com&quot; -f ~/.ssh/id_rsa_coding</code><br>b48684451cdeae15e70966c332895a1947144e1e</li></ul><p>git config –global user.name “roojay”<br>git config –global user.email “<a href="mailto:roojay520@gmail.com">roojay520@gmail.com</a>“</p><p>git config –global user.name “roojay”<br>git config –global user.email “<a href="mailto:roojay@126.com">roojay@126.com</a>“</p><p>STATIC_SITE_REPO <a href="https://github.com/roojay520/roojay520.github.io" target="_blank" rel="noopener">https://github.com/roojay520/roojay520.github.io</a><br>TARGET_BRANCH master<br>GIT_USER_EMAIL <a href="mailto:roojay520@gmail.com">roojay520@gmail.com</a><br>GIT_USER_NAME roojay</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用正则表达式</title>
      <link href="/pages/81d5af05/"/>
      <url>/pages/81d5af05/</url>
      
        <content type="html"><![CDATA[<h2 id="一、校验数字的表达式"><a href="#一、校验数字的表达式" class="headerlink" title="一、校验数字的表达式"></a>一、校验数字的表达式</h2><ol><li><p>数字：<code>^[0-9]*$</code></p></li><li><p>n位的数字：<code>^\d{n}$</code></p></li><li><p>至少n位的数字：<code>^\d{n,}$</code></p></li><li><p>m-n位的数字：<code>^\d{m,n}$</code></p></li><li><p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p></li><li><p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p></li><li><p>带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d{1,2})?$</code></p></li><li><p>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></p></li><li><p>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p></li><li><p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p></li><li><p>非零的正整数：<code>^[1-9]\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\+?[1-9][0-9]*$</code></p></li><li><p>非零的负整数：<code>^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$</code></p></li><li><p>非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code></p></li><li><p>非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code></p></li><li><p>非负浮点数：<code>^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></p></li><li><p>非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></p></li><li><p>正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p></li><li><p>负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p></li><li><p>浮点数：<code>^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></p></li></ol><h2 id="二、校验字符的表达式"><a href="#二、校验字符的表达式" class="headerlink" title="二、校验字符的表达式"></a>二、校验字符的表达式</h2><ol><li><p>汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p></li><li><p>英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p></li><li><p>长度为3-20的所有字符：<code>^.{3,20}$</code></p></li><li><p>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p></li><li><p>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p></li><li><p>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p></li><li><p>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p></li><li><p>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></p></li><li><p>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p></li><li><p>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p></li><li><p>可以输入含有<code>^%&amp;&#39;,;=?$\</code>“等字符：<code>[^%&amp;&#39;,;=?$\x22]+ 12 禁止输入含有~的字符：[^~\x22]+</code></p></li></ol><h2 id="三、特殊需求表达式"><a href="#三、特殊需求表达式" class="headerlink" title="三、特殊需求表达式"></a>三、特殊需求表达式</h2><ol><li><p>Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></p></li><li><p>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p></li><li><p>InternetURL：<code>[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></p></li><li><p>手机号码：    ^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</p></li><li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></p></li><li><p>国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p></li><li><p>身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></p></li><li><p>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p></li><li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p></li><li><p>日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p></li><li><p>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p></li><li><p>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p></li><li><p>钱的输入格式：</p><p>a. 有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p><p>b. 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p><p>c. 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p><p>e. 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p><p>f. 必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>g. 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p><p>h. 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p><p>i. 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></p></li></ol><p><strong>备注</strong>：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p><ol start="16"><li><p>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></p></li><li><p>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p></li><li><p>双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p></li><li><p>空白行的正则表达式：<code>\n\s*\r</code> (可以用来删除空白行)</p></li><li><p>HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p></li><li><p>首尾空白字符的正则表达式：<code>^\s*|\s*$或(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p></li><li><p>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p></li><li><p>中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</p></li><li><p>IP地址：<code>\d+\.\d+\.\d+\.\d+</code> (提取IP地址时有用)</p></li><li><p>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RegEx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序算法</title>
      <link href="/pages/5b90526d/"/>
      <url>/pages/5b90526d/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自@ruanyf大神,留作自己备用.</p></blockquote><p>排序算法是将一系列的值按照顺序进行排列的方法。</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>冒泡排序（Bubble Sort）是最易懂的排序算法，但是效率较低，生产环境中很少使用。</p><p>它的基本思想是：</p><ol><li><p>依次比较相邻的两个数，如果不符合排序规则，则调换两个数的位置。这样一遍比较下来，能够保证最大（或最小）的数排在最后一位。</p></li><li><p>再对最后一位以外的数组，重复前面的过程，直至全部排序完成。</p></li></ol><p>由于每进行一次这个过程，在该次比较的最后一个位置上，正确的数会自己冒出来，就好像“冒泡”一样，这种算法因此得名。</p><p>以对数组<code>[3, 2, 4, 5, 1]</code>进行从小到大排序为例，步骤如下：</p><ol><li><p>第一位的“3”与第二位的“2”进行比较，3大于2，互换位置，数组变成<code>[2, 3, 4, 5, 1]</code>。</p></li><li><p>第二位的“3”与第三位的“4”进行比较，3小于4，数组不变。</p></li><li><p>第三位的“4”与第四位的“5”进行比较，4小于5，数组不变。</p></li><li><p>第四位的“5”与第五位的“1”进行比较，5大于1，互换位置，数组变成<code>[2, 3, 4, 1, 5]</code>。</p></li></ol><p>第一轮排序完成，可以看到最后一位的5，已经是正确的数了。然后，再对剩下的数<code>[2, 3, 4, 1]</code>重复这个过程，每一轮都会在本轮最后一位上出现正确的数。直至剩下最后一个位置，所有排序结束。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>先定义一个交换函数，作用是交换两个位置的值。</p><pre><code class="javascript">function swap(myArray, p1, p2){  var temp = myArray[p1];  myArray[p1] = myArray[p2];  myArray[p2] = temp;}</code></pre><p>然后定义主函数。</p><pre><code class="javascript">function bubbleSort(myArray){  var len = myArray.length;  var i;  var j;  var stop;  for (i = 0; i &lt; len - 1; i++){    for (j = 0, stop = len - 1 - i; j &lt; stop; j++){      if (myArray[j] &gt; myArray[j + 1]){        swap(myArray, j, j + 1);      }    }  }  return myArray;}</code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>选择排序（Selection Sort）与冒泡排序类似，也是依次对相邻的数进行两两比较。不同之处在于，它不是每比较一次就调换位置，而是一轮比较完毕，找到最大值（或最小值）之后，将其放在正确的位置，其他数的位置不变。</p><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>假定第一位的“3”是最小值。</p></li><li><p>最小值“3”与第二位的“2”进行比较，2小于3，所以新的最小值是第二位的“2”。</p></li><li><p>最小值“2”与第三位的“4”进行比较，2小于4，最小值不变。</p></li><li><p>最小值“2”与第四位的“5”进行比较，2小于5，最小值不变。</p></li><li><p>最小值“2”与第五位的“1”进行比较，1小于2，所以新的最小值是第五位的“1”。</p></li><li><p>第五位的“1”与第一位的“3”互换位置，数组变为[1, 2, 4, 5, 3]。</p></li></ol><p>这一轮比较结束后，最小值“1”已经排到正确的位置了，然后对剩下的[2, 4, 5, 3]重复上面的过程。每一轮排序都会将该轮的最小值排到正确的位置，直至剩下最后一个位置，所有排序结束。</p><h3 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h3><p>先定义一个交换函数。</p><pre><code class="javascript">function swap(myArray, p1, p2){    var temp = myArray[p1];    myArray[p1] = myArray[p2];    myArray[p2] = temp;}</code></pre><p>然后定义主函数。</p><pre><code class="javascript">function selectionSort(myArray){    var len = myArray.length,        min;    for (i=0; i &lt; len; i++){        // 将当前位置设为最小值        min = i;        // 检查数组其余部分是否更小        for (j=i+1; j &lt; len; j++){            if (myArray[j] &lt; myArray[min]){                min = j;            }        }        // 如果当前位置不是最小值，将其换为最小值        if (i != min){            swap(myArray, i, min);        }    }    return myArray;}</code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p>插入排序（insertion sort）比前面两种排序方法都更有效率。它将数组分成“已排序”和“未排序”两部分，一开始的时候，“已排序”的部分只有一个元素，然后将它后面一个元素从“未排序”部分插入“已排序”部分，从而“已排序”部分增加一个元素，“未排序”部分减少一个元素。以此类推，完成全部排序。</p><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>将数组分成[3]和[2, 4, 5, 1]两部分，前者是已排序的，后者是未排序的。</p></li><li><p>取出未排序部分的第一个元素“2”，与已排序部分最后一个元素“3”比较，因为2小于3，所以2排在3前面，整个数组变成[2, 3]和[4, 5, 1]两部分。</p></li><li><p>取出未排序部分的第一个元素“4”，与已排序部分最后一个元素“3”比较，因为4大于3，所以4排在3后面，整个数组变成[2, 3, 4]和[5, 1]两部分。</p></li><li><p>取出未排序部分的第一个元素“5”，与已排序部分最后一个元素“4”比较，因为5大于4，所以5排在4后面，整个数组变成[2, 3, 4, 5]和[1]两部分。</p></li><li><p>取出未排序部分的第一个元素“1”，与已排序部分最后一个元素“5”比较，因为1小于5，所以再与前一个元素“4”比较；因为1小于4，再与前一个元素“3”比较；因为1小于3，再与前一个元素“2”比较；因为小于1小于2，所以“1”排在2的前面，整个数组变成[1, 2, 3, 4, 5]。</p></li></ol><h3 id="算法实现-2"><a href="#算法实现-2" class="headerlink" title="算法实现"></a>算法实现</h3><p>算法的实现如下：</p><pre><code class="javascript">function insertionSort(myArray) {    var len     = myArray.length,     // 数组的长度        value,                      // 当前比较的值        i,                          // 未排序部分的当前位置        j;                          // 已排序部分的当前位置    for (i=0; i &lt; len; i++) {        // 储存当前位置的值        value = myArray[i];        /*         * 当已排序部分的当前元素大于value，         * 就将当前元素向后移一位，再将前一位与value比较         */        for (j=i-1; j &gt; -1 &amp;&amp; myArray[j] &gt; value; j--) {            myArray[j+1] = myArray[j];        }        myArray[j+1] = value;    }    return myArray;}</code></pre><h2 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>前面三种排序算法只有教学价值，因为效率低，很少实际使用。合并排序（Merge sort）则是一种被广泛使用的排序方法。</p><p>它的基本思想是，将两个已经排序的数组合并，要比从头开始排序所有元素来得快。因此，可以将数组拆开，分成n个只有一个元素的数组，然后不断地两两合并，直到全部排序完成。</p><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>将数组分成[3, 2, 4]和[5, 1]两部分。</p></li><li><p>将[3, 2, 4]分成[3, 2]和[4]两部分。</p></li><li><p>将[3, 2]分成[3]和[2]两部分，然后合并成[2, 3]。</p></li><li><p>将[2, 3]和[4]合并成[2, 3, 4]。</p></li><li><p>将[5, 1]分成[5]和[1]两部分，然后合并成[1, 5]。</p></li><li><p>将[2, 3, 4]和[1, 5]合并成[1, 2, 3, 4, 5]。</p></li></ol><h3 id="算法实现-3"><a href="#算法实现-3" class="headerlink" title="算法实现"></a>算法实现</h3><p>这里的关键是如何合并两个已经排序的数组。具体实现请看下面的函数。</p><pre><code class="javascript">function merge(left, right){    var result  = [],        il      = 0,        ir      = 0;    while (il &lt; left.length &amp;&amp; ir &lt; right.length){        if (left[il] &lt; right[ir]){            result.push(left[il++]);        } else {            result.push(right[ir++]);        }    }    return result.concat(left.slice(il)).concat(right.slice(ir));}</code></pre><p>上面的merge函数，合并两个已经按升序排好序的数组。首先，比较两个数组的第一个元素，将其中较小的一个放入result数组；然后，将其中较大的一个与另一个数组的第二个元素进行比较，再将其中较小的一个放入result数组的第二个位置。以此类推，直到一个数组的所有元素都进入result数组为止，再将另一个数组剩下的元素接着result数组后面返回（使用concat方法）。</p><p>有了merge函数，就可以对任意数组排序了。基本方法是将数组不断地拆成两半，直到每一半只包含零个元素或一个元素为止，然后就用merge函数，将拆成两半的数组不断合并，直到合并成一整个排序完成的数组。</p><pre><code class="javascript">function mergeSort(myArray){    if (myArray.length &lt; 2) {        return myArray;    }    var middle = Math.floor(myArray.length / 2),        left    = myArray.slice(0, middle),        right   = myArray.slice(middle);    return merge(mergeSort(left), mergeSort(right));}</code></pre><p>上面的代码有一个问题，就是返回的是一个全新的数组，会多占用空间。因此，修改上面的函数，使之在原地排序，不多占用空间。</p><pre><code class="javascript">function mergeSort(myArray){    if (myArray.length &lt; 2) {        return myArray;    }    var middle = Math.floor(myArray.length / 2),        left    = myArray.slice(0, middle),        right   = myArray.slice(middle),        params = merge(mergeSort(left), mergeSort(right));    // 在返回的数组头部，添加两个元素，第一个是0，第二个是返回的数组长度    params.unshift(0, myArray.length);    // splice用来替换数组元素，它接受多个参数，    // 第一个是开始替换的位置，第二个是需要替换的个数，后面就是所有新加入的元素。    // 因为splice不接受数组作为参数，所以采用apply的写法。    // 这一句的意思就是原来的myArray数组替换成排序后的myArray    myArray.splice.apply(myArray, params);    // 返回排序后的数组    return myArray;}</code></pre><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>快速排序（quick sort）是公认最快的排序算法之一，有着广泛的应用。</p><p>它的基本思想很简单：先确定一个“支点”（pivot），将所有小于“支点”的值都放在该点的左侧，大于“支点”的值都放在该点的右侧，然后对左右两侧不断重复这个过程，直到所有排序完成。</p><p>具体做法是：</p><ol><li><p>确定“支点”（pivot）。虽然数组中任意一个值都能作为“支点”，但通常是取数组的中间值。</p></li><li><p>建立两端的指针。左侧的指针指向数组的第一个元素，右侧的指针指向数组的最后一个元素。</p></li><li><p>左侧指针的当前值与“支点”进行比较，如果小于“支点”则指针向后移动一位，否则指针停在原地。</p></li><li><p>右侧指针的当前值与“支点”进行比较，如果大于“支点”则指针向前移动一位，否则指针停在原地。</p></li><li><p>左侧指针的位置与右侧指针的位置进行比较，如果前者大于等于后者，则本次排序结束；否则，左侧指针的值与右侧指针的值相交换。</p></li><li><p>对左右两侧重复第2至5步。</p></li></ol><p>以对数组[3, 2, 4, 5, 1] 进行从小到大排序为例，步骤如下：</p><ol><li><p>选择中间值“4”作为“支点”。</p></li><li><p>第一个元素3小于4，左侧指针向后移动一位；第二个元素2小于4，左侧指针向后移动一位；第三个元素4等于4，左侧指针停在这个位置（数组的第2位）。</p></li><li><p>倒数第一个元素1小于4，右侧指针停在这个位置（数组的第4位）。</p></li><li><p>左侧指针的位置（2）小于右侧指针的位置（4），两个位置的值互换，数组变成[3, 2, 1, 5, 4]。</p></li><li><p>左侧指针向后移动一位，第四个元素5大于4，左侧指针停在这个位置（数组的第3位）。</p></li><li><p>右侧指针向前移动一位，第四个元素5大于4，右侧指针移动向前移动一位，第三个元素1小于4，右侧指针停在这个位置（数组的第3位）。</p></li><li><p>左侧指针的位置（3）大于右侧指针的位置（2），本次排序结束。</p></li><li><p>对 [3, 2, 1]和[5, 4]两部分各自不断重复上述步骤，直到排序完成。</p></li></ol><h3 id="算法实现-4"><a href="#算法实现-4" class="headerlink" title="算法实现"></a>算法实现</h3><p>首先部署一个swap函数，用于互换两个位置的值。</p><pre><code class="javascript">function swap(myArray, firstIndex, secondIndex){    var temp = myArray[firstIndex];    myArray[firstIndex] = myArray[secondIndex];    myArray[secondIndex] = temp;}</code></pre><p>然后，部署一个partition函数，用于完成一轮排序。</p><pre><code class="javascript">function partition(myArray, left, right) {    var pivot   = myArray[Math.floor((right + left) / 2)],        i       = left,        j       = right;    while (i &lt;= j) {        while (myArray[i] &lt; pivot) {            i++;        }        while (myArray[j] &gt; pivot) {            j--;        }        if (i &lt;= j) {            swap(myArray, i, j);            i++;            j--;        }    }    return i;}</code></pre><p>接下来，就是递归上面的过程，完成整个排序。</p><pre><code class="javascript">function quickSort(myArray, left, right) {    if (myArray.length &lt; 2) return myArray;    left = (typeof left !== &quot;number&quot; ? 0 : left);    right = (typeof right !== &quot;number&quot; ? myArray.length - 1 : right);    var index  = partition(myArray, left, right);     if (left &lt; index - 1) {            quickSort(myArray, left, index - 1);     }     if (index &lt; right) {            quickSort(myArray, index, right);      }     return myArray;}</code></pre><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>Nicholas C. Zakas, <a href="http://www.nczonline.net/blog/2009/05/26/computer-science-in-javascript-bubble-sort/" target="_blank" rel="noopener">Computer science in JavaScript: Bubble sort</a></li><li>Nicholas C. Zakas, <a href="http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/" target="_blank" rel="noopener">Computer science in JavaScript: Selection sort</a></li><li>Nicholas C. Zakas, <a href="http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/" target="_blank" rel="noopener">Computer science in JavaScript: Insertion sort</a></li><li>Nicholas C. Zakas, <a href="http://www.nczonline.net/blog/2012/10/02/computer-science-and-javascript-merge-sort/" target="_blank" rel="noopener">Computer science in JavaScript: Merge sort</a></li><li>Nicholas C. Zakas, <a href="http://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/" target="_blank" rel="noopener">Computer science in JavaScript: Quicksort</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组与字符串常用方法</title>
      <link href="/pages/4b02d38a/"/>
      <url>/pages/4b02d38a/</url>
      
        <content type="html"><![CDATA[<h2 id="split-将字符串分割成数组"><a href="#split-将字符串分割成数组" class="headerlink" title="split() 将字符串分割成数组"></a>split() 将字符串分割成数组</h2><p>str.split(‘分隔符’, 返回数组最大的长度)</p><p>根据分隔符(字符串或者正则表达式)将一个字符串分割成数组。</p><pre><code class="javascript">const str = &#39;wind rain fire&#39;;const arr = str.split(&#39; &#39;);console.log(arr); // arr[&#39;wind&#39;, &#39;rain&#39;, &#39;fire&#39;]</code></pre><h2 id="join-数组连接成一个字符串"><a href="#join-数组连接成一个字符串" class="headerlink" title="join() 数组连接成一个字符串"></a>join() 数组连接成一个字符串</h2><p>arr.join(‘分隔符’)</p><p>分隔符默认值为<code>,</code><br>将数组（或一个类数组对象）的所有元素使用分隔符连接成一个新字符串。</p><pre><code class="javascript">const arr = [&#39;wind&#39;, &#39;rain&#39;, &#39;fire&#39;];const str = arr.join(&#39;+&#39;);console.log(str); // wind+rain+fire</code></pre><h2 id="字符串快速排序"><a href="#字符串快速排序" class="headerlink" title="字符串快速排序"></a>字符串快速排序</h2><pre><code class="javascript">const strSort = str =&gt; str.split(&#39;&#39;).sort().join(&#39;&#39;);strSort(str);</code></pre><h2 id="map-创建新数组"><a href="#map-创建新数组" class="headerlink" title="map() 创建新数组"></a>map() 创建新数组</h2><p>arr.map(callback)</p><p>创建一个新数组，新数组的每个元素都是 callback 函数的结果。</p><pre><code class="javascript">const arr = [1, 2, 3];const newArr = arr.map(num =&gt; num * 2);console.log(newArr); // newArr[2, 4, 6]</code></pre><h2 id="数组取最大最小值"><a href="#数组取最大最小值" class="headerlink" title="数组取最大最小值"></a>数组取最大最小值</h2><pre><code class="javascript">Math.max.apply(null, arr);  // 取数组最大值Math.min.apply(null, arr);  // 取数组最小值</code></pre><p>ES6 扩展 rest 不定参数写法：</p><pre><code class="javascript">Math.max(...arr);  // 取数组最大值Math.min(...arr);  // 取数组最小值</code></pre><h2 id="filter-数组中取通过测试的值"><a href="#filter-数组中取通过测试的值" class="headerlink" title="filter() 数组中取通过测试的值"></a>filter() 数组中取通过测试的值</h2><p>filter(fn)</p><p>创建一个新数组, 其包含通过 fn 函数测试返回值为 true 的所有元素。</p><pre><code class="javascript">let [...arr] = [1, 2, 4, 7, 6];const isOdd = num =&gt; num % 2;let odd = arr.filter(isOdd); // odd is [1, 7]</code></pre><h2 id="slice-取一部分数组"><a href="#slice-取一部分数组" class="headerlink" title="slice() 取一部分数组"></a>slice() 取一部分数组</h2><p>slice(start, end)</p><ul><li>start, end 数组下标</li></ul><p>返回一个从 start 到 end（不包括 end）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改。</p><pre><code class="javascript">let arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;];let arr13 = arr.slice(1, 3);console.log(arr); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]console.log(arr13); // [&#39;b&#39;, &#39;c&#39;]</code></pre><p>如果参数为负数，例如<code>start = -3, end = -1</code>，就表示倒数第三位到倒数第一位，不包括</p><h2 id="reduce-数组求和"><a href="#reduce-数组求和" class="headerlink" title="reduce() 数组求和"></a>reduce() 数组求和</h2><pre><code class="javascript">let arr = [1, 3, 5];let sumArr = arr.reduce((sum, value) =&gt; sum + value, 0);// sumArr is 9.</code></pre><p>sum 上一次调用回调返回的值，或者是提供的初始值 0;<br>num 数组中正在处理的元素;<br>0 可选项，其值用于第一次调用 callback 的第一个参数 sum。如果没有设置初始值，则将数组中的第一个元素作为初始值。空数组调用 reduce 时没有设置初始值将会报错。</p><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><p>str.repeat(n)</p><p>创建 n 个 str 的副本，将其连接在一起返回一个新的字符串。</p><pre><code class="javascript">&#39;ha&#39;.repeat(3); // &#39;hahaha&#39;&#39;ha&#39;.repeat(2); // &#39;haha&#39;</code></pre><h2 id="match-字符串中正则取值"><a href="#match-字符串中正则取值" class="headerlink" title="match() 字符串中正则取值"></a>match() 字符串中正则取值</h2><p>str.match(regx)</p><p>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配，返回匹配值构成的数组。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型</title>
      <link href="/pages/998dffd6/"/>
      <url>/pages/998dffd6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>浏览器中的每个视图可以看成是一个一个嵌套的盒子.</p></blockquote><h2 id="box-size"><a href="#box-size" class="headerlink" title="box-size"></a>box-size</h2><ul><li>元素大小 = boder + padding + contentwidth</li><li>box-size: boder-size;（兼容性） 它会让系统计算元素大小时会将 boder padding 包括在内。不包含外边距(margin)。</li></ul><pre><code class="css">{ -webkit-box-size: boder-size; -ms-box-size: boder-size; -moz-box-size: boder-size;}</code></pre><h2 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h2><ul><li>-webkit</li><li>-ms</li><li>-moz</li></ul><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><blockquote><p>弹性布局</p></blockquote><ul><li>用于 Chrome 29+、IE 11+ 和 Mozilla 28+。要支持 Safari，必须添加 -webkit- 前缀：</li></ul><pre><code class="css">{    display: -webkit-flex;    display: flex;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制快速转换</title>
      <link href="/pages/8b41c91c/"/>
      <url>/pages/8b41c91c/</url>
      
        <content type="html"><![CDATA[<h2 id="十进制转其他进制"><a href="#十进制转其他进制" class="headerlink" title="十进制转其他进制"></a>十进制转其他进制</h2><pre><code class="javascript">const i = 10;i.toString(2);  // 2 进制 1010i.toString(8);  // 8 进制 12i.toString(16);  // 16 进制 ai.toString(32);  // 32 进制 a</code></pre><h2 id="其他进制转十进制"><a href="#其他进制转十进制" class="headerlink" title="其他进制转十进制"></a>其他进制转十进制</h2><pre><code class="javascript">parsetInt(x, 2); // 2 进制转 10进制parsetInt(x, 8); // 8 进制转 10 进制parsetInt(x, 16); // 16 进制转 10 进制</code></pre><h2 id="非十进制转十进制"><a href="#非十进制转十进制" class="headerlink" title="非十进制转十进制"></a>非十进制转十进制</h2><p>先转化为10进制， 然后再利用toString(参数)， 转化成不同的进制。</p><pre><code class="javascript">parsetInt(x, 2).toString(8); // 2 进制转 8进制</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣杯布局</title>
      <link href="/pages/505644b3/"/>
      <url>/pages/505644b3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>圣杯布局是三栏式布局的一种经典解决方案，来源于 Matthew Levine 于 2006 年发表在 Alistapart 上的一篇文章。<a href="https://alistapart.com/article/holygrail" target="_blank" rel="noopener">原文链接</a>，其主要解决以下几种要求：</p></blockquote><ul><li>两边侧栏固定宽度，中间栏宽度自适应，</li><li>中间栏要放在文档流的前面以优先渲染。</li><li>其父元素的高度始终是由三栏中高度最高的元素确定。</li></ul><h2 id="第一步-建立基本框架"><a href="#第一步-建立基本框架" class="headerlink" title="第一步 建立基本框架"></a>第一步 建立基本框架</h2><p>写出基本的 html 框架，构建出基本盒模型，包括<code>header</code>, <code>container</code>和<code>footer</code>三个主体结构，再向<code>container</code>中加入三栏：</p><pre><code class="html">&lt;div class=&quot;header&quot;&gt;&lt;/div&gt;&lt;div class=&quot;container&quot;&gt;    &lt;div class=&quot;column center&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;column left&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;column right&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;footer&quot;&gt;&lt;/div&gt;</code></pre><h3 id="第二步-构建基础布局"><a href="#第二步-构建基础布局" class="headerlink" title="第二步 构建基础布局"></a>第二步 构建基础布局</h3><p>将 <code>container</code> 的内边距设置为左右两侧边栏各自的宽度，为两侧边栏留下空间。为三栏设置合适的宽度(<code>center</code>宽度为 100%，<code>left</code>宽度为 120px，<code>right</code>宽度为240px)，并且将三者设为向左浮动，同时清除<code>footer</code>的上下环境，避免其浮动。最后将<code>body</code>的最小宽度设为 480px(2*LC width + RC width)，避免因为<code>center</code>部分的宽度小<code>left</code>和<code>right</code>的宽度导致布局乱掉。</p><pre><code class="css">        body {            padding: 0;            margin: 0; /* 初始化LCD */            min-width: 480px;/* 2*LC-width + RC-width */        }        .header, .footer {            background-color: #1c262f;            color: white;            text-align: center;            font-size: 2em;        }        .container {            padding-left: 120px;  /* LC-width */            padding-right: 240px; /* RC-width */        }        .column {            float: left;            color: white;            position: relative;            text-align: justify; /* 文字两端对齐 */        }        h1 {            text-align: center;        }        .center {            background-color: #4285f3;            width: 100%;        }        .left {            background-color: #ea4335;            width: 120px; /* LC-width */        }        .right {            background-color: #34a853;            width: 240px;  /* RC-width */        }        .footer {            clear: both;        }</code></pre><h3 id="第三步-将侧栏放到合适的位置"><a href="#第三步-将侧栏放到合适的位置" class="headerlink" title="第三步 将侧栏放到合适的位置"></a>第三步 将侧栏放到合适的位置</h3><p>设置三栏的定位属性为相对定位。设置左边栏的外边距<code>margin-left: -100%;</code>(中间栏所占据的宽度)，左边栏上移到中间栏的左边，但是与中间栏部分重叠。此时利用相对定位属性，为左边栏设置一个与其等宽的偏移量<code>left：-120px;</code>(相对于<code>container</code>的左边线向左偏移 120px)，左边栏刚好占据<code>container</code>的左内边距位置。最后设置右边栏的外边距<code>margin-right: -240px;</code>(右边栏自身宽度)，使右边栏占据<code>container</code>的右内边距位置。</p><pre><code class="css">        .column {            float: left;            position: relative;        }        .left {            margin-left: -100%;            left: -120px;        }        .right {            margin-right: -240px;        }</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map和Set</title>
      <link href="/pages/5225cd1c/"/>
      <url>/pages/5225cd1c/</url>
      
        <content type="html"><![CDATA[<h2 id="Map-键值对"><a href="#Map-键值对" class="headerlink" title="Map 键值对"></a>Map 键值对</h2><blockquote><p>一组键值对结构，查找速度快。储存具有映射关系的数据，例如身份证上面的姓名和身份证号码。</p></blockquote><h3 id="Map-函数"><a href="#Map-函数" class="headerlink" title="Map 函数"></a>Map 函数</h3><pre><code class="javascript">var map = new Map(); // 初始化 Mapmap.set(&#39;XiaoMing&#39;, 22); // 添加键值对 key-valuemap.set(&#39;HaHa&#39;, 66);map.has(&#39;HaHa&#39;); // 是否存在 &#39;HaHa&#39;, 返回值为 truemap.get(&#39;XiaoMing&#39;); // 22  获得对应的 valuemap.delete(&#39;HaHa&#39;); // 删除 key: &#39;HaHa&#39;</code></pre><p>一个 key 只能对应一个 value，对同一个 key，后添加的 value 会覆盖前面的 value。</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>一组 Key 值的集合，无序且不重复，不储存 Value。</p></blockquote><h3 id="Set-函数"><a href="#Set-函数" class="headerlink" title="Set 函数"></a>Set 函数</h3><pre><code class="javascript">var set = new Set(); // 初始化 Setset.add(6); // 添加 Key 6set.delete(6); // 删除 Key 6</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10配置免安装MySQL</title>
      <link href="/pages/e38ac448/"/>
      <url>/pages/e38ac448/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="下载文件："><a href="#下载文件：" class="headerlink" title="下载文件："></a>下载文件：</h4><p>到 MySQL 官网<a href="https://dev.mysql.com/downloads/mysql/下载免安装版本" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/下载免安装版本</a>: DOWNLOADS → MySQL Community Server → Windows (x86, 64-bit), ZIP Archive</p></li><li><h4 id="创建配置文件："><a href="#创建配置文件：" class="headerlink" title="创建配置文件："></a>创建配置文件：</h4><p>将下载的 ZIP 文件解压至想要安装 MySQL 的文件夹，创建 mysql.ini 配置文件，保存退出。</p><pre><code class="ini">[mysql]#设置mysql客户端默认字符集default-character-set = utf8[mysqld]#设置3306端口port = 3306# 设置mysql的安装目录basedir = C:\APPS\MySQL\mysql-5.7.18-winx64# 设置mysql数据库的数据的存放目录datadir = C:\APPS\MySQL\mysql-5.7.18-winx64\data# 允许最大连接数max_connections = 200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server = utf8# 创建新表时将使用的默认存储引擎default-storage-engine = INNODB</code></pre></li><li><h4 id="设置环境变量："><a href="#设置环境变量：" class="headerlink" title="设置环境变量："></a>设置环境变量：</h4><p>右键桌面计算机→属性→高级系统设置→环境变量→系统变量Path→添加 MySQL 的bin目录路径，例如：C:\APPS\MySQL\mysql-5.7.18-winx64\bin 保存退出。</p></li><li><h4 id="安装MySQL服务："><a href="#安装MySQL服务：" class="headerlink" title="安装MySQL服务："></a>安装MySQL服务：</h4><p>a. 以管理员模式打开命令行窗口，安装MySQL服务：</p><pre><code class="sql">mysqld -install</code></pre><p>b. 初始化data目录：</p><pre><code class="sql">mysqld –-initialize</code></pre><p>c. 启动MySQL服务：</p><pre><code class="sql">net start MySQL</code></pre><p>d. 用户登录：</p><pre><code class="sql">mysql -u root -p</code></pre><p>e. 输入密码：</p><p>初始随机密码存在于data目录下.err结尾的文件中，初始随机密码为root@localhost:后面的字符，例如：rCTmkIr:K65t</p><pre><code class="SQL">A temporary password is generated for root@localhost: rCTmkIr:K65t</code></pre><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle基础</title>
      <link href="/pages/691946d1/"/>
      <url>/pages/691946d1/</url>
      
        <content type="html"><![CDATA[<h2 id="Roay-app-build-gradle"><a href="#Roay-app-build-gradle" class="headerlink" title="Roay/app/build.gradle"></a>Roay/app/build.gradle</h2><ul><li><p>这个文件是app文件夹下这个Module的gradle配置文件，也可以算是整个项目最主要的gradle配置文件。</p><p>​</p></li></ul><h3 id="文件内容如下："><a href="#文件内容如下：" class="headerlink" title="文件内容如下："></a>文件内容如下：</h3><pre><code class="java">// 声明是Android程序apply plugin: &#39;com.android.application&#39;android {    // 编译SDK的版本    compileSdkVersion 21    // build tools的版本    buildToolsVersion &quot;21.1.1&quot;    defaultConfig {        // 应用的包名        applicationId &quot;ly.roay&quot;        minSdkVersion 14        targetSdkVersion 21        versionCode 1        versionName &quot;1.0.0&quot;    }    // java版本    compileOptions {        sourceCompatibility JavaVersion.VERSION_1_7        targetCompatibility JavaVersion.VERSION_1_7    }    buildTypes {        debug {            // debug模式        }        release {            // 是否进行混淆            minifyEnabled false            // 混淆文件的位置            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.txt&#39;        }    }    // 移除lint检查的error    lintOptions {      abortOnError false    }}dependencies {    // 编译libs目录下的所有jar包    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])    compile &#39;com.android.support:support-v4:21.0.2&#39;    compile &#39;com.etsy.android.grid:library:1.0.5&#39;    compile &#39;com.alexvasilkov:foldable-layout:1.0.1&#39;    // 编译extras目录下的ShimmerAndroid模块    compile project(&#39;:extras:ShimmerAndroid&#39;)}</code></pre><h2 id="Roay-build-gradle"><a href="#Roay-build-gradle" class="headerlink" title="Roay/build.gradle"></a>Roay/build.gradle</h2><ul><li><p>这个文件是整个项目的gradle基础配置文。</p></li><li><p>内容主要包含了两个方面：一个是声明仓库的源，这里可以看到是指明的jcenter(), 之前版本则是mavenCentral(), jcenter可以理解成是一个新的中央远程仓库，兼容maven中心仓库，而且性能更优。另一个是声明了android gradle plugin的版本，android studio 1.0正式版必须要求支持gradle plugin 1.0的版本。</p><h3 id="文件内容如下：-1"><a href="#文件内容如下：-1" class="headerlink" title="文件内容如下："></a>文件内容如下：</h3><pre><code class="java">// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript {// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript {    repositories {        jcenter()    }    dependencies {        classpath &#39;com.android.tools.build:gradle:1.0.0&#39;    }}allprojects {    repositories {        jcenter()    }}    repositories {        jcenter()    }    dependencies {        classpath &#39;com.android.tools.build:gradle:2.2.0&#39;        // NOTE: Do not place your application dependencies here; they belong        // in the individual module build.gradle files    }}allprojects {    repositories {        jcenter()    }}task clean(type: Delete) {    delete rootProject.buildDir}</code></pre><p>​</p><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android简易计分板实现</title>
      <link href="/pages/81bae912/"/>
      <url>/pages/81bae912/</url>
      
        <content type="html"><![CDATA[<h3 id="一、View的选择"><a href="#一、View的选择" class="headerlink" title="一、View的选择"></a>一、View的选择</h3><ul><li>分析整个 APP 的组成：<ul><li>TextView：  4 个</li><li>Button： 7个</li><li>空白 View：1个</li></ul></li></ul><h3 id="二、Layout布局"><a href="#二、Layout布局" class="headerlink" title="二、Layout布局"></a>二、Layout布局</h3><ul><li>采用 RelativeLayout 作为整体布局父容器。</li><li>将其分为上下两个部分，下面部分只有一个 Button ，直接设置好其相对于父视图的位置参数以及自身属性即可。</li><li>上面部分又可以横向分为三个部分：<ul><li>1.TeamA 团队的加分 Button 及显示的 TextView；<ul><li>对于 TeamA， 其中各组件纵向排列，可采用Vertical LinearLayout作为其视图容器。</li></ul></li><li>2.空白 View 做中间隔离；</li><li>3.TeamB 团队的加分 Button 及显示的 TextView 。<ul><li>对于 TeamB，其设置等同于 TeamA 的设置。</li></ul></li></ul></li><li>可以采用 Horizontal LinearLayout 作为其视图容器。</li></ul><h4 id="整体布局-active-main-xml-代码如下所示："><a href="#整体布局-active-main-xml-代码如下所示：" class="headerlink" title="整体布局 active_main.xml 代码如下所示："></a>整体布局 active_main.xml 代码如下所示：</h4><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:id=&quot;@+id/activity_main&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:background=&quot;#D2403E&quot;    android:padding=&quot;@dimen/activity_vertical_margin&quot;    tools:context=&quot;com.roojay.android.courtcounter.MainActivity&quot;&gt;    &lt;LinearLayout        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:layout_marginTop=&quot;18dp&quot;        android:orientation=&quot;horizontal&quot;&gt;        &lt;LinearLayout            android:layout_width=&quot;0dp&quot;            android:layout_height=&quot;wrap_content&quot;            android:layout_weight=&quot;1&quot;            android:orientation=&quot;vertical&quot;&gt;            &lt;TextView                style=&quot;@style/textView&quot;                android:id=&quot;@+id/teama_text_view&quot;                android:text=&quot;@string/team_a&quot; /&gt;            &lt;TextView                android:id=&quot;@+id/pointsa_text_view&quot;                style=&quot;@style/pointsTextView&quot;                android:text=&quot;@string/points_a&quot; /&gt;            &lt;Button                style=&quot;@style/addButtonView&quot;                android:id=&quot;@+id/buttona3&quot;                android:onClick=&quot;addThreeA&quot;                android:text=&quot;@string/add3a&quot; /&gt;            &lt;Button                style=&quot;@style/addButtonView&quot;                android:id=&quot;@+id/buttona2&quot;                android:onClick=&quot;addTwoA&quot;                android:text=&quot;@string/add2a&quot; /&gt;            &lt;Button                style=&quot;@style/addButtonView&quot;                android:id=&quot;@+id/buttona1&quot;                android:onClick=&quot;addOneA&quot;                android:text=&quot;@string/add1a&quot; /&gt;        &lt;/LinearLayout&gt;        &lt;View            android:layout_width=&quot;1dp&quot;            android:layout_height=&quot;match_parent&quot;            android:layout_marginTop=&quot;8dp&quot;            android:layout_marginBottom=&quot;8dp&quot;            android:background=&quot;#FFFEFE&quot; /&gt;        &lt;LinearLayout            android:layout_width=&quot;0dp&quot;            android:layout_height=&quot;match_parent&quot;            android:layout_weight=&quot;1&quot;            android:orientation=&quot;vertical&quot;&gt;            &lt;TextView                style=&quot;@style/textView&quot;                android:id=&quot;@+id/teamb_text_view&quot;                android:text=&quot;@string/team_b&quot; /&gt;            &lt;TextView                style=&quot;@style/pointsTextView&quot;                android:id=&quot;@+id/pointsb_text_view&quot;                android:text=&quot;@string/points_b&quot; /&gt;            &lt;Button                style=&quot;@style/addButtonView&quot;                android:id=&quot;@+id/buttonb3&quot;                android:onClick=&quot;addThreeB&quot;                android:text=&quot;@string/add3b&quot; /&gt;            &lt;Button                style=&quot;@style/addButtonView&quot;                android:id=&quot;@+id/buttonb2&quot;                android:onClick=&quot;addTwoB&quot;                android:text=&quot;@string/add2b&quot; /&gt;            &lt;Button                style=&quot;@style/addButtonView&quot;                android:id=&quot;@+id/buttonb1&quot;                android:onClick=&quot;addOneB&quot;                android:text=&quot;@string/add1b&quot; /&gt;        &lt;/LinearLayout&gt;    &lt;/LinearLayout&gt;    &lt;Button        style=&quot;@style/resetButtonView&quot;        android:id=&quot;@+id/button_reset&quot;        android:onClick=&quot;reset&quot;        android:text=&quot;@string/reset_text_views&quot; /&gt;&lt;/RelativeLayout&gt;</code></pre><h3 id="三、交互"><a href="#三、交互" class="headerlink" title="三、交互"></a>三、交互</h3><ul><li>通过 Button 的 android:onClick 属性指定方法。</li><li>将各个 Button 与 Java 中的方法关联起来。</li><li>具体操作是在 active_main.xml 中设置 android:onClick=”buttonName” 为每个 Button 设置一个独特的名字，这个名字用于 Java 代码寻找和识别每个不同的 Button 。</li></ul><p>例如：</p><pre><code class="xml">在 active_main.xml 中设置 Button3A 的 onClick 属性为 android:onClick=&quot;addThreeA&quot;</code></pre><p>在 MainActivity.java 中编写代码：</p><pre><code class="java">    public void addThreeA(View view) {    //所需要执行的操作，假如是 A 团队加三分    }</code></pre><p>那么当你按下 Button3A 就将 A 团队的分数加上三分。</p><h4 id="整个-MainActivity-java-代码"><a href="#整个-MainActivity-java-代码" class="headerlink" title="整个 MainActivity.java 代码"></a>整个 MainActivity.java 代码</h4><pre><code class="java">package com.roojay.android.courtcounter;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.TextView;public class MainActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);    }    int scorea = 0;    int scoreb = 0;    /**     * Add 3 points for the Team A.     */    public void addThreeA(View view) {        scorea = scorea + 3;        displayTeamscorea(scorea);    }    /**     * Add 2 points for the Team A.     */    public void addTwoA(View view) {        scorea = scorea + 2;        displayTeamscorea(scorea);    }    /**     * Add 1 point for the Team A.     */    public void addOneA(View view) {        scorea = scorea + 1;        displayTeamscorea(scorea);    }    /**     * Displays the given scorea for Team A.     */    public void displayTeamscorea(int scorea) {        TextView scoreaView = (TextView) findViewById(R.id.pointsa_text_view);        scoreaView.setText(String.valueOf(scorea));    }    /**     * Add 3 points for the Team B.     */    public void addThreeB(View view) {        scoreb = scoreb + 3;        displayTeamscoreb(scoreb);    }    /**     * Add 2 points for the Team B.     */    public void addTwoB(View view) {        scoreb = scoreb + 2;        displayTeamscoreb(scoreb);    }    /**     * Add 1 point for the Team B.     */    public void addOneB(View view) {        scoreb = scoreb + 1;        displayTeamscoreb(scoreb);    }    /**     * Displays the given scoreb for Team B.     */    public void displayTeamscoreb(int scoreb) {        TextView scorebView = (TextView) findViewById(R.id.pointsb_text_view);        scorebView.setText(String.valueOf(scoreb));    }    public void reset(View view) {        scorea = 0;        scoreb = 0;        displayTeamscorea(scorea);        displayTeamscoreb(scoreb);    }}</code></pre><h3 id="四、代码优化及-APP-美化"><a href="#四、代码优化及-APP-美化" class="headerlink" title="四、代码优化及 APP 美化"></a>四、代码优化及 APP 美化</h3><h4 id="style-xml-的设置"><a href="#style-xml-的设置" class="headerlink" title="style.xml 的设置"></a>style.xml 的设置</h4><ul><li>当每一个 View 都有着大量相同的元素，可以将这些元素定义在<br><code>res/value/styles.xml</code> 中。</li></ul><p>具体的写法如下：</p><pre><code class="xml">&lt;style name=&quot;cofe_textView&quot;&gt;        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;       ...    &lt;/style&gt;</code></pre><p>然后可以用<code>style=&quot;@style/cofe_textView&quot;</code>语句轻易地重复引用这些设置：</p><p>例如：</p><pre><code class="xml">&lt;TextView              style=&quot;@style/textView&quot;              android:id=&quot;@+id/teamb_text_view&quot;              android:text=&quot;@string/team_b&quot; /&gt;</code></pre><h4 id="整个-style-xml-代码如下"><a href="#整个-style-xml-代码如下" class="headerlink" title="整个 style.xml 代码如下"></a>整个 style.xml 代码如下</h4><pre><code class="xml">&lt;resources&gt;    &lt;!-- Base application theme. --&gt;    &lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;        &lt;!-- Customize your theme here. --&gt;        &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;        &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;        &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;    &lt;/style&gt;    &lt;style name=&quot;textView&quot;&gt;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;        &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;        &lt;item name=&quot;android:textSize&quot;&gt;24sp&lt;/item&gt;    &lt;/style&gt;    &lt;style name=&quot;pointsTextView&quot;&gt;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;        &lt;item name=&quot;android:fontFamily&quot;&gt;sans-serif-medium&lt;/item&gt;        &lt;item name=&quot;android:layout_margin&quot;&gt;24dp&lt;/item&gt;        &lt;item name=&quot;android:gravity&quot;&gt;center&lt;/item&gt;        &lt;item name=&quot;android:textColor&quot;&gt;#2B2A2A&lt;/item&gt;        &lt;item name=&quot;android:textSize&quot;&gt;56sp&lt;/item&gt;        &lt;item name=&quot;android:background&quot;&gt;#FFFEFE&lt;/item&gt;    &lt;/style&gt;    &lt;style name=&quot;addButtonView&quot;&gt;        &lt;item name=&quot;android:layout_width&quot;&gt;match_parent&lt;/item&gt;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;8dp&lt;/item&gt;        &lt;item name=&quot;android:layout_marginLeft&quot;&gt;24dp&lt;/item&gt;        &lt;item name=&quot;android:layout_marginRight&quot;&gt;24dp&lt;/item&gt;        &lt;item name=&quot;android:background&quot;&gt;#2B2A2A&lt;/item&gt;        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;    &lt;/style&gt;    &lt;style name=&quot;resetButtonView&quot;&gt;        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;        &lt;item name=&quot;android:layout_marginBottom&quot;&gt;32dp&lt;/item&gt;        &lt;item name=&quot;android:background&quot;&gt;#2B2A2A&lt;/item&gt;        &lt;item name=&quot;android:textColor&quot;&gt;#FFFEFE&lt;/item&gt;        &lt;item name=&quot;android:layout_centerHorizontal&quot;&gt;true&lt;/item&gt;        &lt;item name=&quot;android:layout_alignParentBottom&quot;&gt;true&lt;/item&gt;    &lt;/style&gt;&lt;/resources&gt;</code></pre><h4 id="strings-xml"><a href="#strings-xml" class="headerlink" title="strings.xml"></a>strings.xml</h4><ul><li>在 Android 中会将应用中出现的文字放入 string.xml 中，这样一个字符可以重复调用，而不用每次去编写，可以减少数据的冗余，减小 APP 应用的体积。并且当你的 APP 国际化时只需更改 strings.xml 中的文字定义，就可以实现其他语言的显示。</li></ul><p>strings.xml 中的字符定义如下：</p><pre><code class="xml">&lt;resources&gt;    &lt;string name=&quot;text_name&quot;&gt;显示的文字&lt;/string&gt;    ...&lt;/resources&gt;</code></pre><p>调用时：</p><pre><code class="xml">android:text=&quot;@string/text_name&quot;</code></pre><h4 id="整个-strings-xml-代码如下"><a href="#整个-strings-xml-代码如下" class="headerlink" title="整个 strings.xml 代码如下"></a>整个 strings.xml 代码如下</h4><pre><code class="xml">&lt;resources&gt;    &lt;string name=&quot;app_name&quot;&gt;Court Counter&lt;/string&gt;    &lt;string name=&quot;add2b&quot;&gt;+2 points&lt;/string&gt;    &lt;string name=&quot;add1b&quot;&gt;+1 pointsb&lt;/string&gt;    &lt;string name=&quot;team_a&quot;&gt;Team A&lt;/string&gt;    &lt;string name=&quot;add2a&quot;&gt;+2 points&lt;/string&gt;    &lt;string name=&quot;points_a&quot;&gt;0&lt;/string&gt;    &lt;string name=&quot;add3a&quot;&gt;+3 points&lt;/string&gt;    &lt;string name=&quot;add1a&quot;&gt;+1 points&lt;/string&gt;    &lt;string name=&quot;team_b&quot;&gt;Team B&lt;/string&gt;    &lt;string name=&quot;points_b&quot;&gt;0&lt;/string&gt;    &lt;string name=&quot;add3b&quot;&gt;+3 points&lt;/string&gt;    &lt;string name=&quot;reset_text_views&quot;&gt;reset&lt;/string&gt;&lt;/resources&gt;</code></pre><h3 id="五、APP-强制锁定横竖屏"><a href="#五、APP-强制锁定横竖屏" class="headerlink" title="五、APP 强制锁定横竖屏"></a>五、APP 强制锁定横竖屏</h3><ul><li>在最开始做出 APP 时没有考虑到 APP 横屏的问题，偶然一次横屏之后发现 APP 显示不全了，当时也没多想，既然横屏不行，那就去掉横屏显示，锁定在竖屏。上网查了下资料，锁定横竖屏有两种实现方式：XML 或 Java 方式。这个 APP 采用了 XML 锁定方式。</li></ul><h4 id="XML锁定横屏或竖屏"><a href="#XML锁定横屏或竖屏" class="headerlink" title="XML锁定横屏或竖屏"></a>XML锁定横屏或竖屏</h4><ul><li><p>在AndroidManifest.xml中配置,在Activity标签中加入android:screenOrientation=”unspecified”，来使某个Activity做横竖屏的变化。</p></li><li><p>使用android:screenOrientation=”unspecified”来锁定横竖屏。</p><ul><li>unspecified：未指明屏幕方向。</li><li>landscape：锁定为横屏。</li><li>portrait：锁定为竖屏。</li></ul><h5 id="具体代码如下："><a href="#具体代码如下：" class="headerlink" title="具体代码如下："></a>具体代码如下：</h5><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    package=&quot;com.roojay.android.courtcounter&quot;&gt;    &lt;application        android:allowBackup=&quot;true&quot;        android:icon=&quot;@mipmap/ic_launcher&quot;        android:label=&quot;@string/app_name&quot;        android:supportsRtl=&quot;true&quot;        android:theme=&quot;@style/AppTheme&quot; &gt;        &lt;activity android:name=&quot;.MainActivity&quot;            android:screenOrientation=&quot;portrait&quot;&gt;            &lt;intent-filter&gt;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;            &lt;/intent-filter&gt;        &lt;/activity&gt;    &lt;/application&gt;&lt;/manifest&gt;</code></pre><h4 id="Java代码锁定横竖屏"><a href="#Java代码锁定横竖屏" class="headerlink" title="Java代码锁定横竖屏"></a>Java代码锁定横竖屏</h4><ul><li>在onCreate()方法中加入锁定代码。</li></ul><h5 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h5><pre><code class="java">public class MainActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);//锁定为横屏      //setRequestedOrientation(ActivityInfo .SCREEN_ORIENTATION_PORTRAIT);//锁定为竖屏        setContentView(R.layout.activity_main);    }</code></pre></li></ul><h3 id="六、APP-演示及源码"><a href="#六、APP-演示及源码" class="headerlink" title="六、APP 演示及源码"></a>六、APP 演示及源码</h3><ul><li>APP 的最终效果图，没有进行多余的其他手机测试，也不知道其他手机显示效果是不是这样。</li></ul><p><img src="" alt=""></p><p>演示视频：<br><a href="http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4" target="_blank" rel="noopener" title="演示视频">http://omjmn55ir.bkt.clouddn.com/%E7%AF%AE%E7%90%83%E8%AE%A1%E5%88%86%E6%9D%BF%E6%BC%94%E7%A4%BAmp4</a></p><p>源码：<br><a href="https://github.com/roojay520/CourtCounter" target="_blank" rel="noopener" title="源码">https://github.com/roojay520/CourtCounter</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础与Button交互</title>
      <link href="/pages/b8bb4b60/"/>
      <url>/pages/b8bb4b60/</url>
      
        <content type="html"><![CDATA[<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><blockquote><p>在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。</p></blockquote><h3 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h3><blockquote><p>变量的数据类型分为两种，即基本数据类型和引用数据类型。</p></blockquote><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h4><ol><li>数值型分为两种：<br> 1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）<br> 1.2 浮点类型（float 4字节，double 8字节）</li><li>字符型（char）2字节</li><li>布尔型（boolean）1字节<h4 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2. 引用数据类型"></a>2. 引用数据类型</h4></li><li>类（class)</li><li>接口（interface）</li><li>数组</li><li>枚举（enum）</li><li>注解（annotation）<h3 id="变量类型转换"><a href="#变量类型转换" class="headerlink" title="变量类型转换"></a>变量类型转换</h3><blockquote><p>在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。</p></blockquote><h4 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1. 自动类型转换"></a>1. 自动类型转换</h4><blockquote><p>两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。</p></blockquote></li><li>byte→short，int，long</li><li>short，char→int，long</li><li>int→long</li><li>byte，char，short，int→float</li><li>byte，char，short，int，long，float→double</li><li>boolean类型无法转换为其他类型。<h4 id="2-强制类型转换"><a href="#2-强制类型转换" class="headerlink" title="2. 强制类型转换"></a>2. 强制类型转换</h4><blockquote><p>自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。</p></blockquote></li></ol><p>例如：</p><pre><code class="java">int num;byte b =(byte)num;</code></pre><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><blockquote><p>在编程语言中，<strong>常量</strong>是指在整个程序中永远不会改变的值。在 Java 中，你可以使用关键字 <code>final</code> 来强制规定某个值不得被更改。例如：</p></blockquote><pre><code class="java">final int POINTS_FOR_FREE_THROW = 1;</code></pre><p>Then if you wrote the following, you’d get an error:</p><pre><code class="java">POINTS_FOR_FREE_THROW = 100;</code></pre><ul><li>注意，按照惯例，常量的名称全为大写形式。此外，单词之间用下划线连接，而不用空格或用骆驼拼写法。你可以将变量声明为常量，防止自己意外地更改了变量的值。<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><blockquote><p>为解决代码重复编写的问题所设计的特定功能代码块。<br>方法不能嵌套。<br>main（）方法的作用：调用方法的实例化对象。</p></blockquote></li></ul><p>方法结构一般为：</p><pre><code class="java">修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{    执行语句    ...    ...    return 返回值；}</code></pre><h2 id="选择结构语句"><a href="#选择结构语句" class="headerlink" title="选择结构语句"></a>选择结构语句</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><blockquote><p>当判断条件1结果为 true 时，执行语句 1，为 false 时，执行语句 2。当判断条件 1, 2 都不满足 true 时，执行语句 3。</p></blockquote><p>例如：</p><pre><code class="java">if (判断条件1){  执行语句1}else if(判断条件2){  执行语句2}else{  执行语句3}</code></pre><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><blockquote><p>一种类似于 if-else 语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。<br>当判断条件成立时结果为表达式1的值，否则表达式2的值。</p></blockquote><pre><code class="java">判断条件 ? 表达式 1 : 表达式 2</code></pre><p>例如：求取两个数 x，y 中较大的值。</p><pre><code class="java">//if-else 实现方法int x, y, max;if(x&gt;y){    max = x;}else{    max = y;}//三元运算实现int x, y, max;max = x &gt; y ? x : y;</code></pre><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><blockquote><p>在 switch 语句中使用 switch 关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，<br>当表达式的值和某个目标值匹配时，会执行对应 case 下的语句。</p></blockquote><p>例如：</p><pre><code class="java">switch(表达式){  case 1:    执行语句1;       break; //break终止case并跳出switch循环  case 2:    执行语句2;     break;  case 3:    执行语句3；      break;  default: //default处理和前面的case都不匹配的值    执行语句4;      break;}</code></pre><h2 id="循环结构语句"><a href="#循环结构语句" class="headerlink" title="循环结构语句"></a>循环结构语句</h2><h3 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h3><blockquote><p>循环条件判断为 true 时，执行语句循环执行，直到循环条件为 false。</p></blockquote><p>例如：</p><pre><code class="java">while(循环条件){    执行语句}</code></pre><h3 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h3><blockquote><p>循环体会无条件执行一次，然后根据循环条件决定是否继续执行。</p></blockquote><p>例如：</p><pre><code class="java">do{  执行语句}while(循环条件);</code></pre><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><blockquote><p>一般用在循环次数已知的情况下，循环条件 ② 判断为 true 时，执行顺序为： ①→②→④→③，初始化表达式 ① 只在第一次循环时执行。</p></blockquote><p>例如：</p><pre><code class="java">for(初始化表达式①;循环条件②;操作表达式③){  执行语句④}</code></pre><pre><code class="java">/*** Created by Roojay on 2017/4/7.* 利用嵌套循环打印一个正三角形。*/public class Test1 {    public static void main(String args[]){        int i, j, k;        for(i = 1; i &lt;= 5; i++){            for(k = 0; k &lt; 5 - i; k++){                System.out.print(&quot; &quot;);            }            for(j = 1; j &lt;= i; j++){                System.out.print(&quot;* &quot;);            }            System.out.println();        }    }}</code></pre><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><blockquote><p>当它出现在 switch 条件语句中时，作用是终止某个 case 并跳出 switch 结构。<br>当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。<br>当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，<br>需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。</p></blockquote><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><blockquote><p>continue 语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。<br>也可以使用标记结束外循环。</p></blockquote><h2 id="Button交互"><a href="#Button交互" class="headerlink" title="Button交互"></a>Button交互</h2><ul><li><p>XML 布局文件中的 <Button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。</p></li><li><p>android:onClick=”buttonName”</p><h3 id="屏幕输出显示"><a href="#屏幕输出显示" class="headerlink" title="屏幕输出显示"></a>屏幕输出显示</h3><h4 id="MainActivity-java部分"><a href="#MainActivity-java部分" class="headerlink" title="MainActivity.java部分"></a>MainActivity.java部分</h4><pre><code class="java">  public void display(String text) {      TextView t = (TextView) findViewById(R.id.display_text_view);      t.setText(text);  }  public void display(int text) {      TextView t = (TextView) findViewById(R.id.display_text_view);      t.setText(text + &quot;&quot;);  }</code></pre></li><li><p>其中 R.id.display_text_view中的display_text_view是指具体输出显示的TextView的ID。</p></li></ul><h4 id="activity-main-xml部分"><a href="#activity-main-xml部分" class="headerlink" title="activity_main.xml部分"></a>activity_main.xml部分</h4><pre><code class="xml">    &lt;TextView        android:id=&quot;@+id/display_text_view&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;&quot;        android:textSize=&quot;45sp&quot;        android:textColor=&quot;#000000&quot;/&gt;</code></pre><h3 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h3><ul><li>下面两个 TextView 都设置着大量相同的元素：<pre><code class="xml">&lt;TextView      android:id=&quot;@+id/tell&quot;      android:layout_width=&quot;wrap_content&quot;      android:layout_height=&quot;wrap_content&quot;      android:layout_above=&quot;@id/adress&quot;      android:text=&quot;电话:028-666666&quot;      android:textSize=&quot;24sp&quot;      android:textColor=&quot;#FFFFFF&quot;      android:background=&quot;#795548&quot;      android:layout_marginLeft=&quot;8dp&quot;      android:layout_marginTop=&quot;8dp&quot; /&gt;  &lt;TextView      android:layout_width=&quot;wrap_content&quot;      android:layout_height=&quot;wrap_content&quot;      android:layout_above=&quot;@id/tell&quot;      android:text=&quot;半岛咖啡&quot;      android:textSize=&quot;30sp&quot;      android:textColor=&quot;#FFFFFF&quot;      android:background=&quot;#795548&quot;      android:layout_marginLeft=&quot;8dp&quot; /&gt;&lt;!-- 相同的元素 --&gt;&lt;TextView  android:textColor=&quot;#FFFFFF&quot;  android:layout_width=&quot;wrap_content&quot;  android:layout_height=&quot;wrap_content&quot;  android:background=&quot;#795548&quot;  android:layout_marginLeft=&quot;8dp&quot; /&gt;</code></pre></li><li>可以在<code>res/value/styles.xml</code>里定义个 style 来包括这些通用的元素设置：</li></ul><pre><code class="xml">&lt;style name=&quot;cofe_textView&quot;&gt;        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;        &lt;item name=&quot;android:background&quot;&gt;#795548&lt;/item&gt;        &lt;item name=&quot;android:layout_marginLeft&quot;&gt;8dp&lt;/item&gt;    &lt;/style&gt;</code></pre><p>然后可以用以下一句语句轻易地重复引用这些设置：</p><pre><code class="xml">style=&quot;@style/cofe_textView&quot;</code></pre><p>这一段 TextView 可以重构为以下：</p><pre><code class="xml">&lt;TextView        style=&quot;@style/cofe_textView&quot;        android:id=&quot;@+id/tell&quot;        android:layout_above=&quot;@id/adress&quot;        android:text=&quot;电话:028-666666&quot;        android:textSize=&quot;24sp&quot;        android:layout_marginTop=&quot;8dp&quot; /&gt;&lt;TextView        style=&quot;@style/cofe_textView&quot;        android:layout_above=&quot;@id/tell&quot;        android:text=&quot;半岛咖啡&quot;        android:textSize=&quot;30sp&quot; /&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android View&amp;Layout</title>
      <link href="/pages/29c8a334/"/>
      <url>/pages/29c8a334/</url>
      
        <content type="html"><![CDATA[<h2 id="View-视图"><a href="#View-视图" class="headerlink" title="View 视图"></a>View 视图</h2><h3 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h3><ul><li><p>字体大小属性：<strong>android:textSize=”36sp”</strong></p></li><li><p>或者采用另一种字体大小定义方式：</p><p>  <strong>android:textAppearance=”?android:textAppearanceLarge”</strong></p><p>  As of API 19 (KitKat):</p><ul><li><em>?android:textAppearanceSmall</em> is currently 14sp</li><li><em>?android:textAppearanceMedium</em> is currently 18sp</li><li><em>?android:textAppearanceLarge</em> is currently 22sp</li></ul></li><li><p>文字颜色属性：<strong>android:textColor</strong></p></li><li><p>文本变成大写：<strong>android:textAllCaps=”true”</strong></p></li><li><p>字体属性：<strong>android:textStyle=”bold”</strong>  bold:粗体；italic:斜体；bolditalic:粗斜体。</p></li><li><p>属性：<strong>android:fontFamily=”sans-serif-light”</strong> 字体设置。</p></li><li><p>属性值 wrap_conent:自适应大小。</p></li><li><p><strong>gravity</strong>中文意思是”重心“，就是表示view横向和纵向的停靠位置</p><ul><li><p><strong>android:gravity：</strong>是对view控件本身来说的，是用来设置view本身的内容应该显示在view的什么位置，默认值是左侧。也可以用来设置布局中的控件位置</p></li><li><p><strong>android:layout_gravity：</strong>是相对于包含该元素的父元素来说的，设置该元素在父元素的什么位置；</p></li><li><p>比如TextView: android:layout_gravity表示TextView在界面上的位置，android:gravity表示TextView文本在TextView的什么位置，默认值是左侧.</p><p>​</p><pre><code class="xml">&lt;TextView        android:text=&quot;Hello Android!&quot;        android:background=&quot;@android:color/darker_gray&quot;        android:layout_width=&quot;150dp&quot;        android:layout_height=&quot;75dp&quot; /&gt;&lt;!-- 注释内容 --&gt;</code></pre></li></ul></li></ul><h3 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h3><ul><li>属性: android:scaleType=”center”:不改变图片大小居中显示。</li><li>属性: android:scaleType=”centerCrop”:自适应屏幕居中显示。</li></ul><pre><code class="xml">  &lt;ImageView               android:src=&quot;@drawable/cake&quot;               android:layout_width=&quot;wrap_content&quot;               android:layout_height=&quot;wrap_content&quot;               android:scaleType=&quot;center&quot;  /&gt;</code></pre><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><ul><li>XML 布局文件中的 <Button> 元素创建 Button，则可以使用该元素的 android:onClick 属性指定方法。这一方便的备选方案专为不改变行为的 Button 提供。</li><li>android:onClick=”buttonname”</li></ul><h2 id="Layout-布局"><a href="#Layout-布局" class="headerlink" title="Layout 布局"></a>Layout 布局</h2><h3 id="LinearLayout线性布局"><a href="#LinearLayout线性布局" class="headerlink" title="LinearLayout线性布局"></a>LinearLayout线性布局</h3><ul><li><p>View水平or垂直方向排列。</p><ul><li>属性：android:orientation=”vertical” 决定布局以垂直(列)显示。</li><li>属性：android:orientation=”horizontal”决定布局以水平(行)显示。</li></ul><pre><code class="xml">&lt;LinearLayoutandroid:layout_width=&quot;match_parent&quot;android:layout_height=&quot;wrap_content&quot;android:orientation=&quot;vertical&quot;&gt;&lt;TextViewandroid:layout_width=&quot;match_parent&quot;android:layout_height=&quot;wrap_content&quot;android:text=&quot;1&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;match_parent&quot;android:layout_height=&quot;wrap_content&quot;android:text=&quot;2&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;match_parent&quot;android:layout_height=&quot;wrap_content&quot;android:text=&quot;3&quot;/&gt;&lt;/LinearLayout&gt;</code></pre><p> <img src="http://i.imgur.com/dkCwMv0.png" alt=""></p></li></ul><h3 id="Layout-Weight"><a href="#Layout-Weight" class="headerlink" title="Layout Weight"></a>Layout Weight</h3><ul><li>layout_weight:视图权重。<ul><li>vertical(垂直)时设置layout_height为0，设置layout_weight为1.</li><li>horizontal(水平)时设置layout_width为0，设置layout_weight为1.</li></ul></li></ul><h3 id="RelativeLayout相对布局"><a href="#RelativeLayout相对布局" class="headerlink" title="RelativeLayout相对布局"></a>RelativeLayout相对布局</h3><h4 id="相对于父视图边缘位置对齐"><a href="#相对于父视图边缘位置对齐" class="headerlink" title="相对于父视图边缘位置对齐"></a>相对于父视图边缘位置对齐</h4><ul><li><p>上边缘对齐：android:layout_alignParentTop=”true”</p><ul><li>下边缘对齐：android:layout_alignParentBottom=”true”</li><li>左边缘对齐：android:layout_alignParentLeft=”true”</li><li>右边缘对齐：android:layout_alignParentRight=”true”</li><li>垂直方向居中：android:layout_centerVertical=”true”</li><li>水平方向居中：android:layout_centerHorizontal=”true”</li><li>屏幕居中：android:layout_centerInParent=”true”</li></ul><pre><code class="xml">&lt;RelativeLayoutandroid:layout_width=&quot;match_parent&quot;android:layout_height=&quot;match_parent&quot;&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_alignParentTop=&quot;true&quot;android:layout_alignParentLeft=&quot;true&quot;android:text=&quot;1&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_alignParentTop=&quot;true&quot;android:layout_centerHorizontal=&quot;true&quot;android:text=&quot;2&quot;/&gt;  &lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_alignParentTop=&quot;true&quot;android:layout_alignParentRight=&quot;true&quot;android:text=&quot;3&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_centerVertical=&quot;true&quot;android:layout_alignParentLeft=&quot;true&quot;android:text=&quot;4&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_centerInParent=&quot;true&quot;android:text=&quot;Center&quot;/&gt;  &lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_centerVertical=&quot;true&quot;android:layout_alignParentRight=&quot;true&quot;android:text=&quot;5&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_alignParentBottom=&quot;true&quot;android:layout_alignParentLeft=&quot;true&quot;android:text=&quot;6&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_alignParentBottom=&quot;true&quot;android:layout_centerHorizontal=&quot;true&quot;android:text=&quot;7&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_alignParentBottom=&quot;true&quot;android:layout_alignParentRight=&quot;true&quot;android:text=&quot;8&quot;/&gt;&lt;/RelativeLayout&gt;</code></pre><p>​</p><p><img src="http://i.imgur.com/2e9IPMB.png" alt=""></p></li></ul><h4 id="相对于其它视图定位"><a href="#相对于其它视图定位" class="headerlink" title="相对于其它视图定位"></a>相对于其它视图定位</h4><ul><li><p>android:id=”@+id/viewname_text_view”</p></li><li><p>符号“@”表示Android应用中的资源。</p></li><li><p>位于center上边：android:layout_above=”@id/center”</p></li><li><p>位于center下边：android:layout_below=”@id/center”</p></li><li><p>位于center左边：android:layout_toLeftOf=”@id/center”</p></li><li><p>位于center右边：android:layout_toRightOf=”@id/center”</p><pre><code class="xml">&lt;RelativeLayoutandroid:layout_width=&quot;match_parent&quot;android:layout_height=&quot;match_parent&quot;&gt;&lt;TextViewandroid:id=&quot;@+id/center&quot;android:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_centerInParent=&quot;true&quot;android:text=&quot;Center&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_toLeftOf=&quot;@id/center&quot;android:layout_alignBottom=&quot;@id/center&quot;android:text=&quot;2&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_toRightOf=&quot;@id/center&quot;android:layout_alignBottom=&quot;@id/center&quot;android:text=&quot;3&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_above=&quot;@id/center&quot;android:layout_alignLeft=&quot;@id/center&quot;android:text=&quot;1&quot;/&gt;&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:layout_below=&quot;@id/center&quot;android:layout_alignLeft=&quot;@id/center&quot;android:text=&quot;4&quot;/&gt;&lt;/RelativeLayout&gt;</code></pre><p><img src="http://i.imgur.com/wyQuZei.png" alt=""></p></li></ul><h3 id="内边剧和外边距"><a href="#内边剧和外边距" class="headerlink" title="内边剧和外边距"></a>内边剧和外边距</h3><h4 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h4><ul><li><p>android:padding=”8dp”</p><p>OR</p><ul><li>android:paddingLeft=”8dp”</li><li>android:paddingRight=”8dp”</li><li>android:paddingTop=”8dp”</li><li>android:paddingBottom=”8dp”</li><li>默认值为0</li></ul></li></ul><h4 id="外边距-magin"><a href="#外边距-magin" class="headerlink" title="外边距(magin)"></a>外边距(magin)</h4><ul><li><p>android:layout_margin=”8dp”</p><p>OR</p><ul><li><p>android:layout_marginLeft=”8dp”</p></li><li><p>android:layout_marginRight=”8dp”</p></li><li><p>android:layout_marginTop=”8dp”</p></li><li><p>android:layout_marginBottom=”8dp”</p></li><li><p>默认值为0</p></li></ul></li></ul><p><img src="http://i.imgur.com/sjGdzlh.png" alt=""></p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><ol><li>选择Views ；</li><li>摆放Views；</li><li>设计Views样式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的变量</title>
      <link href="/pages/c075d141/"/>
      <url>/pages/c075d141/</url>
      
        <content type="html"><![CDATA[<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><blockquote><p>在程序的运行过程中，会产生一些临时数据储存在内存单元中，这每一个内存单元都用一个标识符来标识，这些内存单元被称为变量。</p></blockquote><h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><blockquote><p>变量的数据类型分为两种，即基本数据类型和引用数据类型。</p></blockquote><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h3><ol><li>数值型分为两种：<br> 1.1  整数类型（byte 1字节，short 2字节，int 4字节，long 8字节）<br> 1.2 浮点类型（float 4字节，double 8字节）</li><li>字符型（char）2字节</li><li>布尔型（boolean）1字节</li></ol><h3 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2. 引用数据类型"></a>2. 引用数据类型</h3><ol><li>类（class)</li><li>接口（interface）</li><li>数组</li><li>枚举（enum）</li><li>注解（annotation）</li></ol><h2 id="变量类型转换"><a href="#变量类型转换" class="headerlink" title="变量类型转换"></a>变量类型转换</h2><blockquote><p>在程序中，当把一种数据类型的值赋值给另一种数据类型时，需要进行数据类型的转换。数据类型转换分为两种：自动类型转换和强制类型转换。</p></blockquote><h3 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1. 自动类型转换"></a>1. 自动类型转换</h3><blockquote><p>两种数据类型转换不需要显式声明，自动转换类型必须满足两个条件：两种数据类型彼此兼容和转换目标类型的取值范围必须大于原来类型的取值范围。</p></blockquote><ol><li>byte→short，int，long</li><li>short，char→int，long</li><li>int→long</li><li>byte，char，short，int→float</li><li>byte，char，short，int，long，float→double</li><li>boolean类型无法转换为其他类型。</li></ol><h3 id="2-强制类型转换"><a href="#2-强制类型转换" class="headerlink" title="2. 强制类型转换"></a>2. 强制类型转换</h3><blockquote><p>自动转换类型无法进行转换时，进行强制类型转换。取值范围较大的数据类型转换为取值范围较小的类型，可能会造成精度丢失。</p></blockquote><p>例如：</p><pre><code class="java">int num;byte b =(byte)num;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的多线程</title>
      <link href="/pages/265f6f6b/"/>
      <url>/pages/265f6f6b/</url>
      
        <content type="html"><![CDATA[<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>在操作系统中能（同时）运行多个任务（程序）。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>在同一应用程序中有多个顺序流（同时）执行。<br><img src="http://i.imgur.com/svr5BHK.png" alt=""></p><p><img src="http://i.imgur.com/Pw3R29D.png" alt=""></p><h2 id="线程的创建方法"><a href="#线程的创建方法" class="headerlink" title="线程的创建方法"></a>线程的创建方法</h2><h3 id="继承Thread类创建多线程"><a href="#继承Thread类创建多线程" class="headerlink" title="继承Thread类创建多线程"></a>继承Thread类创建多线程</h3><ul><li>继承Thread类，覆写Thread类的run（）方法，在run（）方法中实现运行在线程上的代码。</li></ul><ol><li>定义一个类FirstThread继承Thread类，覆写Thread类的run（）方法；</li><li>生成线程类的对象firstThread；</li><li>启动线程start（）方法。</li></ol><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre><code class="java">public class Test{    public static void main(String args[]){        //生成线程类的对象        FirstThread firstThread = new FirstThread();        //启动线程start（）方法        firstThread.start();        for(int i = 1; i &lt; 50; i++){            System.out.println(&quot;Main----&gt;:&quot; + i);        }    }}//继承Thread类，覆写Thread类的run（）方法class FirstThread extends Thread{    public void run(){        for(int i = 1; i &lt; 50; i++){            System.out.println(&quot;FirstThread---&gt;:&quot; + i);        }    }}</code></pre><h3 id="实现Runnable接口创建多线程"><a href="#实现Runnable接口创建多线程" class="headerlink" title="实现Runnable接口创建多线程"></a>实现Runnable接口创建多线程</h3><ul><li>提供一个实现接口Runnable的类作为线程的目标对象，在初始化一个Thread类或者Thread子类的线程对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体。</li></ul><ol><li>定义一个类FirstThread实现Runnable接口；</li><li>生成Runnable实现类FirstThread的一个对象firstThread；</li><li>生成一个Thread对象，并将firstThread作为参数传递给该Thread对象；</li><li>通知Thread对象执行start（）方法。</li></ol><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><pre><code class="java">public class Test{    public static void main(String args[]){        //生成Runnable实现类FirstThread的一个对象firstThread        FirstThread firstThread = new FirstThread();        //生成一个Thread对象        //并将firstThread作为参数传递给该Thread对象        Thread thread = new Thread(firstThread);        //通知Thread对象执行start（）方法        thread.start();        for(int i = 1; i &lt;50; i++){            System.out.println(&quot;Main---&gt;:&quot; + i);        }    }}//实现Runnable接口的类FirstThreadclass FirstThread implements Runnable{    public void run(){        for(int i = 1; i &lt;50; i++){            System.out.println(&quot;FirstThread---&gt;:&quot; + i);        }    }}</code></pre><h2 id="线程的简单控制方法"><a href="#线程的简单控制方法" class="headerlink" title="线程的简单控制方法"></a>线程的简单控制方法</h2><ul><li><p>中断线程</p><ul><li>Thread.sleep（n毫秒）//当前线程休眠n毫秒</li><li>Thread.yield（）//当前线程自动让出CPU，AB重新线程抢占CPU</li></ul></li><li><p>设置线程的优先级</p><ul><li>getPriority（）</li><li>setPriority（）<ul><li>thread.setPriority(Thread.MAX_PRIORITY) //设置最大优先级为10</li><li>thread.setPriority(Thread.MIN_PRIORITY) //设置最小优先级为1</li></ul></li></ul></li></ul><h2 id="同步语法"><a href="#同步语法" class="headerlink" title="同步语法"></a>同步语法</h2><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><pre><code class="java">synchronized(this) {   //this：同步锁        代码块}</code></pre><ul><li>synchronized锁住一个对象。</li><li>如果线程A得到同步锁，那么他将可以执行代码块，<br> 即使线程B从线程A手中抢到了同步锁，B也不能立即执行代码块，它必须等到线程A执行完这个代码块之后才能执行。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="java">public class Test{    public static void main(String args[]){        MyThread myThread = new MyThread();        //生成两个Thread对象，但是这两个Thread对象共用同一个线程体        Thread t1 = new Thread(myThread);        Thread t2 = new Thread(myThread);        //通过Thread对象的setName（）方法设置线程名字        //使用getName方法获取线程的名字        t1.setName(&quot;线程A&quot;);        t2.setName(&quot;线程B&quot;);        //分别启动两个线程        t1.start();        t2.start();    }}class MyThread implements Runnable{    int i = 100;    public void run(){        while(true){            synchronized(this){ //this：同步锁                //Thread.currentThread()获取当前这段代码运行的线程位置                System.out.println(Thread.currentThread().getName() + i);                i--;                Thread.yield();                if(i &lt; 0){                    break;                }            }        }    }}</code></pre><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><pre><code class="java">public synchronized void run(){    代码块}</code></pre><ul><li>synchronized锁住this。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的异常</title>
      <link href="/pages/f029d2bb/"/>
      <url>/pages/f029d2bb/</url>
      
        <content type="html"><![CDATA[<ol><li>什么是异常</li><li>异常的分类</li><li>try…catch…finally结构的使用方法</li></ol><h2 id="1-什么是异常？"><a href="#1-什么是异常？" class="headerlink" title="1. 什么是异常？"></a>1. 什么是异常？</h2><blockquote></blockquote><ul><li><p>异常(Exception)：中断了正常指令流的事件。</p></li><li><p>异常是一个对象；</p></li><li><p>异常产生于程序运行时；</p></li><li><p>指令流：程序执行时一系列的连续指令称为指令流。</p><blockquote></blockquote><p>示例：</p><pre><code class="java">class Test{  public static void main(String args[]){      int i = 1 / 0;  }}</code></pre><p>抛出异常：</p><blockquote><p>Exception in thread “main” java.lang.ArithmeticException: / by zero<br>  at Test3.main(Test3.java:6)</p></blockquote></li><li><p>Exception in thread “main” ：在主线程中出现异常；</p></li><li><p>ArithmeticException：异常的名称，算术异常；</p></li><li><p>/ by zero：被0除；</p></li><li><p>at Test.main(Test.java:3)：异常位置；</p></li></ul><h2 id="2-异常的分类"><a href="#2-异常的分类" class="headerlink" title="2. 异常的分类"></a>2. 异常的分类</h2><h3 id="JDK提供的类："><a href="#JDK提供的类：" class="headerlink" title="JDK提供的类："></a>JDK提供的类：</h3><blockquote><p><img src="http://i.imgur.com/gTBhe2x.png" alt=""></p></blockquote><ol><li>Throwable：所有异常的父类；</li><li>Error：虚拟机运行时产生的错误，产生错误，虚拟机直接关闭；</li><li>Exception： 分为UncheckExeption（RuntimeExeption）和CheckExeption<blockquote></blockquote>RuntimeException + Error 和其子类都是属于uncheckexception<br>Exception类中除了 RuntimeException之外的类，都是属于checkexception</li></ol><h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><h5 id="checkException"><a href="#checkException" class="headerlink" title="checkException"></a>checkException</h5><blockquote></blockquote><p>checkException是必须要处理的，也就是不能抛出，必须通过try-catch来完成，不处理的话是不能进行编译的。<br>示例：</p><pre><code class="java">class TestCheck{    public static void main(String args[]){        //CheckException        Thread.sleep(1000); //让当前线程休眠1000ms    }}</code></pre><p>运行结果：<br><img src="http://i.imgur.com/xMd1LOi.png" alt=""></p><h5 id="uncheckException（-RuntimeException）"><a href="#uncheckException（-RuntimeException）" class="headerlink" title="uncheckException（ RuntimeException）"></a>uncheckException（ RuntimeException）</h5><blockquote></blockquote><p>运行时异常包括平常遇到的各种异常，如空指针异常，数据格式异常等一系列异常，这种异常是可以不捕获的，可通过throws抛出异常，交给别的代码或者JAVA虚拟机来完成<br>示例：</p><pre><code class="java">class Test{    public static void main(String args[]){        //UncheckException        int i = 1 / 0;    }}</code></pre><p>运行结果：<br><img src="http://i.imgur.com/ll7JnfN.png" alt=""></p><h2 id="3-try…catch…finally结构"><a href="#3-try…catch…finally结构" class="headerlink" title="3. try…catch…finally结构"></a>3. try…catch…finally结构</h2><blockquote></blockquote><pre><code class="java">try{       //代码A    //有可能出现异常的代码B    //代码C}catch(Exception e){ //虚拟机产生的异常对象e    e.printStackTrace(); //处理异常的代码D    //代码E}finally{    //异常的出口    //执行扫尾工作的代码F}</code></pre><h4 id="如果try中代码B没有异常：执行代码A-B-C-F"><a href="#如果try中代码B没有异常：执行代码A-B-C-F" class="headerlink" title="如果try中代码B没有异常：执行代码A-B-C-F"></a>如果try中代码B没有异常：执行代码A-B-C-F</h4><h4 id="如果try中代码B出现异常：执行代码A-B-D-E-F"><a href="#如果try中代码B出现异常：执行代码A-B-D-E-F" class="headerlink" title="如果try中代码B出现异常：执行代码A-B-D-E-F"></a>如果try中代码B出现异常：执行代码A-B-D-E-F</h4><h3 id="uncheckException"><a href="#uncheckException" class="headerlink" title="uncheckException"></a>uncheckException</h3><blockquote></blockquote><pre><code class="java">//uncheckExceptionclass TestCheck{    public static void main(String args[]){        System.out.println(1);        try{            System.out.println(2);            //有可能出现异常的代码            int i = 1/0;            System.out.println(3);        }        catch(Exception e){ //虚拟机产生的异常对象e            e.printStackTrace(); //打印异常栈的追踪信息            System.out.println(4);        }        finally{            //异常的出口            System.out.println(&quot;finally&quot;);        }    }}</code></pre><p>运行结果：<br><img src="http://i.imgur.com/DG4HLEn.png" alt=""></p><h3 id="checkException-1"><a href="#checkException-1" class="headerlink" title="checkException"></a>checkException</h3><blockquote></blockquote><pre><code class="java">//checkExceptionclass TestCheck{    public static void main(String args[]){        System.out.println(1);        try{            System.out.println(2);            //有可能出现异常的代码            Thread.sleep(1000); //让当前线程休眠1000ms            System.out.println(3);        }        catch(Exception e){ //虚拟机产生的异常对象e            e.printStackTrace(); //打印异常栈的追踪信息            System.out.println(4);        }        finally{            //异常的出口            System.out.println(&quot;finally&quot;);        }    }}</code></pre><p>运行结果：<br><img src="http://i.imgur.com/yWIuLO9.png" alt=""><br>屏幕首先显示1，2，然后停顿1000ms，再显示3和finally</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的数组</title>
      <link href="/pages/e7882660/"/>
      <url>/pages/e7882660/</url>
      
        <content type="html"><![CDATA[<ul><li>数组是用来存储固定大小的同类型元素。</li></ul><h2 id="数组的定义方法"><a href="#数组的定义方法" class="headerlink" title="数组的定义方法"></a>数组的定义方法</h2><h3 id="静态定义法"><a href="#静态定义法" class="headerlink" title="静态定义法"></a>静态定义法</h3><pre><code class="java">int arr [] = {1,5,6,4,};</code></pre><ul><li>arr：整型数组。</li><li>arr[n]：n为下标，从第0位开始。arr[0]=1, arr[1]=5, arr[2]=6.</li><li>数组长度：arr.length.</li></ul><h3 id="动态定义法"><a href="#动态定义法" class="headerlink" title="动态定义法"></a>动态定义法</h3><pre><code class="java">int arr [] = new int[10];</code></pre><ul><li>数组的长度为10.</li></ul><h3 id="二维数组的定义方法"><a href="#二维数组的定义方法" class="headerlink" title="二维数组的定义方法"></a>二维数组的定义方法</h3><pre><code class="java">静态定义法：int arr[] [] = {{5,3,6},{5,8,7},{6,3,2}};动态定义法：int arr[] [] = new int[][];例：int[1][2] = 7;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的运算符</title>
      <link href="/pages/83e4d5ed/"/>
      <url>/pages/83e4d5ed/</url>
      
        <content type="html"><![CDATA[<h2 id="Java中的运算符"><a href="#Java中的运算符" class="headerlink" title="Java中的运算符"></a>Java中的运算符</h2><blockquote><p>Java中的运算符分为算术运算符，赋值运算符，比较运算符，逻辑运算符，位运算符。</p></blockquote><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ol><li><p>进行除法运算时，如果除数和被除数都为整得到的结果也会是整数，会忽略小数部分。<br>例如：</p><pre><code class="java">6600/1000*1000</code></pre><p>最后得到的结果为6000。表达式自左至右运算，6600/1000得到6，6*1000=6000。</p></li><li><p>进行除法运算时如果有小数参与，得到的结果为小数。<br>例如：<br>```java</p></li><li><p>6/10</p><pre><code>结果为0.66。</code></pre></li><li><p>进行取模（%）运算时，运算结果的正负取决于%左边的（被模数）符号有关，与%右边的（模数）的符号无关。<br>例如：</p><pre><code class="java">(-6)/2</code></pre><p>结果为-3。</p><pre><code class="java">6/(-3)</code></pre><p>结果为2。</p></li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ol><li><p>可以通过一条赋值语句对多个变量进行赋值。<br>例如：</p><pre><code class="java">int x, y, z;x = y = z = 5;  //为三个变量同时赋值。</code></pre></li><li><p>使用+=、-=、*=、/=、%=进行赋值时，强制转换类型会自动完成。</p></li></ol><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>左移：&lt;&lt;   00000100&lt;&lt;2  00010000     10010001&lt;&lt;2 01000100<br>右移：&gt;&gt;   01100010&gt;&gt;2  00011000     11100010&gt;&gt;2 11111000<br>无符号右移：     01100010&gt;&gt;&gt;2  00011000     11100010&gt;&gt;&gt;2 00111000</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的I/O流</title>
      <link href="/pages/649b2029/"/>
      <url>/pages/649b2029/</url>
      
        <content type="html"><![CDATA[<h2 id="流的概念和作用"><a href="#流的概念和作用" class="headerlink" title="流的概念和作用"></a>流的概念和作用</h2><blockquote><p>流是数据源到Java程序，Java程序到输出位置之间的管道。</p></blockquote><h2 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h2><blockquote></blockquote><ol><li>根据数据处理类的不同分为：字符流和字节流。</li><li>根据数据流向不同分为：输入流和输出流。</li></ol><ul><li>输入输出是以Java程序为参照物的，相对于Java程序本身</li><li>输入流：从数据源中读取数据到Java程序中，这个过程称之为输入。</li><li>输出流：Java程序将数据写入到其他地方，这个过程称之为输出。</li></ul><ol start="3"><li>节点流和处理流。</li><li>节点流：普通的管道；</li><li>处理流：功能性管道，对数据进一步加工。</li></ol><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节流中的核心类"><a href="#字节流中的核心类" class="headerlink" title="字节流中的核心类"></a>字节流中的核心类</h3><p><img src="http://i.imgur.com/zhxfDm7.png" alt=""></p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><blockquote></blockquote><h4 id="int-read-byte-b-int-off-int-len"><a href="#int-read-byte-b-int-off-int-len" class="headerlink" title="int read(byte [] b,int off,int len)"></a>int read(byte [] b,int off,int len)</h4><p>byte[] b：byte类型数组；<br>int off：偏移量；<br>int len： 读取数据的量；<br>返回值为这次调用read方法读取数据的长度。</p><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><blockquote></blockquote><h4 id="void-write-byte-b-int-off-int-len"><a href="#void-write-byte-b-int-off-int-len" class="headerlink" title="void write(byte [] b,int off,int len)"></a>void write(byte [] b,int off,int len)</h4><p>byte[] b：byte类型数组；<br>int off：偏移量；<br>int len： 写入数据的量；</p><h3 id="程序步骤"><a href="#程序步骤" class="headerlink" title="程序步骤"></a>程序步骤</h3><ol><li>导入类 java.io.*；</li><li>定义主函数；</li><li>声明输入流的引用；</li><li>声明输出流的引用；<pre><code class="java">try{1.生成代表输入流的对象；2.生成代表输出流的对象；3. 生成一个byte字节数组；4.调用输入流的read方法读取数据；5.定义临时变量接受数据的量；6.调用输出流的write方法写入数据；}catch(Exception e){ Systen.out.println(e);}//finally进行结尾处理finally{ try{     fis.close();     fos.close(); } catch(Exception e){     System.out.println(e); }}</code></pre><h4 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h4><pre><code class="java">import java.io.*;public class Test{ public static void main(String args[]){     //声明输入流引用     FileInputStream fis = null;     //声明输出流引用     FileOutputStream fos = null;     try{         //生成代表输入流的对象         fis = new FileInputStream(&quot;D:/java/8.8/from.txt&quot;);         //生成代表输入流的对象         fos = new FileOutputStream(&quot;D:/java/8.8/to.txt&quot;);         //生成一个字节型buffer数组         byte[] buffer = new byte[100];         //定义一个临时变量，用于接受调用输入流read方法读取数据的量         int temp = fis.read(buffer,0,b.length);         //调用输出流的write方法写入数据         fos.write(buffer,0,temp);     }     catch(Exception e){         System.out.println(e);     } }     //finally进行结尾处理     finally{         try{             fis.close();             fos.close();         }         catch(Exception e){             System.out.println(e);         }     }}</code></pre></li></ol><h2 id="大文件的读写"><a href="#大文件的读写" class="headerlink" title="大文件的读写"></a>大文件的读写</h2><ol><li>调节buffer数组的大小；</li><li>对read，write方法采取while循环；</li></ol><h4 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h4><pre><code class="java">while(true){    int temp = fis.read(buffer,0,buffer.length);    if(temp == -1){        break;    }    fos.write(buffer,0,temp);}</code></pre><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><ul><li>字符流：是以对写文件时，以字符为基础</li><li>字节输入流：Reader &lt;–FileReader<ul><li>int read(char [] c, int off, int length )</li></ul></li><li>字节输出流：Writer  &lt;–FileWriter<ul><li>void writer(char [] c, int off, int length)</li></ul></li></ul><h4 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h4><pre><code class="java">import java.io.*;public class TestChar{    public static void main(String args[]){        FileReader fr = null;        FileWriter fw = null;        try{            fr = new FileReader(&quot;d:/java/9.5/read.txt&quot;);            fw = new FileWriter(&quot;d:/java/9.5/write.txt&quot;);            char [] buffer = new char[1024];            while(true){                int temp = fr.read(buffer, 0, buffer.length);                if(temp == -1){                    break;                }                fw.write(buffer, 0, temp);            }        }        catch(Exception e){            System.out.println(e);        }        finally{            try{                fr.close();                fw.close();            }            catch(Exception e){                System.out.println(e);            }        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>throw和throws</title>
      <link href="/pages/29cc0096/"/>
      <url>/pages/29cc0096/</url>
      
        <content type="html"><![CDATA[<h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><h3 id="throw的作用"><a href="#throw的作用" class="headerlink" title="throw的作用"></a>throw的作用</h3><ul><li>如果Java虚拟机不能判断异常e，可以生成异常对象e，用throw加上这个异常对象抛出这个异常。<blockquote></blockquote>示例：<pre><code class="java">package src;class People{  private int age;  public void setAge(int age){      if(age &lt; 0){          RuntimeException e = new RuntimeException(&quot;年龄不能为负数&quot;);          throw e;      }      this.age = age;      System.out.println(age);  }}class Test{  public static void main(String args[]){      People people = new People();      people.setAge(-20);  }}</code></pre></li></ul><p>运行结果：<br><img src="http://i.imgur.com/hSqdO9z.png" alt=""></p><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><h3 id="throws-1"><a href="#throws-1" class="headerlink" title="throws"></a>throws</h3><ul><li>声明一个函数可能产生异常，函数不对异常进行处理，在调用函数的地方对异常进行处理。<blockquote></blockquote>示例：<pre><code class="java">package src1;class People{  private int age;  public void setAge(int age)  throws Exception{      if(age &lt; 0){          Exception e = new Exception(&quot;年龄不能为负数&quot;);          throw e;      }      this.age = age;      System.out.println(age);  }}class Test{  public static void main(String args[]){      People people = new People();      try{          people.setAge(-20);      }      catch(Exception e){          System.out.println(e);      }  }}</code></pre>运行结果：<br><img src="http://i.imgur.com/wJqKdCu.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类</title>
      <link href="/pages/9bc01b38/"/>
      <url>/pages/9bc01b38/</url>
      
        <content type="html"><![CDATA[<ul><li>内部类：一个类定义在另一个类的里面。</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><blockquote></blockquote><pre><code class="java">class A{    class B{    }}</code></pre><p>B这个类被称之为A的内部类。<br>编译之后生成A.class和A$B.class。<br>内部类可以随意使用外部类的成员变量。</p><h1 id="内部类的使用方法"><a href="#内部类的使用方法" class="headerlink" title="内部类的使用方法"></a>内部类的使用方法</h1><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><pre><code class="java">class A{    int i;    class B{        int j;        int funB(){            int result = i + j;            System.out.println(result);            return result;        }    }}class Test{    public static void main(String args[]){        A a = new A();        A.B b = a.new B();        a.i = 5;        b.j = 6;        b.funB();    }}</code></pre><h1 id="匿名内部类的使用方法"><a href="#匿名内部类的使用方法" class="headerlink" title="匿名内部类的使用方法"></a>匿名内部类的使用方法</h1><ul><li>匿名内部类：没有名字的内部类。</li></ul><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><pre><code class="java">interface A{    public void doSth();}class B{    public void fun(A a){        System.out.println(&quot;B类的fun函数&quot;);        a.doSth();    }}public class Test{    public static void main(String args[]){        B b = new B();        b.fun(new A(){            public void doSth(){                System.out.println(&quot;匿名内部类&quot;);            }        });    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理流与Decorator模式</title>
      <link href="/pages/bbf344f6/"/>
      <url>/pages/bbf344f6/</url>
      
        <content type="html"><![CDATA[<h2 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a>处理流</h2><h3 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h3><p><img src="http://i.imgur.com/oGh5e2r.png" alt=""></p><ul><li>readeLine：每次读取一行数据<br><img src="http://i.imgur.com/DqMcSrm.png" alt=""></li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre><code class="java">import java.io.*;public class Test{    public static void main(String args[]){        FileReader filereader = null;        BufferedReader bufferedreader = null;        try{            filereader = new FileReader(&quot;C:/Users/Jay/Desktop/9.6/src1/read.txt&quot;);            bufferedreader = new BufferedReader(filereader);            String line = null;            while(true){                line = bufferedreader.readLine();                if(line == null){                    break;                }                System.out.println(line);            }        }        catch(Exception e){            System.out.println(e);        }        finally{            try{                filereader.close();                bufferedreader.close();            }            catch(Exception e){                System.out.println(e);            }        }    }}</code></pre><h2 id="Decorator（装饰者）模式"><a href="#Decorator（装饰者）模式" class="headerlink" title="Decorator（装饰者）模式"></a>Decorator（装饰者）模式</h2><p><img src="http://i.imgur.com/arkDK8p.png" alt=""></p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><pre><code class="java">interface Teacher{    public void teaching();}class MathTeacher implements Teacher{    public void teaching(){        System.out.println(&quot;我是一名数学老师&quot;);    }}class ChineseTeacher implements Teacher{    public void teaching(){        System.out.println(&quot;我是一名语文老师&quot;);    }}class ATeacher implements Teacher{    private Teacher teacher;    public ATeacher(Teacher teacher){        this.teacher = teacher;    }    public void teaching(){        System.out.println(&quot;你好，我来自ASchool&quot;);        teacher.teaching();    }}public class Test{    public static void main(String args[]){        MathTeacher mathTeacher = new MathTeacher();        ATeacher aTeacher1 = new ATeacher(mathTeacher);        aTeacher1.teaching();        ChineseTeacher chineseTeacher = new ChineseTeacher();        ATeacher aTeacher2 = new ATeacher(chineseTeacher);        aTeacher2.teaching();    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口应用</title>
      <link href="/pages/75336bdc/"/>
      <url>/pages/75336bdc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>接口定义一种标准：</p></blockquote><ol><li>通过interface定义；</li><li>函数都是抽象函数（只有函数没有函数体）；</li><li>子类通过implements实现；对接口里面的抽象函数进行override；<br>```java<br>/**</li></ol><p>*定义一个Printer接口，通过HPPrinter，CanonPrinter两个子类去实现<br>*/<br>package printer;<br> //定义一个Printer接口<br>interface Printer{<br>    public void open();<br>    public void print(String s);<br>    public void close();<br>}<br>//定义HPPrinter去implements Printer接口<br>class HPPrinter implements Printer{<br>    @Override<br>    public void open(){<br>        System.out.println(“HPPrinter open”);<br>    }<br>    public void print(String s){<br>        System.out.println(“HPPrinter print:” + s);<br>    }<br>    public void close(){<br>        System.out.println(“HPPrinter close”);<br>    }<br>}<br>//定义CanonPrinter去implements Printer接口<br>class CanonPrinter implements Printer{<br>    @Override<br>    private void clean(){<br>        System.out.println(“clean”);<br>    }<br>    public void open(){<br>        System.out.println(“CanonPrinter open”);<br>    }<br>    public void print(String s){<br>        System.out.println(“CanonPrinter print:” + s);<br>    }<br>    public void close(){<br>        this.clean();<br>        System.out.println(“CanonPrinter close”);<br>    }<br>}<br>//静态工厂方法模式<br>class PrinterFactory{<br>//定义一个静态函数getPrinter(int flag)，返回值类型为Printer<br>    public static Printer getPrinter(int flag){<br>        Printer printer = null;<br>//根据用户选择生成新的对象，并向上转型为Printer类型<br>        if (flag == 0){<br>            printer = new HPPrinter();<br>        }<br>        else if(flag == 1){<br>            printer = new CanonPrinter();<br>        }<br>        return printer;<br>    }<br>}<br>//定义一个主函数，对函数进行调用<br>class Test{<br>    public static void main(String args[]){<br>        int flag = 1;<br>        //工厂方法模式调用 类名+函数<br>        Printer printer = PrinterFactory.getPrinter(flag);<br>        printer.open();<br>        printer.print(“Test”);<br>        printer.close();<br>    }<br>}</p><pre><code>## 工厂方法 ###### 简单工厂模式 ####&gt; Java 简单工厂模式（Simple Factory Pattern）又叫静态工厂方法模式（Static FactoryMethod Pattern），通过专门定义一个类来负责创建其他类的实例（将生成对象的代码封装在工厂类中），被创建的实例通常都具有共同的父类。![](https://raw.githubusercontent.com/roojay520/roojaycloud/images/printer.png)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>方法</title>
      <link href="/pages/ad01bc3e/"/>
      <url>/pages/ad01bc3e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为解决代码重复编写的问题所设计的特定功能代码块。<br>方法不能嵌套。<br>main（）方法的作用：调用方法的实例化对象。</p></blockquote><p>方法结构一般为：</p><pre><code class="java">修饰符 返回值类型 方法名（参数类型 参数1，参数类型 参数2，...）{    执行语句    ...    ...    return 返回值；}</code></pre><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><blockquote><p>Java 允许在一个程序中定义多个名称相同的方法</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类集框架</title>
      <link href="/pages/85b5073b/"/>
      <url>/pages/85b5073b/</url>
      
        <content type="html"><![CDATA[<ul><li><p>类集框架是一组类和接口；</p></li><li><p>位于java.until包当中；</p></li><li><p>主要用于存储盒管理对象；</p></li><li><p>主要分为三大类：集合(Set)、列表(List)和映射(Map)。</p><h2 id="类集框架的主体结构"><a href="#类集框架的主体结构" class="headerlink" title="类集框架的主体结构"></a>类集框架的主体结构</h2><ul><li>Collection为单列集合，Map为双列集合。</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://i.imgur.com/wEVxtzg.png" alt=""></h2></li></ul><h2 id="Collection接口中的方法"><a href="#Collection接口中的方法" class="headerlink" title="Collection接口中的方法"></a>Collection接口中的方法</h2><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>boolean add（Object o）</td><td>向集合中加入一个对象。</td></tr><tr><td>void clear（）</td><td>删除集合当中的所有对象。</td></tr><tr><td>boolean  isEmpty（）</td><td>判断集合是否为空，如果为空返回true。</td></tr><tr><td>remove（Object o）</td><td>从集合中删除一个对象的引用。</td></tr><tr><td>int size（）</td><td>返回集合中元素的数目。</td></tr></tbody></table><h2 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h2><ul><li>主要用于迭代访问（即遍历）整个Collection中的元素，因此Iterator对象也被称为迭代器。</li></ul><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>hasNet()</td><td>判断当前迭代器中是否还有下一个元素，返回值为boolean值。</td></tr><tr><td>next()</td><td>返回当前迭代器下一个元素。</td></tr></tbody></table><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><pre><code class="java">import java.util.Set;import java.util.HashSet;import java.util.Iterator;public class TestIterator{    public static void main(String args[]){        Set&lt;String&gt; set = new HashSet&lt;String&gt;();        set.add(&quot;a&quot;);        set.add(&quot;b&quot;);        set.add(&quot;c&quot;);        set.add(&quot;d&quot;);        set.add(&quot;e&quot;);        //调用Set对象的Iterator方法生成一个迭代器对象，该对象遍历整个Set        Iterator&lt;String&gt; it = set.iterator();          //判断Set集合中是否存在下一个元素        while(it.hasNext()){              //取出Set集合中的元素            String s = it.next();            System.out.println(s);        }    }}</code></pre><h2 id="ListIterator接口"><a href="#ListIterator接口" class="headerlink" title="ListIterator接口"></a>ListIterator接口</h2><ul><li>可以按任一方向遍历列表、迭代期间修改列表，并获得迭代器在列表中的当前位置。</li></ul><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>void add(Object o)</td><td>将指定的元素插入列表。</td></tr><tr><td>boolean hasPrevious()</td><td>如果以逆向遍历列表，列表迭代器有多个元素，则返回true。</td></tr><tr><td>Object previous()</td><td>返回列表中的前一个元素。</td></tr><tr><td>void remove()</td><td>从列表中移除由next或previous返回的最后一个元素。</td></tr></tbody></table><h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><pre><code class="java">import java.util.*;public class Test{    public static void main(String args[]) {        ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();        list.add(&quot;Monday&quot;);        list.add(&quot;Tuesday&quot;);        list.add(&quot;Wednesday&quot;);        list.add(&quot;Thursday&quot;);        System.out.println(list);        //生成一个ListIterator对象        ListIterator it = list.listIterator(list.size());          //调用hasPrevious()方法判断是否存在元素        while(it.hasPrevious()){              //调用previous()方法返回元素            Object obj = it.previous();            System.out.println(obj);        }    }}</code></pre><h2 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h2><ul><li>集合中的对象不按特定方式排序，并且没有重复对象。</li></ul><h2 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h2><ul><li>HashSet是Set接口的一个实现类，它所储存的元素时不可重复且无序的。根据对象的哈希值来确定元素在集合中的储存位置，因此具有良好的存取和查找性能。</li></ul><h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><pre><code class="java">import java.util.Set;import java.util.HashSet;public class TestSet{    public static void main(String args[]){        //生成HashSet对象并向上转型为Set        Set&lt;String&gt; set =new HashSet&lt;String&gt;();        //定义一个boolean型变量b1接受 isEmpty（）方法返回值        boolean b1 = set.isEmpty();        System.out.println(b1);        set.add(&quot;a&quot;);        set.add(&quot;b&quot;);        set.add(&quot;c&quot;);        set.add(&quot;d&quot;);        set.add(&quot;e&quot;);        set.add(&quot;f&quot;);        boolean b2 =set.isEmpty();        System.out.println(b2);        //调用size（）方法获取集合长度        int i =set.size();        System.out.println(&quot;初始状态set集合中元素的数目&quot; + i);        //调用remove（）方法移除对象d        set.remove(&quot;d&quot;);        int j = set.size();        System.out.println(&quot;处理之后set集合中元素的数目&quot; + j);    }}</code></pre><h2 id="TreeSet集合"><a href="#TreeSet集合" class="headerlink" title="TreeSet集合"></a>TreeSet集合</h2><ul><li>它内部采用自平衡点排序二叉树来储存元素，这样的结构保证TreeSet集合没有重复的元素，并且可以对元素进行排序。</li></ul><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><ul><li>二叉树是指每个节点最多有两个子节点的有序树，每个节点及其子节点组成的树称为子树，通常左侧的节点称为“左子树”，右侧的的子节点称为“右子树”。</li></ul><p><img src="http://i.imgur.com/TmqrdF9.png" alt=""></p><h3 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h3><pre><code class="java">import java.util.*;public class Test01{    public static void main(String args[]){        //创建TreeSet集合        TreeSet&lt;String&gt; ts = new TreeSet&lt;String&gt;();        ts.add(&quot;10&quot;);        ts.add(&quot;50&quot;);        ts.add(&quot;20&quot;);        ts.add(&quot;40&quot;);        ts.add(&quot;30&quot;);        //获取Iterator对象        Iterator it = ts.iterator();        while(it.hasNext()){            System.out.println(it.next());        }    }}</code></pre><p>结果：<br><img src="http://i.imgur.com/Wl5KRxh.png" alt=""></p><h2 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h2><ul><li>集合中对象按照索引位置排序，即元素的存入和取出顺序一致，可以有重复对象。</li></ul><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><ul><li>ArrayList的底层是使用一个数组来保存元素，当增加或删除指定位置的元素时，会创建新的数组，效率较低，因此不适合做大量的增删操作。但是这种数组的结构允许程序通过索引的方式来访问元素，因此使用ArryList集合查找元素很便捷。</li></ul><h3 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h3><pre><code class="java">import java.util.List;import java.util.ArrayList;public class Test{    public static void main(String args[]){        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();        //向ArrayList中存入数据        arrayList.add(&quot;a&quot;);        arrayList.add(&quot;b&quot;);        arrayList.add(&quot;c&quot;);        arrayList.add(&quot;d&quot;);        //移除这个对象        arrayList.remove(2);        //从ArrayList中取数据        for(int i = 0; i &lt; arrayList.size(); i++){            String s = arrayList.get(i);            System.out.println(s);        }    }}</code></pre><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li>内部维护了一个双向循环链表，链表中的每一个元素都使用引用的方式来记住它的前一个元素和后一个元素，插入一个新元素，只需修改元素之间的这种引用关系即可。</li></ul><h3 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h3><pre><code class="java">import java.util.List;import java.util.LinkedList;public class Test01{    public static void main(String args[]){        //创建LinkedList集合        LinkedList&lt;String&gt; link = new LinkedList&lt;String&gt;();            //向集合中添加元素            link.add(&quot;One&quot;);            link.add(&quot;Two&quot;);            link.add(&quot;Three&quot;);            link.add(&quot;Four&quot;);            //取出并打印该集合中的所有元素            System.out.println(link.toString());            //向指定位置插入元素            link.add(2,&quot;插个队&quot;);            System.out.println(link);            //移除指定位置的元素            link.remove(2);            System.out.println(link);    }}</code></pre><h2 id="映射（Map）"><a href="#映射（Map）" class="headerlink" title="映射（Map）"></a>映射（Map）</h2><ul><li>集合中的每一个元素包含一个键对象和一个值对象，键不可重复，值可以重复。</li></ul><table><thead><tr><th align="center">键对象</th><th align="center">值对象</th></tr></thead><tbody><tr><td align="center">key1</td><td align="center">value1</td></tr><tr><td align="center">key2</td><td align="center">value2</td></tr><tr><td align="center">key3</td><td align="center">value3</td></tr></tbody></table><h2 id="Map接口中的方法"><a href="#Map接口中的方法" class="headerlink" title="Map接口中的方法"></a>Map接口中的方法</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void clear()</td><td>从此映射中移除所有映射关系（可选操作）。</td></tr><tr><td>boolean containsKey（Object Key）</td><td>如果此映射包含指定键的映射关系，则返回 true。</td></tr><tr><td>boolean equals（Object o）</td><td>比较指定的对象与此映射是否相等。</td></tr><tr><td>get（Object key）</td><td>返回指定键所映射的值；如果此映射不包含该键的映射关系，则返回null。</td></tr><tr><td>boolean isEmpty（）</td><td>如果此映射未包含键-值映射关系，则返回 true。</td></tr><tr><td>put（）</td><td>将指定的值与此映射中的指定键关联。</td></tr><tr><td>remove（Object key）</td><td>如果存在一个键的映射关系，则将其从此映射中移除。</td></tr><tr><td>int size（）</td><td>返回此Map中的键值对数目。</td></tr></tbody></table><h2 id="Map与HashMap"><a href="#Map与HashMap" class="headerlink" title="Map与HashMap"></a>Map与HashMap</h2><h3 id="示例：-6"><a href="#示例：-6" class="headerlink" title="示例："></a>示例：</h3><pre><code class="java">import java.util.Map;import java.util.HashMap;public class Test{    public static void main(String args[]){        //生成HashMap对象并向上转型为Map        Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();        //向map中添加键值对        map.put(&quot;1&quot;,&quot;One&quot;);        map.put(&quot;2&quot;,&quot;Two&quot;);        map.put(&quot;3&quot;,&quot;Three&quot;);        //调用get（Object key）方法，返回指定键所映射的值；        //如果对于该键来说，此映射不包含任何映射关系，则返回 null。        String s = map.get(&quot;2&quot;);        System.out.println(s);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结构语句</title>
      <link href="/pages/1c7ee7be/"/>
      <url>/pages/1c7ee7be/</url>
      
        <content type="html"><![CDATA[<h2 id="选择结构语句"><a href="#选择结构语句" class="headerlink" title="选择结构语句"></a>选择结构语句</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><blockquote><p>当判断条件1结果为true时，执行语句1，为false时，执行语句2。当判断条件1,2都不满足true时，执行语句3。</p></blockquote><p>例如：</p><pre><code class="java">if (判断条件1){  执行语句1}else if(判断条件2){  执行语句2}else{  执行语句3}</code></pre><h3 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h3><blockquote><p>一种类似于if-else语句的运算，三元运算一般会得到一个结果，一般用来对某个变量进行赋值。<br>当判断条件成立时结果为表达式1的值，否则表达式2的值。</p></blockquote><pre><code class="java">判断条件 ? 表达式 1 : 表达式 2</code></pre><p>例如：求取两个数x，y中较大的值。</p><pre><code class="java">//if-else实现方法int x, y, max;if(x&gt;y){    max = x;}else{    max = y;}//三元运算实现int x, y, max;max = x &gt; y ? x : y;</code></pre><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><blockquote><p>在switch语句中使用switch关键字来描述一个表达式，使用case关键字来描述和表达式结果比较的目标值，<br>当表达式的值和某个目标值匹配时，会执行对应case下的语句。</p></blockquote><p>例如：</p><pre><code class="java">switch(表达式){  case 1:    执行语句1;       break; //break终止case并跳出switch循环  case 2:    执行语句2;     break;  case 3:    执行语句3；      break;  default: //default处理和前面的case都不匹配的值    执行语句4;      break;}</code></pre><h2 id="循环结构语句"><a href="#循环结构语句" class="headerlink" title="循环结构语句"></a>循环结构语句</h2><h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h3><blockquote><p>循环条件判断为true时，执行语句循环执行，直到循环条件为false。</p></blockquote><p>例如：</p><pre><code class="java">while(循环条件){    执行语句}</code></pre><h3 id="do…while循环语句"><a href="#do…while循环语句" class="headerlink" title="do…while循环语句"></a>do…while循环语句</h3><blockquote><p>循环体会无条件执行一次，然后根据循环条件决定是否继续执行。</p></blockquote><p>例如：</p><pre><code class="java">do{  执行语句}while(循环条件);</code></pre><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><blockquote><p>一般用在循环次数已知的情况下，循环条件判断为true执行顺序①→②→④→③</p></blockquote><p>例如：</p><pre><code class="java">for(初始化表达式①;循环条件②;操作表达式③){  执行语句④}</code></pre><pre><code class="java">/** * Created by Roojay on 2017/4/7. * 利用嵌套循环打印一个正三角形。 */public class Test1 {    public static void main(String args[]){        int i, j, k;        for(i = 1; i &lt;= 5; i++){            for(k = 0; k &lt; 5 - i; k++){                System.out.print(&quot; &quot;);            }            for(j = 1; j &lt;= i; j++){                System.out.print(&quot;* &quot;);            }            System.out.println();        }    }}</code></pre><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><blockquote><p>当它出现在switch条件语句中时，作用是终止某个case并跳出switch结构。<br>当它出现在循环语句中，作用是跳出循环语句，执行后面的代码。<br>当它出现在嵌套循环内层循环中时，只能跳出内层循环，如果想跳出外层循环，<br>需要对外层前面添加标记 itcast： ，在后面使用 break itcast 跳出外层循环。</p></blockquote><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><blockquote><p>continue语句用在循环语句中，它的作用是终止本次循环，执行下一次循环。<br>也可以使用标记结束外循环。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取键盘输入</title>
      <link href="/pages/828295ba/"/>
      <url>/pages/828295ba/</url>
      
        <content type="html"><![CDATA[<pre><code class="java">/**Java获取键盘输入值*/public static void main(String args[]){  Scanner sc = new Scanner(Systen.in);  String s = sc.nextLine(); //接受字符和字符串类型的输入  int age = sc.nextInt();  float salary = sc.nextFloat();}</code></pre><h4 id="简单运行、退出方法"><a href="#简单运行、退出方法" class="headerlink" title="简单运行、退出方法"></a>简单运行、退出方法</h4><pre><code class="java">import java.util.Scanner;public class Test {    public static void main(String args[]) {        int t = 1;itcast :        while(t &gt; 0) {            System.out.println(&quot;1.运行：\n&quot; + &quot;2.退出：&quot;);            Scanner sc1 = new Scanner(System.in);            int i = sc1.nextInt();            switch(i) {            case 1:                //这里输入具体的计算程序                break;            case 2:                break itcast;            default:                System.out.println(&quot;输入有误，请重新输入&quot;);                break;            }        }    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="/pages/7dc91154/"/>
      <url>/pages/7dc91154/</url>
      
        <content type="html"><![CDATA[<h3 id="十进制转换二进制"><a href="#十进制转换二进制" class="headerlink" title="十进制转换二进制"></a>十进制转换二进制</h3><blockquote><p>将一个十进制数转换为二进制，就是将这个数不断取余的过程，将这个数除以 2，得到了商和余数，然后将商不断除以 2，直到商为 0，然后将余数倒过来排列，所得到的数就是转换的二进制结果。</p></blockquote><h3 id="二进制转八进制"><a href="#二进制转八进制" class="headerlink" title="二进制转八进制"></a>二进制转八进制</h3><blockquote><p>将二进制数自右向左每三位分成一段，然后将每三位数转换为一位八进制数。</p></blockquote><p> 例如：111000101 = 111 000 101 = 0 7 0 5<br> 八进制以 0 开头。</p><h3 id="二进制转十六进制"><a href="#二进制转十六进制" class="headerlink" title="二进制转十六进制"></a>二进制转十六进制</h3><blockquote><p>将二进制数自右向左每四位分成一段，然后将每四位转换为一位十六进制数。</p></blockquote><p>例如：111010100110=1110 1010 0110=0x E A 6<br> 十六进制以 0x 或者 0X 开头。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeTest</title>
      <link href="/pages/24709d34/"/>
      <url>/pages/24709d34/</url>
      
        <content type="html"><![CDATA[<pre><code class="java">public class CodeTest{  public static void main(String args[]){    system.out.println(&quot;Hello Hexo!&quot;)  }}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/pages/784dd132/"/>
      <url>/pages/784dd132/</url>
      
        <content type="html"><![CDATA[<ol><li>$ hexo new “My New Post”</li><li>$ hexo server</li><li>$ hexo generate</li><li>$ hexo deploy </li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
